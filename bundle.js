/*! For license information please see bundle.js.LICENSE.txt */
!function(){var e={4184:function(e,t){var n;!function(){"use strict";var r={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)){if(n.length){var o=i.apply(null,n);o&&e.push(o)}}else if("object"===a){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var s in n)r.call(n,s)&&n[s]&&e.push(s)}}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(n=function(){return i}.apply(t,[]))||(e.exports=n)}()},9662:function(e,t,n){var r=n(614),i=n(6330),a=TypeError;e.exports=function(e){if(r(e))return e;throw a(i(e)+" is not a function")}},6077:function(e,t,n){var r=n(614),i=String,a=TypeError;e.exports=function(e){if("object"==typeof e||r(e))return e;throw a("Can't set "+i(e)+" as a prototype")}},1223:function(e,t,n){var r=n(5112),i=n(30),a=n(3070).f,o=r("unscopables"),s=Array.prototype;null==s[o]&&a(s,o,{configurable:!0,value:i(null)}),e.exports=function(e){s[o][e]=!0}},9670:function(e,t,n){var r=n(111),i=String,a=TypeError;e.exports=function(e){if(r(e))return e;throw a(i(e)+" is not an object")}},8533:function(e,t,n){"use strict";var r=n(2092).forEach,i=n(9341)("forEach");e.exports=i?[].forEach:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}},8457:function(e,t,n){"use strict";var r=n(9974),i=n(6916),a=n(7908),o=n(3411),s=n(7659),l=n(4411),u=n(6244),c=n(6135),p=n(4121),d=n(1246),f=Array;e.exports=function(e){var t=a(e),n=l(this),h=arguments.length,g=h>1?arguments[1]:void 0,m=void 0!==g;m&&(g=r(g,h>2?arguments[2]:void 0));var A,v,b,y,w,C,x=d(t),S=0;if(!x||this===f&&s(x))for(A=u(t),v=n?new this(A):f(A);A>S;S++)C=m?g(t[S],S):t[S],c(v,S,C);else for(w=(y=p(t,x)).next,v=n?new this:[];!(b=i(w,y)).done;S++)C=m?o(y,g,[b.value,S],!0):b.value,c(v,S,C);return v.length=S,v}},1318:function(e,t,n){var r=n(5656),i=n(1400),a=n(6244),o=function(e){return function(t,n,o){var s,l=r(t),u=a(l),c=i(o,u);if(e&&n!=n){for(;u>c;)if((s=l[c++])!=s)return!0}else for(;u>c;c++)if((e||c in l)&&l[c]===n)return e||c||0;return!e&&-1}};e.exports={includes:o(!0),indexOf:o(!1)}},2092:function(e,t,n){var r=n(9974),i=n(1702),a=n(8361),o=n(7908),s=n(6244),l=n(5417),u=i([].push),c=function(e){var t=1==e,n=2==e,i=3==e,c=4==e,p=6==e,d=7==e,f=5==e||p;return function(h,g,m,A){for(var v,b,y=o(h),w=a(y),C=r(g,m),x=s(w),S=0,_=A||l,k=t?_(h,x):n||d?_(h,0):void 0;x>S;S++)if((f||S in w)&&(b=C(v=w[S],S,y),e))if(t)k[S]=b;else if(b)switch(e){case 3:return!0;case 5:return v;case 6:return S;case 2:u(k,v)}else switch(e){case 4:return!1;case 7:u(k,v)}return p?-1:i||c?c:k}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterReject:c(7)}},1194:function(e,t,n){var r=n(7293),i=n(5112),a=n(7392),o=i("species");e.exports=function(e){return a>=51||!r((function(){var t=[];return(t.constructor={})[o]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},9341:function(e,t,n){"use strict";var r=n(7293);e.exports=function(e,t){var n=[][e];return!!n&&r((function(){n.call(null,t||function(){return 1},1)}))}},1589:function(e,t,n){var r=n(1400),i=n(6244),a=n(6135),o=Array,s=Math.max;e.exports=function(e,t,n){for(var l=i(e),u=r(t,l),c=r(void 0===n?l:n,l),p=o(s(c-u,0)),d=0;u<c;u++,d++)a(p,d,e[u]);return p.length=d,p}},206:function(e,t,n){var r=n(1702);e.exports=r([].slice)},7475:function(e,t,n){var r=n(3157),i=n(4411),a=n(111),o=n(5112)("species"),s=Array;e.exports=function(e){var t;return r(e)&&(t=e.constructor,(i(t)&&(t===s||r(t.prototype))||a(t)&&null===(t=t[o]))&&(t=void 0)),void 0===t?s:t}},5417:function(e,t,n){var r=n(7475);e.exports=function(e,t){return new(r(e))(0===t?0:t)}},3411:function(e,t,n){var r=n(9670),i=n(9212);e.exports=function(e,t,n,a){try{return a?t(r(n)[0],n[1]):t(n)}catch(t){i(e,"throw",t)}}},7072:function(e,t,n){var r=n(5112)("iterator"),i=!1;try{var a=0,o={next:function(){return{done:!!a++}},return:function(){i=!0}};o[r]=function(){return this},Array.from(o,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var n=!1;try{var a={};a[r]=function(){return{next:function(){return{done:n=!0}}}},e(a)}catch(e){}return n}},4326:function(e,t,n){var r=n(1702),i=r({}.toString),a=r("".slice);e.exports=function(e){return a(i(e),8,-1)}},648:function(e,t,n){var r=n(1694),i=n(614),a=n(4326),o=n(5112)("toStringTag"),s=Object,l="Arguments"==a(function(){return arguments}());e.exports=r?a:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=s(e),o))?n:l?a(t):"Object"==(r=a(t))&&i(t.callee)?"Arguments":r}},9920:function(e,t,n){var r=n(2597),i=n(3887),a=n(1236),o=n(3070);e.exports=function(e,t,n){for(var s=i(t),l=o.f,u=a.f,c=0;c<s.length;c++){var p=s[c];r(e,p)||n&&r(n,p)||l(e,p,u(t,p))}}},8544:function(e,t,n){var r=n(7293);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},6178:function(e){e.exports=function(e,t){return{value:e,done:t}}},8880:function(e,t,n){var r=n(9781),i=n(3070),a=n(9114);e.exports=r?function(e,t,n){return i.f(e,t,a(1,n))}:function(e,t,n){return e[t]=n,e}},9114:function(e){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:function(e,t,n){"use strict";var r=n(4948),i=n(3070),a=n(9114);e.exports=function(e,t,n){var o=r(t);o in e?i.f(e,o,a(0,n)):e[o]=n}},8709:function(e,t,n){"use strict";var r=n(9670),i=n(2140),a=TypeError;e.exports=function(e){if(r(this),"string"===e||"default"===e)e="string";else if("number"!==e)throw a("Incorrect hint");return i(this,e)}},8052:function(e,t,n){var r=n(614),i=n(3070),a=n(6339),o=n(3072);e.exports=function(e,t,n,s){s||(s={});var l=s.enumerable,u=void 0!==s.name?s.name:t;if(r(n)&&a(n,u,s),s.global)l?e[t]=n:o(t,n);else{try{s.unsafe?e[t]&&(l=!0):delete e[t]}catch(e){}l?e[t]=n:i.f(e,t,{value:n,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return e}},3072:function(e,t,n){var r=n(7854),i=Object.defineProperty;e.exports=function(e,t){try{i(r,e,{value:t,configurable:!0,writable:!0})}catch(n){r[e]=t}return t}},9781:function(e,t,n){var r=n(7293);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},4154:function(e){var t="object"==typeof document&&document.all,n=void 0===t&&void 0!==t;e.exports={all:t,IS_HTMLDDA:n}},317:function(e,t,n){var r=n(7854),i=n(111),a=r.document,o=i(a)&&i(a.createElement);e.exports=function(e){return o?a.createElement(e):{}}},7207:function(e){var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},8324:function(e){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:function(e,t,n){var r=n(317)("span").classList,i=r&&r.constructor&&r.constructor.prototype;e.exports=i===Object.prototype?void 0:i},8113:function(e,t,n){var r=n(5005);e.exports=r("navigator","userAgent")||""},7392:function(e,t,n){var r,i,a=n(7854),o=n(8113),s=a.process,l=a.Deno,u=s&&s.versions||l&&l.version,c=u&&u.v8;c&&(i=(r=c.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!i&&o&&(!(r=o.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=o.match(/Chrome\/(\d+)/))&&(i=+r[1]),e.exports=i},748:function(e){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(e,t,n){var r=n(7854),i=n(1236).f,a=n(8880),o=n(8052),s=n(3072),l=n(9920),u=n(4705);e.exports=function(e,t){var n,c,p,d,f,h=e.target,g=e.global,m=e.stat;if(n=g?r:m?r[h]||s(h,{}):(r[h]||{}).prototype)for(c in t){if(d=t[c],p=e.dontCallGetSet?(f=i(n,c))&&f.value:n[c],!u(g?c:h+(m?".":"#")+c,e.forced)&&void 0!==p){if(typeof d==typeof p)continue;l(d,p)}(e.sham||p&&p.sham)&&a(d,"sham",!0),o(n,c,d,e)}}},7293:function(e){e.exports=function(e){try{return!!e()}catch(e){return!0}}},2104:function(e,t,n){var r=n(4374),i=Function.prototype,a=i.apply,o=i.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?o.bind(a):function(){return o.apply(a,arguments)})},9974:function(e,t,n){var r=n(1470),i=n(9662),a=n(4374),o=r(r.bind);e.exports=function(e,t){return i(e),void 0===t?e:a?o(e,t):function(){return e.apply(t,arguments)}}},4374:function(e,t,n){var r=n(7293);e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},6916:function(e,t,n){var r=n(4374),i=Function.prototype.call;e.exports=r?i.bind(i):function(){return i.apply(i,arguments)}},6530:function(e,t,n){var r=n(9781),i=n(2597),a=Function.prototype,o=r&&Object.getOwnPropertyDescriptor,s=i(a,"name"),l=s&&"something"===function(){}.name,u=s&&(!r||r&&o(a,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:u}},1470:function(e,t,n){var r=n(4326),i=n(1702);e.exports=function(e){if("Function"===r(e))return i(e)}},1702:function(e,t,n){var r=n(4374),i=Function.prototype,a=i.call,o=r&&i.bind.bind(a,a);e.exports=r?o:function(e){return function(){return a.apply(e,arguments)}}},5005:function(e,t,n){var r=n(7854),i=n(614),a=function(e){return i(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?a(r[e]):r[e]&&r[e][t]}},1246:function(e,t,n){var r=n(648),i=n(8173),a=n(8554),o=n(7497),s=n(5112)("iterator");e.exports=function(e){if(!a(e))return i(e,s)||i(e,"@@iterator")||o[r(e)]}},4121:function(e,t,n){var r=n(6916),i=n(9662),a=n(9670),o=n(6330),s=n(1246),l=TypeError;e.exports=function(e,t){var n=arguments.length<2?s(e):t;if(i(n))return a(r(n,e));throw l(o(e)+" is not iterable")}},8173:function(e,t,n){var r=n(9662),i=n(8554);e.exports=function(e,t){var n=e[t];return i(n)?void 0:r(n)}},7854:function(e,t,n){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},2597:function(e,t,n){var r=n(1702),i=n(7908),a=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return a(i(e),t)}},3501:function(e){e.exports={}},490:function(e,t,n){var r=n(5005);e.exports=r("document","documentElement")},4664:function(e,t,n){var r=n(9781),i=n(7293),a=n(317);e.exports=!r&&!i((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},8361:function(e,t,n){var r=n(1702),i=n(7293),a=n(4326),o=Object,s=r("".split);e.exports=i((function(){return!o("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?s(e,""):o(e)}:o},9587:function(e,t,n){var r=n(614),i=n(111),a=n(7674);e.exports=function(e,t,n){var o,s;return a&&r(o=t.constructor)&&o!==n&&i(s=o.prototype)&&s!==n.prototype&&a(e,s),e}},2788:function(e,t,n){var r=n(1702),i=n(614),a=n(5465),o=r(Function.toString);i(a.inspectSource)||(a.inspectSource=function(e){return o(e)}),e.exports=a.inspectSource},9909:function(e,t,n){var r,i,a,o=n(4811),s=n(7854),l=n(111),u=n(8880),c=n(2597),p=n(5465),d=n(6200),f=n(3501),h="Object already initialized",g=s.TypeError,m=s.WeakMap;if(o||p.state){var A=p.state||(p.state=new m);A.get=A.get,A.has=A.has,A.set=A.set,r=function(e,t){if(A.has(e))throw g(h);return t.facade=e,A.set(e,t),t},i=function(e){return A.get(e)||{}},a=function(e){return A.has(e)}}else{var v=d("state");f[v]=!0,r=function(e,t){if(c(e,v))throw g(h);return t.facade=e,u(e,v,t),t},i=function(e){return c(e,v)?e[v]:{}},a=function(e){return c(e,v)}}e.exports={set:r,get:i,has:a,enforce:function(e){return a(e)?i(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=i(t)).type!==e)throw g("Incompatible receiver, "+e+" required");return n}}}},7659:function(e,t,n){var r=n(5112),i=n(7497),a=r("iterator"),o=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||o[a]===e)}},3157:function(e,t,n){var r=n(4326);e.exports=Array.isArray||function(e){return"Array"==r(e)}},614:function(e,t,n){var r=n(4154),i=r.all;e.exports=r.IS_HTMLDDA?function(e){return"function"==typeof e||e===i}:function(e){return"function"==typeof e}},4411:function(e,t,n){var r=n(1702),i=n(7293),a=n(614),o=n(648),s=n(5005),l=n(2788),u=function(){},c=[],p=s("Reflect","construct"),d=/^\s*(?:class|function)\b/,f=r(d.exec),h=!d.exec(u),g=function(e){if(!a(e))return!1;try{return p(u,c,e),!0}catch(e){return!1}},m=function(e){if(!a(e))return!1;switch(o(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!f(d,l(e))}catch(e){return!0}};m.sham=!0,e.exports=!p||i((function(){var e;return g(g.call)||!g(Object)||!g((function(){e=!0}))||e}))?m:g},4705:function(e,t,n){var r=n(7293),i=n(614),a=/#|\.prototype\./,o=function(e,t){var n=l[s(e)];return n==c||n!=u&&(i(t)?r(t):!!t)},s=o.normalize=function(e){return String(e).replace(a,".").toLowerCase()},l=o.data={},u=o.NATIVE="N",c=o.POLYFILL="P";e.exports=o},8554:function(e){e.exports=function(e){return null==e}},111:function(e,t,n){var r=n(614),i=n(4154),a=i.all;e.exports=i.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:r(e)||e===a}:function(e){return"object"==typeof e?null!==e:r(e)}},1913:function(e){e.exports=!1},2190:function(e,t,n){var r=n(5005),i=n(614),a=n(7976),o=n(3307),s=Object;e.exports=o?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return i(t)&&a(t.prototype,s(e))}},9212:function(e,t,n){var r=n(6916),i=n(9670),a=n(8173);e.exports=function(e,t,n){var o,s;i(e);try{if(!(o=a(e,"return"))){if("throw"===t)throw n;return n}o=r(o,e)}catch(e){s=!0,o=e}if("throw"===t)throw n;if(s)throw o;return i(o),n}},3061:function(e,t,n){"use strict";var r=n(3383).IteratorPrototype,i=n(30),a=n(9114),o=n(8003),s=n(7497),l=function(){return this};e.exports=function(e,t,n,u){var c=t+" Iterator";return e.prototype=i(r,{next:a(+!u,n)}),o(e,c,!1,!0),s[c]=l,e}},1656:function(e,t,n){"use strict";var r=n(2109),i=n(6916),a=n(1913),o=n(6530),s=n(614),l=n(3061),u=n(9518),c=n(7674),p=n(8003),d=n(8880),f=n(8052),h=n(5112),g=n(7497),m=n(3383),A=o.PROPER,v=o.CONFIGURABLE,b=m.IteratorPrototype,y=m.BUGGY_SAFARI_ITERATORS,w=h("iterator"),C="keys",x="values",S="entries",_=function(){return this};e.exports=function(e,t,n,o,h,m,k){l(n,t,o);var E,T,O,P=function(e){if(e===h&&N)return N;if(!y&&e in D)return D[e];switch(e){case C:case x:case S:return function(){return new n(this,e)}}return function(){return new n(this)}},B=t+" Iterator",M=!1,D=e.prototype,z=D[w]||D["@@iterator"]||h&&D[h],N=!y&&z||P(h),j="Array"==t&&D.entries||z;if(j&&(E=u(j.call(new e)))!==Object.prototype&&E.next&&(a||u(E)===b||(c?c(E,b):s(E[w])||f(E,w,_)),p(E,B,!0,!0),a&&(g[B]=_)),A&&h==x&&z&&z.name!==x&&(!a&&v?d(D,"name",x):(M=!0,N=function(){return i(z,this)})),h)if(T={values:P(x),keys:m?N:P(C),entries:P(S)},k)for(O in T)(y||M||!(O in D))&&f(D,O,T[O]);else r({target:t,proto:!0,forced:y||M},T);return a&&!k||D[w]===N||f(D,w,N,{name:h}),g[t]=N,T}},3383:function(e,t,n){"use strict";var r,i,a,o=n(7293),s=n(614),l=n(111),u=n(30),c=n(9518),p=n(8052),d=n(5112),f=n(1913),h=d("iterator"),g=!1;[].keys&&("next"in(a=[].keys())?(i=c(c(a)))!==Object.prototype&&(r=i):g=!0),!l(r)||o((function(){var e={};return r[h].call(e)!==e}))?r={}:f&&(r=u(r)),s(r[h])||p(r,h,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:g}},7497:function(e){e.exports={}},6244:function(e,t,n){var r=n(7466);e.exports=function(e){return r(e.length)}},6339:function(e,t,n){var r=n(7293),i=n(614),a=n(2597),o=n(9781),s=n(6530).CONFIGURABLE,l=n(2788),u=n(9909),c=u.enforce,p=u.get,d=Object.defineProperty,f=o&&!r((function(){return 8!==d((function(){}),"length",{value:8}).length})),h=String(String).split("String"),g=e.exports=function(e,t,n){"Symbol("===String(t).slice(0,7)&&(t="["+String(t).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!a(e,"name")||s&&e.name!==t)&&(o?d(e,"name",{value:t,configurable:!0}):e.name=t),f&&n&&a(n,"arity")&&e.length!==n.arity&&d(e,"length",{value:n.arity});try{n&&a(n,"constructor")&&n.constructor?o&&d(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=c(e);return a(r,"source")||(r.source=h.join("string"==typeof t?t:"")),e};Function.prototype.toString=g((function(){return i(this)&&p(this).source||l(this)}),"toString")},4758:function(e){var t=Math.ceil,n=Math.floor;e.exports=Math.trunc||function(e){var r=+e;return(r>0?n:t)(r)}},30:function(e,t,n){var r,i=n(9670),a=n(6048),o=n(748),s=n(3501),l=n(490),u=n(317),c=n(6200),p="prototype",d="script",f=c("IE_PROTO"),h=function(){},g=function(e){return"<"+d+">"+e+"</"+d+">"},m=function(e){e.write(g("")),e.close();var t=e.parentWindow.Object;return e=null,t},A=function(){try{r=new ActiveXObject("htmlfile")}catch(e){}var e,t,n;A="undefined"!=typeof document?document.domain&&r?m(r):(t=u("iframe"),n="java"+d+":",t.style.display="none",l.appendChild(t),t.src=String(n),(e=t.contentWindow.document).open(),e.write(g("document.F=Object")),e.close(),e.F):m(r);for(var i=o.length;i--;)delete A[p][o[i]];return A()};s[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(h[p]=i(e),n=new h,h[p]=null,n[f]=e):n=A(),void 0===t?n:a.f(n,t)}},6048:function(e,t,n){var r=n(9781),i=n(3353),a=n(3070),o=n(9670),s=n(5656),l=n(1956);t.f=r&&!i?Object.defineProperties:function(e,t){o(e);for(var n,r=s(t),i=l(t),u=i.length,c=0;u>c;)a.f(e,n=i[c++],r[n]);return e}},3070:function(e,t,n){var r=n(9781),i=n(4664),a=n(3353),o=n(9670),s=n(4948),l=TypeError,u=Object.defineProperty,c=Object.getOwnPropertyDescriptor,p="enumerable",d="configurable",f="writable";t.f=r?a?function(e,t,n){if(o(e),t=s(t),o(n),"function"==typeof e&&"prototype"===t&&"value"in n&&f in n&&!n[f]){var r=c(e,t);r&&r[f]&&(e[t]=n.value,n={configurable:d in n?n[d]:r[d],enumerable:p in n?n[p]:r[p],writable:!1})}return u(e,t,n)}:u:function(e,t,n){if(o(e),t=s(t),o(n),i)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw l("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},1236:function(e,t,n){var r=n(9781),i=n(6916),a=n(5296),o=n(9114),s=n(5656),l=n(4948),u=n(2597),c=n(4664),p=Object.getOwnPropertyDescriptor;t.f=r?p:function(e,t){if(e=s(e),t=l(t),c)try{return p(e,t)}catch(e){}if(u(e,t))return o(!i(a.f,e,t),e[t])}},1156:function(e,t,n){var r=n(4326),i=n(5656),a=n(8006).f,o=n(1589),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return s&&"Window"==r(e)?function(e){try{return a(e)}catch(e){return o(s)}}(e):a(i(e))}},8006:function(e,t,n){var r=n(6324),i=n(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},5181:function(e,t){t.f=Object.getOwnPropertySymbols},9518:function(e,t,n){var r=n(2597),i=n(614),a=n(7908),o=n(6200),s=n(8544),l=o("IE_PROTO"),u=Object,c=u.prototype;e.exports=s?u.getPrototypeOf:function(e){var t=a(e);if(r(t,l))return t[l];var n=t.constructor;return i(n)&&t instanceof n?n.prototype:t instanceof u?c:null}},7976:function(e,t,n){var r=n(1702);e.exports=r({}.isPrototypeOf)},6324:function(e,t,n){var r=n(1702),i=n(2597),a=n(5656),o=n(1318).indexOf,s=n(3501),l=r([].push);e.exports=function(e,t){var n,r=a(e),u=0,c=[];for(n in r)!i(s,n)&&i(r,n)&&l(c,n);for(;t.length>u;)i(r,n=t[u++])&&(~o(c,n)||l(c,n));return c}},1956:function(e,t,n){var r=n(6324),i=n(748);e.exports=Object.keys||function(e){return r(e,i)}},5296:function(e,t){"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,i=r&&!n.call({1:2},1);t.f=i?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},7674:function(e,t,n){var r=n(1702),i=n(9670),a=n(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(e){}return function(n,r){return i(n),a(r),t?e(n,r):n.__proto__=r,n}}():void 0)},288:function(e,t,n){"use strict";var r=n(1694),i=n(648);e.exports=r?{}.toString:function(){return"[object "+i(this)+"]"}},2140:function(e,t,n){var r=n(6916),i=n(614),a=n(111),o=TypeError;e.exports=function(e,t){var n,s;if("string"===t&&i(n=e.toString)&&!a(s=r(n,e)))return s;if(i(n=e.valueOf)&&!a(s=r(n,e)))return s;if("string"!==t&&i(n=e.toString)&&!a(s=r(n,e)))return s;throw o("Can't convert object to primitive value")}},3887:function(e,t,n){var r=n(5005),i=n(1702),a=n(8006),o=n(5181),s=n(9670),l=i([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=a.f(s(e)),n=o.f;return n?l(t,n(e)):t}},857:function(e,t,n){var r=n(7854);e.exports=r},2261:function(e,t,n){"use strict";var r,i,a=n(6916),o=n(1702),s=n(1340),l=n(7066),u=n(2999),c=n(2309),p=n(30),d=n(9909).get,f=n(9441),h=n(7168),g=c("native-string-replace",String.prototype.replace),m=RegExp.prototype.exec,A=m,v=o("".charAt),b=o("".indexOf),y=o("".replace),w=o("".slice),C=(i=/b*/g,a(m,r=/a/,"a"),a(m,i,"a"),0!==r.lastIndex||0!==i.lastIndex),x=u.BROKEN_CARET,S=void 0!==/()??/.exec("")[1];(C||S||x||f||h)&&(A=function(e){var t,n,r,i,o,u,c,f=this,h=d(f),_=s(e),k=h.raw;if(k)return k.lastIndex=f.lastIndex,t=a(A,k,_),f.lastIndex=k.lastIndex,t;var E=h.groups,T=x&&f.sticky,O=a(l,f),P=f.source,B=0,M=_;if(T&&(O=y(O,"y",""),-1===b(O,"g")&&(O+="g"),M=w(_,f.lastIndex),f.lastIndex>0&&(!f.multiline||f.multiline&&"\n"!==v(_,f.lastIndex-1))&&(P="(?: "+P+")",M=" "+M,B++),n=new RegExp("^(?:"+P+")",O)),S&&(n=new RegExp("^"+P+"$(?!\\s)",O)),C&&(r=f.lastIndex),i=a(m,T?n:f,M),T?i?(i.input=w(i.input,B),i[0]=w(i[0],B),i.index=f.lastIndex,f.lastIndex+=i[0].length):f.lastIndex=0:C&&i&&(f.lastIndex=f.global?i.index+i[0].length:r),S&&i&&i.length>1&&a(g,i[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(i[o]=void 0)})),i&&E)for(i.groups=u=p(null),o=0;o<E.length;o++)u[(c=E[o])[0]]=i[c[1]];return i}),e.exports=A},7066:function(e,t,n){"use strict";var r=n(9670);e.exports=function(){var e=r(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t}},2999:function(e,t,n){var r=n(7293),i=n(7854).RegExp,a=r((function(){var e=i("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),o=a||r((function(){return!i("a","y").sticky})),s=a||r((function(){var e=i("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));e.exports={BROKEN_CARET:s,MISSED_STICKY:o,UNSUPPORTED_Y:a}},9441:function(e,t,n){var r=n(7293),i=n(7854).RegExp;e.exports=r((function(){var e=i(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},7168:function(e,t,n){var r=n(7293),i=n(7854).RegExp;e.exports=r((function(){var e=i("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},4488:function(e,t,n){var r=n(8554),i=TypeError;e.exports=function(e){if(r(e))throw i("Can't call method on "+e);return e}},8003:function(e,t,n){var r=n(3070).f,i=n(2597),a=n(5112)("toStringTag");e.exports=function(e,t,n){e&&!n&&(e=e.prototype),e&&!i(e,a)&&r(e,a,{configurable:!0,value:t})}},6200:function(e,t,n){var r=n(2309),i=n(9711),a=r("keys");e.exports=function(e){return a[e]||(a[e]=i(e))}},5465:function(e,t,n){var r=n(7854),i=n(3072),a="__core-js_shared__",o=r[a]||i(a,{});e.exports=o},2309:function(e,t,n){var r=n(1913),i=n(5465);(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.26.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.26.1/LICENSE",source:"https://github.com/zloirock/core-js"})},8710:function(e,t,n){var r=n(1702),i=n(9303),a=n(1340),o=n(4488),s=r("".charAt),l=r("".charCodeAt),u=r("".slice),c=function(e){return function(t,n){var r,c,p=a(o(t)),d=i(n),f=p.length;return d<0||d>=f?e?"":void 0:(r=l(p,d))<55296||r>56319||d+1===f||(c=l(p,d+1))<56320||c>57343?e?s(p,d):r:e?u(p,d,d+2):c-56320+(r-55296<<10)+65536}};e.exports={codeAt:c(!1),charAt:c(!0)}},4986:function(e,t,n){var r=n(8113);e.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},6650:function(e,t,n){var r=n(1702),i=n(7466),a=n(1340),o=n(8415),s=n(4488),l=r(o),u=r("".slice),c=Math.ceil,p=function(e){return function(t,n,r){var o,p,d=a(s(t)),f=i(n),h=d.length,g=void 0===r?" ":a(r);return f<=h||""==g?d:((p=l(g,c((o=f-h)/g.length))).length>o&&(p=u(p,0,o)),e?d+p:p+d)}};e.exports={start:p(!1),end:p(!0)}},8415:function(e,t,n){"use strict";var r=n(9303),i=n(1340),a=n(4488),o=RangeError;e.exports=function(e){var t=i(a(this)),n="",s=r(e);if(s<0||s==1/0)throw o("Wrong number of repetitions");for(;s>0;(s>>>=1)&&(t+=t))1&s&&(n+=t);return n}},3111:function(e,t,n){var r=n(1702),i=n(4488),a=n(1340),o=n(1361),s=r("".replace),l="["+o+"]",u=RegExp("^"+l+l+"*"),c=RegExp(l+l+"*$"),p=function(e){return function(t){var n=a(i(t));return 1&e&&(n=s(n,u,"")),2&e&&(n=s(n,c,"")),n}};e.exports={start:p(1),end:p(2),trim:p(3)}},6293:function(e,t,n){var r=n(7392),i=n(7293);e.exports=!!Object.getOwnPropertySymbols&&!i((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},6532:function(e,t,n){var r=n(6916),i=n(5005),a=n(5112),o=n(8052);e.exports=function(){var e=i("Symbol"),t=e&&e.prototype,n=t&&t.valueOf,s=a("toPrimitive");t&&!t[s]&&o(t,s,(function(e){return r(n,this)}),{arity:1})}},2015:function(e,t,n){var r=n(6293);e.exports=r&&!!Symbol.for&&!!Symbol.keyFor},863:function(e,t,n){var r=n(1702);e.exports=r(1..valueOf)},1400:function(e,t,n){var r=n(9303),i=Math.max,a=Math.min;e.exports=function(e,t){var n=r(e);return n<0?i(n+t,0):a(n,t)}},5656:function(e,t,n){var r=n(8361),i=n(4488);e.exports=function(e){return r(i(e))}},9303:function(e,t,n){var r=n(4758);e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},7466:function(e,t,n){var r=n(9303),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},7908:function(e,t,n){var r=n(4488),i=Object;e.exports=function(e){return i(r(e))}},7593:function(e,t,n){var r=n(6916),i=n(111),a=n(2190),o=n(8173),s=n(2140),l=n(5112),u=TypeError,c=l("toPrimitive");e.exports=function(e,t){if(!i(e)||a(e))return e;var n,l=o(e,c);if(l){if(void 0===t&&(t="default"),n=r(l,e,t),!i(n)||a(n))return n;throw u("Can't convert object to primitive value")}return void 0===t&&(t="number"),s(e,t)}},4948:function(e,t,n){var r=n(7593),i=n(2190);e.exports=function(e){var t=r(e,"string");return i(t)?t:t+""}},1694:function(e,t,n){var r={};r[n(5112)("toStringTag")]="z",e.exports="[object z]"===String(r)},1340:function(e,t,n){var r=n(648),i=String;e.exports=function(e){if("Symbol"===r(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},6330:function(e){var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},9711:function(e,t,n){var r=n(1702),i=0,a=Math.random(),o=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+o(++i+a,36)}},3307:function(e,t,n){var r=n(6293);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:function(e,t,n){var r=n(9781),i=n(7293);e.exports=r&&i((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},4811:function(e,t,n){var r=n(7854),i=n(614),a=r.WeakMap;e.exports=i(a)&&/native code/.test(String(a))},6800:function(e,t,n){var r=n(857),i=n(2597),a=n(6061),o=n(3070).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});i(t,e)||o(t,e,{value:a.f(e)})}},6061:function(e,t,n){var r=n(5112);t.f=r},5112:function(e,t,n){var r=n(7854),i=n(2309),a=n(2597),o=n(9711),s=n(6293),l=n(3307),u=i("wks"),c=r.Symbol,p=c&&c.for,d=l?c:c&&c.withoutSetter||o;e.exports=function(e){if(!a(u,e)||!s&&"string"!=typeof u[e]){var t="Symbol."+e;s&&a(c,e)?u[e]=c[e]:u[e]=l&&p?p(t):d(t)}return u[e]}},1361:function(e){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},2222:function(e,t,n){"use strict";var r=n(2109),i=n(7293),a=n(3157),o=n(111),s=n(7908),l=n(6244),u=n(7207),c=n(6135),p=n(5417),d=n(1194),f=n(5112),h=n(7392),g=f("isConcatSpreadable"),m=h>=51||!i((function(){var e=[];return e[g]=!1,e.concat()[0]!==e})),A=d("concat"),v=function(e){if(!o(e))return!1;var t=e[g];return void 0!==t?!!t:a(e)};r({target:"Array",proto:!0,arity:1,forced:!m||!A},{concat:function(e){var t,n,r,i,a,o=s(this),d=p(o,0),f=0;for(t=-1,r=arguments.length;t<r;t++)if(v(a=-1===t?o:arguments[t]))for(i=l(a),u(f+i),n=0;n<i;n++,f++)n in a&&c(d,f,a[n]);else u(f+1),c(d,f++,a);return d.length=f,d}})},7327:function(e,t,n){"use strict";var r=n(2109),i=n(2092).filter;r({target:"Array",proto:!0,forced:!n(1194)("filter")},{filter:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},9554:function(e,t,n){"use strict";var r=n(2109),i=n(8533);r({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},1038:function(e,t,n){var r=n(2109),i=n(8457);r({target:"Array",stat:!0,forced:!n(7072)((function(e){Array.from(e)}))},{from:i})},2772:function(e,t,n){"use strict";var r=n(2109),i=n(1470),a=n(1318).indexOf,o=n(9341),s=i([].indexOf),l=!!s&&1/s([1],1,-0)<0,u=o("indexOf");r({target:"Array",proto:!0,forced:l||!u},{indexOf:function(e){var t=arguments.length>1?arguments[1]:void 0;return l?s(this,e,t)||0:a(this,e,t)}})},9753:function(e,t,n){n(2109)({target:"Array",stat:!0},{isArray:n(3157)})},6992:function(e,t,n){"use strict";var r=n(5656),i=n(1223),a=n(7497),o=n(9909),s=n(3070).f,l=n(1656),u=n(6178),c=n(1913),p=n(9781),d="Array Iterator",f=o.set,h=o.getterFor(d);e.exports=l(Array,"Array",(function(e,t){f(this,{type:d,target:r(e),index:0,kind:t})}),(function(){var e=h(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,u(void 0,!0)):u("keys"==n?r:"values"==n?t[r]:[r,t[r]],!1)}),"values");var g=a.Arguments=a.Array;if(i("keys"),i("values"),i("entries"),!c&&p&&"values"!==g.name)try{s(g,"name",{value:"values"})}catch(e){}},1249:function(e,t,n){"use strict";var r=n(2109),i=n(2092).map;r({target:"Array",proto:!0,forced:!n(1194)("map")},{map:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},7042:function(e,t,n){"use strict";var r=n(2109),i=n(3157),a=n(4411),o=n(111),s=n(1400),l=n(6244),u=n(5656),c=n(6135),p=n(5112),d=n(1194),f=n(206),h=d("slice"),g=p("species"),m=Array,A=Math.max;r({target:"Array",proto:!0,forced:!h},{slice:function(e,t){var n,r,p,d=u(this),h=l(d),v=s(e,h),b=s(void 0===t?h:t,h);if(i(d)&&(n=d.constructor,(a(n)&&(n===m||i(n.prototype))||o(n)&&null===(n=n[g]))&&(n=void 0),n===m||void 0===n))return f(d,v,b);for(r=new(void 0===n?m:n)(A(b-v,0)),p=0;v<b;v++,p++)v in d&&c(r,p,d[v]);return r.length=p,r}})},6078:function(e,t,n){var r=n(2597),i=n(8052),a=n(8709),o=n(5112)("toPrimitive"),s=Date.prototype;r(s,o)||i(s,o,a)},8309:function(e,t,n){var r=n(9781),i=n(6530).EXISTS,a=n(1702),o=n(3070).f,s=Function.prototype,l=a(s.toString),u=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,c=a(u.exec);r&&!i&&o(s,"name",{configurable:!0,get:function(){try{return c(u,l(this))[1]}catch(e){return""}}})},8862:function(e,t,n){var r=n(2109),i=n(5005),a=n(2104),o=n(6916),s=n(1702),l=n(7293),u=n(3157),c=n(614),p=n(111),d=n(2190),f=n(206),h=n(6293),g=i("JSON","stringify"),m=s(/./.exec),A=s("".charAt),v=s("".charCodeAt),b=s("".replace),y=s(1..toString),w=/[\uD800-\uDFFF]/g,C=/^[\uD800-\uDBFF]$/,x=/^[\uDC00-\uDFFF]$/,S=!h||l((function(){var e=i("Symbol")();return"[null]"!=g([e])||"{}"!=g({a:e})||"{}"!=g(Object(e))})),_=l((function(){return'"\\udf06\\ud834"'!==g("\udf06\ud834")||'"\\udead"'!==g("\udead")})),k=function(e,t){var n=f(arguments),r=t;if((p(t)||void 0!==e)&&!d(e))return u(t)||(t=function(e,t){if(c(r)&&(t=o(r,this,e,t)),!d(t))return t}),n[1]=t,a(g,null,n)},E=function(e,t,n){var r=A(n,t-1),i=A(n,t+1);return m(C,e)&&!m(x,i)||m(x,e)&&!m(C,r)?"\\u"+y(v(e,0),16):e};g&&r({target:"JSON",stat:!0,arity:3,forced:S||_},{stringify:function(e,t,n){var r=f(arguments),i=a(S?k:g,null,r);return _&&"string"==typeof i?b(i,w,E):i}})},9653:function(e,t,n){"use strict";var r=n(9781),i=n(7854),a=n(1702),o=n(4705),s=n(8052),l=n(2597),u=n(9587),c=n(7976),p=n(2190),d=n(7593),f=n(7293),h=n(8006).f,g=n(1236).f,m=n(3070).f,A=n(863),v=n(3111).trim,b="Number",y=i[b],w=y.prototype,C=i.TypeError,x=a("".slice),S=a("".charCodeAt),_=function(e){var t=d(e,"number");return"bigint"==typeof t?t:k(t)},k=function(e){var t,n,r,i,a,o,s,l,u=d(e,"number");if(p(u))throw C("Cannot convert a Symbol value to a number");if("string"==typeof u&&u.length>2)if(u=v(u),43===(t=S(u,0))||45===t){if(88===(n=S(u,2))||120===n)return NaN}else if(48===t){switch(S(u,1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+u}for(o=(a=x(u,2)).length,s=0;s<o;s++)if((l=S(a,s))<48||l>i)return NaN;return parseInt(a,r)}return+u};if(o(b,!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var E,T=function(e){var t=arguments.length<1?0:y(_(e)),n=this;return c(w,n)&&f((function(){A(n)}))?u(Object(t),n,T):t},O=r?h(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),P=0;O.length>P;P++)l(y,E=O[P])&&!l(T,E)&&m(T,E,g(y,E));T.prototype=w,w.constructor=T,s(i,b,T,{constructor:!0})}},6977:function(e,t,n){"use strict";var r=n(2109),i=n(1702),a=n(9303),o=n(863),s=n(8415),l=n(7293),u=RangeError,c=String,p=Math.floor,d=i(s),f=i("".slice),h=i(1..toFixed),g=function(e,t,n){return 0===t?n:t%2==1?g(e,t-1,n*e):g(e*e,t/2,n)},m=function(e,t,n){for(var r=-1,i=n;++r<6;)i+=t*e[r],e[r]=i%1e7,i=p(i/1e7)},A=function(e,t){for(var n=6,r=0;--n>=0;)r+=e[n],e[n]=p(r/t),r=r%t*1e7},v=function(e){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==e[t]){var r=c(e[t]);n=""===n?r:n+d("0",7-r.length)+r}return n};r({target:"Number",proto:!0,forced:l((function(){return"0.000"!==h(8e-5,3)||"1"!==h(.9,0)||"1.25"!==h(1.255,2)||"1000000000000000128"!==h(0xde0b6b3a7640080,0)}))||!l((function(){h({})}))},{toFixed:function(e){var t,n,r,i,s=o(this),l=a(e),p=[0,0,0,0,0,0],h="",b="0";if(l<0||l>20)throw u("Incorrect fraction digits");if(s!=s)return"NaN";if(s<=-1e21||s>=1e21)return c(s);if(s<0&&(h="-",s=-s),s>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(s*g(2,69,1))-69)<0?s*g(2,-t,1):s/g(2,t,1),n*=4503599627370496,(t=52-t)>0){for(m(p,0,n),r=l;r>=7;)m(p,1e7,0),r-=7;for(m(p,g(10,r,1),0),r=t-1;r>=23;)A(p,1<<23),r-=23;A(p,1<<r),m(p,1,1),A(p,2),b=v(p)}else m(p,0,n),m(p,1<<-t,0),b=v(p)+d("0",l);return l>0?h+((i=b.length)<=l?"0."+d("0",l-i)+b:f(b,0,i-l)+"."+f(b,i-l)):h+b}})},3321:function(e,t,n){var r=n(2109),i=n(9781),a=n(6048).f;r({target:"Object",stat:!0,forced:Object.defineProperties!==a,sham:!i},{defineProperties:a})},9070:function(e,t,n){var r=n(2109),i=n(9781),a=n(3070).f;r({target:"Object",stat:!0,forced:Object.defineProperty!==a,sham:!i},{defineProperty:a})},5003:function(e,t,n){var r=n(2109),i=n(7293),a=n(5656),o=n(1236).f,s=n(9781),l=i((function(){o(1)}));r({target:"Object",stat:!0,forced:!s||l,sham:!s},{getOwnPropertyDescriptor:function(e,t){return o(a(e),t)}})},9337:function(e,t,n){var r=n(2109),i=n(9781),a=n(3887),o=n(5656),s=n(1236),l=n(6135);r({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(e){for(var t,n,r=o(e),i=s.f,u=a(r),c={},p=0;u.length>p;)void 0!==(n=i(r,t=u[p++]))&&l(c,t,n);return c}})},9660:function(e,t,n){var r=n(2109),i=n(6293),a=n(7293),o=n(5181),s=n(7908);r({target:"Object",stat:!0,forced:!i||a((function(){o.f(1)}))},{getOwnPropertySymbols:function(e){var t=o.f;return t?t(s(e)):[]}})},7941:function(e,t,n){var r=n(2109),i=n(7908),a=n(1956);r({target:"Object",stat:!0,forced:n(7293)((function(){a(1)}))},{keys:function(e){return a(i(e))}})},1539:function(e,t,n){var r=n(1694),i=n(8052),a=n(288);r||i(Object.prototype,"toString",a,{unsafe:!0})},4916:function(e,t,n){"use strict";var r=n(2109),i=n(2261);r({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},8783:function(e,t,n){"use strict";var r=n(8710).charAt,i=n(1340),a=n(9909),o=n(1656),s=n(6178),l="String Iterator",u=a.set,c=a.getterFor(l);o(String,"String",(function(e){u(this,{type:l,string:i(e),index:0})}),(function(){var e,t=c(this),n=t.string,i=t.index;return i>=n.length?s(void 0,!0):(e=r(n,i),t.index+=e.length,s(e,!1))}))},3112:function(e,t,n){"use strict";var r=n(2109),i=n(6650).start;r({target:"String",proto:!0,forced:n(4986)},{padStart:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},4032:function(e,t,n){"use strict";var r=n(2109),i=n(7854),a=n(6916),o=n(1702),s=n(1913),l=n(9781),u=n(6293),c=n(7293),p=n(2597),d=n(7976),f=n(9670),h=n(5656),g=n(4948),m=n(1340),A=n(9114),v=n(30),b=n(1956),y=n(8006),w=n(1156),C=n(5181),x=n(1236),S=n(3070),_=n(6048),k=n(5296),E=n(8052),T=n(2309),O=n(6200),P=n(3501),B=n(9711),M=n(5112),D=n(6061),z=n(6800),N=n(6532),j=n(8003),L=n(9909),I=n(2092).forEach,F=O("hidden"),R="Symbol",$="prototype",G=L.set,Y=L.getterFor(R),U=Object[$],V=i.Symbol,H=V&&V[$],W=i.TypeError,Q=i.QObject,Z=x.f,q=S.f,X=w.f,K=k.f,J=o([].push),ee=T("symbols"),te=T("op-symbols"),ne=T("wks"),re=!Q||!Q[$]||!Q[$].findChild,ie=l&&c((function(){return 7!=v(q({},"a",{get:function(){return q(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=Z(U,t);r&&delete U[t],q(e,t,n),r&&e!==U&&q(U,t,r)}:q,ae=function(e,t){var n=ee[e]=v(H);return G(n,{type:R,tag:e,description:t}),l||(n.description=t),n},oe=function(e,t,n){e===U&&oe(te,t,n),f(e);var r=g(t);return f(n),p(ee,r)?(n.enumerable?(p(e,F)&&e[F][r]&&(e[F][r]=!1),n=v(n,{enumerable:A(0,!1)})):(p(e,F)||q(e,F,A(1,{})),e[F][r]=!0),ie(e,r,n)):q(e,r,n)},se=function(e,t){f(e);var n=h(t),r=b(n).concat(pe(n));return I(r,(function(t){l&&!a(le,n,t)||oe(e,t,n[t])})),e},le=function(e){var t=g(e),n=a(K,this,t);return!(this===U&&p(ee,t)&&!p(te,t))&&(!(n||!p(this,t)||!p(ee,t)||p(this,F)&&this[F][t])||n)},ue=function(e,t){var n=h(e),r=g(t);if(n!==U||!p(ee,r)||p(te,r)){var i=Z(n,r);return!i||!p(ee,r)||p(n,F)&&n[F][r]||(i.enumerable=!0),i}},ce=function(e){var t=X(h(e)),n=[];return I(t,(function(e){p(ee,e)||p(P,e)||J(n,e)})),n},pe=function(e){var t=e===U,n=X(t?te:h(e)),r=[];return I(n,(function(e){!p(ee,e)||t&&!p(U,e)||J(r,ee[e])})),r};u||(V=function(){if(d(H,this))throw W("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?m(arguments[0]):void 0,t=B(e),n=function(e){this===U&&a(n,te,e),p(this,F)&&p(this[F],t)&&(this[F][t]=!1),ie(this,t,A(1,e))};return l&&re&&ie(U,t,{configurable:!0,set:n}),ae(t,e)},E(H=V[$],"toString",(function(){return Y(this).tag})),E(V,"withoutSetter",(function(e){return ae(B(e),e)})),k.f=le,S.f=oe,_.f=se,x.f=ue,y.f=w.f=ce,C.f=pe,D.f=function(e){return ae(M(e),e)},l&&(q(H,"description",{configurable:!0,get:function(){return Y(this).description}}),s||E(U,"propertyIsEnumerable",le,{unsafe:!0}))),r({global:!0,constructor:!0,wrap:!0,forced:!u,sham:!u},{Symbol:V}),I(b(ne),(function(e){z(e)})),r({target:R,stat:!0,forced:!u},{useSetter:function(){re=!0},useSimple:function(){re=!1}}),r({target:"Object",stat:!0,forced:!u,sham:!l},{create:function(e,t){return void 0===t?v(e):se(v(e),t)},defineProperty:oe,defineProperties:se,getOwnPropertyDescriptor:ue}),r({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:ce}),N(),j(V,R),P[F]=!0},1817:function(e,t,n){"use strict";var r=n(2109),i=n(9781),a=n(7854),o=n(1702),s=n(2597),l=n(614),u=n(7976),c=n(1340),p=n(3070).f,d=n(9920),f=a.Symbol,h=f&&f.prototype;if(i&&l(f)&&(!("description"in h)||void 0!==f().description)){var g={},m=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:c(arguments[0]),t=u(h,this)?new f(e):void 0===e?f():f(e);return""===e&&(g[t]=!0),t};d(m,f),m.prototype=h,h.constructor=m;var A="Symbol(test)"==String(f("test")),v=o(h.valueOf),b=o(h.toString),y=/^Symbol\((.*)\)[^)]+$/,w=o("".replace),C=o("".slice);p(h,"description",{configurable:!0,get:function(){var e=v(this);if(s(g,e))return"";var t=b(e),n=A?C(t,7,-1):w(t,y,"$1");return""===n?void 0:n}}),r({global:!0,constructor:!0,forced:!0},{Symbol:m})}},763:function(e,t,n){var r=n(2109),i=n(5005),a=n(2597),o=n(1340),s=n(2309),l=n(2015),u=s("string-to-symbol-registry"),c=s("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!l},{for:function(e){var t=o(e);if(a(u,t))return u[t];var n=i("Symbol")(t);return u[t]=n,c[n]=t,n}})},2165:function(e,t,n){n(6800)("iterator")},2526:function(e,t,n){n(4032),n(763),n(6620),n(8862),n(9660)},6620:function(e,t,n){var r=n(2109),i=n(2597),a=n(2190),o=n(6330),s=n(2309),l=n(2015),u=s("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!l},{keyFor:function(e){if(!a(e))throw TypeError(o(e)+" is not a symbol");if(i(u,e))return u[e]}})},6649:function(e,t,n){var r=n(6800),i=n(6532);r("toPrimitive"),i()},4747:function(e,t,n){var r=n(7854),i=n(8324),a=n(8509),o=n(8533),s=n(8880),l=function(e){if(e&&e.forEach!==o)try{s(e,"forEach",o)}catch(t){e.forEach=o}};for(var u in i)i[u]&&l(r[u]&&r[u].prototype);l(a)},3948:function(e,t,n){var r=n(7854),i=n(8324),a=n(8509),o=n(6992),s=n(8880),l=n(5112),u=l("iterator"),c=l("toStringTag"),p=o.values,d=function(e,t){if(e){if(e[u]!==p)try{s(e,u,p)}catch(t){e[u]=p}if(e[c]||s(e,c,t),i[t])for(var n in o)if(e[n]!==o[n])try{s(e,n,o[n])}catch(t){e[n]=o[n]}}};for(var f in i)d(r[f]&&r[f].prototype,f);d(a,"DOMTokenList")},4155:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,':root{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:calc(var(--swiper-navigation-size)/44*27);height:var(--swiper-navigation-size);margin-top:calc(0px - var(--swiper-navigation-size)/2);z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color, var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next.swiper-button-hidden,.swiper-button-prev.swiper-button-hidden{opacity:0;cursor:auto;pointer-events:none}.swiper-navigation-disabled .swiper-button-next,.swiper-navigation-disabled .swiper-button-prev{display:none !important}.swiper-button-next:after,.swiper-button-prev:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none !important;letter-spacing:0;font-variant:initial;line-height:1}.swiper-button-prev,.swiper-rtl .swiper-button-next{left:10px;right:auto}.swiper-button-prev:after,.swiper-rtl .swiper-button-next:after{content:"prev"}.swiper-button-next,.swiper-rtl .swiper-button-prev{right:10px;left:auto}.swiper-button-next:after,.swiper-rtl .swiper-button-prev:after{content:"next"}.swiper-button-lock{display:none}',"",{version:3,sources:["webpack://./node_modules/swiper/modules/navigation/navigation.min.css"],names:[],mappings:"AAAA,MAAA,6BAAA,CAAA,wCAAA,iBAAA,CAAA,OAAA,CAAA,+CAAA,CAAA,oCAAA,CAAA,sDAAA,CAAA,UAAA,CAAA,cAAA,CAAA,YAAA,CAAA,kBAAA,CAAA,sBAAA,CAAA,+DAAA,CAAA,sFAAA,WAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,kFAAA,SAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,gGAAA,uBAAA,CAAA,oDAAA,wBAAA,CAAA,uCAAA,CAAA,8BAAA,CAAA,gBAAA,CAAA,oBAAA,CAAA,aAAA,CAAA,oDAAA,SAAA,CAAA,UAAA,CAAA,gEAAA,cAAA,CAAA,oDAAA,UAAA,CAAA,SAAA,CAAA,gEAAA,cAAA,CAAA,oBAAA,YAAA",sourcesContent:[":root{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:calc(var(--swiper-navigation-size)/ 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(0px - (var(--swiper-navigation-size)/ 2));z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color,var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next.swiper-button-hidden,.swiper-button-prev.swiper-button-hidden{opacity:0;cursor:auto;pointer-events:none}.swiper-navigation-disabled .swiper-button-next,.swiper-navigation-disabled .swiper-button-prev{display:none!important}.swiper-button-next:after,.swiper-button-prev:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none!important;letter-spacing:0;font-variant:initial;line-height:1}.swiper-button-prev,.swiper-rtl .swiper-button-next{left:10px;right:auto}.swiper-button-prev:after,.swiper-rtl .swiper-button-next:after{content:'prev'}.swiper-button-next,.swiper-rtl .swiper-button-prev{right:10px;left:auto}.swiper-button-next:after,.swiper-rtl .swiper-button-prev:after{content:'next'}.swiper-button-lock{display:none}"],sourceRoot:""}]),t.Z=o},9258:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,".swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-pagination-disabled>.swiper-pagination,.swiper-pagination.swiper-pagination-disabled{display:none !important}.swiper-horizontal>.swiper-pagination-bullets,.swiper-pagination-bullets.swiper-pagination-horizontal,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{-webkit-transform:scale(0.33);transform:scale(0.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{-webkit-transform:scale(1);transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{-webkit-transform:scale(1);transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{-webkit-transform:scale(0.66);transform:scale(0.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{-webkit-transform:scale(0.33);transform:scale(0.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{-webkit-transform:scale(0.66);transform:scale(0.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{-webkit-transform:scale(0.33);transform:scale(0.33)}.swiper-pagination-bullet{width:var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));height:var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));display:inline-block;border-radius:50%;background:var(--swiper-pagination-bullet-inactive-color, #000);opacity:var(--swiper-pagination-bullet-inactive-opacity, 0.2)}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet:only-child{display:none !important}.swiper-pagination-bullet-active{opacity:var(--swiper-pagination-bullet-opacity, 1);background:var(--swiper-pagination-color, var(--swiper-theme-color))}.swiper-pagination-vertical.swiper-pagination-bullets,.swiper-vertical>.swiper-pagination-bullets{right:10px;top:50%;-webkit-transform:translate3d(0px, -50%, 0);transform:translate3d(0px, -50%, 0)}.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:var(--swiper-pagination-bullet-vertical-gap, 6px) 0;display:block}.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);width:8px}.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 var(--swiper-pagination-bullet-horizontal-gap, 4px)}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);white-space:nowrap}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-horizontal.swiper-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-progressbar{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color, var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;-webkit-transform:scale(0);transform:scale(0);-webkit-transform-origin:left top;transform-origin:left top}.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{-webkit-transform-origin:right top;transform-origin:right top}.swiper-horizontal>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-horizontal,.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite,.swiper-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:4px;left:0;top:0}.swiper-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-vertical,.swiper-vertical>.swiper-pagination-progressbar{width:4px;height:100%;left:0;top:0}.swiper-pagination-lock{display:none}","",{version:3,sources:["webpack://./node_modules/swiper/modules/pagination/pagination.min.css"],names:[],mappings:"AAAA,mBAAA,iBAAA,CAAA,iBAAA,CAAA,sBAAA,CAAA,sCAAA,CAAA,8BAAA,CAAA,UAAA,CAAA,4CAAA,SAAA,CAAA,6FAAA,uBAAA,CAAA,4JAAA,WAAA,CAAA,MAAA,CAAA,UAAA,CAAA,mCAAA,eAAA,CAAA,WAAA,CAAA,6DAAA,6BAAA,CAAA,qBAAA,CAAA,iBAAA,CAAA,oEAAA,0BAAA,CAAA,kBAAA,CAAA,yEAAA,0BAAA,CAAA,kBAAA,CAAA,yEAAA,6BAAA,CAAA,qBAAA,CAAA,8EAAA,6BAAA,CAAA,qBAAA,CAAA,yEAAA,6BAAA,CAAA,qBAAA,CAAA,8EAAA,6BAAA,CAAA,qBAAA,CAAA,0BAAA,sFAAA,CAAA,wFAAA,CAAA,oBAAA,CAAA,iBAAA,CAAA,+DAAA,CAAA,6DAAA,CAAA,gCAAA,WAAA,CAAA,QAAA,CAAA,SAAA,CAAA,eAAA,CAAA,uBAAA,CAAA,eAAA,CAAA,uDAAA,cAAA,CAAA,qCAAA,uBAAA,CAAA,iCAAA,kDAAA,CAAA,oEAAA,CAAA,kGAAA,UAAA,CAAA,OAAA,CAAA,2CAAA,CAAA,mCAAA,CAAA,sJAAA,0DAAA,CAAA,aAAA,CAAA,sKAAA,OAAA,CAAA,kCAAA,CAAA,0BAAA,CAAA,SAAA,CAAA,0NAAA,oBAAA,CAAA,gCAAA,CAAA,0JAAA,4DAAA,CAAA,0KAAA,QAAA,CAAA,kCAAA,CAAA,0BAAA,CAAA,kBAAA,CAAA,8NAAA,iCAAA,CAAA,2FAAA,kCAAA,CAAA,+BAAA,0BAAA,CAAA,iBAAA,CAAA,mEAAA,oEAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,0BAAA,CAAA,kBAAA,CAAA,iCAAA,CAAA,yBAAA,CAAA,+EAAA,kCAAA,CAAA,0BAAA,CAAA,sSAAA,UAAA,CAAA,UAAA,CAAA,MAAA,CAAA,KAAA,CAAA,sSAAA,SAAA,CAAA,WAAA,CAAA,MAAA,CAAA,KAAA,CAAA,wBAAA,YAAA",sourcesContent:[".swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-pagination-disabled>.swiper-pagination,.swiper-pagination.swiper-pagination-disabled{display:none!important}.swiper-horizontal>.swiper-pagination-bullets,.swiper-pagination-bullets.swiper-pagination-horizontal,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(.33)}.swiper-pagination-bullet{width:var(--swiper-pagination-bullet-width,var(--swiper-pagination-bullet-size,8px));height:var(--swiper-pagination-bullet-height,var(--swiper-pagination-bullet-size,8px));display:inline-block;border-radius:50%;background:var(--swiper-pagination-bullet-inactive-color,#000);opacity:var(--swiper-pagination-bullet-inactive-opacity, .2)}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet:only-child{display:none!important}.swiper-pagination-bullet-active{opacity:var(--swiper-pagination-bullet-opacity, 1);background:var(--swiper-pagination-color,var(--swiper-theme-color))}.swiper-pagination-vertical.swiper-pagination-bullets,.swiper-vertical>.swiper-pagination-bullets{right:10px;top:50%;transform:translate3d(0px,-50%,0)}.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:var(--swiper-pagination-bullet-vertical-gap,6px) 0;display:block}.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 var(--swiper-pagination-bullet-horizontal-gap,4px)}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-horizontal.swiper-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-progressbar{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color,var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-horizontal>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-horizontal,.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite,.swiper-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:4px;left:0;top:0}.swiper-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-vertical,.swiper-vertical>.swiper-pagination-progressbar{width:4px;height:100%;left:0;top:0}.swiper-pagination-lock{display:none}"],sourceRoot:""}]),t.Z=o},8885:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a),s=n(1667),l=n.n(s),u=new URL(n(9954),n.b),c=o()(i()),p=l()(u);c.push([e.id,"@font-face{font-family:swiper-icons;src:url("+p+');font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:-webkit-transform;transition-property:transform;transition-property:transform, -webkit-transform;box-sizing:content-box}.swiper-android .swiper-slide,.swiper-wrapper{-webkit-transform:translate3d(0px, 0, 0);transform:translate3d(0px, 0, 0)}.swiper-pointer-events{touch-action:pan-y}.swiper-pointer-events.swiper-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:-webkit-transform;transition-property:transform;transition-property:transform, -webkit-transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-autoheight,.swiper-autoheight .swiper-slide{height:auto}.swiper-autoheight .swiper-wrapper{align-items:flex-start;transition-property:height,-webkit-transform;transition-property:transform,height;transition-property:transform,height,-webkit-transform}.swiper-backface-hidden .swiper-slide{-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-3d,.swiper-3d.swiper-css-mode .swiper-wrapper{-webkit-perspective:1200px;perspective:1200px}.swiper-3d .swiper-cube-shadow,.swiper-3d .swiper-slide,.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-wrapper{-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-3d .swiper-slide-shadow{background:rgba(0,0,0,.15)}.swiper-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-horizontal.swiper-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-vertical.swiper-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}.swiper-centered>.swiper-wrapper::before{content:"";flex-shrink:0;order:9999}.swiper-centered.swiper-horizontal>.swiper-wrapper>.swiper-slide:first-child{-webkit-margin-start:var(--swiper-centered-offset-before);margin-inline-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-horizontal>.swiper-wrapper::before{height:100%;min-height:1px;width:var(--swiper-centered-offset-after)}.swiper-centered.swiper-vertical>.swiper-wrapper>.swiper-slide:first-child{-webkit-margin-before:var(--swiper-centered-offset-before);margin-block-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-vertical>.swiper-wrapper::before{width:100%;min-width:1px;height:var(--swiper-centered-offset-after)}.swiper-centered>.swiper-wrapper>.swiper-slide{scroll-snap-align:center center}',"",{version:3,sources:["webpack://./node_modules/swiper/swiper.min.css"],names:[],mappings:"AAYA,WAAA,wBAAA,CAAA,2CAAA,CAAA,eAAA,CAAA,iBAAA,CAAA,MAAA,4BAAA,CAAA,QAAA,gBAAA,CAAA,iBAAA,CAAA,iBAAA,CAAA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,SAAA,CAAA,iCAAA,qBAAA,CAAA,gBAAA,iBAAA,CAAA,UAAA,CAAA,WAAA,CAAA,SAAA,CAAA,YAAA,CAAA,qCAAA,CAAA,6BAAA,CAAA,gDAAA,CAAA,sBAAA,CAAA,8CAAA,wCAAA,CAAA,gCAAA,CAAA,uBAAA,kBAAA,CAAA,uCAAA,kBAAA,CAAA,cAAA,aAAA,CAAA,UAAA,CAAA,WAAA,CAAA,iBAAA,CAAA,qCAAA,CAAA,6BAAA,CAAA,gDAAA,CAAA,8BAAA,iBAAA,CAAA,oDAAA,WAAA,CAAA,mCAAA,sBAAA,CAAA,4CAAA,CAAA,oCAAA,CAAA,sDAAA,CAAA,sCAAA,+BAAA,CAAA,uBAAA,CAAA,kCAAA,CAAA,0BAAA,CAAA,sDAAA,0BAAA,CAAA,kBAAA,CAAA,yQAAA,mCAAA,CAAA,2BAAA,CAAA,sLAAA,iBAAA,CAAA,MAAA,CAAA,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,gCAAA,0BAAA,CAAA,qCAAA,+EAAA,CAAA,sCAAA,gFAAA,CAAA,oCAAA,8EAAA,CAAA,uCAAA,iFAAA,CAAA,iCAAA,aAAA,CAAA,oBAAA,CAAA,uBAAA,CAAA,oDAAA,YAAA,CAAA,+CAAA,6BAAA,CAAA,mDAAA,4BAAA,CAAA,iDAAA,4BAAA,CAAA,yCAAA,UAAA,CAAA,aAAA,CAAA,UAAA,CAAA,6EAAA,yDAAA,CAAA,wDAAA,CAAA,2DAAA,WAAA,CAAA,cAAA,CAAA,yCAAA,CAAA,2EAAA,0DAAA,CAAA,uDAAA,CAAA,yDAAA,UAAA,CAAA,aAAA,CAAA,0CAAA,CAAA,+CAAA,+BAAA",sourcesContent:["/**\n * Swiper 8.4.5\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2022 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: November 21, 2022\n */\n\n@font-face{font-family:swiper-icons;src:url('data:application/font-woff;charset=utf-8;base64, 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');font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-pointer-events{touch-action:pan-y}.swiper-pointer-events.swiper-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-autoheight,.swiper-autoheight .swiper-slide{height:auto}.swiper-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-backface-hidden .swiper-slide{transform:translateZ(0);-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-3d,.swiper-3d.swiper-css-mode .swiper-wrapper{perspective:1200px}.swiper-3d .swiper-cube-shadow,.swiper-3d .swiper-slide,.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-3d .swiper-slide-shadow{background:rgba(0,0,0,.15)}.swiper-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-horizontal.swiper-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-vertical.swiper-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}.swiper-centered>.swiper-wrapper::before{content:'';flex-shrink:0;order:9999}.swiper-centered.swiper-horizontal>.swiper-wrapper>.swiper-slide:first-child{margin-inline-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-horizontal>.swiper-wrapper::before{height:100%;min-height:1px;width:var(--swiper-centered-offset-after)}.swiper-centered.swiper-vertical>.swiper-wrapper>.swiper-slide:first-child{margin-block-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-vertical>.swiper-wrapper::before{width:100%;min-width:1px;height:var(--swiper-centered-offset-after)}.swiper-centered>.swiper-wrapper>.swiper-slide{scroll-snap-align:center center}"],sourceRoot:""}]),t.Z=c},3533:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,"body{background-color:#f4f5f9}","",{version:3,sources:["webpack://./src/App.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,KACC,wBCDI",sourcesContent:['@import "./styles/vars";\r\n\r\nbody {\r\n\tbackground-color: $bg;\r\n}\r\n','@import "https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap";\r\n\r\n$bg: #F4F5F9;\r\n$lines: #42567A;\r\n$main-text: #42567A;\r\n$slider-accent: #3877EE;\r\n$accent-first: #5D5FEF;\r\n$accent-second: #EF5DA8;\r\n$accent-gradient: linear-gradient(180deg, rgb(56 119 238 / 100%) 0%, rgb(239 93 168 / 100%) 80%);\r\n\r\n// fonts:\r\n$main-font: "PT Sans", sans-serif;\r\n$accent-font: "Bebas Neue", cursive;\r\n'],sourceRoot:""}]),t.Z=o},4633:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,".dykx5XSvK398yFHyXHGT{display:flex;box-sizing:content-box;align-items:center;justify-content:center;width:50px;height:50px;padding:0;transition:box-shadow 300ms,opacity 300ms;border-radius:50%;cursor:pointer}@media screen and (max-width: 525px){.dykx5XSvK398yFHyXHGT{width:25px;height:25px}.dykx5XSvK398yFHyXHGT svg{width:5px}}.dykx5XSvK398yFHyXHGT.tWsW7HOQD1Ly4AQpDX00{border:1px solid rgba(66,86,122,.5)}.dykx5XSvK398yFHyXHGT.tWsW7HOQD1Ly4AQpDX00 svg path{stroke:#42567a}.dykx5XSvK398yFHyXHGT.tWsW7HOQD1Ly4AQpDX00:hover,.dykx5XSvK398yFHyXHGT.tWsW7HOQD1Ly4AQpDX00:focus{box-shadow:0 0 15px rgba(66,86,122,.15)}.dykx5XSvK398yFHyXHGT.tWsW7HOQD1Ly4AQpDX00:disabled{opacity:.5;pointer-events:none}.dykx5XSvK398yFHyXHGT.aQJMqckcBe8wZLZS4RMy{box-shadow:0 0 15px rgba(56,119,238,.15)}.dykx5XSvK398yFHyXHGT.aQJMqckcBe8wZLZS4RMy svg path{stroke:#3877ee}.dykx5XSvK398yFHyXHGT.aQJMqckcBe8wZLZS4RMy:hover,.dykx5XSvK398yFHyXHGT.aQJMqckcBe8wZLZS4RMy:focus{box-shadow:0 0 15px rgba(56,119,238,.3)}.dykx5XSvK398yFHyXHGT.aQJMqckcBe8wZLZS4RMy:disabled{opacity:0;pointer-events:none}.dykx5XSvK398yFHyXHGT.kNugnre9QztqEe7B8AFQ svg{-webkit-transform:rotate(180deg);transform:rotate(180deg)}","",{version:3,sources:["webpack://./src/components/ArrowButton/style.module.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,sBACC,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,sBAAA,CACA,UAAA,CACA,WAAA,CACA,SAAA,CACA,yCAAA,CACA,iBAAA,CACA,cAAA,CAEA,qCAZD,sBAaE,UAAA,CACA,WAAA,CAEA,0BACC,SAAA,CAAA,CAKH,2CACC,mCAAA,CAGC,oDACC,cCzBS,CD6BX,kGAEC,uCAAA,CAGD,oDACC,UAAA,CACA,mBAAA,CAIF,2CACC,wCAAA,CAGC,oDACC,cC5Ca,CDgDf,kGAEC,uCAAA,CAGD,oDACC,SAAA,CACA,mBAAA,CAKD,+CACC,gCAAA,CAAA,wBAAA",sourcesContent:['@import "../../styles/vars";\r\n\r\n.arrowBtn {\r\n\tdisplay: flex;\r\n\tbox-sizing: content-box;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\twidth: 50px;\r\n\theight: 50px;\r\n\tpadding: 0;\r\n\ttransition: box-shadow 300ms, opacity 300ms;\r\n\tborder-radius: 50%;\r\n\tcursor: pointer;\r\n\r\n\t@media screen and (max-width: 525px) {\r\n\t\twidth: 25px;\r\n\t\theight: 25px;\r\n\r\n\t\tsvg {\r\n\t\t\twidth: 5px;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.arrowBtn.gray {\r\n\tborder: 1px solid rgba($main-text, $alpha: 0.5);\r\n\r\n\tsvg {\r\n\t\tpath {\r\n\t\t\tstroke: $main-text;\r\n\t\t}\r\n\t}\r\n\r\n\t&:hover,\r\n\t&:focus {\r\n\t\tbox-shadow: 0 0 15px rgba($main-text, $alpha: 0.15);\r\n\t}\r\n\r\n\t&:disabled {\r\n\t\topacity: 0.5;\r\n\t\tpointer-events: none;\r\n\t}\r\n}\r\n\r\n.arrowBtn.blue {\r\n\tbox-shadow: 0 0 15px rgba($slider-accent, $alpha: 0.15);\r\n\r\n\tsvg {\r\n\t\tpath {\r\n\t\t\tstroke: $slider-accent;\r\n\t\t}\r\n\t}\r\n\r\n\t&:hover,\r\n\t&:focus {\r\n\t\tbox-shadow: 0 0 15px rgba($slider-accent, $alpha: 0.3);\r\n\t}\r\n\r\n\t&:disabled {\r\n\t\topacity: 0;\r\n\t\tpointer-events: none;\r\n\t}\r\n}\r\n\r\n.arrowBtn.left {\r\n\tsvg {\r\n\t\ttransform: rotate(180deg);\r\n\t}\r\n}\r\n','@import "https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap";\r\n\r\n$bg: #F4F5F9;\r\n$lines: #42567A;\r\n$main-text: #42567A;\r\n$slider-accent: #3877EE;\r\n$accent-first: #5D5FEF;\r\n$accent-second: #EF5DA8;\r\n$accent-gradient: linear-gradient(180deg, rgb(56 119 238 / 100%) 0%, rgb(239 93 168 / 100%) 80%);\r\n\r\n// fonts:\r\n$main-font: "PT Sans", sans-serif;\r\n$accent-font: "Bebas Neue", cursive;\r\n'],sourceRoot:""}]),o.locals={arrowBtn:"dykx5XSvK398yFHyXHGT",gray:"tWsW7HOQD1Ly4AQpDX00",blue:"aQJMqckcBe8wZLZS4RMy",left:"kNugnre9QztqEe7B8AFQ"},t.Z=o},7912:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,".VmYLf2EYfeypf5yNoYt4{max-width:1470px;margin:0 auto;padding:15px}@media screen and (max-width: 525px){.VmYLf2EYfeypf5yNoYt4{padding:10px}}","",{version:3,sources:["webpack://./src/components/Container/style.module.scss"],names:[],mappings:"AAAA,sBACC,gBAAA,CACA,aAAA,CACA,YAAA,CAEA,qCALD,sBAME,YAAA,CAAA",sourcesContent:[".container {\r\n\tmax-width: 1470px;\r\n\tmargin: 0 auto;\r\n\tpadding: 15px;\r\n\r\n\t@media screen and (max-width: 525px) {\r\n\t\tpadding: 10px;\r\n\t}\r\n}\r\n"],sourceRoot:""}]),o.locals={container:"VmYLf2EYfeypf5yNoYt4"},t.Z=o},2431:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,'.Vr_F8sdAgd7FDnLvJ27g{font-family:"PT Sans",sans-serif;font-size:200px;font-weight:bold;letter-spacing:-2%;line-height:1.6}@media screen and (max-width: 1060px){.Vr_F8sdAgd7FDnLvJ27g{font-size:128px}}@media screen and (max-width: 725px){.Vr_F8sdAgd7FDnLvJ27g{font-size:72px}}@media screen and (max-width: 525px){.Vr_F8sdAgd7FDnLvJ27g{font-size:56px}}.R5jmpj15jG_FLoCV7OIx{color:#5d5fef}.zuG5yJad9UFsSLfISEus{color:#ef5da8}',"",{version:3,sources:["webpack://./src/components/Countdown/style.module.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,sBACC,gCCQW,CDPX,eAAA,CACA,gBAAA,CACA,kBAAA,CACA,eAAA,CAEA,sCAPD,sBAQE,eAAA,CAAA,CAGD,qCAXD,sBAYE,cAAA,CAAA,CAGD,qCAfD,sBAgBE,cAAA,CAAA,CAIF,sBACC,aCjBc,CDoBf,sBACC,aCpBe",sourcesContent:['@import "../../styles/vars";\r\n\r\n.countdown {\r\n\tfont-family: $main-font;\r\n\tfont-size: 200px;\r\n\tfont-weight: bold;\r\n\tletter-spacing: -2%;\r\n\tline-height: 1.6;\r\n\r\n\t@media screen and (max-width: 1060px) {\r\n\t\tfont-size: 128px;\r\n\t}\r\n\r\n\t@media screen and (max-width: 725px) {\r\n\t\tfont-size: 72px;\r\n\t}\r\n\r\n\t@media screen and (max-width: 525px) {\r\n\t\tfont-size: 56px;\r\n\t}\r\n}\r\n\r\n.accentFirst {\r\n\tcolor: $accent-first;\r\n}\r\n\r\n.accentSecond {\r\n\tcolor: $accent-second;\r\n}\r\n','@import "https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap";\r\n\r\n$bg: #F4F5F9;\r\n$lines: #42567A;\r\n$main-text: #42567A;\r\n$slider-accent: #3877EE;\r\n$accent-first: #5D5FEF;\r\n$accent-second: #EF5DA8;\r\n$accent-gradient: linear-gradient(180deg, rgb(56 119 238 / 100%) 0%, rgb(239 93 168 / 100%) 80%);\r\n\r\n// fonts:\r\n$main-font: "PT Sans", sans-serif;\r\n$accent-font: "Bebas Neue", cursive;\r\n'],sourceRoot:""}]),o.locals={countdown:"Vr_F8sdAgd7FDnLvJ27g",accentFirst:"R5jmpj15jG_FLoCV7OIx",accentSecond:"zuG5yJad9UFsSLfISEus"},t.Z=o},4880:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,'.f7PXm7GQhZzxMsIU5YfZ{position:relative;padding:50px 0;border-right:1px solid rgba(66,86,122,.1);border-left:1px solid rgba(66,86,122,.1);font-family:"PT Sans",sans-serif}.f7PXm7GQhZzxMsIU5YfZ::before{content:"";display:block;position:absolute;z-index:0;top:0;right:0;bottom:0;left:0;width:1px;height:100%;margin:auto;background-color:rgba(66,86,122,.1)}@media screen and (max-width: 525px){.f7PXm7GQhZzxMsIU5YfZ::before{display:none}}.O5BWyyLvXT41dvig2_pg{position:relative}.O5BWyyLvXT41dvig2_pg::after{content:"";display:block;position:absolute;z-index:0;top:0;bottom:0;width:100%;height:1px;margin:auto;background-color:rgba(66,86,122,.1)}@media screen and (max-width: 525px){.O5BWyyLvXT41dvig2_pg::after{display:none}}.iECC4ux9pB7RRgmnkoGK{display:flex;position:relative;z-index:10;align-items:center;justify-content:center;margin-bottom:137px}.iECC4ux9pB7RRgmnkoGK div:first-child{margin-right:calc(25px + 55*(100vw - 320px)/1120)}.cd3c3d_lUrBsGSmPK2OO{margin-bottom:56px;margin-left:80px}@media screen and (max-width: 725px){.f7PXm7GQhZzxMsIU5YfZ{padding:30px 0}.iECC4ux9pB7RRgmnkoGK{margin-top:100px;margin-bottom:100px}.cd3c3d_lUrBsGSmPK2OO{margin-left:15px}}@media screen and (max-width: 525px){.f7PXm7GQhZzxMsIU5YfZ{padding:20px 0;border:none}.iECC4ux9pB7RRgmnkoGK{margin-top:0;margin-bottom:0;padding-bottom:56px}.WB8zaCMD0pEGRT42cP88{display:flex;flex-direction:column-reverse}.cd3c3d_lUrBsGSmPK2OO{margin-top:36px;margin-bottom:0;margin-left:0}}',"",{version:3,sources:["webpack://./src/components/DatesCarousel/style.module.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,sBACC,iBAAA,CACA,cAAA,CACA,yCAAA,CACA,wCAAA,CACA,gCCIW,CDFX,8BACC,UAAA,CACA,aAAA,CACA,iBAAA,CACA,SAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CACA,SAAA,CACA,WAAA,CACA,WAAA,CACA,mCAAA,CAEA,qCAdD,8BAeE,YAAA,CAAA,CAIF,sBACC,iBAAA,CAEA,6BACC,UAAA,CACA,aAAA,CACA,iBAAA,CACA,SAAA,CACA,KAAA,CACA,QAAA,CACA,UAAA,CACA,UAAA,CACA,WAAA,CACA,mCAAA,CAEA,qCAZD,6BAaE,YAAA,CAAA,CAKH,sBACC,YAAA,CACA,iBAAA,CACA,UAAA,CACA,kBAAA,CACA,sBAAA,CACA,mBAAA,CAEA,sCACC,iDAAA,CAIF,sBACC,kBAAA,CACA,gBAAA,CAGD,qCAjED,sBAkEE,cAAA,CAEA,sBACC,gBAAA,CACA,mBAAA,CAGD,sBACC,gBAAA,CAAA,CAIF,qCA9ED,sBA+EE,cAAA,CACA,WAAA,CAEA,sBACC,YAAA,CACA,eAAA,CACA,mBAAA,CAGD,sBACC,YAAA,CACA,6BAAA,CAGD,sBACC,eAAA,CACA,eAAA,CACA,aAAA,CAAA",sourcesContent:['@import "../../styles/vars";\r\n\r\n.carousel {\r\n\tposition: relative;\r\n\tpadding: 50px 0;\r\n\tborder-right: 1px solid rgba($lines, $alpha: 0.1);\r\n\tborder-left: 1px solid rgba($lines, $alpha: 0.1);\r\n\tfont-family: $main-font;\r\n\r\n\t&::before {\r\n\t\tcontent: "";\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\tz-index: 0;\r\n\t\ttop: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 1px;\r\n\t\theight: 100%;\r\n\t\tmargin: auto;\r\n\t\tbackground-color: rgba($lines, $alpha: 0.1);\r\n\r\n\t\t@media screen and (max-width: 525px) {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\t}\r\n\r\n\t&DataWrapper {\r\n\t\tposition: relative;\r\n\r\n\t\t&::after {\r\n\t\t\tcontent: "";\r\n\t\t\tdisplay: block;\r\n\t\t\tposition: absolute;\r\n\t\t\tz-index: 0;\r\n\t\t\ttop: 0;\r\n\t\t\tbottom: 0;\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 1px;\r\n\t\t\tmargin: auto;\r\n\t\t\tbackground-color: rgba($lines, $alpha: 0.1);\r\n\r\n\t\t\t@media screen and (max-width: 525px) {\r\n\t\t\t\tdisplay: none;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t&CountDown {\r\n\t\tdisplay: flex;\r\n\t\tposition: relative;\r\n\t\tz-index: 10;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tmargin-bottom: 137px;\r\n\r\n\t\tdiv:first-child {\r\n\t\t\tmargin-right: calc(25px + (80 - 25) * ((100vw - 320px) / (1440 - 320)));\r\n\t\t}\r\n\t}\r\n\r\n\t&Controls {\r\n\t\tmargin-bottom: 56px;\r\n\t\tmargin-left: 80px;\r\n\t}\r\n\r\n\t@media screen and (max-width: 725px) {\r\n\t\tpadding: 30px 0;\r\n\r\n\t\t&CountDown {\r\n\t\t\tmargin-top: 100px;\r\n\t\t\tmargin-bottom: 100px;\r\n\t\t}\r\n\r\n\t\t&Controls {\r\n\t\t\tmargin-left: 15px;\r\n\t\t}\r\n\t}\r\n\r\n\t@media screen and (max-width: 525px) {\r\n\t\tpadding: 20px 0;\r\n\t\tborder: none;\r\n\r\n\t\t&CountDown {\r\n\t\t\tmargin-top: 0;\r\n\t\t\tmargin-bottom: 0;\r\n\t\t\tpadding-bottom: 56px;\r\n\t\t}\r\n\r\n\t\t&SliderWrapper {\r\n\t\t\tdisplay: flex;\r\n\t\t\tflex-direction: column-reverse;\r\n\t\t}\r\n\r\n\t\t&Controls {\r\n\t\t\tmargin-top: 36px;\r\n\t\t\tmargin-bottom: 0;\r\n\t\t\tmargin-left: 0;\r\n\t\t}\r\n\t}\r\n}\r\n','@import "https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap";\r\n\r\n$bg: #F4F5F9;\r\n$lines: #42567A;\r\n$main-text: #42567A;\r\n$slider-accent: #3877EE;\r\n$accent-first: #5D5FEF;\r\n$accent-second: #EF5DA8;\r\n$accent-gradient: linear-gradient(180deg, rgb(56 119 238 / 100%) 0%, rgb(239 93 168 / 100%) 80%);\r\n\r\n// fonts:\r\n$main-font: "PT Sans", sans-serif;\r\n$accent-font: "Bebas Neue", cursive;\r\n'],sourceRoot:""}]),o.locals={carousel:"f7PXm7GQhZzxMsIU5YfZ",carouselDataWrapper:"O5BWyyLvXT41dvig2_pg",carouselCountDown:"iECC4ux9pB7RRgmnkoGK",carouselControls:"cd3c3d_lUrBsGSmPK2OO",carouselSliderWrapper:"WB8zaCMD0pEGRT42cP88"},t.Z=o},7428:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,'.TRJ2sqqCvRVz0MS9bfpQ{--opacity: 0;display:inline-flex;align-items:center;justify-content:center;width:56px;height:56px;padding:0;overflow:hidden;-webkit-transform:scale(0.11);transform:scale(0.11);border-radius:50%;background-color:#42567a;color:#42567a;font-family:"PT Sans",sans-serif;font-size:20px;cursor:pointer}.LjaR_54ho6eMtkO4xQyi{position:relative;overflow:visible}.LjaR_54ho6eMtkO4xQyi::after{content:attr(data-label);position:absolute;left:4.75rem;opacity:var(--opacity);font-size:1.25rem;font-weight:bold;line-height:1.16;cursor:default}',"",{version:3,sources:["webpack://./src/components/DotButton/style.module.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,sBACC,YAAA,CAEA,mBAAA,CACA,kBAAA,CACA,sBAAA,CACA,UAAA,CACA,WAAA,CACA,SAAA,CACA,eAAA,CACA,6BAAA,CAAA,qBAAA,CACA,iBAAA,CACA,wBCVW,CDWX,aCXW,CDYX,gCCLW,CDMX,cAAA,CACA,cAAA,CAEA,sBACC,iBAAA,CACA,gBAAA,CAEA,6BACC,wBAAA,CACA,iBAAA,CACA,YAAA,CACA,sBAAA,CACA,iBAAA,CACA,gBAAA,CACA,gBAAA,CACA,cAAA",sourcesContent:['@import "../../styles/vars";\r\n\r\n.dotBtn {\r\n\t--opacity: 0;\r\n\r\n\tdisplay: inline-flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\twidth: 56px;\r\n\theight: 56px;\r\n\tpadding: 0;\r\n\toverflow: hidden;\r\n\ttransform: scale(0.11);\r\n\tborder-radius: 50%;\r\n\tbackground-color: $main-text;\r\n\tcolor: $main-text;\r\n\tfont-family: $main-font;\r\n\tfont-size: 20px;\r\n\tcursor: pointer;\r\n\r\n\t&_active {\r\n\t\tposition: relative;\r\n\t\toverflow: visible;\r\n\r\n\t\t&::after {\r\n\t\t\tcontent: attr(data-label);\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 4.75rem;\r\n\t\t\topacity: var(--opacity);\r\n\t\t\tfont-size: 1.25rem;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tline-height: 1.16;\r\n\t\t\tcursor: default;\r\n\t\t}\r\n\t}\r\n}\r\n','@import "https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap";\r\n\r\n$bg: #F4F5F9;\r\n$lines: #42567A;\r\n$main-text: #42567A;\r\n$slider-accent: #3877EE;\r\n$accent-first: #5D5FEF;\r\n$accent-second: #EF5DA8;\r\n$accent-gradient: linear-gradient(180deg, rgb(56 119 238 / 100%) 0%, rgb(239 93 168 / 100%) 80%);\r\n\r\n// fonts:\r\n$main-font: "PT Sans", sans-serif;\r\n$accent-font: "Bebas Neue", cursive;\r\n'],sourceRoot:""}]),o.locals={dotBtn:"TRJ2sqqCvRVz0MS9bfpQ",dotBtn_active:"LjaR_54ho6eMtkO4xQyi"},t.Z=o},154:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,".pbuNpXVJb9klrdGdLQgj{display:flex;position:absolute;z-index:11;top:0;right:0;bottom:0;left:0;align-items:center;justify-content:center;width:524px;height:524px;margin:auto;border:1px solid rgba(66,86,122,.2);border-radius:50%}.fZNZlmhdVq9nPreHw1jM{position:absolute}@media screen and (max-width: 1060px){.pbuNpXVJb9klrdGdLQgj{width:330px;height:330px}}","",{version:3,sources:["webpack://./src/components/DotsCircle/style.module.scss"],names:[],mappings:"AAEA,sBACC,YAAA,CACA,iBAAA,CACA,UAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CACA,kBAAA,CACA,sBAAA,CACA,WAAA,CACA,YAAA,CACA,WAAA,CACA,mCAAA,CACA,iBAAA,CAEA,sBACC,iBAAA,CAGD,sCApBD,sBAqBE,WAAA,CACA,YAAA,CAAA",sourcesContent:['@import "../../styles/vars";\r\n\r\n.dots {\r\n\tdisplay: flex;\r\n\tposition: absolute;\r\n\tz-index: 11;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\twidth: 524px;\r\n\theight: 524px;\r\n\tmargin: auto;\r\n\tborder: 1px solid rgba($main-text, $alpha: 0.2);\r\n\tborder-radius: 50%;\r\n\r\n\t&Item {\r\n\t\tposition: absolute;\r\n\t}\r\n\r\n\t@media screen and (max-width: 1060px) {\r\n\t\twidth: 330px;\r\n\t\theight: 330px;\r\n\t}\r\n}\r\n'],sourceRoot:""}]),o.locals={dots:"pbuNpXVJb9klrdGdLQgj",dotsItem:"fZNZlmhdVq9nPreHw1jM"},t.Z=o},697:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,'.CiR40mVVaSI8Zq6Gm6zj{max-width:400px}.wI3BM20FRW9336VGRC6H{margin-bottom:15px;color:#3877ee;font-family:"Bebas Neue",cursive;font-size:25px;line-height:1.2}.z5S7mPk9ozPuO3Yc9X3h{color:#42567a;font-family:"PT Sans",sans-serif;font-size:20px;line-height:1.16}@media screen and (max-width: 525px){.CiR40mVVaSI8Zq6Gm6zj{max-width:180px}.wI3BM20FRW9336VGRC6H{font-size:16px}.z5S7mPk9ozPuO3Yc9X3h{font-size:14px}}',"",{version:3,sources:["webpack://./src/components/EventSlide/style.module.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,sBACC,eAAA,CAEA,sBACC,kBAAA,CACA,aCFc,CDGd,gCCIY,CDHZ,cAAA,CACA,eAAA,CAGD,sBACC,aCVU,CDWV,gCCJU,CDKV,cAAA,CACA,gBAAA,CAGD,qCAlBD,sBAmBE,eAAA,CAEA,sBACC,cAAA,CAGD,sBACC,cAAA,CAAA",sourcesContent:['@import "../../styles/vars";\r\n\r\n.slide {\r\n\tmax-width: 400px;\r\n\r\n\t&Title {\r\n\t\tmargin-bottom: 15px;\r\n\t\tcolor: $slider-accent;\r\n\t\tfont-family: $accent-font;\r\n\t\tfont-size: 25px;\r\n\t\tline-height: 1.2;\r\n\t}\r\n\r\n\t&Text {\r\n\t\tcolor: $main-text;\r\n\t\tfont-family: $main-font;\r\n\t\tfont-size: 20px;\r\n\t\tline-height: 1.16;\r\n\t}\r\n\r\n\t@media screen and (max-width: 525px) {\r\n\t\tmax-width: 180px;\r\n\r\n\t\t&Title {\r\n\t\t\tfont-size: 16px;\r\n\t\t}\r\n\r\n\t\t&Text {\r\n\t\t\tfont-size: 14px;\r\n\t\t}\r\n\t}\r\n}\r\n','@import "https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap";\r\n\r\n$bg: #F4F5F9;\r\n$lines: #42567A;\r\n$main-text: #42567A;\r\n$slider-accent: #3877EE;\r\n$accent-first: #5D5FEF;\r\n$accent-second: #EF5DA8;\r\n$accent-gradient: linear-gradient(180deg, rgb(56 119 238 / 100%) 0%, rgb(239 93 168 / 100%) 80%);\r\n\r\n// fonts:\r\n$main-font: "PT Sans", sans-serif;\r\n$accent-font: "Bebas Neue", cursive;\r\n'],sourceRoot:""}]),o.locals={slide:"CiR40mVVaSI8Zq6Gm6zj",slideTitle:"wI3BM20FRW9336VGRC6H",slideText:"z5S7mPk9ozPuO3Yc9X3h"},t.Z=o},2270:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,".swiper-pagination-bullet{width:6px;height:6px;transition:all 300ms;background-color:rgba(66,86,122,.7)}.swiper-pagination-bullet-active{background-color:#42567a}","",{version:3,sources:["webpack://./src/components/EventSlider/sliderStyle.scss"],names:[],mappings:"AAEA,0BACC,SAAA,CACA,UAAA,CACA,oBAAA,CACA,mCAAA,CAGD,iCACC,wBAAA",sourcesContent:['@import "../../styles/vars";\r\n\r\n.swiper-pagination-bullet {\r\n\twidth: 6px;\r\n\theight: 6px;\r\n\ttransition: all 300ms;\r\n\tbackground-color: rgba($main-text, $alpha: 0.7);\r\n}\r\n\r\n.swiper-pagination-bullet-active {\r\n\tbackground-color: rgba($main-text, $alpha: 1);\r\n}\r\n'],sourceRoot:""}]),t.Z=o},3862:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,".owh8i0Ia9RAryeFg91tM{display:flex;position:relative;align-items:center;width:100%}.L5QV_59fuas6Vqa33Bv8{margin-right:80px;margin-left:80px;overflow:hidden}.tNj4Wrml4Ve8L9oB6yN6{display:none}.zULebpM47ryOeX6PO0OX{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.b0GmrWF_SqGFEP_NCVp3{background-color:#7fffd4}.h0Vf0OGHddr3yzL5vSBQ,.ujwn9NzogKhA_mxqc5SG{position:absolute;z-index:10;flex-shrink:0;width:2.5rem !important;height:2.5rem !important}.h0Vf0OGHddr3yzL5vSBQ{left:20px;opacity:0}.ujwn9NzogKhA_mxqc5SG{right:20px}@media screen and (max-width: 725px){.L5QV_59fuas6Vqa33Bv8{margin-right:15px;margin-left:15px}.h0Vf0OGHddr3yzL5vSBQ,.ujwn9NzogKhA_mxqc5SG{display:none}}@media screen and (max-width: 525px){.L5QV_59fuas6Vqa33Bv8{margin-right:0;margin-left:0;padding-top:20px;padding-bottom:20px;border-top:1px solid #c7cdd9}.tNj4Wrml4Ve8L9oB6yN6{display:block;position:absolute;top:-25px;left:0;color:#42567a}}","",{version:3,sources:["webpack://./src/components/EventSlider/style.module.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,sBACC,YAAA,CACA,iBAAA,CACA,kBAAA,CACA,UAAA,CAEA,sBACC,iBAAA,CACA,gBAAA,CACA,eAAA,CAGD,sBACC,YAAA,CAGD,sBACC,yBAAA,CAAA,sBAAA,CAAA,iBAAA,CAGD,sBACC,wBAAA,CAGD,4CAEC,iBAAA,CACA,UAAA,CACA,aAAA,CACA,uBAAA,CACA,wBAAA,CAGD,sBACC,SAAA,CACA,SAAA,CAGD,sBACC,UAAA,CAGD,qCACC,sBACC,iBAAA,CACA,gBAAA,CAGD,4CAEC,YAAA,CAAA,CAIF,qCACC,sBACC,cAAA,CACA,aAAA,CACA,gBAAA,CACA,mBAAA,CACA,4BAAA,CAGD,sBACC,aAAA,CACA,iBAAA,CACA,SAAA,CACA,MAAA,CACA,aClES,CAAA",sourcesContent:['@import "../../styles/vars";\r\n\r\n.slider {\r\n\tdisplay: flex;\r\n\tposition: relative;\r\n\talign-items: center;\r\n\twidth: 100%;\r\n\r\n\t&Wrapper {\r\n\t\tmargin-right: 80px;\r\n\t\tmargin-left: 80px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t&Topic {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t&Slide {\r\n\t\twidth: fit-content;\r\n\t}\r\n\r\n\t&Pag {\r\n\t\tbackground-color: aquamarine;\r\n\t}\r\n\r\n\t&Nav_prev,\r\n\t&Nav_next {\r\n\t\tposition: absolute;\r\n\t\tz-index: 10;\r\n\t\tflex-shrink: 0;\r\n\t\twidth: 2.5rem !important;\r\n\t\theight: 2.5rem !important;\r\n\t}\r\n\r\n\t&Nav_prev {\r\n\t\tleft: 20px;\r\n\t\topacity: 0;\r\n\t}\r\n\r\n\t&Nav_next {\r\n\t\tright: 20px;\r\n\t}\r\n\r\n\t@media screen and (max-width: 725px) {\r\n\t\t&Wrapper {\r\n\t\t\tmargin-right: 15px;\r\n\t\t\tmargin-left: 15px;\r\n\t\t}\r\n\r\n\t\t&Nav_prev,\r\n\t\t&Nav_next {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\t}\r\n\r\n\t@media screen and (max-width: 525px) {\r\n\t\t&Wrapper {\r\n\t\t\tmargin-right: 0;\r\n\t\t\tmargin-left: 0;\r\n\t\t\tpadding-top: 20px;\r\n\t\t\tpadding-bottom: 20px;\r\n\t\t\tborder-top: 1px solid #C7CDD9;\r\n\t\t}\r\n\r\n\t\t&Topic {\r\n\t\t\tdisplay: block;\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: -25px;\r\n\t\t\tleft: 0;\r\n\t\t\tcolor: $main-text;\r\n\t\t}\r\n\t}\r\n}\r\n','@import "https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap";\r\n\r\n$bg: #F4F5F9;\r\n$lines: #42567A;\r\n$main-text: #42567A;\r\n$slider-accent: #3877EE;\r\n$accent-first: #5D5FEF;\r\n$accent-second: #EF5DA8;\r\n$accent-gradient: linear-gradient(180deg, rgb(56 119 238 / 100%) 0%, rgb(239 93 168 / 100%) 80%);\r\n\r\n// fonts:\r\n$main-font: "PT Sans", sans-serif;\r\n$accent-font: "Bebas Neue", cursive;\r\n'],sourceRoot:""}]),o.locals={slider:"owh8i0Ia9RAryeFg91tM",sliderWrapper:"L5QV_59fuas6Vqa33Bv8",sliderTopic:"tNj4Wrml4Ve8L9oB6yN6",sliderSlide:"zULebpM47ryOeX6PO0OX",sliderPag:"b0GmrWF_SqGFEP_NCVp3",sliderNav_prev:"h0Vf0OGHddr3yzL5vSBQ",sliderNav_next:"ujwn9NzogKhA_mxqc5SG"},t.Z=o},3359:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,".K5tCeAx4SFqdOEltIhio{display:grid;grid-template-columns:auto 1fr auto 2fr;color:#42567a}.SpjekxaVvm9sSO0mg0yY{grid-column:1;margin-bottom:20px;font-size:14px}.UK2y1POSykLx5wlLtfKa{display:flex;grid-column:1;align-items:center;justify-content:flex-start}.WsQ49QFaUM8lOxL3EoZK:first-child{margin-right:20px}.K5tCeAx4SFqdOEltIhio .SmzHxVHKKyQYPjClZ8Ae{display:none;position:relative;grid-column:3}@media screen and (max-width: 525px){.SpjekxaVvm9sSO0mg0yY{margin-bottom:10px}.WsQ49QFaUM8lOxL3EoZK:first-child{margin-right:8px}.K5tCeAx4SFqdOEltIhio .SmzHxVHKKyQYPjClZ8Ae{display:block}}","",{version:3,sources:["webpack://./src/components/PeriodControls/style.module.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,sBACC,YAAA,CACA,uCAAA,CACA,aCDW,CDGX,sBACC,aAAA,CACA,kBAAA,CACA,cAAA,CAGD,sBACC,YAAA,CACA,aAAA,CACA,kBAAA,CACA,0BAAA,CAGD,kCACC,iBAAA,CAGD,4CACC,YAAA,CACA,iBAAA,CACA,aAAA,CAGD,qCACC,sBACC,kBAAA,CAGD,kCACC,gBAAA,CAGD,4CACC,aAAA,CAAA",sourcesContent:['@import "../../styles/vars";\r\n\r\n.controls {\r\n\tdisplay: grid;\r\n\tgrid-template-columns: auto 1fr auto 2fr;\r\n\tcolor: $main-text;\r\n\r\n\t&Count {\r\n\t\tgrid-column: 1;\r\n\t\tmargin-bottom: 20px;\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t&Btns {\r\n\t\tdisplay: flex;\r\n\t\tgrid-column: 1;\r\n\t\talign-items: center;\r\n\t\tjustify-content: flex-start;\r\n\t}\r\n\r\n\t&Btn:first-child {\r\n\t\tmargin-right: 20px;\r\n\t}\r\n\r\n\t.sliderPag {\r\n\t\tdisplay: none;\r\n\t\tposition: relative;\r\n\t\tgrid-column: 3;\r\n\t}\r\n\r\n\t@media screen and (max-width: 525px) {\r\n\t\t&Count {\r\n\t\t\tmargin-bottom: 10px;\r\n\t\t}\r\n\r\n\t\t&Btn:first-child {\r\n\t\t\tmargin-right: 8px;\r\n\t\t}\r\n\r\n\t\t.sliderPag {\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\t}\r\n}\r\n','@import "https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap";\r\n\r\n$bg: #F4F5F9;\r\n$lines: #42567A;\r\n$main-text: #42567A;\r\n$slider-accent: #3877EE;\r\n$accent-first: #5D5FEF;\r\n$accent-second: #EF5DA8;\r\n$accent-gradient: linear-gradient(180deg, rgb(56 119 238 / 100%) 0%, rgb(239 93 168 / 100%) 80%);\r\n\r\n// fonts:\r\n$main-font: "PT Sans", sans-serif;\r\n$accent-font: "Bebas Neue", cursive;\r\n'],sourceRoot:""}]),o.locals={controls:"K5tCeAx4SFqdOEltIhio",controlsCount:"SpjekxaVvm9sSO0mg0yY",controlsBtns:"UK2y1POSykLx5wlLtfKa",controlsBtn:"WsQ49QFaUM8lOxL3EoZK",sliderPag:"SmzHxVHKKyQYPjClZ8Ae"},t.Z=o},5512:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap);"]),o.push([e.id,'.pFx3hYSle2_quKzcI0Qd{position:relative;margin:0;margin-bottom:56px;padding-left:78px;color:#42567a;font-family:"PT Sans",sans-serif;font-size:56px;font-weight:700;line-height:1.2}.pFx3hYSle2_quKzcI0Qd::before{content:"";position:absolute;top:0;bottom:0;left:0;width:5px;height:90%;margin-top:auto;margin-bottom:auto;background:linear-gradient(180deg, rgb(56, 119, 238) 0%, rgb(239, 93, 168) 80%);background-color:#ef5da8}@media screen and (max-width: 525px){.pFx3hYSle2_quKzcI0Qd::before{display:none}}@media screen and (max-width: 1060px){.pFx3hYSle2_quKzcI0Qd{padding-left:58px;font-size:40px}}@media screen and (max-width: 725px){.pFx3hYSle2_quKzcI0Qd{margin-bottom:76px;padding-left:28px;font-size:32px}}@media screen and (max-width: 525px){.pFx3hYSle2_quKzcI0Qd{margin-bottom:36px;padding-left:0;font-size:20px}}',"",{version:3,sources:["webpack://./src/components/Title/style.module.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,sBACC,iBAAA,CACA,QAAA,CACA,kBAAA,CACA,iBAAA,CACA,aCHW,CDIX,gCCGW,CDFX,cAAA,CACA,eAAA,CACA,eAAA,CAEA,8BACC,UAAA,CACA,iBAAA,CACA,KAAA,CACA,QAAA,CACA,MAAA,CACA,SAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CACA,+ECfgB,CDgBhB,wBCjBc,CDmBd,qCAbD,8BAcE,YAAA,CAAA,CAIF,sCA7BD,sBA8BE,iBAAA,CACA,cAAA,CAAA,CAGD,qCAlCD,sBAmCE,kBAAA,CACA,iBAAA,CACA,cAAA,CAAA,CAGD,qCAxCD,sBAyCE,kBAAA,CACA,cAAA,CACA,cAAA,CAAA",sourcesContent:['@import "../../styles/vars";\r\n\r\n.title {\r\n\tposition: relative;\r\n\tmargin: 0;\r\n\tmargin-bottom: 56px;\r\n\tpadding-left: 78px;\r\n\tcolor: $main-text;\r\n\tfont-family: $main-font;\r\n\tfont-size: 56px;\r\n\tfont-weight: 700;\r\n\tline-height: 1.2;\r\n\r\n\t&::before {\r\n\t\tcontent: "";\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tbottom: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 5px;\r\n\t\theight: 90%;\r\n\t\tmargin-top: auto;\r\n\t\tmargin-bottom: auto;\r\n\t\tbackground: $accent-gradient;\r\n\t\tbackground-color: $accent-second;\r\n\r\n\t\t@media screen and (max-width: 525px) {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\t}\r\n\r\n\t@media screen and (max-width: 1060px) {\r\n\t\tpadding-left: 58px;\r\n\t\tfont-size: 40px;\r\n\t}\r\n\r\n\t@media screen and (max-width: 725px) {\r\n\t\tmargin-bottom: 76px;\r\n\t\tpadding-left: 28px;\r\n\t\tfont-size: 32px;\r\n\t}\r\n\r\n\t@media screen and (max-width: 525px) {\r\n\t\tmargin-bottom: 36px;\r\n\t\tpadding-left: 0;\r\n\t\tfont-size: 20px;\r\n\t}\r\n}\r\n','@import "https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:wght@400;700&display=swap";\r\n\r\n$bg: #F4F5F9;\r\n$lines: #42567A;\r\n$main-text: #42567A;\r\n$slider-accent: #3877EE;\r\n$accent-first: #5D5FEF;\r\n$accent-second: #EF5DA8;\r\n$accent-gradient: linear-gradient(180deg, rgb(56 119 238 / 100%) 0%, rgb(239 93 168 / 100%) 80%);\r\n\r\n// fonts:\r\n$main-font: "PT Sans", sans-serif;\r\n$accent-font: "Bebas Neue", cursive;\r\n'],sourceRoot:""}]),o.locals={title:"pFx3hYSle2_quKzcI0Qd"},t.Z=o},6810:function(e,t,n){"use strict";var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([e.id,"*{box-sizing:border-box}html,body{height:100%;margin:0;padding:0}ul{margin:0;padding:0}ul li{list-style:none}ol{margin:0;padding:0}p{margin:0}input,textarea{font-family:inherit}input[type=search]::-ms-clear{display:none;width:0;height:0}input[type=search]::-ms-reveal{display:none;width:0;height:0}input[type=search]::-webkit-search-decoration,input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-results-button,input[type=search]::-webkit-search-results-decoration{display:none}button{border:none;background-color:rgba(0,0,0,0);color:inherit;font-family:inherit}button::-moz-focus-inner{padding:0;border:0}a{color:inherit;text-decoration:none}a:visited,a:hover{color:inherit;text-decoration:none}img{max-width:100%;vertical-align:top}","",{version:3,sources:["webpack://./src/styles/reset.scss"],names:[],mappings:"AAAA,EACC,qBAAA,CAGD,UAEC,WAAA,CACA,QAAA,CACA,SAAA,CAGD,GACC,QAAA,CACA,SAAA,CAEA,MACC,eAAA,CAIF,GACC,QAAA,CACA,SAAA,CAGD,EACC,QAAA,CAGD,eAEC,mBAAA,CAGD,8BACC,YAAA,CACA,OAAA,CACA,QAAA,CAGD,+BACC,YAAA,CACA,OAAA,CACA,QAAA,CAGD,uMAIC,YAAA,CAGD,OACC,WAAA,CACA,8BAAA,CACA,aAAA,CACA,mBAAA,CAEA,yBACC,SAAA,CACA,QAAA,CAIF,EACC,aAAA,CACA,oBAAA,CAEA,kBAEC,aAAA,CACA,oBAAA,CAIF,IACC,cAAA,CACA,kBAAA",sourcesContent:['* {\r\n\tbox-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n\theight: 100%;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\nul {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\r\n\tli {\r\n\t\tlist-style: none;\r\n\t}\r\n}\r\n\r\nol {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\np {\r\n\tmargin: 0;\r\n}\r\n\r\ninput,\r\ntextarea {\r\n\tfont-family: inherit;\r\n}\r\n\r\ninput[type="search"]::-ms-clear {\r\n\tdisplay: none;\r\n\twidth: 0;\r\n\theight: 0;\r\n}\r\n\r\ninput[type="search"]::-ms-reveal {\r\n\tdisplay: none;\r\n\twidth: 0;\r\n\theight: 0;\r\n}\r\n\r\ninput[type="search"]::-webkit-search-decoration,\r\ninput[type="search"]::-webkit-search-cancel-button,\r\ninput[type="search"]::-webkit-search-results-button,\r\ninput[type="search"]::-webkit-search-results-decoration {\r\n\tdisplay: none;\r\n}\r\n\r\nbutton {\r\n\tborder: none;\r\n\tbackground-color: transparent;\r\n\tcolor: inherit;\r\n\tfont-family: inherit;\r\n\r\n\t&::-moz-focus-inner {\r\n\t\tpadding: 0;\r\n\t\tborder: 0;\r\n\t}\r\n}\r\n\r\na {\r\n\tcolor: inherit;\r\n\ttext-decoration: none;\r\n\r\n\t&:visited,\r\n\t&:hover {\r\n\t\tcolor: inherit;\r\n\t\ttext-decoration: none;\r\n\t}\r\n}\r\n\r\nimg {\r\n\tmax-width: 100%;\r\n\tvertical-align: top;\r\n}\r\n'],sourceRoot:""}]),t.Z=o},3645:function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&o[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},1667:function(e){"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},7537:function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},4448:function(e,t,n){"use strict";var r=n(7294),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,s={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(s[e]=t,e=0;e<t.length;e++)o.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},h={};function g(e,t,n,r,i,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=o}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var A=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var i=m.hasOwnProperty(t)?m[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!p.call(h,e)||!p.call(f,e)&&(d.test(e)?h[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(A,v);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(A,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(A,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),C=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),E=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),B=Symbol.for("react.memo"),M=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var z=Symbol.iterator;function N(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}var j,L=Object.assign;function I(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var F=!1;function R(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),a=r.stack.split("\n"),o=i.length-1,s=a.length-1;1<=o&&0<=s&&i[o]!==a[s];)s--;for(;1<=o&&0<=s;o--,s--)if(i[o]!==a[s]){if(1!==o||1!==s)do{if(o--,0>--s||i[o]!==a[s]){var l="\n"+i[o].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=o&&0<=s);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?I(e):""}function $(e){switch(e.tag){case 5:return I(e.type);case 16:return I("Lazy");case 13:return I("Suspense");case 19:return I("SuspenseList");case 0:case 2:case 15:return R(e.type,!1);case 11:return R(e.type.render,!1);case 1:return R(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case C:return"Portal";case _:return"Profiler";case S:return"StrictMode";case O:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case E:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case B:return null!==(t=e.displayName||null)?t:G(e.type)||"Memo";case M:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function Y(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return G(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function U(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function W(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return L({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=U(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function K(e,t){X(e,t);var n=U(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,U(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+U(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return L({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:U(n)}}function ae(e,t){var n=U(t.value),r=U(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function oe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,pe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(fe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var Ae=L({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(Ae[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ye=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,xe=null,Se=null;function _e(e){if(e=bi(e)){if("function"!=typeof Ce)throw Error(a(280));var t=e.stateNode;t&&(t=wi(t),Ce(e.stateNode,e.type,t))}}function ke(e){xe?Se?Se.push(e):Se=[e]:xe=e}function Ee(){if(xe){var e=xe,t=Se;if(Se=xe=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Te(e,t){return e(t)}function Oe(){}var Pe=!1;function Be(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Te(e,t,n)}finally{Pe=!1,(null!==xe||null!==Se)&&(Oe(),Ee())}}function Me(e,t){var n=e.stateNode;if(null===n)return null;var r=wi(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var De=!1;if(c)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){De=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(ce){De=!1}function Ne(e,t,n,r,i,a,o,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var je=!1,Le=null,Ie=!1,Fe=null,Re={onError:function(e){je=!0,Le=e}};function $e(e,t,n,r,i,a,o,s,l){je=!1,Le=null,Ne.apply(Re,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ue(e){if(Ge(e)!==e)throw Error(a(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Ue(i),e;if(o===r)return Ue(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var We=i.unstable_scheduleCallback,Qe=i.unstable_cancelCallback,Ze=i.unstable_shouldYield,qe=i.unstable_requestPaint,Xe=i.unstable_now,Ke=i.unstable_getCurrentPriorityLevel,Je=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,at=null,ot=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ut=64,ct=4194304;function pt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,a=e.pingedLanes,o=268435455&n;if(0!==o){var s=o&~i;0!==s?r=pt(s):0!=(a&=o)&&(r=pt(a))}else 0!=(o=n&~i)?r=pt(o):0!==a&&(r=pt(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&i)&&((i=r&-r)>=(a=t&-t)||16===i&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-ot(t)),r|=e[n],t&=~i;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function At(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ot(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ot(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var bt=0;function yt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,Ct,xt,St,_t,kt=!1,Et=[],Tt=null,Ot=null,Pt=null,Bt=new Map,Mt=new Map,Dt=[],zt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nt(e,t){switch(e){case"focusin":case"focusout":Tt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Bt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Mt.delete(t.pointerId)}}function jt(e,t,n,r,i,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[i]},null!==t&&null!==(t=bi(t))&&Ct(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Lt(e){var t=vi(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void _t(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=bi(n))&&Ct(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);ye=r,n.target.dispatchEvent(r),ye=null,t.shift()}return!0}function Ft(e,t,n){It(e)&&n.delete(t)}function Rt(){kt=!1,null!==Tt&&It(Tt)&&(Tt=null),null!==Ot&&It(Ot)&&(Ot=null),null!==Pt&&It(Pt)&&(Pt=null),Bt.forEach(Ft),Mt.forEach(Ft)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,kt||(kt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Rt)))}function Gt(e){function t(t){return $t(t,e)}if(0<Et.length){$t(Et[0],e);for(var n=1;n<Et.length;n++){var r=Et[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Tt&&$t(Tt,e),null!==Ot&&$t(Ot,e),null!==Pt&&$t(Pt,e),Bt.forEach(t),Mt.forEach(t),n=0;n<Dt.length;n++)(r=Dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Dt.length&&null===(n=Dt[0]).blockedOn;)Lt(n),null===n.blockedOn&&Dt.shift()}var Yt=y.ReactCurrentBatchConfig,Ut=!0;function Vt(e,t,n,r){var i=bt,a=Yt.transition;Yt.transition=null;try{bt=1,Wt(e,t,n,r)}finally{bt=i,Yt.transition=a}}function Ht(e,t,n,r){var i=bt,a=Yt.transition;Yt.transition=null;try{bt=4,Wt(e,t,n,r)}finally{bt=i,Yt.transition=a}}function Wt(e,t,n,r){if(Ut){var i=Zt(e,t,n,r);if(null===i)Ur(e,t,r,Qt,n),Nt(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return Tt=jt(Tt,e,t,n,r,i),!0;case"dragenter":return Ot=jt(Ot,e,t,n,r,i),!0;case"mouseover":return Pt=jt(Pt,e,t,n,r,i),!0;case"pointerover":var a=i.pointerId;return Bt.set(a,jt(Bt.get(a)||null,e,t,n,r,i)),!0;case"gotpointercapture":return a=i.pointerId,Mt.set(a,jt(Mt.get(a)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(Nt(e,r),4&t&&-1<zt.indexOf(e)){for(;null!==i;){var a=bi(i);if(null!==a&&wt(a),null===(a=Zt(e,t,n,r))&&Ur(e,t,r,Qt,n),a===i)break;i=a}null!==i&&r.stopPropagation()}else Ur(e,t,r,null,n)}}var Qt=null;function Zt(e,t,n,r){if(Qt=null,null!==(e=vi(e=we(r))))if(null===(t=Ge(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ye(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ke()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Kt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Kt,r=n.length,i="value"in Xt?Xt.value:Xt.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===i[a-t];t++);return Jt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,i,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(i):i[o]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return L(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,sn,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),pn=L({},un,{view:0,detail:0}),dn=an(pn),fn=L({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(on=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=on=0,ln=e),on)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),hn=an(fn),gn=an(L({},fn,{dataTransfer:0})),mn=an(L({},pn,{relatedTarget:0})),An=an(L({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=L({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(vn),yn=an(L({},un,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function _n(){return Sn}var kn=L({},pn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),En=an(kn),Tn=an(L({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=an(L({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Pn=an(L({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Bn=L({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Mn=an(Bn),Dn=[9,13,27,32],zn=c&&"CompositionEvent"in window,Nn=null;c&&"documentMode"in document&&(Nn=document.documentMode);var jn=c&&"TextEvent"in window&&!Nn,Ln=c&&(!zn||Nn&&8<Nn&&11>=Nn),In=String.fromCharCode(32),Fn=!1;function Rn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Gn=!1,Yn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Yn[e.type]:"textarea"===t}function Vn(e,t,n,r){ke(r),0<(t=Hr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Wn=null;function Qn(e){Ir(e,0)}function Zn(e){if(W(yi(e)))return e}function qn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Kn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Kn=Jn}else Kn=!1;Xn=Kn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Wn=Hn=null)}function nr(e){if("value"===e.propertyName&&Zn(Wn)){var t=[];Vn(t,Wn,e,we(e)),Be(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Wn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zn(Wn)}function ar(e,t){if("click"===e)return Zn(t)}function or(e,t){if("input"===e||"change"===e)return Zn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!p.call(t,i)||!sr(e[i],t[i]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function pr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&pr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,a=Math.min(r.start,i);r=void 0===r.end?a:Math.min(r.end,i),!e.extend&&a>r&&(i=r,r=a,a=i),i=cr(n,a);var o=cr(n,r);i&&o&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,Ar=null,vr=null,br=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==mr||mr!==Q(r)||(r="selectionStart"in(r=mr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Hr(Ar,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Cr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},xr={},Sr={};function _r(e){if(xr[e])return xr[e];if(!Cr[e])return e;var t,n=Cr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return xr[e]=n[t];return e}c&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete Cr.animationend.animation,delete Cr.animationiteration.animation,delete Cr.animationstart.animation),"TransitionEvent"in window||delete Cr.transitionend.transition);var kr=_r("animationend"),Er=_r("animationiteration"),Tr=_r("animationstart"),Or=_r("transitionend"),Pr=new Map,Br="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Mr(e,t){Pr.set(e,t),l(t,[e])}for(var Dr=0;Dr<Br.length;Dr++){var zr=Br[Dr];Mr(zr.toLowerCase(),"on"+(zr[0].toUpperCase()+zr.slice(1)))}Mr(kr,"onAnimationEnd"),Mr(Er,"onAnimationIteration"),Mr(Tr,"onAnimationStart"),Mr("dblclick","onDoubleClick"),Mr("focusin","onFocus"),Mr("focusout","onBlur"),Mr(Or,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Nr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Nr));function Lr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,o,s,l,u){if($e.apply(this,arguments),je){if(!je)throw Error(a(198));var c=Le;je=!1,Le=null,Ie||(Ie=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Ir(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var s=r[o],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==a&&i.isPropagationStopped())break e;Lr(i,s,u),a=l}else for(o=0;o<r.length;o++){if(l=(s=r[o]).instance,u=s.currentTarget,s=s.listener,l!==a&&i.isPropagationStopped())break e;Lr(i,s,u),a=l}}}if(Ie)throw e=Fe,Ie=!1,Fe=null,e}function Fr(e,t){var n=t[gi];void 0===n&&(n=t[gi]=new Set);var r=e+"__bubble";n.has(r)||(Yr(t,e,2,!1),n.add(r))}function Rr(e,t,n){var r=0;t&&(r|=4),Yr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Gr(e){if(!e[$r]){e[$r]=!0,o.forEach((function(t){"selectionchange"!==t&&(jr.has(t)||Rr(t,!1,e),Rr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Rr("selectionchange",!1,t))}}function Yr(e,t,n,r){switch(qt(t)){case 1:var i=Vt;break;case 4:i=Ht;break;default:i=Wt}n=i.bind(null,t,n,e),i=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Ur(e,t,n,r,i){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===o)for(o=r.return;null!==o;){var l=o.tag;if((3===l||4===l)&&((l=o.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;o=o.return}for(;null!==s;){if(null===(o=vi(s)))return;if(5===(l=o.tag)||6===l){r=a=o;continue e}s=s.parentNode}}r=r.return}Be((function(){var r=a,i=we(n),o=[];e:{var s=Pr.get(e);if(void 0!==s){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=En;break;case"focusin":u="focus",l=mn;break;case"focusout":u="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=On;break;case kr:case Er:case Tr:l=An;break;case Or:l=Pn;break;case"scroll":l=dn;break;case"wheel":l=Mn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var c=0!=(4&t),p=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var f,h=r;null!==h;){var g=(f=h).stateNode;if(5===f.tag&&null!==g&&(f=g,null!==d&&null!=(g=Me(h,d))&&c.push(Vr(h,g,f))),p)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,i),o.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===ye||!(u=n.relatedTarget||n.fromElement)||!vi(u)&&!u[hi])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?vi(u):null)&&(u!==(p=Ge(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=hn,g="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,g="onPointerLeave",d="onPointerEnter",h="pointer"),p=null==l?s:yi(l),f=null==u?s:yi(u),(s=new c(g,h+"leave",l,n,i)).target=p,s.relatedTarget=f,g=null,vi(i)===r&&((c=new c(d,h+"enter",u,n,i)).target=f,c.relatedTarget=p,g=c),p=g,l&&u)e:{for(d=u,h=0,f=c=l;f;f=Wr(f))h++;for(f=0,g=d;g;g=Wr(g))f++;for(;0<h-f;)c=Wr(c),h--;for(;0<f-h;)d=Wr(d),f--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Wr(c),d=Wr(d)}c=null}else c=null;null!==l&&Qr(o,s,l,c,!1),null!==u&&null!==p&&Qr(o,p,u,c,!0)}if("select"===(l=(s=r?yi(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=qn;else if(Un(s))if(Xn)m=or;else{m=ir;var A=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=ar);switch(m&&(m=m(e,r))?Vn(o,m,n,i):(A&&A(e,s,r),"focusout"===e&&(A=s._wrapperState)&&A.controlled&&"number"===s.type&&ee(s,"number",s.value)),A=r?yi(r):window,e){case"focusin":(Un(A)||"true"===A.contentEditable)&&(mr=A,Ar=r,vr=null);break;case"focusout":vr=Ar=mr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,yr(o,n,i);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":yr(o,n,i)}var v;if(zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Gn?Rn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Ln&&"ko"!==n.locale&&(Gn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Gn&&(v=en()):(Kt="value"in(Xt=i)?Xt.value:Xt.textContent,Gn=!0)),0<(A=Hr(r,b)).length&&(b=new yn(b,e,null,n,i),o.push({event:b,listeners:A}),(v||null!==(v=$n(n)))&&(b.data=v))),(v=jn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Fn=!0,In);case"textInput":return(e=t.data)===In&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Gn)return"compositionend"===e||!zn&&Rn(e,t)?(e=en(),Jt=Kt=Xt=null,Gn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(i=new yn("onBeforeInput","beforeinput",null,n,i),o.push({event:i,listeners:r}),i.data=v)}Ir(o,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,a=i.stateNode;5===i.tag&&null!==a&&(i=a,null!=(a=Me(e,n))&&r.unshift(Vr(e,a,i)),null!=(a=Me(e,t))&&r.push(Vr(e,a,i))),e=e.return}return r}function Wr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,i){for(var a=t._reactName,o=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=Me(n,a))&&o.unshift(Vr(n,l,s)):i||null!=(l=Me(n,a))&&o.push(Vr(n,l,s))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Zr=/\r\n?/g,qr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Zr,"\n").replace(qr,"")}function Kr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Jr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,ai="function"==typeof Promise?Promise:void 0,oi="function"==typeof queueMicrotask?queueMicrotask:void 0!==ai?function(e){return ai.resolve(null).then(e).catch(si)}:ri;function si(e){setTimeout((function(){throw e}))}function li(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void Gt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);Gt(t)}function ui(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ci(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var pi=Math.random().toString(36).slice(2),di="__reactFiber$"+pi,fi="__reactProps$"+pi,hi="__reactContainer$"+pi,gi="__reactEvents$"+pi,mi="__reactListeners$"+pi,Ai="__reactHandles$"+pi;function vi(e){var t=e[di];if(t)return t;for(var n=e.parentNode;n;){if(t=n[hi]||n[di]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ci(e);null!==e;){if(n=e[di])return n;e=ci(e)}return t}n=(e=n).parentNode}return null}function bi(e){return!(e=e[di]||e[hi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function yi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function wi(e){return e[fi]||null}var Ci=[],xi=-1;function Si(e){return{current:e}}function _i(e){0>xi||(e.current=Ci[xi],Ci[xi]=null,xi--)}function ki(e,t){xi++,Ci[xi]=e.current,e.current=t}var Ei={},Ti=Si(Ei),Oi=Si(!1),Pi=Ei;function Bi(e,t){var n=e.type.contextTypes;if(!n)return Ei;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in n)a[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Mi(e){return null!=e.childContextTypes}function Di(){_i(Oi),_i(Ti)}function zi(e,t,n){if(Ti.current!==Ei)throw Error(a(168));ki(Ti,t),ki(Oi,n)}function Ni(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(a(108,Y(e)||"Unknown",i));return L({},n,r)}function ji(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ei,Pi=Ti.current,ki(Ti,e),ki(Oi,Oi.current),!0}function Li(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Ni(e,t,Pi),r.__reactInternalMemoizedMergedChildContext=e,_i(Oi),_i(Ti),ki(Ti,e)):_i(Oi),ki(Oi,n)}var Ii=null,Fi=!1,Ri=!1;function $i(e){null===Ii?Ii=[e]:Ii.push(e)}function Gi(){if(!Ri&&null!==Ii){Ri=!0;var e=0,t=bt;try{var n=Ii;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ii=null,Fi=!1}catch(t){throw null!==Ii&&(Ii=Ii.slice(e+1)),We(Je,Gi),t}finally{bt=t,Ri=!1}}return null}var Yi=[],Ui=0,Vi=null,Hi=0,Wi=[],Qi=0,Zi=null,qi=1,Xi="";function Ki(e,t){Yi[Ui++]=Hi,Yi[Ui++]=Vi,Vi=e,Hi=t}function Ji(e,t,n){Wi[Qi++]=qi,Wi[Qi++]=Xi,Wi[Qi++]=Zi,Zi=e;var r=qi;e=Xi;var i=32-ot(r)-1;r&=~(1<<i),n+=1;var a=32-ot(t)+i;if(30<a){var o=i-i%5;a=(r&(1<<o)-1).toString(32),r>>=o,i-=o,qi=1<<32-ot(t)+i|n<<i|r,Xi=a+e}else qi=1<<a|n<<i|r,Xi=e}function ea(e){null!==e.return&&(Ki(e,1),Ji(e,1,0))}function ta(e){for(;e===Vi;)Vi=Yi[--Ui],Yi[Ui]=null,Hi=Yi[--Ui],Yi[Ui]=null;for(;e===Zi;)Zi=Wi[--Qi],Wi[Qi]=null,Xi=Wi[--Qi],Wi[Qi]=null,qi=Wi[--Qi],Wi[Qi]=null}var na=null,ra=null,ia=!1,aa=null;function oa(e,t){var n=Bu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,na=e,ra=ui(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,na=e,ra=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Zi?{id:qi,overflow:Xi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Bu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,na=e,ra=null,!0);default:return!1}}function la(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ua(e){if(ia){var t=ra;if(t){var n=t;if(!sa(e,t)){if(la(e))throw Error(a(418));t=ui(n.nextSibling);var r=na;t&&sa(e,t)?oa(r,n):(e.flags=-4097&e.flags|2,ia=!1,na=e)}}else{if(la(e))throw Error(a(418));e.flags=-4097&e.flags|2,ia=!1,na=e}}}function ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;na=e}function pa(e){if(e!==na)return!1;if(!ia)return ca(e),ia=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=ra)){if(la(e))throw da(),Error(a(418));for(;t;)oa(e,t),t=ui(t.nextSibling)}if(ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ra=ui(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ra=null}}else ra=na?ui(e.stateNode.nextSibling):null;return!0}function da(){for(var e=ra;e;)e=ui(e.nextSibling)}function fa(){ra=na=null,ia=!1}function ha(e){null===aa?aa=[e]:aa.push(e)}var ga=y.ReactCurrentBatchConfig;function ma(e,t){if(e&&e.defaultProps){for(var n in t=L({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Aa=Si(null),va=null,ba=null,ya=null;function wa(){ya=ba=va=null}function Ca(e){var t=Aa.current;_i(Aa),e._currentValue=t}function xa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sa(e,t){va=e,ya=ba=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ys=!0),e.firstContext=null)}function _a(e){var t=e._currentValue;if(ya!==e)if(e={context:e,memoizedValue:t,next:null},null===ba){if(null===va)throw Error(a(308));ba=e,va.dependencies={lanes:0,firstContext:e}}else ba=ba.next=e;return t}var ka=null;function Ea(e){null===ka?ka=[e]:ka.push(e)}function Ta(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,Ea(t)):(n.next=i.next,i.next=n),t.interleaved=n,Oa(e,r)}function Oa(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Pa=!1;function Ba(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ma(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Da(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function za(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Tl)){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Oa(e,n)}return null===(i=r.interleaved)?(t.next=t,Ea(r)):(t.next=i.next,i.next=t),r.interleaved=t,Oa(e,n)}function Na(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function ja(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?i=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?i=a=t:a=a.next=t}else i=a=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function La(e,t,n,r){var i=e.updateQueue;Pa=!1;var a=i.firstBaseUpdate,o=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,u=l.next;l.next=null,null===o?a=u:o.next=u,o=l;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l)}if(null!==a){var p=i.baseState;for(o=0,c=u=l=null,s=a;;){var d=s.lane,f=s.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,g=s;switch(d=t,f=n,g.tag){case 1:if("function"==typeof(h=g.payload)){p=h.call(f,p,d);break e}p=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=g.payload)?h.call(f,p,d):h))break e;p=L({},p,d);break e;case 2:Pa=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(d=i.effects)?i.effects=[s]:d.push(s))}else f={eventTime:f,lane:d,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=f,l=p):c=c.next=f,o|=d;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(d=s).next,d.next=null,i.lastBaseUpdate=d,i.shared.pending=null}}if(null===c&&(l=p),i.baseState=l,i.firstBaseUpdate=u,i.lastBaseUpdate=c,null!==(t=i.shared.interleaved)){i=t;do{o|=i.lane,i=i.next}while(i!==t)}else null===a&&(i.shared.lanes=0);jl|=o,e.lanes=o,e.memoizedState=p}}function Ia(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var Fa=(new r.Component).refs;function Ra(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:L({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var $a={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),a=Da(r,i);a.payload=t,null!=n&&(a.callback=n),null!==(t=za(e,a,i))&&(nu(t,e,i,r),Na(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),a=Da(r,i);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=za(e,a,i))&&(nu(t,e,i,r),Na(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),i=Da(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=za(e,i,r))&&(nu(t,e,r,n),Na(t,e,r))}};function Ga(e,t,n,r,i,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,a))}function Ya(e,t,n){var r=!1,i=Ei,a=t.contextType;return"object"==typeof a&&null!==a?a=_a(a):(i=Mi(t)?Pi:Ti.current,a=(r=null!=(r=t.contextTypes))?Bi(e,i):Ei),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=$a,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ua(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&$a.enqueueReplaceState(t,t.state,null)}function Va(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Fa,Ba(e);var a=t.contextType;"object"==typeof a&&null!==a?i.context=_a(a):(a=Mi(t)?Pi:Ti.current,i.context=Bi(e,a)),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ra(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&$a.enqueueReplaceState(i,i.state,null),La(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Ha(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=r,o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=i.refs;t===Fa&&(t=i.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Wa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Qa(e){return(0,e._init)(e._payload)}function Za(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Du(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Lu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===x?p(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===M&&Qa(a)===t.type)?((r=i(t,n.props)).ref=Ha(e,t,n),r.return=e,r):((r=zu(n.type,n.key,n.props,null,e.mode,r)).ref=Ha(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Iu(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function p(e,t,n,r,a){return null===t||7!==t.tag?((t=Nu(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Lu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=zu(t.type,t.key,t.props,null,e.mode,n)).ref=Ha(e,null,t),n.return=e,n;case C:return(t=Iu(t,e.mode,n)).return=e,t;case M:return d(e,(0,t._init)(t._payload),n)}if(te(t)||N(t))return(t=Nu(t,e.mode,n,null)).return=e,t;Wa(e,t)}return null}function f(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?u(e,t,n,r):null;case C:return n.key===i?c(e,t,n,r):null;case M:return f(e,t,(i=n._init)(n._payload),r)}if(te(n)||N(n))return null!==i?null:p(e,t,n,r,null);Wa(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case C:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case M:return h(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||N(r))return p(t,e=e.get(n)||null,r,i,null);Wa(t,r)}return null}function g(i,a,s,l){for(var u=null,c=null,p=a,g=a=0,m=null;null!==p&&g<s.length;g++){p.index>g?(m=p,p=null):m=p.sibling;var A=f(i,p,s[g],l);if(null===A){null===p&&(p=m);break}e&&p&&null===A.alternate&&t(i,p),a=o(A,a,g),null===c?u=A:c.sibling=A,c=A,p=m}if(g===s.length)return n(i,p),ia&&Ki(i,g),u;if(null===p){for(;g<s.length;g++)null!==(p=d(i,s[g],l))&&(a=o(p,a,g),null===c?u=p:c.sibling=p,c=p);return ia&&Ki(i,g),u}for(p=r(i,p);g<s.length;g++)null!==(m=h(p,i,g,s[g],l))&&(e&&null!==m.alternate&&p.delete(null===m.key?g:m.key),a=o(m,a,g),null===c?u=m:c.sibling=m,c=m);return e&&p.forEach((function(e){return t(i,e)})),ia&&Ki(i,g),u}function m(i,s,l,u){var c=N(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var p=c=null,g=s,m=s=0,A=null,v=l.next();null!==g&&!v.done;m++,v=l.next()){g.index>m?(A=g,g=null):A=g.sibling;var b=f(i,g,v.value,u);if(null===b){null===g&&(g=A);break}e&&g&&null===b.alternate&&t(i,g),s=o(b,s,m),null===p?c=b:p.sibling=b,p=b,g=A}if(v.done)return n(i,g),ia&&Ki(i,m),c;if(null===g){for(;!v.done;m++,v=l.next())null!==(v=d(i,v.value,u))&&(s=o(v,s,m),null===p?c=v:p.sibling=v,p=v);return ia&&Ki(i,m),c}for(g=r(i,g);!v.done;m++,v=l.next())null!==(v=h(g,i,m,v.value,u))&&(e&&null!==v.alternate&&g.delete(null===v.key?m:v.key),s=o(v,s,m),null===p?c=v:p.sibling=v,p=v);return e&&g.forEach((function(e){return t(i,e)})),ia&&Ki(i,m),c}return function e(r,a,o,l){if("object"==typeof o&&null!==o&&o.type===x&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case w:e:{for(var u=o.key,c=a;null!==c;){if(c.key===u){if((u=o.type)===x){if(7===c.tag){n(r,c.sibling),(a=i(c,o.props.children)).return=r,r=a;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===M&&Qa(u)===c.type){n(r,c.sibling),(a=i(c,o.props)).ref=Ha(r,c,o),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}o.type===x?((a=Nu(o.props.children,r.mode,l,o.key)).return=r,r=a):((l=zu(o.type,o.key,o.props,null,r.mode,l)).ref=Ha(r,a,o),l.return=r,r=l)}return s(r);case C:e:{for(c=o.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===o.containerInfo&&a.stateNode.implementation===o.implementation){n(r,a.sibling),(a=i(a,o.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Iu(o,r.mode,l)).return=r,r=a}return s(r);case M:return e(r,a,(c=o._init)(o._payload),l)}if(te(o))return g(r,a,o,l);if(N(o))return m(r,a,o,l);Wa(r,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==a&&6===a.tag?(n(r,a.sibling),(a=i(a,o)).return=r,r=a):(n(r,a),(a=Lu(o,r.mode,l)).return=r,r=a),s(r)):n(r,a)}}var qa=Za(!0),Xa=Za(!1),Ka={},Ja=Si(Ka),eo=Si(Ka),to=Si(Ka);function no(e){if(e===Ka)throw Error(a(174));return e}function ro(e,t){switch(ki(to,t),ki(eo,e),ki(Ja,Ka),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}_i(Ja),ki(Ja,t)}function io(){_i(Ja),_i(eo),_i(to)}function ao(e){no(to.current);var t=no(Ja.current),n=le(t,e.type);t!==n&&(ki(eo,e),ki(Ja,n))}function oo(e){eo.current===e&&(_i(Ja),_i(eo))}var so=Si(0);function lo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var uo=[];function co(){for(var e=0;e<uo.length;e++)uo[e]._workInProgressVersionPrimary=null;uo.length=0}var po=y.ReactCurrentDispatcher,fo=y.ReactCurrentBatchConfig,ho=0,go=null,mo=null,Ao=null,vo=!1,bo=!1,yo=0,wo=0;function Co(){throw Error(a(321))}function xo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function So(e,t,n,r,i,o){if(ho=o,go=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,po.current=null===e||null===e.memoizedState?ss:ls,e=n(r,i),bo){o=0;do{if(bo=!1,yo=0,25<=o)throw Error(a(301));o+=1,Ao=mo=null,t.updateQueue=null,po.current=us,e=n(r,i)}while(bo)}if(po.current=os,t=null!==mo&&null!==mo.next,ho=0,Ao=mo=go=null,vo=!1,t)throw Error(a(300));return e}function _o(){var e=0!==yo;return yo=0,e}function ko(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ao?go.memoizedState=Ao=e:Ao=Ao.next=e,Ao}function Eo(){if(null===mo){var e=go.alternate;e=null!==e?e.memoizedState:null}else e=mo.next;var t=null===Ao?go.memoizedState:Ao.next;if(null!==t)Ao=t,mo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(mo=e).memoizedState,baseState:mo.baseState,baseQueue:mo.baseQueue,queue:mo.queue,next:null},null===Ao?go.memoizedState=Ao=e:Ao=Ao.next=e}return Ao}function To(e,t){return"function"==typeof t?t(e):t}function Oo(e){var t=Eo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=mo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){o=i.next,r=r.baseState;var l=s=null,u=null,c=o;do{var p=c.lane;if((ho&p)===p)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:p,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=d,s=r):u=u.next=d,go.lanes|=p,jl|=p}c=c.next}while(null!==c&&c!==o);null===u?s=r:u.next=l,sr(r,t.memoizedState)||(ys=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{o=i.lane,go.lanes|=o,jl|=o,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Po(e){var t=Eo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=e(o,s.action),s=s.next}while(s!==i);sr(o,t.memoizedState)||(ys=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Bo(){}function Mo(e,t){var n=go,r=Eo(),i=t(),o=!sr(r.memoizedState,i);if(o&&(r.memoizedState=i,ys=!0),r=r.queue,Uo(No.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||null!==Ao&&1&Ao.memoizedState.tag){if(n.flags|=2048,Fo(9,zo.bind(null,n,r,i,t),void 0,null),null===Ol)throw Error(a(349));0!=(30&ho)||Do(n,t,i)}return i}function Do(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=go.updateQueue)?(t={lastEffect:null,stores:null},go.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function zo(e,t,n,r){t.value=n,t.getSnapshot=r,jo(t)&&Lo(e)}function No(e,t,n){return n((function(){jo(t)&&Lo(e)}))}function jo(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Lo(e){var t=Oa(e,1);null!==t&&nu(t,e,1,-1)}function Io(e){var t=ko();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:To,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,go,e),[t.memoizedState,e]}function Fo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=go.updateQueue)?(t={lastEffect:null,stores:null},go.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ro(){return Eo().memoizedState}function $o(e,t,n,r){var i=ko();go.flags|=e,i.memoizedState=Fo(1|t,n,void 0,void 0===r?null:r)}function Go(e,t,n,r){var i=Eo();r=void 0===r?null:r;var a=void 0;if(null!==mo){var o=mo.memoizedState;if(a=o.destroy,null!==r&&xo(r,o.deps))return void(i.memoizedState=Fo(t,n,a,r))}go.flags|=e,i.memoizedState=Fo(1|t,n,a,r)}function Yo(e,t){return $o(8390656,8,e,t)}function Uo(e,t){return Go(2048,8,e,t)}function Vo(e,t){return Go(4,2,e,t)}function Ho(e,t){return Go(4,4,e,t)}function Wo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qo(e,t,n){return n=null!=n?n.concat([e]):null,Go(4,4,Wo.bind(null,t,e),n)}function Zo(){}function qo(e,t){var n=Eo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xo(e,t){var n=Eo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ko(e,t,n){return 0==(21&ho)?(e.baseState&&(e.baseState=!1,ys=!0),e.memoizedState=n):(sr(n,t)||(n=gt(),go.lanes|=n,jl|=n,e.baseState=!0),t)}function Jo(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=fo.transition;fo.transition={};try{e(!1),t()}finally{bt=n,fo.transition=r}}function es(){return Eo().memoizedState}function ts(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(e)?is(t,n):null!==(n=Ta(e,t,n,r))&&(nu(n,e,r,eu()),as(n,t,r))}function ns(e,t,n){var r=tu(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(e))is(t,i);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,s=a(o,n);if(i.hasEagerState=!0,i.eagerState=s,sr(s,o)){var l=t.interleaved;return null===l?(i.next=i,Ea(t)):(i.next=l.next,l.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=Ta(e,t,i,r))&&(nu(n,e,r,i=eu()),as(n,t,r))}}function rs(e){var t=e.alternate;return e===go||null!==t&&t===go}function is(e,t){bo=vo=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function as(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var os={readContext:_a,useCallback:Co,useContext:Co,useEffect:Co,useImperativeHandle:Co,useInsertionEffect:Co,useLayoutEffect:Co,useMemo:Co,useReducer:Co,useRef:Co,useState:Co,useDebugValue:Co,useDeferredValue:Co,useTransition:Co,useMutableSource:Co,useSyncExternalStore:Co,useId:Co,unstable_isNewReconciler:!1},ss={readContext:_a,useCallback:function(e,t){return ko().memoizedState=[e,void 0===t?null:t],e},useContext:_a,useEffect:Yo,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,$o(4194308,4,Wo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return $o(4194308,4,e,t)},useInsertionEffect:function(e,t){return $o(4,2,e,t)},useMemo:function(e,t){var n=ko();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ko();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ts.bind(null,go,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ko().memoizedState=e},useState:Io,useDebugValue:Zo,useDeferredValue:function(e){return ko().memoizedState=e},useTransition:function(){var e=Io(!1),t=e[0];return e=Jo.bind(null,e[1]),ko().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=go,i=ko();if(ia){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Ol)throw Error(a(349));0!=(30&ho)||Do(r,t,n)}i.memoizedState=n;var o={value:n,getSnapshot:t};return i.queue=o,Yo(No.bind(null,r,o,e),[e]),r.flags|=2048,Fo(9,zo.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=ko(),t=Ol.identifierPrefix;if(ia){var n=Xi;t=":"+t+"R"+(n=(qi&~(1<<32-ot(qi)-1)).toString(32)+n),0<(n=yo++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wo++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ls={readContext:_a,useCallback:qo,useContext:_a,useEffect:Uo,useImperativeHandle:Qo,useInsertionEffect:Vo,useLayoutEffect:Ho,useMemo:Xo,useReducer:Oo,useRef:Ro,useState:function(){return Oo(To)},useDebugValue:Zo,useDeferredValue:function(e){return Ko(Eo(),mo.memoizedState,e)},useTransition:function(){return[Oo(To)[0],Eo().memoizedState]},useMutableSource:Bo,useSyncExternalStore:Mo,useId:es,unstable_isNewReconciler:!1},us={readContext:_a,useCallback:qo,useContext:_a,useEffect:Uo,useImperativeHandle:Qo,useInsertionEffect:Vo,useLayoutEffect:Ho,useMemo:Xo,useReducer:Po,useRef:Ro,useState:function(){return Po(To)},useDebugValue:Zo,useDeferredValue:function(e){var t=Eo();return null===mo?t.memoizedState=e:Ko(t,mo.memoizedState,e)},useTransition:function(){return[Po(To)[0],Eo().memoizedState]},useMutableSource:Bo,useSyncExternalStore:Mo,useId:es,unstable_isNewReconciler:!1};function cs(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function ps(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function ds(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fs="function"==typeof WeakMap?WeakMap:Map;function hs(e,t,n){(n=Da(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ul||(Ul=!0,Vl=r),ds(0,t)},n}function gs(e,t,n){(n=Da(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){ds(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){ds(0,t),"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ms(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fs;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=_u.bind(null,e,t,n),t.then(e,e))}function As(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vs(e,t,n,r,i){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Da(-1,1)).tag=2,za(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var bs=y.ReactCurrentOwner,ys=!1;function ws(e,t,n,r){t.child=null===e?Xa(t,null,n,r):qa(t,e.child,n,r)}function Cs(e,t,n,r,i){n=n.render;var a=t.ref;return Sa(t,i),r=So(e,t,n,r,a,i),n=_o(),null===e||ys?(ia&&n&&ea(t),t.flags|=1,ws(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Us(e,t,i))}function xs(e,t,n,r,i){if(null===e){var a=n.type;return"function"!=typeof a||Mu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=zu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ss(e,t,a,r,i))}if(a=e.child,0==(e.lanes&i)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)return Us(e,t,i)}return t.flags|=1,(e=Du(a,r)).ref=t.ref,e.return=t,t.child=e}function Ss(e,t,n,r,i){if(null!==e){var a=e.memoizedProps;if(lr(a,r)&&e.ref===t.ref){if(ys=!1,t.pendingProps=r=a,0==(e.lanes&i))return t.lanes=e.lanes,Us(e,t,i);0!=(131072&e.flags)&&(ys=!0)}}return Es(e,t,n,r,i)}function _s(e,t,n){var r=t.pendingProps,i=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},ki(Dl,Ml),Ml|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,ki(Dl,Ml),Ml|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,ki(Dl,Ml),Ml|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,ki(Dl,Ml),Ml|=r;return ws(e,t,i,n),t.child}function ks(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Es(e,t,n,r,i){var a=Mi(n)?Pi:Ti.current;return a=Bi(t,a),Sa(t,i),n=So(e,t,n,r,a,i),r=_o(),null===e||ys?(ia&&r&&ea(t),t.flags|=1,ws(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Us(e,t,i))}function Ts(e,t,n,r,i){if(Mi(n)){var a=!0;ji(t)}else a=!1;if(Sa(t,i),null===t.stateNode)Ys(e,t),Ya(t,n,r),Va(t,n,r,i),r=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var l=o.context,u=n.contextType;u="object"==typeof u&&null!==u?_a(u):Bi(t,u=Mi(n)?Pi:Ti.current);var c=n.getDerivedStateFromProps,p="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;p||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||l!==u)&&Ua(t,o,r,u),Pa=!1;var d=t.memoizedState;o.state=d,La(t,r,o,i),l=t.memoizedState,s!==r||d!==l||Oi.current||Pa?("function"==typeof c&&(Ra(t,n,c,r),l=t.memoizedState),(s=Pa||Ga(t,n,s,r,d,l,u))?(p||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),o.props=r,o.state=l,o.context=u,r=s):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,Ma(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:ma(t.type,s),o.props=u,p=t.pendingProps,d=o.context,l="object"==typeof(l=n.contextType)&&null!==l?_a(l):Bi(t,l=Mi(n)?Pi:Ti.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==p||d!==l)&&Ua(t,o,r,l),Pa=!1,d=t.memoizedState,o.state=d,La(t,r,o,i);var h=t.memoizedState;s!==p||d!==h||Oi.current||Pa?("function"==typeof f&&(Ra(t,n,f,r),h=t.memoizedState),(u=Pa||Ga(t,n,u,r,d,h,l)||!1)?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,h,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),o.props=r,o.state=h,o.context=l,r=u):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Os(e,t,n,r,a,i)}function Os(e,t,n,r,i,a){ks(e,t);var o=0!=(128&t.flags);if(!r&&!o)return i&&Li(t,n,!1),Us(e,t,a);r=t.stateNode,bs.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=qa(t,e.child,null,a),t.child=qa(t,null,s,a)):ws(e,t,s,a),t.memoizedState=r.state,i&&Li(t,n,!0),t.child}function Ps(e){var t=e.stateNode;t.pendingContext?zi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&zi(0,t.context,!1),ro(e,t.containerInfo)}function Bs(e,t,n,r,i){return fa(),ha(i),t.flags|=256,ws(e,t,n,r),t.child}var Ms,Ds,zs,Ns={dehydrated:null,treeContext:null,retryLane:0};function js(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ls(e,t,n){var r,i=t.pendingProps,o=so.current,s=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),ki(so,1&o),null===e)return ua(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=i.children,e=i.fallback,s?(i=t.mode,s=t.child,l={mode:"hidden",children:l},0==(1&i)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=ju(l,i,0,null),e=Nu(e,i,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=js(n),t.memoizedState=Ns,e):Is(t,l));if(null!==(o=e.memoizedState)&&null!==(r=o.dehydrated))return function(e,t,n,r,i,o,s){if(n)return 256&t.flags?(t.flags&=-257,Fs(e,t,s,r=ps(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=r.fallback,i=t.mode,r=ju({mode:"visible",children:r.children},i,0,null),(o=Nu(o,i,s,null)).flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,0!=(1&t.mode)&&qa(t,e.child,null,s),t.child.memoizedState=js(s),t.memoizedState=Ns,o);if(0==(1&t.mode))return Fs(e,t,s,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,Fs(e,t,s,r=ps(o=Error(a(419)),r,void 0))}if(l=0!=(s&e.childLanes),ys||l){if(null!==(r=Ol)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|s))?0:i)&&i!==o.retryLane&&(o.retryLane=i,Oa(e,i),nu(r,e,i,-1))}return gu(),Fs(e,t,s,r=ps(Error(a(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=Eu.bind(null,e),i._reactRetry=t,null):(e=o.treeContext,ra=ui(i.nextSibling),na=t,ia=!0,aa=null,null!==e&&(Wi[Qi++]=qi,Wi[Qi++]=Xi,Wi[Qi++]=Zi,qi=e.id,Xi=e.overflow,Zi=t),(t=Is(t,r.children)).flags|=4096,t)}(e,t,l,i,r,o,n);if(s){s=i.fallback,l=t.mode,r=(o=e.child).sibling;var u={mode:"hidden",children:i.children};return 0==(1&l)&&t.child!==o?((i=t.child).childLanes=0,i.pendingProps=u,t.deletions=null):(i=Du(o,u)).subtreeFlags=14680064&o.subtreeFlags,null!==r?s=Du(r,s):(s=Nu(s,l,n,null)).flags|=2,s.return=t,i.return=t,i.sibling=s,t.child=i,i=s,s=t.child,l=null===(l=e.child.memoizedState)?js(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Ns,i}return e=(s=e.child).sibling,i=Du(s,{mode:"visible",children:i.children}),0==(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function Is(e,t){return(t=ju({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fs(e,t,n,r){return null!==r&&ha(r),qa(t,e.child,null,n),(e=Is(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Rs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),xa(e.return,t,n)}function $s(e,t,n,r,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i)}function Gs(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(ws(e,t,r.children,n),0!=(2&(r=so.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Rs(e,n,t);else if(19===e.tag)Rs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ki(so,r),0==(1&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===lo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),$s(t,!1,i,n,a);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===lo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}$s(t,!0,n,null,a);break;case"together":$s(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ys(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Us(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),jl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Du(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Du(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vs(e,t){if(!ia)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ws(e,t,n){var r=t.pendingProps;switch(ta(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hs(t),null;case 1:case 17:return Mi(t.type)&&Di(),Hs(t),null;case 3:return r=t.stateNode,io(),_i(Oi),_i(Ti),co(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(pa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==aa&&(ou(aa),aa=null))),Hs(t),null;case 5:oo(t);var i=no(to.current);if(n=t.type,null!==e&&null!=t.stateNode)Ds(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Hs(t),null}if(e=no(Ja.current),pa(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[di]=t,r[fi]=o,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(i=0;i<Nr.length;i++)Fr(Nr[i],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":q(r,o),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},Fr("invalid",r);break;case"textarea":ie(r,o),Fr("invalid",r)}for(var l in ve(n,o),i=null,o)if(o.hasOwnProperty(l)){var u=o[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==o.suppressHydrationWarning&&Kr(r.textContent,u,e),i=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==o.suppressHydrationWarning&&Kr(r.textContent,u,e),i=["children",""+u]):s.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&Fr("scroll",r)}switch(n){case"input":H(r),J(r,o,!0);break;case"textarea":H(r),oe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Jr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[di]=t,e[fi]=r,Ms(e,t),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),i=r;break;case"iframe":case"object":case"embed":Fr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Nr.length;i++)Fr(Nr[i],e);i=r;break;case"source":Fr("error",e),i=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),i=r;break;case"details":Fr("toggle",e),i=r;break;case"input":q(e,r),i=Z(e,r),Fr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=L({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Fr("invalid",e)}for(o in ve(n,i),u=i)if(u.hasOwnProperty(o)){var c=u[o];"style"===o?me(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&pe(e,c):"children"===o?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(s.hasOwnProperty(o)?null!=c&&"onScroll"===o&&Fr("scroll",e):null!=c&&b(e,o,c,l))}switch(n){case"input":H(e),J(e,r,!1);break;case"textarea":H(e),oe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+U(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?ne(e,!!r.multiple,o,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hs(t),null;case 6:if(e&&null!=t.stateNode)zs(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=no(to.current),no(Ja.current),pa(t)){if(r=t.stateNode,n=t.memoizedProps,r[di]=t,(o=r.nodeValue!==n)&&null!==(e=na))switch(e.tag){case 3:Kr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Kr(r.nodeValue,n,0!=(1&e.mode))}o&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[di]=t,t.stateNode=r}return Hs(t),null;case 13:if(_i(so),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ia&&null!==ra&&0!=(1&t.mode)&&0==(128&t.flags))da(),fa(),t.flags|=98560,o=!1;else if(o=pa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(a(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(a(317));o[di]=t}else fa(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hs(t),o=!1}else null!==aa&&(ou(aa),aa=null),o=!0;if(!o)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&so.current)?0===zl&&(zl=3):gu())),null!==t.updateQueue&&(t.flags|=4),Hs(t),null);case 4:return io(),null===e&&Gr(t.stateNode.containerInfo),Hs(t),null;case 10:return Ca(t.type._context),Hs(t),null;case 19:if(_i(so),null===(o=t.memoizedState))return Hs(t),null;if(r=0!=(128&t.flags),null===(l=o.rendering))if(r)Vs(o,!1);else{if(0!==zl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=lo(e))){for(t.flags|=128,Vs(o,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=14680066,null===(l=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=l.childLanes,o.lanes=l.lanes,o.child=l.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=l.memoizedProps,o.memoizedState=l.memoizedState,o.updateQueue=l.updateQueue,o.type=l.type,e=l.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ki(so,1&so.current|2),t.child}e=e.sibling}null!==o.tail&&Xe()>Gl&&(t.flags|=128,r=!0,Vs(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=lo(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vs(o,!0),null===o.tail&&"hidden"===o.tailMode&&!l.alternate&&!ia)return Hs(t),null}else 2*Xe()-o.renderingStartTime>Gl&&1073741824!==n&&(t.flags|=128,r=!0,Vs(o,!1),t.lanes=4194304);o.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=o.last)?n.sibling=l:t.child=l,o.last=l)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=Xe(),t.sibling=null,n=so.current,ki(so,r?1&n|2:1&n),t):(Hs(t),null);case 22:case 23:return pu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ml)&&(Hs(t),6&t.subtreeFlags&&(t.flags|=8192)):Hs(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Qs(e,t){switch(ta(t),t.tag){case 1:return Mi(t.type)&&Di(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return io(),_i(Oi),_i(Ti),co(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return oo(t),null;case 13:if(_i(so),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));fa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return _i(so),null;case 4:return io(),null;case 10:return Ca(t.type._context),null;case 22:case 23:return pu(),null;default:return null}}Ms=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ds=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,no(Ja.current);var a,o=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),o=[];break;case"select":i=L({},i,{value:void 0}),r=L({},r,{value:void 0}),o=[];break;case"textarea":i=re(e,i),r=re(e,r),o=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(n,r),n=null,i)if(!r.hasOwnProperty(c)&&i.hasOwnProperty(c)&&null!=i[c])if("style"===c){var l=i[c];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=i?i[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(a in l)!l.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&l[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(o||(o=[]),o.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(o=o||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(o=o||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Fr("scroll",e),o||l===u||(o=[])):(o=o||[]).push(c,u))}n&&(o=o||[]).push("style",n);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},zs=function(e,t,n,r){n!==r&&(t.flags|=4)};var Zs=!1,qs=!1,Xs="function"==typeof WeakSet?WeakSet:Set,Ks=null;function Js(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Su(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Su(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var a=i.destroy;i.destroy=void 0,void 0!==a&&el(t,n,a)}i=i.next}while(i!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function al(e){var t=e.alternate;null!==t&&(e.alternate=null,al(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[di],delete t[fi],delete t[gi],delete t[mi],delete t[Ai]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ol(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ol(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var cl=null,pl=!1;function dl(e,t,n){for(n=n.child;null!==n;)fl(e,t,n),n=n.sibling}function fl(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:qs||Js(n,t);case 6:var r=cl,i=pl;cl=null,dl(e,t,n),pl=i,null!==(cl=r)&&(pl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(pl?(e=cl,n=n.stateNode,8===e.nodeType?li(e.parentNode,n):1===e.nodeType&&li(e,n),Gt(e)):li(cl,n.stateNode));break;case 4:r=cl,i=pl,cl=n.stateNode.containerInfo,pl=!0,dl(e,t,n),cl=r,pl=i;break;case 0:case 11:case 14:case 15:if(!qs&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var a=i,o=a.destroy;a=a.tag,void 0!==o&&(0!=(2&a)||0!=(4&a))&&el(n,t,o),i=i.next}while(i!==r)}dl(e,t,n);break;case 1:if(!qs&&(Js(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Su(n,t,e)}dl(e,t,n);break;case 21:dl(e,t,n);break;case 22:1&n.mode?(qs=(r=qs)||null!==n.memoizedState,dl(e,t,n),qs=r):dl(e,t,n);break;default:dl(e,t,n)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xs),t.forEach((function(t){var r=Tu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var o=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,pl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,pl=!0;break e}l=l.return}if(null===cl)throw Error(a(160));fl(o,s,i),cl=null,pl=!1;var u=i.alternate;null!==u&&(u.return=null),i.return=null}catch(e){Su(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ml(t,e),t=t.sibling}function ml(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(t,e),Al(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){Su(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Su(e,e.return,t)}}break;case 1:gl(t,e),Al(e),512&r&&null!==n&&Js(n,n.return);break;case 5:if(gl(t,e),Al(e),512&r&&null!==n&&Js(n,n.return),32&e.flags){var i=e.stateNode;try{de(i,"")}catch(t){Su(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var o=e.memoizedProps,s=null!==n?n.memoizedProps:o,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===o.type&&null!=o.name&&X(i,o),be(l,s);var c=be(l,o);for(s=0;s<u.length;s+=2){var p=u[s],d=u[s+1];"style"===p?me(i,d):"dangerouslySetInnerHTML"===p?pe(i,d):"children"===p?de(i,d):b(i,p,d,c)}switch(l){case"input":K(i,o);break;case"textarea":ae(i,o);break;case"select":var f=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!o.multiple;var h=o.value;null!=h?ne(i,!!o.multiple,h,!1):f!==!!o.multiple&&(null!=o.defaultValue?ne(i,!!o.multiple,o.defaultValue,!0):ne(i,!!o.multiple,o.multiple?[]:"",!1))}i[fi]=o}catch(t){Su(e,e.return,t)}}break;case 6:if(gl(t,e),Al(e),4&r){if(null===e.stateNode)throw Error(a(162));i=e.stateNode,o=e.memoizedProps;try{i.nodeValue=o}catch(t){Su(e,e.return,t)}}break;case 3:if(gl(t,e),Al(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Gt(t.containerInfo)}catch(t){Su(e,e.return,t)}break;case 4:default:gl(t,e),Al(e);break;case 13:gl(t,e),Al(e),8192&(i=e.child).flags&&(o=null!==i.memoizedState,i.stateNode.isHidden=o,!o||null!==i.alternate&&null!==i.alternate.memoizedState||($l=Xe())),4&r&&hl(e);break;case 22:if(p=null!==n&&null!==n.memoizedState,1&e.mode?(qs=(c=qs)||p,gl(t,e),qs=c):gl(t,e),Al(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!p&&0!=(1&e.mode))for(Ks=e,p=e.child;null!==p;){for(d=Ks=p;null!==Ks;){switch(h=(f=Ks).child,f.tag){case 0:case 11:case 14:case 15:nl(4,f,f.return);break;case 1:Js(f,f.return);var g=f.stateNode;if("function"==typeof g.componentWillUnmount){r=f,n=f.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){Su(r,n,e)}}break;case 5:Js(f,f.return);break;case 22:if(null!==f.memoizedState){wl(d);continue}}null!==h?(h.return=f,Ks=h):wl(d)}p=p.sibling}e:for(p=null,d=e;;){if(5===d.tag){if(null===p){p=d;try{i=d.stateNode,c?"function"==typeof(o=i.style).setProperty?o.setProperty("display","none","important"):o.display="none":(l=d.stateNode,s=null!=(u=d.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=ge("display",s))}catch(t){Su(e,e.return,t)}}}else if(6===d.tag){if(null===p)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Su(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;p===d&&(p=null),d=d.return}p===d&&(p=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:gl(t,e),Al(e),4&r&&hl(e);case 21:}}function Al(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ol(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(de(i,""),r.flags&=-33),ul(e,sl(e),i);break;case 3:case 4:var o=r.stateNode.containerInfo;ll(e,sl(e),o);break;default:throw Error(a(161))}}catch(t){Su(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vl(e,t,n){Ks=e,bl(e,t,n)}function bl(e,t,n){for(var r=0!=(1&e.mode);null!==Ks;){var i=Ks,a=i.child;if(22===i.tag&&r){var o=null!==i.memoizedState||Zs;if(!o){var s=i.alternate,l=null!==s&&null!==s.memoizedState||qs;s=Zs;var u=qs;if(Zs=o,(qs=l)&&!u)for(Ks=i;null!==Ks;)l=(o=Ks).child,22===o.tag&&null!==o.memoizedState?Cl(i):null!==l?(l.return=o,Ks=l):Cl(i);for(;null!==a;)Ks=a,bl(a,t,n),a=a.sibling;Ks=i,Zs=s,qs=u}yl(e)}else 0!=(8772&i.subtreeFlags)&&null!==a?(a.return=i,Ks=a):yl(e)}}function yl(e){for(;null!==Ks;){var t=Ks;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:qs||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!qs)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:ma(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;null!==o&&Ia(t,o,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Ia(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var p=c.memoizedState;if(null!==p){var d=p.dehydrated;null!==d&&Gt(d)}}}break;default:throw Error(a(163))}qs||512&t.flags&&il(t)}catch(e){Su(t,t.return,e)}}if(t===e){Ks=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ks=n;break}Ks=t.return}}function wl(e){for(;null!==Ks;){var t=Ks;if(t===e){Ks=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ks=n;break}Ks=t.return}}function Cl(e){for(;null!==Ks;){var t=Ks;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){Su(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){Su(t,i,e)}}var a=t.return;try{il(t)}catch(e){Su(t,a,e)}break;case 5:var o=t.return;try{il(t)}catch(e){Su(t,o,e)}}}catch(e){Su(t,t.return,e)}if(t===e){Ks=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Ks=s;break}Ks=t.return}}var xl,Sl=Math.ceil,_l=y.ReactCurrentDispatcher,kl=y.ReactCurrentOwner,El=y.ReactCurrentBatchConfig,Tl=0,Ol=null,Pl=null,Bl=0,Ml=0,Dl=Si(0),zl=0,Nl=null,jl=0,Ll=0,Il=0,Fl=null,Rl=null,$l=0,Gl=1/0,Yl=null,Ul=!1,Vl=null,Hl=null,Wl=!1,Ql=null,Zl=0,ql=0,Xl=null,Kl=-1,Jl=0;function eu(){return 0!=(6&Tl)?Xe():-1!==Kl?Kl:Kl=Xe()}function tu(e){return 0==(1&e.mode)?1:0!=(2&Tl)&&0!==Bl?Bl&-Bl:null!==ga.transition?(0===Jl&&(Jl=gt()),Jl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:qt(e.type)}function nu(e,t,n,r){if(50<ql)throw ql=0,Xl=null,Error(a(185));At(e,n,r),0!=(2&Tl)&&e===Ol||(e===Ol&&(0==(2&Tl)&&(Ll|=n),4===zl&&su(e,Bl)),ru(e,r),1===n&&0===Tl&&0==(1&t.mode)&&(Gl=Xe()+500,Fi&&Gi()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,a=e.pendingLanes;0<a;){var o=31-ot(a),s=1<<o,l=i[o];-1===l?0!=(s&n)&&0==(s&r)||(i[o]=ft(s,t)):l<=t&&(e.expiredLanes|=s),a&=~s}}(e,t);var r=dt(e,e===Ol?Bl:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Fi=!0,$i(e)}(lu.bind(null,e)):$i(lu.bind(null,e)),oi((function(){0==(6&Tl)&&Gi()})),n=null;else{switch(yt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ou(n,iu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function iu(e,t){if(Kl=-1,Jl=0,0!=(6&Tl))throw Error(a(327));var n=e.callbackNode;if(Cu()&&e.callbackNode!==n)return null;var r=dt(e,e===Ol?Bl:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=mu(e,r);else{t=r;var i=Tl;Tl|=2;var o=hu();for(Ol===e&&Bl===t||(Yl=null,Gl=Xe()+500,du(e,t));;)try{vu();break}catch(t){fu(e,t)}wa(),_l.current=o,Tl=i,null!==Pl?t=0:(Ol=null,Bl=0,t=zl)}if(0!==t){if(2===t&&0!==(i=ht(e))&&(r=i,t=au(e,i)),1===t)throw n=Nl,du(e,0),su(e,r),ru(e,Xe()),n;if(6===t)su(e,r);else{if(i=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],a=i.getSnapshot;i=i.value;try{if(!sr(a(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)&&(2===(t=mu(e,r))&&0!==(o=ht(e))&&(r=o,t=au(e,o)),1===t))throw n=Nl,du(e,0),su(e,r),ru(e,Xe()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:wu(e,Rl,Yl);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=$l+500-Xe())){if(0!==dt(e,0))break;if(((i=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(wu.bind(null,e,Rl,Yl),t);break}wu(e,Rl,Yl);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var s=31-ot(r);o=1<<s,(s=t[s])>i&&(i=s),r&=~o}if(r=i,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Sl(r/1960))-r)){e.timeoutHandle=ri(wu.bind(null,e,Rl,Yl),r);break}wu(e,Rl,Yl);break;default:throw Error(a(329))}}}return ru(e,Xe()),e.callbackNode===n?iu.bind(null,e):null}function au(e,t){var n=Fl;return e.current.memoizedState.isDehydrated&&(du(e,t).flags|=256),2!==(e=mu(e,t))&&(t=Rl,Rl=n,null!==t&&ou(t)),e}function ou(e){null===Rl?Rl=e:Rl.push.apply(Rl,e)}function su(e,t){for(t&=~Il,t&=~Ll,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ot(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(0!=(6&Tl))throw Error(a(327));Cu();var t=dt(e,0);if(0==(1&t))return ru(e,Xe()),null;var n=mu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=au(e,r))}if(1===n)throw n=Nl,du(e,0),su(e,t),ru(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wu(e,Rl,Yl),ru(e,Xe()),null}function uu(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(Gl=Xe()+500,Fi&&Gi())}}function cu(e){null!==Ql&&0===Ql.tag&&0==(6&Tl)&&Cu();var t=Tl;Tl|=1;var n=El.transition,r=bt;try{if(El.transition=null,bt=1,e)return e()}finally{bt=r,El.transition=n,0==(6&(Tl=t))&&Gi()}}function pu(){Ml=Dl.current,_i(Dl)}function du(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Pl)for(n=Pl.return;null!==n;){var r=n;switch(ta(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Di();break;case 3:io(),_i(Oi),_i(Ti),co();break;case 5:oo(r);break;case 4:io();break;case 13:case 19:_i(so);break;case 10:Ca(r.type._context);break;case 22:case 23:pu()}n=n.return}if(Ol=e,Pl=e=Du(e.current,null),Bl=Ml=t,zl=0,Nl=null,Il=Ll=jl=0,Rl=Fl=null,null!==ka){for(t=0;t<ka.length;t++)if(null!==(r=(n=ka[t]).interleaved)){n.interleaved=null;var i=r.next,a=n.pending;if(null!==a){var o=a.next;a.next=i,r.next=o}n.pending=r}ka=null}return e}function fu(e,t){for(;;){var n=Pl;try{if(wa(),po.current=os,vo){for(var r=go.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}vo=!1}if(ho=0,Ao=mo=go=null,bo=!1,yo=0,kl.current=null,null===n||null===n.return){zl=1,Nl=t,Pl=null;break}e:{var o=e,s=n.return,l=n,u=t;if(t=Bl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,p=l,d=p.tag;if(0==(1&p.mode)&&(0===d||11===d||15===d)){var f=p.alternate;f?(p.updateQueue=f.updateQueue,p.memoizedState=f.memoizedState,p.lanes=f.lanes):(p.updateQueue=null,p.memoizedState=null)}var h=As(s);if(null!==h){h.flags&=-257,vs(h,s,l,0,t),1&h.mode&&ms(o,c,t),u=c;var g=(t=h).updateQueue;if(null===g){var m=new Set;m.add(u),t.updateQueue=m}else g.add(u);break e}if(0==(1&t)){ms(o,c,t),gu();break e}u=Error(a(426))}else if(ia&&1&l.mode){var A=As(s);if(null!==A){0==(65536&A.flags)&&(A.flags|=256),vs(A,s,l,0,t),ha(cs(u,l));break e}}o=u=cs(u,l),4!==zl&&(zl=2),null===Fl?Fl=[o]:Fl.push(o),o=s;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t,ja(o,hs(0,u,t));break e;case 1:l=u;var v=o.type,b=o.stateNode;if(0==(128&o.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Hl||!Hl.has(b)))){o.flags|=65536,t&=-t,o.lanes|=t,ja(o,gs(o,l,t));break e}}o=o.return}while(null!==o)}yu(n)}catch(e){t=e,Pl===n&&null!==n&&(Pl=n=n.return);continue}break}}function hu(){var e=_l.current;return _l.current=os,null===e?os:e}function gu(){0!==zl&&3!==zl&&2!==zl||(zl=4),null===Ol||0==(268435455&jl)&&0==(268435455&Ll)||su(Ol,Bl)}function mu(e,t){var n=Tl;Tl|=2;var r=hu();for(Ol===e&&Bl===t||(Yl=null,du(e,t));;)try{Au();break}catch(t){fu(e,t)}if(wa(),Tl=n,_l.current=r,null!==Pl)throw Error(a(261));return Ol=null,Bl=0,zl}function Au(){for(;null!==Pl;)bu(Pl)}function vu(){for(;null!==Pl&&!Ze();)bu(Pl)}function bu(e){var t=xl(e.alternate,e,Ml);e.memoizedProps=e.pendingProps,null===t?yu(e):Pl=t,kl.current=null}function yu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ws(n,t,Ml)))return void(Pl=n)}else{if(null!==(n=Qs(n,t)))return n.flags&=32767,void(Pl=n);if(null===e)return zl=6,void(Pl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Pl=t);Pl=t=e}while(null!==t);0===zl&&(zl=5)}function wu(e,t,n){var r=bt,i=El.transition;try{El.transition=null,bt=1,function(e,t,n,r){do{Cu()}while(null!==Ql);if(0!=(6&Tl))throw Error(a(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-ot(n),a=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~a}}(e,o),e===Ol&&(Pl=Ol=null,Bl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Wl||(Wl=!0,Ou(tt,(function(){return Cu(),null}))),o=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||o){o=El.transition,El.transition=null;var s=bt;bt=1;var l=Tl;Tl|=4,kl.current=null,function(e,t){if(ei=Ut,fr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var s=0,l=-1,u=-1,c=0,p=0,d=e,f=null;t:for(;;){for(var h;d!==n||0!==i&&3!==d.nodeType||(l=s+i),d!==o||0!==r&&3!==d.nodeType||(u=s+r),3===d.nodeType&&(s+=d.nodeValue.length),null!==(h=d.firstChild);)f=d,d=h;for(;;){if(d===e)break t;if(f===n&&++c===i&&(l=s),f===o&&++p===r&&(u=s),null!==(h=d.nextSibling))break;f=(d=f).parentNode}d=h}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},Ut=!1,Ks=t;null!==Ks;)if(e=(t=Ks).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Ks=e;else for(;null!==Ks;){t=Ks;try{var g=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,A=g.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?m:ma(t.type,m),A);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var y=t.stateNode.containerInfo;1===y.nodeType?y.textContent="":9===y.nodeType&&y.documentElement&&y.removeChild(y.documentElement);break;default:throw Error(a(163))}}catch(e){Su(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ks=e;break}Ks=t.return}g=tl,tl=!1}(e,n),ml(n,e),hr(ti),Ut=!!ei,ti=ei=null,e.current=n,vl(n,e,i),qe(),Tl=l,bt=s,El.transition=o}else e.current=n;if(Wl&&(Wl=!1,Ql=e,Zl=i),0===(o=e.pendingLanes)&&(Hl=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ru(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Ul)throw Ul=!1,e=Vl,Vl=null,e;0!=(1&Zl)&&0!==e.tag&&Cu(),0!=(1&(o=e.pendingLanes))?e===Xl?ql++:(ql=0,Xl=e):ql=0,Gi()}(e,t,n,r)}finally{El.transition=i,bt=r}return null}function Cu(){if(null!==Ql){var e=yt(Zl),t=El.transition,n=bt;try{if(El.transition=null,bt=16>e?16:e,null===Ql)var r=!1;else{if(e=Ql,Ql=null,Zl=0,0!=(6&Tl))throw Error(a(331));var i=Tl;for(Tl|=4,Ks=e.current;null!==Ks;){var o=Ks,s=o.child;if(0!=(16&Ks.flags)){var l=o.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Ks=c;null!==Ks;){var p=Ks;switch(p.tag){case 0:case 11:case 15:nl(8,p,o)}var d=p.child;if(null!==d)d.return=p,Ks=d;else for(;null!==Ks;){var f=(p=Ks).sibling,h=p.return;if(al(p),p===c){Ks=null;break}if(null!==f){f.return=h,Ks=f;break}Ks=h}}}var g=o.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var A=m.sibling;m.sibling=null,m=A}while(null!==m)}}Ks=o}}if(0!=(2064&o.subtreeFlags)&&null!==s)s.return=o,Ks=s;else e:for(;null!==Ks;){if(0!=(2048&(o=Ks).flags))switch(o.tag){case 0:case 11:case 15:nl(9,o,o.return)}var v=o.sibling;if(null!==v){v.return=o.return,Ks=v;break e}Ks=o.return}}var b=e.current;for(Ks=b;null!==Ks;){var y=(s=Ks).child;if(0!=(2064&s.subtreeFlags)&&null!==y)y.return=s,Ks=y;else e:for(s=b;null!==Ks;){if(0!=(2048&(l=Ks).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Su(l,l.return,e)}if(l===s){Ks=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Ks=w;break e}Ks=l.return}}if(Tl=i,Gi(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{bt=n,El.transition=t}}return!1}function xu(e,t,n){e=za(e,t=hs(0,t=cs(n,t),1),1),t=eu(),null!==e&&(At(e,1,t),ru(e,t))}function Su(e,t,n){if(3===e.tag)xu(e,e,n);else for(;null!==t;){if(3===t.tag){xu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){t=za(t,e=gs(t,e=cs(n,e),1),1),e=eu(),null!==t&&(At(t,1,e),ru(t,e));break}}t=t.return}}function _u(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Ol===e&&(Bl&n)===n&&(4===zl||3===zl&&(130023424&Bl)===Bl&&500>Xe()-$l?du(e,0):Il|=n),ru(e,t)}function ku(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=eu();null!==(e=Oa(e,t))&&(At(e,t,n),ru(e,n))}function Eu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ku(e,n)}function Tu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),ku(e,n)}function Ou(e,t){return We(e,t)}function Pu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Bu(e,t,n,r){return new Pu(e,t,n,r)}function Mu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Du(e,t){var n=e.alternate;return null===n?((n=Bu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function zu(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)Mu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case x:return Nu(n.children,i,o,t);case S:s=8,i|=8;break;case _:return(e=Bu(12,n,t,2|i)).elementType=_,e.lanes=o,e;case O:return(e=Bu(13,n,t,i)).elementType=O,e.lanes=o,e;case P:return(e=Bu(19,n,t,i)).elementType=P,e.lanes=o,e;case D:return ju(n,i,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:s=10;break e;case E:s=9;break e;case T:s=11;break e;case B:s=14;break e;case M:s=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Bu(s,n,t,i)).elementType=e,t.type=r,t.lanes=o,t}function Nu(e,t,n,r){return(e=Bu(7,e,r,t)).lanes=n,e}function ju(e,t,n,r){return(e=Bu(22,e,r,t)).elementType=D,e.lanes=n,e.stateNode={isHidden:!1},e}function Lu(e,t,n){return(e=Bu(6,e,null,t)).lanes=n,e}function Iu(e,t,n){return(t=Bu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fu(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Ru(e,t,n,r,i,a,o,s,l){return e=new Fu(e,t,n,s,l),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Bu(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ba(a),e}function $u(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gu(e){if(!e)return Ei;e:{if(Ge(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Mi(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Mi(n))return Ni(e,n,t)}return t}function Yu(e,t,n,r,i,a,o,s,l){return(e=Ru(n,r,!0,e,0,a,0,s,l)).context=Gu(null),n=e.current,(a=Da(r=eu(),i=tu(n))).callback=null!=t?t:null,za(n,a,i),e.current.lanes=i,At(e,i,r),ru(e,r),e}function Uu(e,t,n,r){var i=t.current,a=eu(),o=tu(i);return n=Gu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Da(a,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=za(i,t,o))&&(nu(e,i,o,a),Na(e,i,o)),o}function Vu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Wu(e,t){Hu(e,t),(e=e.alternate)&&Hu(e,t)}xl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oi.current)ys=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ys=!1,function(e,t,n){switch(t.tag){case 3:Ps(t),fa();break;case 5:ao(t);break;case 1:Mi(t.type)&&ji(t);break;case 4:ro(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;ki(Aa,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(ki(so,1&so.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ls(e,t,n):(ki(so,1&so.current),null!==(e=Us(e,t,n))?e.sibling:null);ki(so,1&so.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Gs(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),ki(so,so.current),r)break;return null;case 22:case 23:return t.lanes=0,_s(e,t,n)}return Us(e,t,n)}(e,t,n);ys=0!=(131072&e.flags)}else ys=!1,ia&&0!=(1048576&t.flags)&&Ji(t,Hi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ys(e,t),e=t.pendingProps;var i=Bi(t,Ti.current);Sa(t,n),i=So(null,t,r,e,i,n);var o=_o();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Mi(r)?(o=!0,ji(t)):o=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Ba(t),i.updater=$a,t.stateNode=i,i._reactInternals=t,Va(t,r,e,n),t=Os(null,t,r,!0,o,n)):(t.tag=0,ia&&o&&ea(t),ws(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ys(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Mu(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===B)return 14}return 2}(r),e=ma(r,e),i){case 0:t=Es(null,t,r,e,n);break e;case 1:t=Ts(null,t,r,e,n);break e;case 11:t=Cs(null,t,r,e,n);break e;case 14:t=xs(null,t,r,ma(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,Es(e,t,r,i=t.elementType===r?i:ma(r,i),n);case 1:return r=t.type,i=t.pendingProps,Ts(e,t,r,i=t.elementType===r?i:ma(r,i),n);case 3:e:{if(Ps(t),null===e)throw Error(a(387));r=t.pendingProps,i=(o=t.memoizedState).element,Ma(e,t),La(t,r,null,n);var s=t.memoizedState;if(r=s.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=Bs(e,t,r,n,i=cs(Error(a(423)),t));break e}if(r!==i){t=Bs(e,t,r,n,i=cs(Error(a(424)),t));break e}for(ra=ui(t.stateNode.containerInfo.firstChild),na=t,ia=!0,aa=null,n=Xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(fa(),r===i){t=Us(e,t,n);break e}ws(e,t,r,n)}t=t.child}return t;case 5:return ao(t),null===e&&ua(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,ni(r,i)?s=null:null!==o&&ni(r,o)&&(t.flags|=32),ks(e,t),ws(e,t,s,n),t.child;case 6:return null===e&&ua(t),null;case 13:return Ls(e,t,n);case 4:return ro(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=qa(t,null,r,n):ws(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Cs(e,t,r,i=t.elementType===r?i:ma(r,i),n);case 7:return ws(e,t,t.pendingProps,n),t.child;case 8:case 12:return ws(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,o=t.memoizedProps,s=i.value,ki(Aa,r._currentValue),r._currentValue=s,null!==o)if(sr(o.value,s)){if(o.children===i.children&&!Oi.current){t=Us(e,t,n);break e}}else for(null!==(o=t.child)&&(o.return=t);null!==o;){var l=o.dependencies;if(null!==l){s=o.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===o.tag){(u=Da(-1,n&-n)).tag=2;var c=o.updateQueue;if(null!==c){var p=(c=c.shared).pending;null===p?u.next=u:(u.next=p.next,p.next=u),c.pending=u}}o.lanes|=n,null!==(u=o.alternate)&&(u.lanes|=n),xa(o.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===o.tag)s=o.type===t.type?null:o.child;else if(18===o.tag){if(null===(s=o.return))throw Error(a(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),xa(s,n,t),s=o.sibling}else s=o.child;if(null!==s)s.return=o;else for(s=o;null!==s;){if(s===t){s=null;break}if(null!==(o=s.sibling)){o.return=s.return,s=o;break}s=s.return}o=s}ws(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,Sa(t,n),r=r(i=_a(i)),t.flags|=1,ws(e,t,r,n),t.child;case 14:return i=ma(r=t.type,t.pendingProps),xs(e,t,r,i=ma(r.type,i),n);case 15:return Ss(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ma(r,i),Ys(e,t),t.tag=1,Mi(r)?(e=!0,ji(t)):e=!1,Sa(t,n),Ya(t,r,i),Va(t,r,i,n),Os(null,t,r,!0,e,n);case 19:return Gs(e,t,n);case 22:return _s(e,t,n)}throw Error(a(156,t.tag))};var Qu="function"==typeof reportError?reportError:function(e){console.error(e)};function Zu(e){this._internalRoot=e}function qu(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ku(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function ec(e,t,n,r,i){var a=n._reactRootContainer;if(a){var o=a;if("function"==typeof i){var s=i;i=function(){var e=Vu(o);s.call(e)}}Uu(t,o,e,i)}else o=function(e,t,n,r,i){if(i){if("function"==typeof r){var a=r;r=function(){var e=Vu(o);a.call(e)}}var o=Yu(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=o,e[hi]=o.current,Gr(8===e.nodeType?e.parentNode:e),cu(),o}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var s=r;r=function(){var e=Vu(l);s.call(e)}}var l=Ru(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=l,e[hi]=l.current,Gr(8===e.nodeType?e.parentNode:e),cu((function(){Uu(t,l,n,r)})),l}(n,t,e,i,r);return Vu(o)}qu.prototype.render=Zu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Uu(e,t,null,null)},qu.prototype.unmount=Zu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){Uu(null,e,null,null)})),t[hi]=null}},qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Dt.length&&0!==t&&t<Dt[n].priority;n++);Dt.splice(n,0,e),0===n&&Lt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=pt(t.pendingLanes);0!==n&&(vt(t,1|n),ru(t,Xe()),0==(6&Tl)&&(Gl=Xe()+500,Gi()))}break;case 13:cu((function(){var t=Oa(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),Wu(e,1)}},Ct=function(e){if(13===e.tag){var t=Oa(e,134217728);null!==t&&nu(t,e,134217728,eu()),Wu(e,134217728)}},xt=function(e){if(13===e.tag){var t=tu(e),n=Oa(e,t);null!==n&&nu(n,e,t,eu()),Wu(e,t)}},St=function(){return bt},_t=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ce=function(e,t,n){switch(t){case"input":if(K(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=wi(r);if(!i)throw Error(a(90));W(r),K(r,i)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Te=uu,Oe=cu;var tc={usingClientEntryPoint:!1,Events:[bi,yi,wi,ke,Ee,uu]},nc={findFiberByHostInstance:vi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{it=ic.inject(rc),at=ic}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(a(200));return $u(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(a(299));var n=!1,r="",i=Qu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=Ru(e,1,!1,null,0,n,0,r,i),e[hi]=t.current,Gr(8===e.nodeType?e.parentNode:e),new Zu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Ku(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,i=!1,o="",s=Qu;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Yu(t,null,e,1,null!=n?n:null,i,0,o,s),e[hi]=t.current,Gr(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new qu(t)},t.render=function(e,t,n){if(!Ku(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ku(e))throw Error(a(40));return!!e._reactRootContainer&&(cu((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[hi]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ku(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var r=n(3935);t.s=r.createRoot,r.hydrateRoot},3935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},5251:function(e,t,n){"use strict";var r=n(7294),i=Symbol.for("react.element"),a=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,a={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:i,type:e,key:u,ref:c,props:a,_owner:s.current}}t.Fragment=a,t.jsx=u,t.jsxs=u},2408:function(e,t){"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),p=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function A(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}A.prototype.isReactComponent={},A.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=A.prototype;var y=b.prototype=new v;y.constructor=b,g(y,A.prototype),y.isPureReactComponent=!0;var w=Array.isArray,C=Object.prototype.hasOwnProperty,x={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var i,a={},o=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)C.call(t,i)&&!S.hasOwnProperty(i)&&(a[i]=t[i]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===a[i]&&(a[i]=l[i]);return{$$typeof:n,type:e,key:o,ref:s,props:a,_owner:x.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var E=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,i,a,o){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return o=o(l=e),e=""===a?"."+T(l,0):a,w(o)?(i="",null!=e&&(i=e.replace(E,"$&/")+"/"),O(o,t,i,"",(function(e){return e}))):null!=o&&(k(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,i+(!o.key||l&&l.key===o.key?"":(""+o.key).replace(E,"$&/")+"/")+e)),t.push(o)),1;if(l=0,a=""===a?".":a+":",w(e))for(var u=0;u<e.length;u++){var c=a+T(s=e[u],u);l+=O(s,t,i,c,o)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=O(s=s.value,t,i,c=a+T(s,u++),o);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function P(e,t,n){if(null==e)return e;var r=[],i=0;return O(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function B(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var M={current:null},D={transition:null},z={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:D,ReactCurrentOwner:x};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=A,t.Fragment=i,t.Profiler=o,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=g({},e.props),a=e.key,o=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,s=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)C.call(t,u)&&!S.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}return{$$typeof:n,type:e.type,key:a,ref:o,props:i,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:B}},t.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=D.transition;D.transition={};try{e()}finally{D.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return M.current.useCallback(e,t)},t.useContext=function(e){return M.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return M.current.useDeferredValue(e)},t.useEffect=function(e,t){return M.current.useEffect(e,t)},t.useId=function(){return M.current.useId()},t.useImperativeHandle=function(e,t,n){return M.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return M.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return M.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return M.current.useMemo(e,t)},t.useReducer=function(e,t,n){return M.current.useReducer(e,t,n)},t.useRef=function(e){return M.current.useRef(e)},t.useState=function(e){return M.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return M.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return M.current.useTransition()},t.version="18.2.0"},7294:function(e,t,n){"use strict";e.exports=n(2408)},5893:function(e,t,n){"use strict";e.exports=n(5251)},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<a(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,o=i>>>1;r<o;){var s=2*(r+1)-1,l=e[s],u=s+1,c=e[u];if(0>a(l,n))u<i&&0>a(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[s]=n,r=s);else{if(!(u<i&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var u=[],c=[],p=1,d=null,f=3,h=!1,g=!1,m=!1,A="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function y(e){for(var t=r(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function w(e){if(m=!1,y(e),!g)if(null!==r(u))g=!0,D(C);else{var t=r(c);null!==t&&z(w,t.startTime-e)}}function C(e,n){g=!1,m&&(m=!1,v(k),k=-1),h=!0;var a=f;try{for(y(n),d=r(u);null!==d&&(!(d.expirationTime>n)||e&&!O());){var o=d.callback;if("function"==typeof o){d.callback=null,f=d.priorityLevel;var s=o(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?d.callback=s:d===r(u)&&i(u),y(n)}else i(u);d=r(u)}if(null!==d)var l=!0;else{var p=r(c);null!==p&&z(w,p.startTime-n),l=!1}return l}finally{d=null,f=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,S=!1,_=null,k=-1,E=5,T=-1;function O(){return!(t.unstable_now()-T<E)}function P(){if(null!==_){var e=t.unstable_now();T=e;var n=!0;try{n=_(!0,e)}finally{n?x():(S=!1,_=null)}}else S=!1}if("function"==typeof b)x=function(){b(P)};else if("undefined"!=typeof MessageChannel){var B=new MessageChannel,M=B.port2;B.port1.onmessage=P,x=function(){M.postMessage(null)}}else x=function(){A(P,0)};function D(e){_=e,S||(S=!0,x())}function z(e,n){k=A((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||h||(g=!0,D(C))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,i,a){var o=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:p++,callback:i,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>o?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(m?(v(k),k=-1):m=!0,z(w,a-o))):(e.sortIndex=s,n(u,e),g||h||(g=!0,D(C))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},3840:function(e,t,n){"use strict";e.exports=n(53)},3379:function(e){"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},o=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=a[u]||0,p="".concat(u," ").concat(c);a[u]=c+1;var d=n(p),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(f);else{var h=i(f,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:h,references:1})}o.push(p)}return o}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var s=n(a[o]);t[s].references--}for(var l=r(e,i),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=l}}},569:function(e){"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:function(e){"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:function(e,t,n){"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:function(e){"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:function(e){"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},9954:function(e){"use strict";e.exports="data:application/font-woff;charset=utf-8;base64, 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"}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.b=document.baseURI||self.location.href,n.nc=void 0,function(){"use strict";var e=n(7294),t=n(745),r=(n(7941),n(2772),n(2526),n(6649),n(6078),n(1817),n(1539),n(9653),n(9070),n(7327),n(5003),n(9554),n(4747),n(9337),n(3321),n(2165),n(6992),n(8783),n(3948),n(4184)),i=n.n(r),a=n(3379),o=n.n(a),s=n(7795),l=n.n(s),u=n(569),c=n.n(u),p=n(3565),d=n.n(p),f=n(9216),h=n.n(f),g=n(4589),m=n.n(g),A=n(7912),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=c().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=h(),o()(A.Z,v);var b=A.Z&&A.Z.locals?A.Z.locals:void 0,y=n(5893);function w(e){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},w(e)}var C=["children","className"];function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function S(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==w(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==w(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===w(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var k=function(e){var t=e.children,n=e.className,r=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(e,C);return(0,y.jsx)("div",S(S({className:i()(b.container,n)},r),{},{children:t}))};function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(9753),n(7042),n(8309),n(1038),n(4916);var T=function(t){var n,r,i=(n=(0,e.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],l=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(n,r)||function(e,t){if(e){if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?E(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],o=i[1];if("undefined"==typeof window)return!1;var s=matchMedia(t);function l(){o(s.matches)}return(0,e.useLayoutEffect)((function(){return l(),s.addEventListener("change",l),function(){s.removeEventListener("change",l)}}),[t]),a};function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function P(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n(6977);var B,M,D,z,N,j,L,I,F,R,$,G,Y,U,V,H={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},W={duration:.5,overwrite:!1,delay:0},Q=1e8,Z=1e-8,q=2*Math.PI,X=q/4,K=0,J=Math.sqrt,ee=Math.cos,te=Math.sin,ne=function(e){return"string"==typeof e},re=function(e){return"function"==typeof e},ie=function(e){return"number"==typeof e},ae=function(e){return void 0===e},oe=function(e){return"object"==typeof e},se=function(e){return!1!==e},le=function(){return"undefined"!=typeof window},ue=function(e){return re(e)||ne(e)},ce="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},pe=Array.isArray,de=/(?:-?\.?\d|\.)+/gi,fe=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,he=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,ge=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,me=/[+-]=-?[.\d]+/,Ae=/[^,'"\[\]\s]+/gi,ve=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,be={},ye={},we=function(e){return(ye=qe(e,be))&&qn},Ce=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},xe=function(e,t){return!t&&console.warn(e)},Se=function(e,t){return e&&(be[e]=t)&&ye&&(ye[e]=t)||be},_e=function(){return 0},ke={suppressEvents:!0,isStart:!0,kill:!1},Ee={suppressEvents:!0,kill:!1},Te={suppressEvents:!0},Oe={},Pe=[],Be={},Me={},De={},ze=30,Ne=[],je="",Le=function(e){var t,n,r=e[0];if(oe(r)||re(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(n=Ne.length;n--&&!Ne[n].targetTest(r););t=Ne[n]}for(n=e.length;n--;)e[n]&&(e[n]._gsap||(e[n]._gsap=new pn(e[n],t)))||e.splice(n,1);return e},Ie=function(e){return e._gsap||Le(Tt(e))[0]._gsap},Fe=function(e,t,n){return(n=e[t])&&re(n)?e[t]():ae(n)&&e.getAttribute&&e.getAttribute(t)||n},Re=function(e,t){return(e=e.split(",")).forEach(t)||e},$e=function(e){return Math.round(1e5*e)/1e5||0},Ge=function(e){return Math.round(1e7*e)/1e7||0},Ye=function(e,t){var n=t.charAt(0),r=parseFloat(t.substr(2));return e=parseFloat(e),"+"===n?e+r:"-"===n?e-r:"*"===n?e*r:e/r},Ue=function(e,t){for(var n=t.length,r=0;e.indexOf(t[r])<0&&++r<n;);return r<n},Ve=function(){var e,t,n=Pe.length,r=Pe.slice(0);for(Be={},Pe.length=0,e=0;e<n;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},He=function(e,t,n,r){Pe.length&&Ve(),e.render(t,n,r||M&&t<0&&(e._initted||e._startAt)),Pe.length&&Ve()},We=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(Ae).length<2?t:ne(e)?e.trim():e},Qe=function(e){return e},Ze=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},qe=function(e,t){for(var n in t)e[n]=t[n];return e},Xe=function e(t,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=oe(n[r])?e(t[r]||(t[r]={}),n[r]):n[r]);return t},Ke=function(e,t){var n,r={};for(n in e)n in t||(r[n]=e[n]);return r},Je=function(e){var t,n=e.parent||z,r=e.keyframes?(t=pe(e.keyframes),function(e,n){for(var r in n)r in e||"duration"===r&&t||"ease"===r||(e[r]=n[r])}):Ze;if(se(e.inherit))for(;n;)r(e,n.vars.defaults),n=n.parent||n._dp;return e},et=function(e,t,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var a,o=e[r];if(i)for(a=t[i];o&&o[i]>a;)o=o._prev;return o?(t._next=o._next,o._next=t):(t._next=e[n],e[n]=t),t._next?t._next._prev=t:e[r]=t,t._prev=o,t.parent=t._dp=e,t},tt=function(e,t,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=t._prev,a=t._next;i?i._next=a:e[n]===t&&(e[n]=a),a?a._prev=i:e[r]===t&&(e[r]=i),t._next=t._prev=t.parent=null},nt=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},rt=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var n=e;n;)n._dirty=1,n=n.parent;return e},it=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},at=function(e,t,n,r){return e._startAt&&(M?e._startAt.revert(Ee):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,r))},ot=function e(t){return!t||t._ts&&e(t.parent)},st=function(e){return e._repeat?lt(e._tTime,e=e.duration()+e._rDelay)*e:0},lt=function(e,t){var n=Math.floor(e/=t);return e&&n===e?n-1:n},ut=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},ct=function(e){return e._end=Ge(e._start+(e._tDur/Math.abs(e._ts||e._rts||Z)||0))},pt=function(e,t){var n=e._dp;return n&&n.smoothChildTiming&&e._ts&&(e._start=Ge(n._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),ct(e),n._dirty||rt(n,e)),e},dt=function(e,t){var n;if((t._time||t._initted&&!t._dur)&&(n=ut(e.rawTime(),t),(!t._dur||St(0,t.totalDuration(),n)-t._tTime>Z)&&t.render(n,!0)),rt(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(n=e;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;e._zTime=-1e-8}},ft=function(e,t,n,r){return t.parent&&nt(t),t._start=Ge((ie(n)?n:n||e!==z?wt(e,n,t):e._time)+t._delay),t._end=Ge(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),et(e,t,"_first","_last",e._sort?"_start":0),At(t)||(e._recent=t),r||dt(e,t),e._ts<0&&pt(e,e._tTime),e},ht=function(e,t){return(be.ScrollTrigger||Ce("scrollTrigger",t))&&be.ScrollTrigger.create(t,e)},gt=function(e,t,n,r,i){return bn(e,t,i),e._initted?!n&&e._pt&&!M&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&F!==Xt.frame?(Pe.push(e),e._lazy=[i,r],1):void 0:1},mt=function e(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||e(n))},At=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},vt=function(e,t,n,r){var i=e._repeat,a=Ge(t)||0,o=e._tTime/e._tDur;return o&&!r&&(e._time*=a/e._dur),e._dur=a,e._tDur=i?i<0?1e10:Ge(a*(i+1)+e._rDelay*i):a,o>0&&!r&&pt(e,e._tTime=e._tDur*o),e.parent&&ct(e),n||rt(e.parent,e),e},bt=function(e){return e instanceof fn?rt(e):vt(e,e._dur)},yt={_start:0,endTime:_e,totalDuration:_e},wt=function e(t,n,r){var i,a,o,s=t.labels,l=t._recent||yt,u=t.duration()>=Q?l.endTime(!1):t._dur;return ne(n)&&(isNaN(n)||n in s)?(a=n.charAt(0),o="%"===n.substr(-1),i=n.indexOf("="),"<"===a||">"===a?(i>=0&&(n=n.replace(/=/,"")),("<"===a?l._start:l.endTime(l._repeat>=0))+(parseFloat(n.substr(1))||0)*(o?(i<0?l:r).totalDuration()/100:1)):i<0?(n in s||(s[n]=u),s[n]):(a=parseFloat(n.charAt(i-1)+n.substr(i+1)),o&&r&&(a=a/100*(pe(r)?r[0]:r).totalDuration()),i>1?e(t,n.substr(0,i-1),r)+a:u+a)):null==n?u:+n},Ct=function(e,t,n){var r,i,a=ie(t[1]),o=(a?2:1)+(e<2?0:1),s=t[o];if(a&&(s.duration=t[1]),s.parent=n,e){for(r=s,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=se(i.vars.inherit)&&i.parent;s.immediateRender=se(r.immediateRender),e<2?s.runBackwards=1:s.startAt=t[o-1]}return new Sn(t[0],s,t[o+1])},xt=function(e,t){return e||0===e?t(e):t},St=function(e,t,n){return n<e?e:n>t?t:n},_t=function(e,t){return ne(e)&&(t=ve.exec(e))?t[1]:""},kt=[].slice,Et=function(e,t){return e&&oe(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&oe(e[0]))&&!e.nodeType&&e!==N},Tt=function(e,t,n){return D&&!t&&D.selector?D.selector(e):!ne(e)||n||!j&&Kt()?pe(e)?function(e,t,n){return void 0===n&&(n=[]),e.forEach((function(e){var r;return ne(e)&&!t||Et(e,1)?(r=n).push.apply(r,Tt(e)):n.push(e)}))||n}(e,n):Et(e)?kt.call(e,0):e?[e]:[]:kt.call((t||L).querySelectorAll(e),0)},Ot=function(e){return e=Tt(e)[0]||xe("Invalid scope")||{},function(t){var n=e.current||e.nativeElement||e;return Tt(t,n.querySelectorAll?n:n===e?xe("Invalid scope")||L.createElement("div"):e)}},Pt=function(e){return e.sort((function(){return.5-Math.random()}))},Bt=function(e){if(re(e))return e;var t=oe(e)?e:{each:e},n=on(t.ease),r=t.from||0,i=parseFloat(t.base)||0,a={},o=r>0&&r<1,s=isNaN(r)||o,l=t.axis,u=r,c=r;return ne(r)?u=c={center:.5,edges:.5,end:1}[r]||0:!o&&s&&(u=r[0],c=r[1]),function(e,o,p){var d,f,h,g,m,A,v,b,y,w=(p||t).length,C=a[w];if(!C){if(!(y="auto"===t.grid?0:(t.grid||[1,Q])[1])){for(v=-Q;v<(v=p[y++].getBoundingClientRect().left)&&y<w;);y--}for(C=a[w]=[],d=s?Math.min(y,w)*u-.5:r%y,f=y===Q?0:s?w*c/y-.5:r/y|0,v=0,b=Q,A=0;A<w;A++)h=A%y-d,g=f-(A/y|0),C[A]=m=l?Math.abs("y"===l?g:h):J(h*h+g*g),m>v&&(v=m),m<b&&(b=m);"random"===r&&Pt(C),C.max=v-b,C.min=b,C.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(y>w?w-1:l?"y"===l?w/y:y:Math.max(y,w/y))||0)*("edges"===r?-1:1),C.b=w<0?i-w:i,C.u=_t(t.amount||t.each)||0,n=n&&w<0?rn(n):n}return w=(C[e]-C.min)/C.max||0,Ge(C.b+(n?n(w):w)*C.v)+C.u}},Mt=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(n){var r=Ge(Math.round(parseFloat(n)/e)*e*t);return(r-r%1)/t+(ie(n)?0:_t(n))}},Dt=function(e,t){var n,r,i=pe(e);return!i&&oe(e)&&(n=i=e.radius||Q,e.values?(e=Tt(e.values),(r=!ie(e[0]))&&(n*=n)):e=Mt(e.increment)),xt(t,i?re(e)?function(t){return r=e(t),Math.abs(r-t)<=n?r:t}:function(t){for(var i,a,o=parseFloat(r?t.x:t),s=parseFloat(r?t.y:0),l=Q,u=0,c=e.length;c--;)(i=r?(i=e[c].x-o)*i+(a=e[c].y-s)*a:Math.abs(e[c]-o))<l&&(l=i,u=c);return u=!n||l<=n?e[u]:t,r||u===t||ie(t)?u:u+_t(t)}:Mt(e))},zt=function(e,t,n,r){return xt(pe(e)?!t:!0===n?!!(n=0):!r,(function(){return pe(e)?e[~~(Math.random()*e.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((e-n/2+Math.random()*(t-e+.99*n))/n)*n*r)/r}))},Nt=function(e,t,n){return xt(n,(function(n){return e[~~t(n)]}))},jt=function(e){for(var t,n,r,i,a=0,o="";~(t=e.indexOf("random(",a));)r=e.indexOf(")",t),i="["===e.charAt(t+7),n=e.substr(t+7,r-t-7).match(i?Ae:de),o+=e.substr(a,t-a)+zt(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),a=r+1;return o+e.substr(a,e.length-a)},Lt=function(e,t,n,r,i){var a=t-e,o=r-n;return xt(i,(function(t){return n+((t-e)/a*o||0)}))},It=function(e,t,n){var r,i,a,o=e.labels,s=Q;for(r in o)(i=o[r]-t)<0==!!n&&i&&s>(i=Math.abs(i))&&(a=r,s=i);return a},Ft=function(e,t,n){var r,i,a,o=e.vars,s=o[t],l=D,u=e._ctx;if(s)return r=o[t+"Params"],i=o.callbackScope||e,n&&Pe.length&&Ve(),u&&(D=u),a=r?s.apply(i,r):s.call(i),D=l,a},Rt=function(e){return nt(e),e.scrollTrigger&&e.scrollTrigger.kill(!!M),e.progress()<1&&Ft(e,"onInterrupt"),e},$t=function(e){var t=(e=!e.name&&e.default||e).name,n=re(e),r=t&&!n&&e.init?function(){this._props=[]}:e,i={init:_e,render:Dn,add:An,kill:Nn,modifier:zn,rawVars:0},a={targetTest:0,get:0,getSetter:On,aliases:{},register:0};if(Kt(),e!==r){if(Me[t])return;Ze(r,Ze(Ke(e,i),a)),qe(r.prototype,qe(i,Ke(e,a))),Me[r.prop=t]=r,e.targetTest&&(Ne.push(r),Oe[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}Se(t,r),e.register&&e.register(qn,r,In)},Gt=255,Yt={aqua:[0,Gt,Gt],lime:[0,Gt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Gt],navy:[0,0,128],white:[Gt,Gt,Gt],olive:[128,128,0],yellow:[Gt,Gt,0],orange:[Gt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Gt,0,0],pink:[Gt,192,203],cyan:[0,Gt,Gt],transparent:[Gt,Gt,Gt,0]},Ut=function(e,t,n){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(n-t)*e*6:e<.5?n:3*e<2?t+(n-t)*(2/3-e)*6:t)*Gt+.5|0},Vt=function(e,t,n){var r,i,a,o,s,l,u,c,p,d,f=e?ie(e)?[e>>16,e>>8&Gt,e&Gt]:0:Yt.black;if(!f){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),Yt[e])f=Yt[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),i=e.charAt(2),a=e.charAt(3),e="#"+r+r+i+i+a+a+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(f=parseInt(e.substr(1,6),16))>>16,f>>8&Gt,f&Gt,parseInt(e.substr(7),16)/255];f=[(e=parseInt(e.substr(1),16))>>16,e>>8&Gt,e&Gt]}else if("hsl"===e.substr(0,3))if(f=d=e.match(de),t){if(~e.indexOf("="))return f=e.match(fe),n&&f.length<4&&(f[3]=1),f}else o=+f[0]%360/360,s=+f[1]/100,r=2*(l=+f[2]/100)-(i=l<=.5?l*(s+1):l+s-l*s),f.length>3&&(f[3]*=1),f[0]=Ut(o+1/3,r,i),f[1]=Ut(o,r,i),f[2]=Ut(o-1/3,r,i);else f=e.match(de)||Yt.transparent;f=f.map(Number)}return t&&!d&&(r=f[0]/Gt,i=f[1]/Gt,a=f[2]/Gt,l=((u=Math.max(r,i,a))+(c=Math.min(r,i,a)))/2,u===c?o=s=0:(p=u-c,s=l>.5?p/(2-u-c):p/(u+c),o=u===r?(i-a)/p+(i<a?6:0):u===i?(a-r)/p+2:(r-i)/p+4,o*=60),f[0]=~~(o+.5),f[1]=~~(100*s+.5),f[2]=~~(100*l+.5)),n&&f.length<4&&(f[3]=1),f},Ht=function(e){var t=[],n=[],r=-1;return e.split(Qt).forEach((function(e){var i=e.match(he)||[];t.push.apply(t,i),n.push(r+=i.length+1)})),t.c=n,t},Wt=function(e,t,n){var r,i,a,o,s="",l=(e+s).match(Qt),u=t?"hsla(":"rgba(",c=0;if(!l)return e;if(l=l.map((function(e){return(e=Vt(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),n&&(a=Ht(e),(r=n.c).join(s)!==a.c.join(s)))for(o=(i=e.replace(Qt,"1").split(he)).length-1;c<o;c++)s+=i[c]+(~r.indexOf(c)?l.shift()||u+"0,0,0,0)":(a.length?a:l.length?l:n).shift());if(!i)for(o=(i=e.split(Qt)).length-1;c<o;c++)s+=i[c]+l[c];return s+i[o]},Qt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in Yt)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Zt=/hsl[a]?\(/,qt=function(e){var t,n=e.join(" ");if(Qt.lastIndex=0,Qt.test(n))return t=Zt.test(n),e[1]=Wt(e[1],t),e[0]=Wt(e[0],t,Ht(e[1])),!0},Xt=function(){var e,t,n,r,i,a,o=Date.now,s=500,l=33,u=o(),c=u,p=1e3/240,d=p,f=[],h=function n(h){var g,m,A,v,b=o()-c,y=!0===h;if(b>s&&(u+=b-l),((g=(A=(c+=b)-u)-d)>0||y)&&(v=++r.frame,i=A-1e3*r.time,r.time=A/=1e3,d+=g+(g>=p?4:p-g),m=1),y||(e=t(n)),m)for(a=0;a<f.length;a++)f[a](A,i,v,h)};return r={time:0,frame:0,tick:function(){h(!0)},deltaRatio:function(e){return i/(1e3/(e||60))},wake:function(){I&&(!j&&le()&&(N=j=window,L=N.document||{},be.gsap=qn,(N.gsapVersions||(N.gsapVersions=[])).push(qn.version),we(ye||N.GreenSockGlobals||!N.gsap&&N||{}),n=N.requestAnimationFrame),e&&r.sleep(),t=n||function(e){return setTimeout(e,d-1e3*r.time+1|0)},$=1,h(2))},sleep:function(){(n?N.cancelAnimationFrame:clearTimeout)(e),$=0,t=_e},lagSmoothing:function(e,t){s=e||1e8,l=Math.min(t,s,0)},fps:function(e){p=1e3/(e||240),d=1e3*r.time+p},add:function(e,t,n){var i=t?function(t,n,a,o){e(t,n,a,o),r.remove(i)}:e;return r.remove(e),f[n?"unshift":"push"](i),Kt(),i},remove:function(e,t){~(t=f.indexOf(e))&&f.splice(t,1)&&a>=t&&a--},_listeners:f}}(),Kt=function(){return!$&&Xt.wake()},Jt={},en=/^[\d.\-M][\d.\-,\s]/,tn=/["']/g,nn=function(e){for(var t,n,r,i={},a=e.substr(1,e.length-3).split(":"),o=a[0],s=1,l=a.length;s<l;s++)n=a[s],t=s!==l-1?n.lastIndexOf(","):n.length,r=n.substr(0,t),i[o]=isNaN(r)?r.replace(tn,"").trim():+r,o=n.substr(t+1).trim();return i},rn=function(e){return function(t){return 1-e(1-t)}},an=function e(t,n){for(var r,i=t._first;i;)i instanceof fn?e(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?e(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},on=function(e,t){return e&&(re(e)?e:Jt[e]||function(e){var t,n,r,i,a=(e+"").split("("),o=Jt[a[0]];return o&&a.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[nn(a[1])]:(t=e,n=t.indexOf("(")+1,r=t.indexOf(")"),i=t.indexOf("(",n),t.substring(n,~i&&i<r?t.indexOf(")",r+1):r)).split(",").map(We)):Jt._CE&&en.test(e)?Jt._CE("",e):o}(e))||t},sn=function(e,t,n,r){void 0===n&&(n=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var i,a={easeIn:t,easeOut:n,easeInOut:r};return Re(e,(function(e){for(var t in Jt[e]=be[e]=a,Jt[i=e.toLowerCase()]=n,a)Jt[i+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Jt[e+"."+t]=a[t]})),a},ln=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},un=function e(t,n,r){var i=n>=1?n:1,a=(r||(t?.3:.45))/(n<1?n:1),o=a/q*(Math.asin(1/i)||0),s=function(e){return 1===e?1:i*Math.pow(2,-10*e)*te((e-o)*a)+1},l="out"===t?s:"in"===t?function(e){return 1-s(1-e)}:ln(s);return a=q/a,l.config=function(n,r){return e(t,n,r)},l},cn=function e(t,n){void 0===n&&(n=1.70158);var r=function(e){return e?--e*e*((n+1)*e+n)+1:0},i="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:ln(r);return i.config=function(n){return e(t,n)},i};Re("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var n=t<5?t+1:t;sn(e+",Power"+(n-1),t?function(e){return Math.pow(e,n)}:function(e){return e},(function(e){return 1-Math.pow(1-e,n)}),(function(e){return e<.5?Math.pow(2*e,n)/2:1-Math.pow(2*(1-e),n)/2}))})),Jt.Linear.easeNone=Jt.none=Jt.Linear.easeIn,sn("Elastic",un("in"),un("out"),un()),G=7.5625,U=1/(Y=2.75),sn("Bounce",(function(e){return 1-V(1-e)}),V=function(e){return e<U?G*e*e:e<.7272727272727273?G*Math.pow(e-1.5/Y,2)+.75:e<.9090909090909092?G*(e-=2.25/Y)*e+.9375:G*Math.pow(e-2.625/Y,2)+.984375}),sn("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),sn("Circ",(function(e){return-(J(1-e*e)-1)})),sn("Sine",(function(e){return 1===e?1:1-ee(e*X)})),sn("Back",cn("in"),cn("out"),cn()),Jt.SteppedEase=Jt.steps=be.SteppedEase={config:function(e,t){void 0===e&&(e=1);var n=1/e,r=e+(t?0:1),i=t?1:0;return function(e){return((r*St(0,.99999999,e)|0)+i)*n}}},W.ease=Jt["quad.out"],Re("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return je+=e+","+e+"Params,"}));var pn=function(e,t){this.id=K++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:Fe,this.set=t?t.getSetter:On},dn=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,vt(this,+e.duration,1,1),this.data=e.data,D&&(this._ctx=D,D.data.push(this)),$||Xt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,vt(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Kt(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(pt(this,e),!n._dp||n.parent||dt(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&ft(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===Z||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),He(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+st(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+st(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*n,t):this._repeat?lt(this._tTime,n)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?ut(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(St(-this._delay,this._tDur,t),!0),ct(this),it(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Kt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==Z&&(this._tTime-=Z)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&ft(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(se(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?ut(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=Te);var t=M;return M=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),M=t,this},t.globalTime=function(e){for(var t=this,n=arguments.length?e:t.rawTime();t;)n=t._start+n/(t._ts||1),t=t._dp;return!this.parent&&this.vars.immediateRender?-1:n},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,bt(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,bt(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(wt(this,e),se(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,se(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,n=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=n&&e<this.endTime(!0)-Z))},t.eventCallback=function(e,t,n){var r=this.vars;return arguments.length>1?(t?(r[e]=t,n&&(r[e+"Params"]=n),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise((function(n){var r=re(e)?e:Qe,i=function(){var e=t.then;t.then=null,re(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),n(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?i():t._prom=i}))},t.kill=function(){Rt(this)},e}();Ze(dn.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var fn=function(e){function t(t,n){var r;return void 0===t&&(t={}),(r=e.call(this,t)||this).labels={},r.smoothChildTiming=!!t.smoothChildTiming,r.autoRemoveChildren=!!t.autoRemoveChildren,r._sort=se(t.sortChildren),z&&ft(t.parent||z,O(r),n),t.reversed&&r.reverse(),t.paused&&r.paused(!0),t.scrollTrigger&&ht(O(r),t.scrollTrigger),r}P(t,e);var n=t.prototype;return n.to=function(e,t,n){return Ct(0,arguments,this),this},n.from=function(e,t,n){return Ct(1,arguments,this),this},n.fromTo=function(e,t,n,r){return Ct(2,arguments,this),this},n.set=function(e,t,n){return t.duration=0,t.parent=this,Je(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new Sn(e,t,wt(this,n),1),this},n.call=function(e,t,n){return ft(this,Sn.delayedCall(0,e,t),n)},n.staggerTo=function(e,t,n,r,i,a,o){return n.duration=t,n.stagger=n.stagger||r,n.onComplete=a,n.onCompleteParams=o,n.parent=this,new Sn(e,n,wt(this,i)),this},n.staggerFrom=function(e,t,n,r,i,a,o){return n.runBackwards=1,Je(n).immediateRender=se(n.immediateRender),this.staggerTo(e,t,n,r,i,a,o)},n.staggerFromTo=function(e,t,n,r,i,a,o,s){return r.startAt=n,Je(r).immediateRender=se(r.immediateRender),this.staggerTo(e,t,r,i,a,o,s)},n.render=function(e,t,n){var r,i,a,o,s,l,u,c,p,d,f,h,g=this._time,m=this._dirty?this.totalDuration():this._tDur,A=this._dur,v=e<=0?0:Ge(e),b=this._zTime<0!=e<0&&(this._initted||!A);if(this!==z&&v>m&&e>=0&&(v=m),v!==this._tTime||n||b){if(g!==this._time&&A&&(v+=this._time-g,e+=this._time-g),r=v,p=this._start,l=!(c=this._ts),b&&(A||(g=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(f=this._yoyo,s=A+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*s+e,t,n);if(r=Ge(v%s),v===m?(o=this._repeat,r=A):((o=~~(v/s))&&o===v/s&&(r=A,o--),r>A&&(r=A)),d=lt(this._tTime,s),!g&&this._tTime&&d!==o&&(d=o),f&&1&o&&(r=A-r,h=1),o!==d&&!this._lock){var y=f&&1&d,w=y===(f&&1&o);if(o<d&&(y=!y),g=y?0:A,this._lock=1,this.render(g||(h?0:Ge(o*s)),t,!A)._lock=0,this._tTime=v,!t&&this.parent&&Ft(this,"onRepeat"),this.vars.repeatRefresh&&!h&&(this.invalidate()._lock=1),g&&g!==this._time||l!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(A=this._dur,m=this._tDur,w&&(this._lock=2,g=y?A:-1e-4,this.render(g,!0),this.vars.repeatRefresh&&!h&&this.invalidate()),this._lock=0,!this._ts&&!l)return this;an(this,h)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(e,t,n){var r;if(n>t)for(r=e._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,Ge(g),Ge(r)),u&&(v-=r-(r=u._start))),this._tTime=v,this._time=r,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,g=0),!g&&r&&!t&&(Ft(this,"onStart"),this._tTime!==v))return this;if(r>=g&&e>=0)for(i=this._first;i;){if(a=i._next,(i._act||r>=i._start)&&i._ts&&u!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,t,n),r!==this._time||!this._ts&&!l){u=0,a&&(v+=this._zTime=-1e-8);break}}i=a}else{i=this._last;for(var C=e<0?e:r;i;){if(a=i._prev,(i._act||C<=i._end)&&i._ts&&u!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(C-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(C-i._start)*i._ts,t,n||M&&(i._initted||i._startAt)),r!==this._time||!this._ts&&!l){u=0,a&&(v+=this._zTime=C?-1e-8:Z);break}}i=a}}if(u&&!t&&(this.pause(),u.render(r>=g?0:-1e-8)._zTime=r>=g?1:-1,this._ts))return this._start=p,ct(this),this.render(e,t,n);this._onUpdate&&!t&&Ft(this,"onUpdate",!0),(v===m&&this._tTime>=this.totalDuration()||!v&&g)&&(p!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((e||!A)&&(v===m&&this._ts>0||!v&&this._ts<0)&&nt(this,1),t||e<0&&!g||!v&&!g&&m||(Ft(this,v===m&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(v<m&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(e,t){var n=this;if(ie(t)||(t=wt(this,t,e)),!(e instanceof dn)){if(pe(e))return e.forEach((function(e){return n.add(e,t)})),this;if(ne(e))return this.addLabel(e,t);if(!re(e))return this;e=Sn.delayedCall(0,e)}return this!==e?ft(this,e,t):this},n.getChildren=function(e,t,n,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=-Q);for(var i=[],a=this._first;a;)a._start>=r&&(a instanceof Sn?t&&i.push(a):(n&&i.push(a),e&&i.push.apply(i,a.getChildren(!0,t,n)))),a=a._next;return i},n.getById=function(e){for(var t=this.getChildren(1,1,1),n=t.length;n--;)if(t[n].vars.id===e)return t[n]},n.remove=function(e){return ne(e)?this.removeLabel(e):re(e)?this.killTweensOf(e):(tt(this,e),e===this._recent&&(this._recent=this._last),rt(this))},n.totalTime=function(t,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Ge(Xt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,n),this._forcing=0,this):this._tTime},n.addLabel=function(e,t){return this.labels[e]=wt(this,t),this},n.removeLabel=function(e){return delete this.labels[e],this},n.addPause=function(e,t,n){var r=Sn.delayedCall(0,t||_e,n);return r.data="isPause",this._hasPause=1,ft(this,r,wt(this,e))},n.removePause=function(e){var t=this._first;for(e=wt(this,e);t;)t._start===e&&"isPause"===t.data&&nt(t),t=t._next},n.killTweensOf=function(e,t,n){for(var r=this.getTweensOf(e,n),i=r.length;i--;)hn!==r[i]&&r[i].kill(e,t);return this},n.getTweensOf=function(e,t){for(var n,r=[],i=Tt(e),a=this._first,o=ie(t);a;)a instanceof Sn?Ue(a._targets,i)&&(o?(!hn||a._initted&&a._ts)&&a.globalTime(0)<=t&&a.globalTime(a.totalDuration())>t:!t||a.isActive())&&r.push(a):(n=a.getTweensOf(i,t)).length&&r.push.apply(r,n),a=a._next;return r},n.tweenTo=function(e,t){t=t||{};var n,r=this,i=wt(r,e),a=t,o=a.startAt,s=a.onStart,l=a.onStartParams,u=a.immediateRender,c=Sn.to(r,Ze({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:t.duration||Math.abs((i-(o&&"time"in o?o.time:r._time))/r.timeScale())||Z,onStart:function(){if(r.pause(),!n){var e=t.duration||Math.abs((i-(o&&"time"in o?o.time:r._time))/r.timeScale());c._dur!==e&&vt(c,e,0,1).render(c._time,!0,!0),n=1}s&&s.apply(c,l||[])}},t));return u?c.render(0):c},n.tweenFromTo=function(e,t,n){return this.tweenTo(t,Ze({startAt:{time:wt(this,e)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(e){return void 0===e&&(e=this._time),It(this,wt(this,e))},n.previousLabel=function(e){return void 0===e&&(e=this._time),It(this,wt(this,e),1)},n.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+Z)},n.shiftChildren=function(e,t,n){void 0===n&&(n=0);for(var r,i=this._first,a=this.labels;i;)i._start>=n&&(i._start+=e,i._end+=e),i=i._next;if(t)for(r in a)a[r]>=n&&(a[r]+=e);return rt(this)},n.invalidate=function(t){var n=this._first;for(this._lock=0;n;)n.invalidate(t),n=n._next;return e.prototype.invalidate.call(this,t)},n.clear=function(e){void 0===e&&(e=!0);for(var t,n=this._first;n;)t=n._next,this.remove(n),n=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),rt(this)},n.totalDuration=function(e){var t,n,r,i=0,a=this,o=a._last,s=Q;if(arguments.length)return a.timeScale((a._repeat<0?a.duration():a.totalDuration())/(a.reversed()?-e:e));if(a._dirty){for(r=a.parent;o;)t=o._prev,o._dirty&&o.totalDuration(),(n=o._start)>s&&a._sort&&o._ts&&!a._lock?(a._lock=1,ft(a,o,n-o._delay,1)._lock=0):s=n,n<0&&o._ts&&(i-=n,(!r&&!a._dp||r&&r.smoothChildTiming)&&(a._start+=n/a._ts,a._time-=n,a._tTime-=n),a.shiftChildren(-n,!1,-Infinity),s=0),o._end>i&&o._ts&&(i=o._end),o=t;vt(a,a===z&&a._time>i?a._time:i,1,1),a._dirty=0}return a._tDur},t.updateRoot=function(e){if(z._ts&&(He(z,ut(e,z)),F=Xt.frame),Xt.frame>=ze){ze+=H.autoSleep||120;var t=z._first;if((!t||!t._ts)&&H.autoSleep&&Xt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Xt.sleep()}}},t}(dn);Ze(fn.prototype,{_lock:0,_hasPause:0,_forcing:0});var hn,gn,mn=function(e,t,n,r,i,a,o){var s,l,u,c,p,d,f,h,g=new In(this._pt,e,t,0,1,Mn,null,i),m=0,A=0;for(g.b=n,g.e=r,n+="",(f=~(r+="").indexOf("random("))&&(r=jt(r)),a&&(a(h=[n,r],e,t),n=h[0],r=h[1]),l=n.match(ge)||[];s=ge.exec(r);)c=s[0],p=r.substring(m,s.index),u?u=(u+1)%5:"rgba("===p.substr(-5)&&(u=1),c!==l[A++]&&(d=parseFloat(l[A-1])||0,g._pt={_next:g._pt,p:p||1===A?p:",",s:d,c:"="===c.charAt(1)?Ye(d,c)-d:parseFloat(c)-d,m:u&&u<4?Math.round:0},m=ge.lastIndex);return g.c=m<r.length?r.substring(m,r.length):"",g.fp=o,(me.test(r)||f)&&(g.e=0),this._pt=g,g},An=function(e,t,n,r,i,a,o,s,l,u){re(r)&&(r=r(i||0,e,a));var c,p=e[t],d="get"!==n?n:re(p)?l?e[t.indexOf("set")||!re(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():p,f=re(p)?l?En:kn:_n;if(ne(r)&&(~r.indexOf("random(")&&(r=jt(r)),"="===r.charAt(1)&&((c=Ye(d,r)+(_t(d)||0))||0===c)&&(r=c)),!u||d!==r||gn)return isNaN(d*r)||""===r?(!p&&!(t in e)&&Ce(t,r),mn.call(this,e,t,d,r,f,s||H.stringFilter,l)):(c=new In(this._pt,e,t,+d||0,r-(d||0),"boolean"==typeof p?Bn:Pn,0,f),l&&(c.fp=l),o&&c.modifier(o,this,e),this._pt=c)},vn=function(e,t,n,r,i,a){var o,s,l,u;if(Me[e]&&!1!==(o=new Me[e]).init(i,o.rawVars?t[e]:function(e,t,n,r,i){if(re(e)&&(e=wn(e,i,t,n,r)),!oe(e)||e.style&&e.nodeType||pe(e)||ce(e))return ne(e)?wn(e,i,t,n,r):e;var a,o={};for(a in e)o[a]=wn(e[a],i,t,n,r);return o}(t[e],r,i,a,n),n,r,a)&&(n._pt=s=new In(n._pt,i,e,0,1,o.render,o,0,o.priority),n!==R))for(l=n._ptLookup[n._targets.indexOf(i)],u=o._props.length;u--;)l[o._props[u]]=s;return o},bn=function e(t,n,r){var i,a,o,s,l,u,c,p,d,f,h,g,m,A=t.vars,v=A.ease,b=A.startAt,y=A.immediateRender,w=A.lazy,C=A.onUpdate,x=A.onUpdateParams,S=A.callbackScope,_=A.runBackwards,k=A.yoyoEase,E=A.keyframes,T=A.autoRevert,O=t._dur,P=t._startAt,D=t._targets,N=t.parent,j=N&&"nested"===N.data?N.vars.targets:D,L="auto"===t._overwrite&&!B,I=t.timeline;if(I&&(!E||!v)&&(v="none"),t._ease=on(v,W.ease),t._yEase=k?rn(on(!0===k?v:k,W.ease)):0,k&&t._yoyo&&!t._repeat&&(k=t._yEase,t._yEase=t._ease,t._ease=k),t._from=!I&&!!A.runBackwards,!I||E&&!A.stagger){if(g=(p=D[0]?Ie(D[0]).harness:0)&&A[p.prop],i=Ke(A,Oe),P&&(P._zTime<0&&P.progress(1),n<0&&_&&y&&!T?P.render(-1,!0):P.revert(_&&O?Ee:ke),P._lazy=0),b){if(nt(t._startAt=Sn.set(D,Ze({data:"isStart",overwrite:!1,parent:N,immediateRender:!0,lazy:se(w),startAt:null,delay:0,onUpdate:C,onUpdateParams:x,callbackScope:S,stagger:0},b))),t._startAt._dp=0,n<0&&(M||!y&&!T)&&t._startAt.revert(Ee),y&&O&&n<=0&&r<=0)return void(n&&(t._zTime=n))}else if(_&&O&&!P)if(n&&(y=!1),o=Ze({overwrite:!1,data:"isFromStart",lazy:y&&se(w),immediateRender:y,stagger:0,parent:N},i),g&&(o[p.prop]=g),nt(t._startAt=Sn.set(D,o)),t._startAt._dp=0,n<0&&(M?t._startAt.revert(Ee):t._startAt.render(-1,!0)),t._zTime=n,y){if(!n)return}else e(t._startAt,Z,Z);for(t._pt=t._ptCache=0,w=O&&se(w)||w&&!O,a=0;a<D.length;a++){if(c=(l=D[a])._gsap||Le(D)[a]._gsap,t._ptLookup[a]=f={},Be[c.id]&&Pe.length&&Ve(),h=j===D?a:j.indexOf(l),p&&!1!==(d=new p).init(l,g||i,t,h,j)&&(t._pt=s=new In(t._pt,l,d.name,0,1,d.render,d,0,d.priority),d._props.forEach((function(e){f[e]=s})),d.priority&&(u=1)),!p||g)for(o in i)Me[o]&&(d=vn(o,i,t,h,l,j))?d.priority&&(u=1):f[o]=s=An.call(t,l,o,"get",i[o],h,j,0,A.stringFilter);t._op&&t._op[a]&&t.kill(l,t._op[a]),L&&t._pt&&(hn=t,z.killTweensOf(l,f,t.globalTime(n)),m=!t.parent,hn=0),t._pt&&w&&(Be[c.id]=1)}u&&Ln(t),t._onInit&&t._onInit(t)}t._onUpdate=C,t._initted=(!t._op||t._pt)&&!m,E&&n<=0&&I.render(Q,!0,!0)},yn=function(e,t,n,r){var i,a,o=t.ease||r||"power1.inOut";if(pe(t))a=n[e]||(n[e]=[]),t.forEach((function(e,n){return a.push({t:n/(t.length-1)*100,v:e,e:o})}));else for(i in t)a=n[i]||(n[i]=[]),"ease"===i||a.push({t:parseFloat(e),v:t[i],e:o})},wn=function(e,t,n,r,i){return re(e)?e.call(t,n,r,i):ne(e)&&~e.indexOf("random(")?jt(e):e},Cn=je+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",xn={};Re(Cn+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return xn[e]=1}));var Sn=function(e){function t(t,n,r,i){var a;"number"==typeof n&&(r.duration=n,n=r,r=null);var o,s,l,u,c,p,d,f,h=(a=e.call(this,i?n:Je(n))||this).vars,g=h.duration,m=h.delay,A=h.immediateRender,v=h.stagger,b=h.overwrite,y=h.keyframes,w=h.defaults,C=h.scrollTrigger,x=h.yoyoEase,S=n.parent||z,_=(pe(t)||ce(t)?ie(t[0]):"length"in n)?[t]:Tt(t);if(a._targets=_.length?Le(_):xe("GSAP target "+t+" not found. https://greensock.com",!H.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=b,y||v||ue(g)||ue(m)){if(n=a.vars,(o=a.timeline=new fn({data:"nested",defaults:w||{},targets:S&&"nested"===S.data?S.vars.targets:_})).kill(),o.parent=o._dp=O(a),o._start=0,v||ue(g)||ue(m)){if(u=_.length,d=v&&Bt(v),oe(v))for(c in v)~Cn.indexOf(c)&&(f||(f={}),f[c]=v[c]);for(s=0;s<u;s++)(l=Ke(n,xn)).stagger=0,x&&(l.yoyoEase=x),f&&qe(l,f),p=_[s],l.duration=+wn(g,O(a),s,p,_),l.delay=(+wn(m,O(a),s,p,_)||0)-a._delay,!v&&1===u&&l.delay&&(a._delay=m=l.delay,a._start+=m,l.delay=0),o.to(p,l,d?d(s,p,_):0),o._ease=Jt.none;o.duration()?g=m=0:a.timeline=0}else if(y){Je(Ze(o.vars.defaults,{ease:"none"})),o._ease=on(y.ease||n.ease||"none");var k,E,T,P=0;if(pe(y))y.forEach((function(e){return o.to(_,e,">")})),o.duration();else{for(c in l={},y)"ease"===c||"easeEach"===c||yn(c,y[c],l,y.easeEach);for(c in l)for(k=l[c].sort((function(e,t){return e.t-t.t})),P=0,s=0;s<k.length;s++)(T={ease:(E=k[s]).e,duration:(E.t-(s?k[s-1].t:0))/100*g})[c]=E.v,o.to(_,T,P),P+=T.duration;o.duration()<g&&o.to({},{duration:g-o.duration()})}}g||a.duration(g=o.duration())}else a.timeline=0;return!0!==b||B||(hn=O(a),z.killTweensOf(_),hn=0),ft(S,O(a),r),n.reversed&&a.reverse(),n.paused&&a.paused(!0),(A||!g&&!y&&a._start===Ge(S._time)&&se(A)&&ot(O(a))&&"nested"!==S.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-m)||0)),C&&ht(O(a),C),a}P(t,e);var n=t.prototype;return n.render=function(e,t,n){var r,i,a,o,s,l,u,c,p,d=this._time,f=this._tDur,h=this._dur,g=e<0,m=e>f-Z&&!g?f:e<Z?0:e;if(h){if(m!==this._tTime||!e||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g){if(r=m,c=this.timeline,this._repeat){if(o=h+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*o+e,t,n);if(r=Ge(m%o),m===f?(a=this._repeat,r=h):((a=~~(m/o))&&a===m/o&&(r=h,a--),r>h&&(r=h)),(l=this._yoyo&&1&a)&&(p=this._yEase,r=h-r),s=lt(this._tTime,o),r===d&&!n&&this._initted)return this._tTime=m,this;a!==s&&(c&&this._yEase&&an(c,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=n=1,this.render(Ge(o*a),!0).invalidate()._lock=0))}if(!this._initted){if(gt(this,g?e:r,n,t,m))return this._tTime=0,this;if(d!==this._time)return this;if(h!==this._dur)return this.render(e,t,n)}if(this._tTime=m,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(p||this._ease)(r/h),this._from&&(this.ratio=u=1-u),r&&!d&&!t&&(Ft(this,"onStart"),this._tTime!==m))return this;for(i=this._pt;i;)i.r(u,i.d),i=i._next;c&&c.render(e<0?e:!r&&l?-1e-8:c._dur*c._ease(r/this._dur),t,n)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(g&&at(this,e,0,n),Ft(this,"onUpdate")),this._repeat&&a!==s&&this.vars.onRepeat&&!t&&this.parent&&Ft(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(g&&!this._onUpdate&&at(this,e,0,!0),(e||!h)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&nt(this,1),t||g&&!d||!(m||d||l)||(Ft(this,m===f?"onComplete":"onReverseComplete",!0),this._prom&&!(m<f&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,n,r){var i,a,o,s=e.ratio,l=t<0||!t&&(!e._start&&mt(e)&&(e._initted||!At(e))||(e._ts<0||e._dp._ts<0)&&!At(e))?0:1,u=e._rDelay,c=0;if(u&&e._repeat&&(c=St(0,e._tDur,t),a=lt(c,u),e._yoyo&&1&a&&(l=1-l),a!==lt(e._tTime,u)&&(s=1-l,e.vars.repeatRefresh&&e._initted&&e.invalidate())),l!==s||M||r||e._zTime===Z||!t&&e._zTime){if(!e._initted&&gt(e,t,r,n,c))return;for(o=e._zTime,e._zTime=t||(n?Z:0),n||(n=t&&!o),e.ratio=l,e._from&&(l=1-l),e._time=0,e._tTime=c,i=e._pt;i;)i.r(l,i.d),i=i._next;t<0&&at(e,t,0,!0),e._onUpdate&&!n&&Ft(e,"onUpdate"),c&&e._repeat&&!n&&e.parent&&Ft(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===l&&(l&&nt(e,1),n||M||(Ft(e,l?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,n);return this},n.targets=function(){return this._targets},n.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},n.resetTo=function(e,t,n,r){$||Xt.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||bn(this,i),function(e,t,n,r,i,a,o){var s,l,u,c,p=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!p)for(p=e._ptCache[t]=[],u=e._ptLookup,c=e._targets.length;c--;){if((s=u[c][t])&&s.d&&s.d._pt)for(s=s.d._pt;s&&s.p!==t&&s.fp!==t;)s=s._next;if(!s)return gn=1,e.vars[t]="+=0",bn(e,o),gn=0,1;p.push(s)}for(c=p.length;c--;)(s=(l=p[c])._pt||l).s=!r&&0!==r||i?s.s+(r||0)+a*s.c:r,s.c=n-s.s,l.e&&(l.e=$e(n)+_t(l.e)),l.b&&(l.b=s.s+_t(l.b))}(this,e,t,n,r,this._ease(i/this._dur),i)?this.resetTo(e,t,n,r):(pt(this,0),this.parent||et(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?Rt(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,hn&&!0!==hn.vars.overwrite)._first||Rt(this),this.parent&&n!==this.timeline.totalDuration()&&vt(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,a,o,s,l,u,c=this._targets,p=e?Tt(e):c,d=this._ptLookup,f=this._pt;if((!t||"all"===t)&&function(e,t){for(var n=e.length,r=n===t.length;r&&n--&&e[n]===t[n];);return n<0}(c,p))return"all"===t&&(this._pt=0),Rt(this);for(r=this._op=this._op||[],"all"!==t&&(ne(t)&&(s={},Re(t,(function(e){return s[e]=1})),t=s),t=function(e,t){var n,r,i,a,o=e[0]?Ie(e[0]).harness:0,s=o&&o.aliases;if(!s)return t;for(r in n=qe({},t),s)if(r in n)for(i=(a=s[r].split(",")).length;i--;)n[a[i]]=n[r];return n}(c,t)),u=c.length;u--;)if(~p.indexOf(c[u]))for(s in i=d[u],"all"===t?(r[u]=t,o=i,a={}):(a=r[u]=r[u]||{},o=t),o)(l=i&&i[s])&&("kill"in l.d&&!0!==l.d.kill(s)||tt(this,l,"_pt"),delete i[s]),"all"!==a&&(a[s]=1);return this._initted&&!this._pt&&f&&Rt(this),this},t.to=function(e,n){return new t(e,n,arguments[2])},t.from=function(e,t){return Ct(1,arguments)},t.delayedCall=function(e,n,r,i){return new t(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},t.fromTo=function(e,t,n){return Ct(2,arguments)},t.set=function(e,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new t(e,n)},t.killTweensOf=function(e,t,n){return z.killTweensOf(e,t,n)},t}(dn);Ze(Sn.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Re("staggerTo,staggerFrom,staggerFromTo",(function(e){Sn[e]=function(){var t=new fn,n=kt.call(arguments,0);return n.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,n)}}));var _n=function(e,t,n){return e[t]=n},kn=function(e,t,n){return e[t](n)},En=function(e,t,n,r){return e[t](r.fp,n)},Tn=function(e,t,n){return e.setAttribute(t,n)},On=function(e,t){return re(e[t])?kn:ae(e[t])&&e.setAttribute?Tn:_n},Pn=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},Bn=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},Mn=function(e,t){var n=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*e):Math.round(1e4*(n.s+n.c*e))/1e4)+r,n=n._next;r+=t.c}t.set(t.t,t.p,r,t)},Dn=function(e,t){for(var n=t._pt;n;)n.r(e,n.d),n=n._next},zn=function(e,t,n,r){for(var i,a=this._pt;a;)i=a._next,a.p===r&&a.modifier(e,t,n),a=i},Nn=function(e){for(var t,n,r=this._pt;r;)n=r._next,r.p===e&&!r.op||r.op===e?tt(this,r,"_pt"):r.dep||(t=1),r=n;return!t},jn=function(e,t,n,r){r.mSet(e,t,r.m.call(r.tween,n,r.mt),r)},Ln=function(e){for(var t,n,r,i,a=e._pt;a;){for(t=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:i)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:i=a,a=t}e._pt=r},In=function(){function e(e,t,n,r,i,a,o,s,l){this.t=t,this.s=r,this.c=i,this.p=n,this.r=a||Pn,this.d=o||this,this.set=s||_n,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,n){this.mSet=this.mSet||this.set,this.set=jn,this.m=e,this.mt=n,this.tween=t},e}();Re(je+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return Oe[e]=1})),be.TweenMax=be.TweenLite=Sn,be.TimelineLite=be.TimelineMax=fn,z=new fn({sortChildren:!1,defaults:W,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),H.stringFilter=qt;var Fn=[],Rn={},$n=[],Gn=0,Yn=function(e){return(Rn[e]||$n).map((function(e){return e()}))},Un=function(){var e=Date.now(),t=[];e-Gn>2&&(Yn("matchMediaInit"),Fn.forEach((function(e){var n,r,i,a,o=e.queries,s=e.conditions;for(r in o)(n=N.matchMedia(o[r]).matches)&&(i=1),n!==s[r]&&(s[r]=n,a=1);a&&(e.revert(),i&&t.push(e))})),Yn("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e)})),Gn=e,Yn("matchMedia"))},Vn=function(){function e(e,t){this.selector=t&&Ot(t),this.data=[],this._r=[],this.isReverted=!1,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,n){re(e)&&(n=t,t=e,e=re);var r=this,i=function(){var e,i=D,a=r.selector;return i&&i!==r&&i.data.push(r),n&&(r.selector=Ot(n)),D=r,e=t.apply(r,arguments),re(e)&&r._r.push(e),D=i,r.selector=a,r.isReverted=!1,e};return r.last=i,e===re?i(r):e?r[e]=i:i},t.ignore=function(e){var t=D;D=null,e(this),D=t},t.getTweens=function(){var t=[];return this.data.forEach((function(n){return n instanceof e?t.push.apply(t,n.getTweens()):n instanceof Sn&&!(n.parent&&"nested"===n.parent.data)&&t.push(n)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var n=this;if(e){var r=this.getTweens();this.data.forEach((function(e){"isFlip"===e.data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(e){return r.splice(r.indexOf(e),1)})))})),r.map((function(e){return{g:e.globalTime(0),t:e}})).sort((function(e,t){return t.g-e.g||-1})).forEach((function(t){return t.t.revert(e)})),this.data.forEach((function(t){return!(t instanceof dn)&&t.revert&&t.revert(e)})),this._r.forEach((function(t){return t(e,n)})),this.isReverted=!0}else this.data.forEach((function(e){return e.kill&&e.kill()}));if(this.clear(),t){var i=Fn.indexOf(this);~i&&Fn.splice(i,1)}},t.revert=function(e){this.kill(e||{})},e}(),Hn=function(){function e(e){this.contexts=[],this.scope=e}var t=e.prototype;return t.add=function(e,t,n){oe(e)||(e={matches:e});var r,i,a,o=new Vn(0,n||this.scope),s=o.conditions={};for(i in this.contexts.push(o),t=o.add("onMatch",t),o.queries=e,e)"all"===i?a=1:(r=N.matchMedia(e[i]))&&(Fn.indexOf(o)<0&&Fn.push(o),(s[i]=r.matches)&&(a=1),r.addListener?r.addListener(Un):r.addEventListener("change",Un));return a&&t(o),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),Wn={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e){return $t(e)}))},timeline:function(e){return new fn(e)},getTweensOf:function(e,t){return z.getTweensOf(e,t)},getProperty:function(e,t,n,r){ne(e)&&(e=Tt(e)[0]);var i=Ie(e||{}).get,a=n?Qe:We;return"native"===n&&(n=""),e?t?a((Me[t]&&Me[t].get||i)(e,t,n,r)):function(t,n,r){return a((Me[t]&&Me[t].get||i)(e,t,n,r))}:e},quickSetter:function(e,t,n){if((e=Tt(e)).length>1){var r=e.map((function(e){return qn.quickSetter(e,t,n)})),i=r.length;return function(e){for(var t=i;t--;)r[t](e)}}e=e[0]||{};var a=Me[t],o=Ie(e),s=o.harness&&(o.harness.aliases||{})[t]||t,l=a?function(t){var r=new a;R._pt=0,r.init(e,n?t+n:t,R,0,[e]),r.render(1,r),R._pt&&Dn(1,R)}:o.set(e,s);return a?l:function(t){return l(e,s,n?t+n:t,o,1)}},quickTo:function(e,t,n){var r,i=qn.to(e,qe(((r={})[t]="+=0.1",r.paused=!0,r),n||{})),a=function(e,n,r){return i.resetTo(t,e,n,r)};return a.tween=i,a},isTweening:function(e){return z.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=on(e.ease,W.ease)),Xe(W,e||{})},config:function(e){return Xe(H,e||{})},registerEffect:function(e){var t=e.name,n=e.effect,r=e.plugins,i=e.defaults,a=e.extendTimeline;(r||"").split(",").forEach((function(e){return e&&!Me[e]&&!be[e]&&xe(t+" effect requires "+e+" plugin.")})),De[t]=function(e,t,r){return n(Tt(e),Ze(t||{},i),r)},a&&(fn.prototype[t]=function(e,n,r){return this.add(De[t](e,oe(n)?n:(r=n)&&{},this),r)})},registerEase:function(e,t){Jt[e]=on(t)},parseEase:function(e,t){return arguments.length?on(e,t):Jt},getById:function(e){return z.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var n,r,i=new fn(e);for(i.smoothChildTiming=se(e.smoothChildTiming),z.remove(i),i._dp=0,i._time=i._tTime=z._time,n=z._first;n;)r=n._next,!t&&!n._dur&&n instanceof Sn&&n.vars.onComplete===n._targets[0]||ft(i,n,n._start-n._delay),n=r;return ft(z,i,0),i},context:function(e,t){return e?new Vn(e,t):D},matchMedia:function(e){return new Hn(e)},matchMediaRefresh:function(){return Fn.forEach((function(e){var t,n,r=e.conditions;for(n in r)r[n]&&(r[n]=!1,t=1);t&&e.revert()}))||Un()},addEventListener:function(e,t){var n=Rn[e]||(Rn[e]=[]);~n.indexOf(t)||n.push(t)},removeEventListener:function(e,t){var n=Rn[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},utils:{wrap:function e(t,n,r){var i=n-t;return pe(t)?Nt(t,e(0,t.length),n):xt(r,(function(e){return(i+(e-t)%i)%i+t}))},wrapYoyo:function e(t,n,r){var i=n-t,a=2*i;return pe(t)?Nt(t,e(0,t.length-1),n):xt(r,(function(e){return t+((e=(a+(e-t)%a)%a||0)>i?a-e:e)}))},distribute:Bt,random:zt,snap:Dt,normalize:function(e,t,n){return Lt(e,t,0,1,n)},getUnit:_t,clamp:function(e,t,n){return xt(n,(function(n){return St(e,t,n)}))},splitColor:Vt,toArray:Tt,selector:Ot,mapRange:Lt,pipe:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},unitize:function(e,t){return function(n){return e(parseFloat(n))+(t||_t(n))}},interpolate:function e(t,n,r,i){var a=isNaN(t+n)?0:function(e){return(1-e)*t+e*n};if(!a){var o,s,l,u,c,p=ne(t),d={};if(!0===r&&(i=1)&&(r=null),p)t={p:t},n={p:n};else if(pe(t)&&!pe(n)){for(l=[],u=t.length,c=u-2,s=1;s<u;s++)l.push(e(t[s-1],t[s]));u--,a=function(e){e*=u;var t=Math.min(c,~~e);return l[t](e-t)},r=n}else i||(t=qe(pe(t)?[]:{},t));if(!l){for(o in n)An.call(d,t,o,"get",n[o]);a=function(e){return Dn(e,d)||(p?t.p:t)}}}return xt(r,a)},shuffle:Pt},install:we,effects:De,ticker:Xt,updateRoot:fn.updateRoot,plugins:Me,globalTimeline:z,core:{PropTween:In,globals:Se,Tween:Sn,Timeline:fn,Animation:dn,getCache:Ie,_removeLinkedListItem:tt,reverting:function(){return M},context:function(e){return e&&D&&(D.data.push(e),e._ctx=D),D},suppressOverwrites:function(e){return B=e}}};Re("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return Wn[e]=Sn[e]})),Xt.add(fn.updateRoot),R=Wn.to({},{duration:0});var Qn=function(e,t){for(var n=e._pt;n&&n.p!==t&&n.op!==t&&n.fp!==t;)n=n._next;return n},Zn=function(e,t){return{name:e,rawVars:1,init:function(e,n,r){r._onInit=function(e){var r,i;if(ne(n)&&(r={},Re(n,(function(e){return r[e]=1})),n=r),t){for(i in r={},n)r[i]=t(n[i]);n=r}!function(e,t){var n,r,i,a=e._targets;for(n in t)for(r=a.length;r--;)(i=e._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=Qn(i,n)),i&&i.modifier&&i.modifier(t[n],e,a[r],n))}(e,n)}}}},qn=Wn.registerPlugin({name:"attr",init:function(e,t,n,r,i){var a,o,s;for(a in this.tween=n,t)s=e.getAttribute(a)||"",(o=this.add(e,"setAttribute",(s||0)+"",t[a],r,i,0,0,a)).op=a,o.b=s,this._props.push(a)},render:function(e,t){for(var n=t._pt;n;)M?n.set(n.t,n.p,n.b,n):n.r(e,n.d),n=n._next}},{name:"endArray",init:function(e,t){for(var n=t.length;n--;)this.add(e,n,e[n]||0,t[n],0,0,0,0,0,1)}},Zn("roundProps",Mt),Zn("modifiers"),Zn("snap",Dt))||Wn;Sn.version=fn.version=qn.version="3.11.3",I=1,le()&&Kt(),Jt.Power0,Jt.Power1,Jt.Power2,Jt.Power3,Jt.Power4,Jt.Linear,Jt.Quad,Jt.Cubic,Jt.Quart,Jt.Quint,Jt.Strong,Jt.Elastic,Jt.Back,Jt.SteppedEase,Jt.Bounce,Jt.Sine,Jt.Expo,Jt.Circ;var Xn,Kn,Jn,er,tr,nr,rr,ir,ar={},or=180/Math.PI,sr=Math.PI/180,lr=Math.atan2,ur=/([A-Z])/g,cr=/(left|right|width|margin|padding|x)/i,pr=/[\s,\(]\S/,dr={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},fr=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},hr=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},gr=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},mr=function(e,t){var n=t.s+t.c*e;t.set(t.t,t.p,~~(n+(n<0?-.5:.5))+t.u,t)},Ar=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},vr=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},br=function(e,t,n){return e.style[t]=n},yr=function(e,t,n){return e.style.setProperty(t,n)},wr=function(e,t,n){return e._gsap[t]=n},Cr=function(e,t,n){return e._gsap.scaleX=e._gsap.scaleY=n},xr=function(e,t,n,r,i){var a=e._gsap;a.scaleX=a.scaleY=n,a.renderTransform(i,a)},Sr=function(e,t,n,r,i){var a=e._gsap;a[t]=n,a.renderTransform(i,a)},_r="transform",kr=_r+"Origin",Er=function(e,t){var n=this,r=this.target,i=r.style;if(e in ar){if(this.tfm=this.tfm||{},"transform"!==e&&(~(e=dr[e]||e).indexOf(",")?e.split(",").forEach((function(e){return n.tfm[e]=Vr(r,e)})):this.tfm[e]=r._gsap.x?r._gsap[e]:Vr(r,e)),this.props.indexOf(_r)>=0)return;r._gsap.svg&&(this.svgo=r.getAttribute("data-svg-origin"),this.props.push(kr,t,"")),e=_r}(i||t)&&this.props.push(e,t,i[e])},Tr=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},Or=function(){var e,t,n=this.props,r=this.target,i=r.style,a=r._gsap;for(e=0;e<n.length;e+=3)n[e+1]?r[n[e]]=n[e+2]:n[e+2]?i[n[e]]=n[e+2]:i.removeProperty(n[e].replace(ur,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)a[t]=this.tfm[t];a.svg&&(a.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),!(e=rr())||e.isStart||i[_r]||(Tr(i),a.uncache=1)}},Pr=function(e,t){var n={target:e,props:[],revert:Or,save:Er};return t&&t.split(",").forEach((function(e){return n.save(e)})),n},Br=function(e,t){var n=Kn.createElementNS?Kn.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):Kn.createElement(e);return n.style?n:Kn.createElement(e)},Mr=function e(t,n,r){var i=getComputedStyle(t);return i[n]||i.getPropertyValue(n.replace(ur,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&e(t,zr(n)||n,1)||""},Dr="O,Moz,ms,Ms,Webkit".split(","),zr=function(e,t,n){var r=(t||tr).style,i=5;if(e in r&&!n)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);i--&&!(Dr[i]+e in r););return i<0?null:(3===i?"ms":i>=0?Dr[i]:"")+e},Nr=function(){"undefined"!=typeof window&&window.document&&(Xn=window,Kn=Xn.document,Jn=Kn.documentElement,tr=Br("div")||{style:{}},Br("div"),_r=zr(_r),kr=_r+"Origin",tr.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",ir=!!zr("perspective"),rr=qn.core.reverting,er=1)},jr=function e(t){var n,r=Br("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,a=this.nextSibling,o=this.style.cssText;if(Jn.appendChild(r),r.appendChild(this),this.style.display="block",t)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(n=this._gsapBBox());return i&&(a?i.insertBefore(this,a):i.appendChild(this)),Jn.removeChild(r),this.style.cssText=o,n},Lr=function(e,t){for(var n=t.length;n--;)if(e.hasAttribute(t[n]))return e.getAttribute(t[n])},Ir=function(e){var t;try{t=e.getBBox()}catch(n){t=jr.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===jr||(t=jr.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+Lr(e,["x","cx","x1"])||0,y:+Lr(e,["y","cy","y1"])||0,width:0,height:0}},Fr=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!Ir(e))},Rr=function(e,t){if(t){var n=e.style;t in ar&&t!==kr&&(t=_r),n.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),n.removeProperty(t.replace(ur,"-$1").toLowerCase())):n.removeAttribute(t)}},$r=function(e,t,n,r,i,a){var o=new In(e._pt,t,n,0,1,a?vr:Ar);return e._pt=o,o.b=r,o.e=i,e._props.push(n),o},Gr={deg:1,rad:1,turn:1},Yr={grid:1,flex:1},Ur=function e(t,n,r,i){var a,o,s,l,u=parseFloat(r)||0,c=(r+"").trim().substr((u+"").length)||"px",p=tr.style,d=cr.test(n),f="svg"===t.tagName.toLowerCase(),h=(f?"client":"offset")+(d?"Width":"Height"),g=100,m="px"===i,A="%"===i;return i===c||!u||Gr[i]||Gr[c]?u:("px"!==c&&!m&&(u=e(t,n,r,"px")),l=t.getCTM&&Fr(t),!A&&"%"!==c||!ar[n]&&!~n.indexOf("adius")?(p[d?"width":"height"]=g+(m?c:i),o=~n.indexOf("adius")||"em"===i&&t.appendChild&&!f?t:t.parentNode,l&&(o=(t.ownerSVGElement||{}).parentNode),o&&o!==Kn&&o.appendChild||(o=Kn.body),(s=o._gsap)&&A&&s.width&&d&&s.time===Xt.time&&!s.uncache?$e(u/s.width*g):((A||"%"===c)&&!Yr[Mr(o,"display")]&&(p.position=Mr(t,"position")),o===t&&(p.position="static"),o.appendChild(tr),a=tr[h],o.removeChild(tr),p.position="absolute",d&&A&&((s=Ie(o)).time=Xt.time,s.width=o[h]),$e(m?a*u/g:a&&u?g/a*u:0))):(a=l?t.getBBox()[d?"width":"height"]:t[h],$e(A?u/a*g:u/100*a)))},Vr=function(e,t,n,r){var i;return er||Nr(),t in dr&&"transform"!==t&&~(t=dr[t]).indexOf(",")&&(t=t.split(",")[0]),ar[t]&&"transform"!==t?(i=ni(e,r),i="transformOrigin"!==t?i[t]:i.svg?i.origin:ri(Mr(e,kr))+" "+i.zOrigin+"px"):(!(i=e.style[t])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=Zr[t]&&Zr[t](e,t,n)||Mr(e,t)||Fe(e,t)||("opacity"===t?1:0)),n&&!~(i+"").trim().indexOf(" ")?Ur(e,t,i,n)+n:i},Hr=function(e,t,n,r){if(!n||"none"===n){var i=zr(t,e,1),a=i&&Mr(e,i,1);a&&a!==n?(t=i,n=a):"borderColor"===t&&(n=Mr(e,"borderTopColor"))}var o,s,l,u,c,p,d,f,h,g,m,A=new In(this._pt,e.style,t,0,1,Mn),v=0,b=0;if(A.b=n,A.e=r,n+="","auto"==(r+="")&&(e.style[t]=r,r=Mr(e,t)||r,e.style[t]=n),qt(o=[n,r]),r=o[1],l=(n=o[0]).match(he)||[],(r.match(he)||[]).length){for(;s=he.exec(r);)d=s[0],h=r.substring(v,s.index),c?c=(c+1)%5:"rgba("!==h.substr(-5)&&"hsla("!==h.substr(-5)||(c=1),d!==(p=l[b++]||"")&&(u=parseFloat(p)||0,m=p.substr((u+"").length),"="===d.charAt(1)&&(d=Ye(u,d)+m),f=parseFloat(d),g=d.substr((f+"").length),v=he.lastIndex-g.length,g||(g=g||H.units[t]||m,v===r.length&&(r+=g,A.e+=g)),m!==g&&(u=Ur(e,t,p,g)||0),A._pt={_next:A._pt,p:h||1===b?h:",",s:u,c:f-u,m:c&&c<4||"zIndex"===t?Math.round:0});A.c=v<r.length?r.substring(v,r.length):""}else A.r="display"===t&&"none"===r?vr:Ar;return me.test(r)&&(A.e=0),this._pt=A,A},Wr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Qr=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var n,r,i,a=t.t,o=a.style,s=t.u,l=a._gsap;if("all"===s||!0===s)o.cssText="",r=1;else for(i=(s=s.split(",")).length;--i>-1;)n=s[i],ar[n]&&(r=1,n="transformOrigin"===n?kr:_r),Rr(a,n);r&&(Rr(a,_r),l&&(l.svg&&a.removeAttribute("transform"),ni(a,1),l.uncache=1,Tr(o)))}},Zr={clearProps:function(e,t,n,r,i){if("isFromStart"!==i.data){var a=e._pt=new In(e._pt,t,n,0,0,Qr);return a.u=r,a.pr=-10,a.tween=i,e._props.push(n),1}}},qr=[1,0,0,1,0,0],Xr={},Kr=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},Jr=function(e){var t=Mr(e,_r);return Kr(t)?qr:t.substr(7).match(fe).map($e)},ei=function(e,t){var n,r,i,a,o=e._gsap||Ie(e),s=e.style,l=Jr(e);return o.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(i=e.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?qr:l:(l!==qr||e.offsetParent||e===Jn||o.svg||(i=s.display,s.display="block",(n=e.parentNode)&&e.offsetParent||(a=1,r=e.nextElementSibling,Jn.appendChild(e)),l=Jr(e),i?s.display=i:Rr(e,"display"),a&&(r?n.insertBefore(e,r):n?n.appendChild(e):Jn.removeChild(e))),t&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},ti=function(e,t,n,r,i,a){var o,s,l,u=e._gsap,c=i||ei(e,!0),p=u.xOrigin||0,d=u.yOrigin||0,f=u.xOffset||0,h=u.yOffset||0,g=c[0],m=c[1],A=c[2],v=c[3],b=c[4],y=c[5],w=t.split(" "),C=parseFloat(w[0])||0,x=parseFloat(w[1])||0;n?c!==qr&&(s=g*v-m*A)&&(l=C*(-m/s)+x*(g/s)-(g*y-m*b)/s,C=C*(v/s)+x*(-A/s)+(A*y-v*b)/s,x=l):(C=(o=Ir(e)).x+(~w[0].indexOf("%")?C/100*o.width:C),x=o.y+(~(w[1]||w[0]).indexOf("%")?x/100*o.height:x)),r||!1!==r&&u.smooth?(b=C-p,y=x-d,u.xOffset=f+(b*g+y*A)-b,u.yOffset=h+(b*m+y*v)-y):u.xOffset=u.yOffset=0,u.xOrigin=C,u.yOrigin=x,u.smooth=!!r,u.origin=t,u.originIsAbsolute=!!n,e.style[kr]="0px 0px",a&&($r(a,u,"xOrigin",p,C),$r(a,u,"yOrigin",d,x),$r(a,u,"xOffset",f,u.xOffset),$r(a,u,"yOffset",h,u.yOffset)),e.setAttribute("data-svg-origin",C+" "+x)},ni=function(e,t){var n=e._gsap||new pn(e);if("x"in n&&!t&&!n.uncache)return n;var r,i,a,o,s,l,u,c,p,d,f,h,g,m,A,v,b,y,w,C,x,S,_,k,E,T,O,P,B,M,D,z,N=e.style,j=n.scaleX<0,L="px",I="deg",F=getComputedStyle(e),R=Mr(e,kr)||"0";return r=i=a=l=u=c=p=d=f=0,o=s=1,n.svg=!(!e.getCTM||!Fr(e)),F.translate&&("none"===F.translate&&"none"===F.scale&&"none"===F.rotate||(N[_r]=("none"!==F.translate?"translate3d("+(F.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==F.rotate?"rotate("+F.rotate+") ":"")+("none"!==F.scale?"scale("+F.scale.split(" ").join(",")+") ":"")+("none"!==F[_r]?F[_r]:"")),N.scale=N.rotate=N.translate="none"),m=ei(e,n.svg),n.svg&&(n.uncache?(E=e.getBBox(),R=n.xOrigin-E.x+"px "+(n.yOrigin-E.y)+"px",k=""):k=!t&&e.getAttribute("data-svg-origin"),ti(e,k||R,!!k||n.originIsAbsolute,!1!==n.smooth,m)),h=n.xOrigin||0,g=n.yOrigin||0,m!==qr&&(y=m[0],w=m[1],C=m[2],x=m[3],r=S=m[4],i=_=m[5],6===m.length?(o=Math.sqrt(y*y+w*w),s=Math.sqrt(x*x+C*C),l=y||w?lr(w,y)*or:0,(p=C||x?lr(C,x)*or+l:0)&&(s*=Math.abs(Math.cos(p*sr))),n.svg&&(r-=h-(h*y+g*C),i-=g-(h*w+g*x))):(z=m[6],M=m[7],O=m[8],P=m[9],B=m[10],D=m[11],r=m[12],i=m[13],a=m[14],u=(A=lr(z,B))*or,A&&(k=S*(v=Math.cos(-A))+O*(b=Math.sin(-A)),E=_*v+P*b,T=z*v+B*b,O=S*-b+O*v,P=_*-b+P*v,B=z*-b+B*v,D=M*-b+D*v,S=k,_=E,z=T),c=(A=lr(-C,B))*or,A&&(v=Math.cos(-A),D=x*(b=Math.sin(-A))+D*v,y=k=y*v-O*b,w=E=w*v-P*b,C=T=C*v-B*b),l=(A=lr(w,y))*or,A&&(k=y*(v=Math.cos(A))+w*(b=Math.sin(A)),E=S*v+_*b,w=w*v-y*b,_=_*v-S*b,y=k,S=E),u&&Math.abs(u)+Math.abs(l)>359.9&&(u=l=0,c=180-c),o=$e(Math.sqrt(y*y+w*w+C*C)),s=$e(Math.sqrt(_*_+z*z)),A=lr(S,_),p=Math.abs(A)>2e-4?A*or:0,f=D?1/(D<0?-D:D):0),n.svg&&(k=e.getAttribute("transform"),n.forceCSS=e.setAttribute("transform","")||!Kr(Mr(e,_r)),k&&e.setAttribute("transform",k))),Math.abs(p)>90&&Math.abs(p)<270&&(j?(o*=-1,p+=l<=0?180:-180,l+=l<=0?180:-180):(s*=-1,p+=p<=0?180:-180)),t=t||n.uncache,n.x=r-((n.xPercent=r&&(!t&&n.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*n.xPercent/100:0)+L,n.y=i-((n.yPercent=i&&(!t&&n.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-i)?-50:0)))?e.offsetHeight*n.yPercent/100:0)+L,n.z=a+L,n.scaleX=$e(o),n.scaleY=$e(s),n.rotation=$e(l)+I,n.rotationX=$e(u)+I,n.rotationY=$e(c)+I,n.skewX=p+I,n.skewY=d+I,n.transformPerspective=f+L,(n.zOrigin=parseFloat(R.split(" ")[2])||0)&&(N[kr]=ri(R)),n.xOffset=n.yOffset=0,n.force3D=H.force3D,n.renderTransform=n.svg?ci:ir?ui:ai,n.uncache=0,n},ri=function(e){return(e=e.split(" "))[0]+" "+e[1]},ii=function(e,t,n){var r=_t(t);return $e(parseFloat(t)+parseFloat(Ur(e,"x",n+"px",r)))+r},ai=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ui(e,t)},oi="0deg",si="0px",li=") ",ui=function(e,t){var n=t||this,r=n.xPercent,i=n.yPercent,a=n.x,o=n.y,s=n.z,l=n.rotation,u=n.rotationY,c=n.rotationX,p=n.skewX,d=n.skewY,f=n.scaleX,h=n.scaleY,g=n.transformPerspective,m=n.force3D,A=n.target,v=n.zOrigin,b="",y="auto"===m&&e&&1!==e||!0===m;if(v&&(c!==oi||u!==oi)){var w,C=parseFloat(u)*sr,x=Math.sin(C),S=Math.cos(C);C=parseFloat(c)*sr,w=Math.cos(C),a=ii(A,a,x*w*-v),o=ii(A,o,-Math.sin(C)*-v),s=ii(A,s,S*w*-v+v)}g!==si&&(b+="perspective("+g+li),(r||i)&&(b+="translate("+r+"%, "+i+"%) "),(y||a!==si||o!==si||s!==si)&&(b+=s!==si||y?"translate3d("+a+", "+o+", "+s+") ":"translate("+a+", "+o+li),l!==oi&&(b+="rotate("+l+li),u!==oi&&(b+="rotateY("+u+li),c!==oi&&(b+="rotateX("+c+li),p===oi&&d===oi||(b+="skew("+p+", "+d+li),1===f&&1===h||(b+="scale("+f+", "+h+li),A.style[_r]=b||"translate(0, 0)"},ci=function(e,t){var n,r,i,a,o,s=t||this,l=s.xPercent,u=s.yPercent,c=s.x,p=s.y,d=s.rotation,f=s.skewX,h=s.skewY,g=s.scaleX,m=s.scaleY,A=s.target,v=s.xOrigin,b=s.yOrigin,y=s.xOffset,w=s.yOffset,C=s.forceCSS,x=parseFloat(c),S=parseFloat(p);d=parseFloat(d),f=parseFloat(f),(h=parseFloat(h))&&(f+=h=parseFloat(h),d+=h),d||f?(d*=sr,f*=sr,n=Math.cos(d)*g,r=Math.sin(d)*g,i=Math.sin(d-f)*-m,a=Math.cos(d-f)*m,f&&(h*=sr,o=Math.tan(f-h),i*=o=Math.sqrt(1+o*o),a*=o,h&&(o=Math.tan(h),n*=o=Math.sqrt(1+o*o),r*=o)),n=$e(n),r=$e(r),i=$e(i),a=$e(a)):(n=g,a=m,r=i=0),(x&&!~(c+"").indexOf("px")||S&&!~(p+"").indexOf("px"))&&(x=Ur(A,"x",c,"px"),S=Ur(A,"y",p,"px")),(v||b||y||w)&&(x=$e(x+v-(v*n+b*i)+y),S=$e(S+b-(v*r+b*a)+w)),(l||u)&&(o=A.getBBox(),x=$e(x+l/100*o.width),S=$e(S+u/100*o.height)),o="matrix("+n+","+r+","+i+","+a+","+x+","+S+")",A.setAttribute("transform",o),C&&(A.style[_r]=o)},pi=function(e,t,n,r,i){var a,o,s=360,l=ne(i),u=parseFloat(i)*(l&&~i.indexOf("rad")?or:1)-r,c=r+u+"deg";return l&&("short"===(a=i.split("_")[1])&&(u%=s)!=u%180&&(u+=u<0?s:-360),"cw"===a&&u<0?u=(u+36e9)%s-~~(u/s)*s:"ccw"===a&&u>0&&(u=(u-36e9)%s-~~(u/s)*s)),e._pt=o=new In(e._pt,t,n,r,u,hr),o.e=c,o.u="deg",e._props.push(n),o},di=function(e,t){for(var n in t)e[n]=t[n];return e},fi=function(e,t,n){var r,i,a,o,s,l,u,c=di({},n._gsap),p=n.style;for(i in c.svg?(a=n.getAttribute("transform"),n.setAttribute("transform",""),p[_r]=t,r=ni(n,1),Rr(n,_r),n.setAttribute("transform",a)):(a=getComputedStyle(n)[_r],p[_r]=t,r=ni(n,1),p[_r]=a),ar)(a=c[i])!==(o=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(s=_t(a)!==(u=_t(o))?Ur(n,i,a,u):parseFloat(a),l=parseFloat(o),e._pt=new In(e._pt,r,i,s,l-s,fr),e._pt.u=u||0,e._props.push(i));di(r,c)};Re("padding,margin,Width,Radius",(function(e,t){var n="Top",r="Right",i="Bottom",a="Left",o=(t<3?[n,r,i,a]:[n+a,n+r,i+r,i+a]).map((function(n){return t<2?e+n:"border"+n+e}));Zr[t>1?"border"+e:e]=function(e,t,n,r,i){var a,s;if(arguments.length<4)return a=o.map((function(t){return Vr(e,t,n)})),5===(s=a.join(" ")).split(a[0]).length?a[0]:s;a=(r+"").split(" "),s={},o.forEach((function(e,t){return s[e]=a[t]=a[t]||a[(t-1)/2|0]})),e.init(t,s,i)}}));var hi,gi,mi={name:"css",register:Nr,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,n,r,i){var a,o,s,l,u,c,p,d,f,h,g,m,A,v,b,y,w,C,x,S,_=this._props,k=e.style,E=n.vars.startAt;for(p in er||Nr(),this.styles=this.styles||Pr(e),y=this.styles.props,this.tween=n,t)if("autoRound"!==p&&(o=t[p],!Me[p]||!vn(p,t,n,r,e,i)))if(u=typeof o,c=Zr[p],"function"===u&&(u=typeof(o=o.call(n,r,e,i))),"string"===u&&~o.indexOf("random(")&&(o=jt(o)),c)c(this,e,p,o,n)&&(b=1);else if("--"===p.substr(0,2))a=(getComputedStyle(e).getPropertyValue(p)+"").trim(),o+="",Qt.lastIndex=0,Qt.test(a)||(d=_t(a),f=_t(o)),f?d!==f&&(a=Ur(e,p,a,f)+f):d&&(o+=d),this.add(k,"setProperty",a,o,r,i,0,0,p),_.push(p),y.push(p,0,k[p]);else if("undefined"!==u){if(E&&p in E?(a="function"==typeof E[p]?E[p].call(n,r,e,i):E[p],ne(a)&&~a.indexOf("random(")&&(a=jt(a)),_t(a+"")||(a+=H.units[p]||_t(Vr(e,p))||""),"="===(a+"").charAt(1)&&(a=Vr(e,p))):a=Vr(e,p),l=parseFloat(a),(h="string"===u&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),s=parseFloat(o),p in dr&&("autoAlpha"===p&&(1===l&&"hidden"===Vr(e,"visibility")&&s&&(l=0),y.push("visibility",0,k.visibility),$r(this,k,"visibility",l?"inherit":"hidden",s?"inherit":"hidden",!s)),"scale"!==p&&"transform"!==p&&~(p=dr[p]).indexOf(",")&&(p=p.split(",")[0])),g=p in ar)if(this.styles.save(p),m||((A=e._gsap).renderTransform&&!t.parseTransform||ni(e,t.parseTransform),v=!1!==t.smoothOrigin&&A.smooth,(m=this._pt=new In(this._pt,k,_r,0,1,A.renderTransform,A,0,-1)).dep=1),"scale"===p)this._pt=new In(this._pt,A,"scaleY",l,(h?Ye(l,h+s):s)-l||0,fr),this._pt.u=0,_.push("scaleY",p),p+="X";else{if("transformOrigin"===p){y.push(kr,0,k[kr]),C=void 0,x=void 0,S=void 0,C=(w=o).split(" "),x=C[0],S=C[1]||"50%","top"!==x&&"bottom"!==x&&"left"!==S&&"right"!==S||(w=x,x=S,S=w),C[0]=Wr[x]||x,C[1]=Wr[S]||S,o=C.join(" "),A.svg?ti(e,o,0,v,0,this):((f=parseFloat(o.split(" ")[2])||0)!==A.zOrigin&&$r(this,A,"zOrigin",A.zOrigin,f),$r(this,k,p,ri(a),ri(o)));continue}if("svgOrigin"===p){ti(e,o,1,v,0,this);continue}if(p in Xr){pi(this,A,p,l,h?Ye(l,h+o):o);continue}if("smoothOrigin"===p){$r(this,A,"smooth",A.smooth,o);continue}if("force3D"===p){A[p]=o;continue}if("transform"===p){fi(this,o,e);continue}}else p in k||(p=zr(p)||p);if(g||(s||0===s)&&(l||0===l)&&!pr.test(o)&&p in k)s||(s=0),(d=(a+"").substr((l+"").length))!==(f=_t(o)||(p in H.units?H.units[p]:d))&&(l=Ur(e,p,a,f)),this._pt=new In(this._pt,g?A:k,p,l,(h?Ye(l,h+s):s)-l,g||"px"!==f&&"zIndex"!==p||!1===t.autoRound?fr:mr),this._pt.u=f||0,d!==f&&"%"!==f&&(this._pt.b=a,this._pt.r=gr);else if(p in k)Hr.call(this,e,p,a,h?h+o:o);else{if(!(p in e)){Ce(p,o);continue}this.add(e,p,a||e[p],h?h+o:o,r,i)}g||(p in k?y.push(p,0,k[p]):y.push(p,1,a||e[p])),_.push(p)}b&&Ln(this)},render:function(e,t){if(t.tween._time||!rr())for(var n=t._pt;n;)n.r(e,n.d),n=n._next;else t.styles.revert()},get:Vr,aliases:dr,getSetter:function(e,t,n){var r=dr[t];return r&&r.indexOf(",")<0&&(t=r),t in ar&&t!==kr&&(e._gsap.x||Vr(e,"x"))?n&&nr===n?"scale"===t?Cr:wr:(nr=n||{})&&("scale"===t?xr:Sr):e.style&&!ae(e.style[t])?br:~t.indexOf("-")?yr:On(e,t)},core:{_removeProperty:Rr,_getMatrix:ei}};qn.utils.checkPrefix=zr,qn.core.getStyleSaver=Pr,gi=Re("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(hi="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){ar[e]=1})),Re(hi,(function(e){H.units[e]="deg",Xr[e]=1})),dr[gi[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+hi,Re("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");dr[t[1]]=gi[t[0]]})),Re("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){H.units[e]="px"})),qn.registerPlugin(mi);var Ai=qn.registerPlugin(mi)||qn,vi=(Ai.core.Tween,n(2431)),bi={};bi.styleTagTransform=m(),bi.setAttributes=d(),bi.insert=c().bind(null,"head"),bi.domAPI=l(),bi.insertStyleElement=h(),o()(vi.Z,bi);var yi=vi.Z&&vi.Z.locals?vi.Z.locals:void 0;function wi(e){return wi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wi(e)}var Ci=["number","styleType","className"];function xi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Si(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xi(Object(n),!0).forEach((function(t){_i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==wi(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==wi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===wi(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ki(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ei=function(t){var n,r,a=t.number,o=t.styleType,s=void 0===o?"accentFirst":o,l=t.className,u=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(t,Ci),c=(0,e.useRef)(null),p=(n=(0,e.useState)({val:a}),r=1,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],l=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(n,r)||function(e,t){if(e){if("string"==typeof e)return ki(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ki(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return(0,e.useLayoutEffect)((function(){Ai.to(p,{duration:.6,val:a,onUpdate:function(){c.current&&(c.current.innerText="".concat(p.val.toFixed()))},ease:"sine.out"})}),[p,a]),(0,y.jsx)("div",Si(Si({className:i()(yi.countdown,yi[s],l)},u),{},{ref:c,children:p.val}))},Ti=(n(1249),n(2222),n(7428)),Oi={};Oi.styleTagTransform=m(),Oi.setAttributes=d(),Oi.insert=c().bind(null,"head"),Oi.domAPI=l(),Oi.insertStyleElement=h(),o()(Ti.Z,Oi);var Pi=Ti.Z&&Ti.Z.locals?Ti.Z.locals:void 0;function Bi(e){return Bi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Bi(e)}var Mi=["text","label","setPeriod","isActive","className"];function Di(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function zi(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Di(Object(n),!0).forEach((function(t){Ni(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Di(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ni(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Bi(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Bi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Bi(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ji=function(t){var n=t.text,r=t.label,a=t.setPeriod,o=t.isActive,s=void 0!==o&&o,l=t.className,u=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(t,Mi),c=(0,e.useRef)(null);return(0,e.useLayoutEffect)((function(){var e=Ai.timeline(),t=Ai.context((function(){s&&e.to(c.current,{backgroundColor:"rgb(244, 245, 249)",border:"1px solid rgba(66, 86, 122, 0.5)",scale:1,transformOrigin:"center center",delay:1}).to(c.current,{"--opacity":1})}),c);return function(){return t.revert()}}),[s]),(0,y.jsx)("button",zi(zi({className:i()(Pi.dotBtn,l,Ni({},Pi.dotBtn_active,s)),"data-label":r,"aria-label":"К периоду ".concat(n,"-").concat(r),onMouseEnter:s?void 0:function(e){var t=e.currentTarget;Ai.to(t,{backgroundColor:"rgb(244, 245, 249)",border:"1px solid rgba(66, 86, 122, 0.5)",scale:1,transformOrigin:"center center"})},onMouseLeave:s?void 0:function(e){var t=e.currentTarget;Ai.to(t,{backgroundColor:"rgb(66, 86, 122)",border:"none",scale:.11})},onClick:function(){return a(+n-1)},ref:c},u),{},{children:(0,y.jsx)("span",{children:n})}))},Li=n(154),Ii={};Ii.styleTagTransform=m(),Ii.setAttributes=d(),Ii.insert=c().bind(null,"head"),Ii.domAPI=l(),Ii.insertStyleElement=h(),o()(Li.Z,Ii);var Fi=Li.Z&&Li.Z.locals?Li.Z.locals:void 0;function Ri(e){return Ri="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ri(e)}var $i=["timePeriods","currentPeriodIdx","setCurrentPeriodIdx","className"];function Gi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Yi(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Gi(Object(n),!0).forEach((function(t){Ui(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Gi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ui(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Ri(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Ri(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ri(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Vi=function(t){var n=t.timePeriods,r=t.currentPeriodIdx,a=t.setCurrentPeriodIdx,o=t.className,s=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(t,$i),l=T("(max-width: 1060px)"),u=(0,e.useRef)(null),c=l?"165px":"262px",p=360/n.length;(0,e.useLayoutEffect)((function(){Ai.context((function(){Ai.to(u.current,{rotate:"-".concat(r*p,"deg"),duration:1,transformOrigin:"center",ease:"Sine.easeInOut"}),Ai.to("button",{rotate:"".concat(r*p,"deg"),backgroundColor:"rgb(66, 86, 122)",border:"none",scale:.11})}),u)}),[r,p,-45]);var d=n.map((function(e,t){var n=p*t-45,i=-1*n;return(0,y.jsx)("li",{className:Fi.dotsItem,style:{transform:"rotate(".concat(n,"deg) translate(").concat(c,") rotate(").concat(i,"deg)")},children:(0,y.jsx)(ji,{text:t+1,label:e.topic,setPeriod:a,isActive:r===t})},e.topic)}));return(0,y.jsx)("ul",Yi(Yi({className:i()(Fi.dots,o)},s),{},{ref:u,children:d}))};function Hi(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function Wi(e={},t={}){Object.keys(t).forEach((n=>{void 0===e[n]?e[n]=t[n]:Hi(t[n])&&Hi(e[n])&&Object.keys(t[n]).length>0&&Wi(e[n],t[n])}))}const Qi={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function Zi(){const e="undefined"!=typeof document?document:{};return Wi(e,Qi),e}const qi={document:Qi,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function Xi(){const e="undefined"!=typeof window?window:{};return Wi(e,qi),e}class Ki extends Array{constructor(e){"number"==typeof e?super(e):(super(...e||[]),function(e){const t=e.__proto__;Object.defineProperty(e,"__proto__",{get(){return t},set(e){t.__proto__=e}})}(this))}}function Ji(e=[]){const t=[];return e.forEach((e=>{Array.isArray(e)?t.push(...Ji(e)):t.push(e)})),t}function ea(e,t){return Array.prototype.filter.call(e,t)}function ta(e,t){const n=Xi(),r=Zi();let i=[];if(!t&&e instanceof Ki)return e;if(!e)return new Ki(i);if("string"==typeof e){const n=e.trim();if(n.indexOf("<")>=0&&n.indexOf(">")>=0){let e="div";0===n.indexOf("<li")&&(e="ul"),0===n.indexOf("<tr")&&(e="tbody"),0!==n.indexOf("<td")&&0!==n.indexOf("<th")||(e="tr"),0===n.indexOf("<tbody")&&(e="table"),0===n.indexOf("<option")&&(e="select");const t=r.createElement(e);t.innerHTML=n;for(let e=0;e<t.childNodes.length;e+=1)i.push(t.childNodes[e])}else i=function(e,t){if("string"!=typeof e)return[e];const n=[],r=t.querySelectorAll(e);for(let e=0;e<r.length;e+=1)n.push(r[e]);return n}(e.trim(),t||r)}else if(e.nodeType||e===n||e===r)i.push(e);else if(Array.isArray(e)){if(e instanceof Ki)return e;i=e}return new Ki(function(e){const t=[];for(let n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(i))}ta.fn=Ki.prototype;const na="resize scroll".split(" ");function ra(e){return function(...t){if(void 0===t[0]){for(let t=0;t<this.length;t+=1)na.indexOf(e)<0&&(e in this[t]?this[t][e]():ta(this[t]).trigger(e));return this}return this.on(e,...t)}}ra("click"),ra("blur"),ra("focus"),ra("focusin"),ra("focusout"),ra("keyup"),ra("keydown"),ra("keypress"),ra("submit"),ra("change"),ra("mousedown"),ra("mousemove"),ra("mouseup"),ra("mouseenter"),ra("mouseleave"),ra("mouseout"),ra("mouseover"),ra("touchstart"),ra("touchend"),ra("touchmove"),ra("resize"),ra("scroll");const ia={addClass:function(...e){const t=Ji(e.map((e=>e.split(" "))));return this.forEach((e=>{e.classList.add(...t)})),this},removeClass:function(...e){const t=Ji(e.map((e=>e.split(" "))));return this.forEach((e=>{e.classList.remove(...t)})),this},hasClass:function(...e){const t=Ji(e.map((e=>e.split(" "))));return ea(this,(e=>t.filter((t=>e.classList.contains(t))).length>0)).length>0},toggleClass:function(...e){const t=Ji(e.map((e=>e.split(" "))));this.forEach((e=>{t.forEach((t=>{e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(let n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(const t in e)this[n][t]=e[t],this[n].setAttribute(t,e[t]);return this},removeAttr:function(e){for(let t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(let t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(let t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?`${e}ms`:e;return this},on:function(...e){let[t,n,r,i]=e;function a(e){const t=e.target;if(!t)return;const i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),ta(t).is(n))r.apply(t,i);else{const e=ta(t).parents();for(let t=0;t<e.length;t+=1)ta(e[t]).is(n)&&r.apply(e[t],i)}}function o(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof e[1]&&([t,r,i]=e,n=void 0),i||(i=!1);const s=t.split(" ");let l;for(let e=0;e<this.length;e+=1){const t=this[e];if(n)for(l=0;l<s.length;l+=1){const e=s[l];t.dom7LiveListeners||(t.dom7LiveListeners={}),t.dom7LiveListeners[e]||(t.dom7LiveListeners[e]=[]),t.dom7LiveListeners[e].push({listener:r,proxyListener:a}),t.addEventListener(e,a,i)}else for(l=0;l<s.length;l+=1){const e=s[l];t.dom7Listeners||(t.dom7Listeners={}),t.dom7Listeners[e]||(t.dom7Listeners[e]=[]),t.dom7Listeners[e].push({listener:r,proxyListener:o}),t.addEventListener(e,o,i)}}return this},off:function(...e){let[t,n,r,i]=e;"function"==typeof e[1]&&([t,r,i]=e,n=void 0),i||(i=!1);const a=t.split(" ");for(let e=0;e<a.length;e+=1){const t=a[e];for(let e=0;e<this.length;e+=1){const a=this[e];let o;if(!n&&a.dom7Listeners?o=a.dom7Listeners[t]:n&&a.dom7LiveListeners&&(o=a.dom7LiveListeners[t]),o&&o.length)for(let e=o.length-1;e>=0;e-=1){const n=o[e];r&&n.listener===r||r&&n.listener&&n.listener.dom7proxy&&n.listener.dom7proxy===r?(a.removeEventListener(t,n.proxyListener,i),o.splice(e,1)):r||(a.removeEventListener(t,n.proxyListener,i),o.splice(e,1))}}}return this},trigger:function(...e){const t=Xi(),n=e[0].split(" "),r=e[1];for(let i=0;i<n.length;i+=1){const a=n[i];for(let n=0;n<this.length;n+=1){const i=this[n];if(t.CustomEvent){const n=new t.CustomEvent(a,{detail:r,bubbles:!0,cancelable:!0});i.dom7EventData=e.filter(((e,t)=>t>0)),i.dispatchEvent(n),i.dom7EventData=[],delete i.dom7EventData}}}return this},transitionEnd:function(e){const t=this;return e&&t.on("transitionend",(function n(r){r.target===this&&(e.call(this,r),t.off("transitionend",n))})),this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){const e=Xi();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){const e=Xi(),t=Zi(),n=this[0],r=n.getBoundingClientRect(),i=t.body,a=n.clientTop||i.clientTop||0,o=n.clientLeft||i.clientLeft||0,s=n===e?e.scrollY:n.scrollTop,l=n===e?e.scrollX:n.scrollLeft;return{top:r.top+s-a,left:r.left+l-o}}return null},css:function(e,t){const n=Xi();let r;if(1===arguments.length){if("string"!=typeof e){for(r=0;r<this.length;r+=1)for(const t in e)this[r].style[t]=e[t];return this}if(this[0])return n.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(r=0;r<this.length;r+=1)this[r].style[e]=t;return this}return this},each:function(e){return e?(this.forEach(((t,n)=>{e.apply(t,[t,n])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(let t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(let t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){const t=Xi(),n=Zi(),r=this[0];let i,a;if(!r||void 0===e)return!1;if("string"==typeof e){if(r.matches)return r.matches(e);if(r.webkitMatchesSelector)return r.webkitMatchesSelector(e);if(r.msMatchesSelector)return r.msMatchesSelector(e);for(i=ta(e),a=0;a<i.length;a+=1)if(i[a]===r)return!0;return!1}if(e===n)return r===n;if(e===t)return r===t;if(e.nodeType||e instanceof Ki){for(i=e.nodeType?[e]:e,a=0;a<i.length;a+=1)if(i[a]===r)return!0;return!1}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;const t=this.length;if(e>t-1)return ta([]);if(e<0){const n=t+e;return ta(n<0?[]:[this[n]])}return ta([this[e]])},append:function(...e){let t;const n=Zi();for(let r=0;r<e.length;r+=1){t=e[r];for(let e=0;e<this.length;e+=1)if("string"==typeof t){const r=n.createElement("div");for(r.innerHTML=t;r.firstChild;)this[e].appendChild(r.firstChild)}else if(t instanceof Ki)for(let n=0;n<t.length;n+=1)this[e].appendChild(t[n]);else this[e].appendChild(t)}return this},prepend:function(e){const t=Zi();let n,r;for(n=0;n<this.length;n+=1)if("string"==typeof e){const i=t.createElement("div");for(i.innerHTML=e,r=i.childNodes.length-1;r>=0;r-=1)this[n].insertBefore(i.childNodes[r],this[n].childNodes[0])}else if(e instanceof Ki)for(r=0;r<e.length;r+=1)this[n].insertBefore(e[r],this[n].childNodes[0]);else this[n].insertBefore(e,this[n].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&ta(this[0].nextElementSibling).is(e)?ta([this[0].nextElementSibling]):ta([]):this[0].nextElementSibling?ta([this[0].nextElementSibling]):ta([]):ta([])},nextAll:function(e){const t=[];let n=this[0];if(!n)return ta([]);for(;n.nextElementSibling;){const r=n.nextElementSibling;e?ta(r).is(e)&&t.push(r):t.push(r),n=r}return ta(t)},prev:function(e){if(this.length>0){const t=this[0];return e?t.previousElementSibling&&ta(t.previousElementSibling).is(e)?ta([t.previousElementSibling]):ta([]):t.previousElementSibling?ta([t.previousElementSibling]):ta([])}return ta([])},prevAll:function(e){const t=[];let n=this[0];if(!n)return ta([]);for(;n.previousElementSibling;){const r=n.previousElementSibling;e?ta(r).is(e)&&t.push(r):t.push(r),n=r}return ta(t)},parent:function(e){const t=[];for(let n=0;n<this.length;n+=1)null!==this[n].parentNode&&(e?ta(this[n].parentNode).is(e)&&t.push(this[n].parentNode):t.push(this[n].parentNode));return ta(t)},parents:function(e){const t=[];for(let n=0;n<this.length;n+=1){let r=this[n].parentNode;for(;r;)e?ta(r).is(e)&&t.push(r):t.push(r),r=r.parentNode}return ta(t)},closest:function(e){let t=this;return void 0===e?ta([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){const t=[];for(let n=0;n<this.length;n+=1){const r=this[n].querySelectorAll(e);for(let e=0;e<r.length;e+=1)t.push(r[e])}return ta(t)},children:function(e){const t=[];for(let n=0;n<this.length;n+=1){const r=this[n].children;for(let n=0;n<r.length;n+=1)e&&!ta(r[n]).is(e)||t.push(r[n])}return ta(t)},filter:function(e){return ta(ea(this,e))},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};Object.keys(ia).forEach((e=>{Object.defineProperty(ta.fn,e,{value:ia[e],writable:!0})}));var aa=ta;function oa(e,t=0){return setTimeout(e,t)}function sa(){return Date.now()}function la(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function ua(...e){const t=Object(e[0]),n=["__proto__","constructor","prototype"];for(let i=1;i<e.length;i+=1){const a=e[i];if(null!=a&&(r=a,!("undefined"!=typeof window&&void 0!==window.HTMLElement?r instanceof HTMLElement:r&&(1===r.nodeType||11===r.nodeType)))){const e=Object.keys(Object(a)).filter((e=>n.indexOf(e)<0));for(let n=0,r=e.length;n<r;n+=1){const r=e[n],i=Object.getOwnPropertyDescriptor(a,r);void 0!==i&&i.enumerable&&(la(t[r])&&la(a[r])?a[r].__swiper__?t[r]=a[r]:ua(t[r],a[r]):!la(t[r])&&la(a[r])?(t[r]={},a[r].__swiper__?t[r]=a[r]:ua(t[r],a[r])):t[r]=a[r])}}}var r;return t}function ca(e,t,n){e.style.setProperty(t,n)}function pa({swiper:e,targetPosition:t,side:n}){const r=Xi(),i=-e.translate;let a,o=null;const s=e.params.speed;e.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(e.cssModeFrameID);const l=t>i?"next":"prev",u=(e,t)=>"next"===l&&e>=t||"prev"===l&&e<=t,c=()=>{a=(new Date).getTime(),null===o&&(o=a);const l=Math.max(Math.min((a-o)/s,1),0),p=.5-Math.cos(l*Math.PI)/2;let d=i+p*(t-i);if(u(d,t)&&(d=t),e.wrapperEl.scrollTo({[n]:d}),u(d,t))return e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout((()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[n]:d})})),void r.cancelAnimationFrame(e.cssModeFrameID);e.cssModeFrameID=r.requestAnimationFrame(c)};c()}let da,fa,ha;function ga(){return da||(da=function(){const e=Xi(),t=Zi();return{smoothScroll:t.documentElement&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),passiveListener:function(){let t=!1;try{const n=Object.defineProperty({},"passive",{get(){t=!0}});e.addEventListener("testPassiveListener",null,n)}catch(e){}return t}(),gestures:"ongesturestart"in e}}()),da}var ma={on(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;const i=n?"unshift":"push";return e.split(" ").forEach((e=>{r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][i](t)})),r},once(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;function i(...n){r.off(e,i),i.__emitterProxy&&delete i.__emitterProxy,t.apply(r,n)}return i.__emitterProxy=t,r.on(e,i,n)},onAny(e,t){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;const r=t?"unshift":"push";return n.eventsAnyListeners.indexOf(e)<0&&n.eventsAnyListeners[r](e),n},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const n=t.eventsAnyListeners.indexOf(e);return n>=0&&t.eventsAnyListeners.splice(n,1),t},off(e,t){const n=this;return!n.eventsListeners||n.destroyed?n:n.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?n.eventsListeners[e]=[]:n.eventsListeners[e]&&n.eventsListeners[e].forEach(((r,i)=>{(r===t||r.__emitterProxy&&r.__emitterProxy===t)&&n.eventsListeners[e].splice(i,1)}))})),n):n},emit(...e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsListeners)return t;let n,r,i;return"string"==typeof e[0]||Array.isArray(e[0])?(n=e[0],r=e.slice(1,e.length),i=t):(n=e[0].events,r=e[0].data,i=e[0].context||t),r.unshift(i),(Array.isArray(n)?n:n.split(" ")).forEach((e=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach((t=>{t.apply(i,[e,...r])})),t.eventsListeners&&t.eventsListeners[e]&&t.eventsListeners[e].forEach((e=>{e.apply(i,r)}))})),t}},Aa={updateSize:function(){const e=this;let t,n;const r=e.$el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:r[0].clientWidth,n=void 0!==e.params.height&&null!==e.params.height?e.params.height:r[0].clientHeight,0===t&&e.isHorizontal()||0===n&&e.isVertical()||(t=t-parseInt(r.css("padding-left")||0,10)-parseInt(r.css("padding-right")||0,10),n=n-parseInt(r.css("padding-top")||0,10)-parseInt(r.css("padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(n)&&(n=0),Object.assign(e,{width:t,height:n,size:e.isHorizontal()?t:n}))},updateSlides:function(){const e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function n(e,n){return parseFloat(e.getPropertyValue(t(n))||0)}const r=e.params,{$wrapperEl:i,size:a,rtlTranslate:o,wrongRTL:s}=e,l=e.virtual&&r.virtual.enabled,u=l?e.virtual.slides.length:e.slides.length,c=i.children(`.${e.params.slideClass}`),p=l?e.virtual.slides.length:c.length;let d=[];const f=[],h=[];let g=r.slidesOffsetBefore;"function"==typeof g&&(g=r.slidesOffsetBefore.call(e));let m=r.slidesOffsetAfter;"function"==typeof m&&(m=r.slidesOffsetAfter.call(e));const A=e.snapGrid.length,v=e.slidesGrid.length;let b=r.spaceBetween,y=-g,w=0,C=0;if(void 0===a)return;"string"==typeof b&&b.indexOf("%")>=0&&(b=parseFloat(b.replace("%",""))/100*a),e.virtualSize=-b,o?c.css({marginLeft:"",marginBottom:"",marginTop:""}):c.css({marginRight:"",marginBottom:"",marginTop:""}),r.centeredSlides&&r.cssMode&&(ca(e.wrapperEl,"--swiper-centered-offset-before",""),ca(e.wrapperEl,"--swiper-centered-offset-after",""));const x=r.grid&&r.grid.rows>1&&e.grid;let S;x&&e.grid.initSlides(p);const _="auto"===r.slidesPerView&&r.breakpoints&&Object.keys(r.breakpoints).filter((e=>void 0!==r.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<p;i+=1){S=0;const o=c.eq(i);if(x&&e.grid.updateSlide(i,o,p,t),"none"!==o.css("display")){if("auto"===r.slidesPerView){_&&(c[i].style[t("width")]="");const a=getComputedStyle(o[0]),s=o[0].style.transform,l=o[0].style.webkitTransform;if(s&&(o[0].style.transform="none"),l&&(o[0].style.webkitTransform="none"),r.roundLengths)S=e.isHorizontal()?o.outerWidth(!0):o.outerHeight(!0);else{const e=n(a,"width"),t=n(a,"padding-left"),r=n(a,"padding-right"),i=n(a,"margin-left"),s=n(a,"margin-right"),l=a.getPropertyValue("box-sizing");if(l&&"border-box"===l)S=e+i+s;else{const{clientWidth:n,offsetWidth:a}=o[0];S=e+t+r+i+s+(a-n)}}s&&(o[0].style.transform=s),l&&(o[0].style.webkitTransform=l),r.roundLengths&&(S=Math.floor(S))}else S=(a-(r.slidesPerView-1)*b)/r.slidesPerView,r.roundLengths&&(S=Math.floor(S)),c[i]&&(c[i].style[t("width")]=`${S}px`);c[i]&&(c[i].swiperSlideSize=S),h.push(S),r.centeredSlides?(y=y+S/2+w/2+b,0===w&&0!==i&&(y=y-a/2-b),0===i&&(y=y-a/2-b),Math.abs(y)<.001&&(y=0),r.roundLengths&&(y=Math.floor(y)),C%r.slidesPerGroup==0&&d.push(y),f.push(y)):(r.roundLengths&&(y=Math.floor(y)),(C-Math.min(e.params.slidesPerGroupSkip,C))%e.params.slidesPerGroup==0&&d.push(y),f.push(y),y=y+S+b),e.virtualSize+=S+b,w=S,C+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+m,o&&s&&("slide"===r.effect||"coverflow"===r.effect)&&i.css({width:`${e.virtualSize+r.spaceBetween}px`}),r.setWrapperSize&&i.css({[t("width")]:`${e.virtualSize+r.spaceBetween}px`}),x&&e.grid.updateWrapperSize(S,d,t),!r.centeredSlides){const t=[];for(let n=0;n<d.length;n+=1){let i=d[n];r.roundLengths&&(i=Math.floor(i)),d[n]<=e.virtualSize-a&&t.push(i)}d=t,Math.floor(e.virtualSize-a)-Math.floor(d[d.length-1])>1&&d.push(e.virtualSize-a)}if(0===d.length&&(d=[0]),0!==r.spaceBetween){const n=e.isHorizontal()&&o?"marginLeft":t("marginRight");c.filter(((e,t)=>!r.cssMode||t!==c.length-1)).css({[n]:`${b}px`})}if(r.centeredSlides&&r.centeredSlidesBounds){let e=0;h.forEach((t=>{e+=t+(r.spaceBetween?r.spaceBetween:0)})),e-=r.spaceBetween;const t=e-a;d=d.map((e=>e<0?-g:e>t?t+m:e))}if(r.centerInsufficientSlides){let e=0;if(h.forEach((t=>{e+=t+(r.spaceBetween?r.spaceBetween:0)})),e-=r.spaceBetween,e<a){const t=(a-e)/2;d.forEach(((e,n)=>{d[n]=e-t})),f.forEach(((e,n)=>{f[n]=e+t}))}}if(Object.assign(e,{slides:c,snapGrid:d,slidesGrid:f,slidesSizesGrid:h}),r.centeredSlides&&r.cssMode&&!r.centeredSlidesBounds){ca(e.wrapperEl,"--swiper-centered-offset-before",-d[0]+"px"),ca(e.wrapperEl,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const t=-e.snapGrid[0],n=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+n))}if(p!==u&&e.emit("slidesLengthChange"),d.length!==A&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==v&&e.emit("slidesGridLengthChange"),r.watchSlidesProgress&&e.updateSlidesOffset(),!(l||r.cssMode||"slide"!==r.effect&&"fade"!==r.effect)){const t=`${r.containerModifierClass}backface-hidden`,n=e.$el.hasClass(t);p<=r.maxBackfaceHiddenSlides?n||e.$el.addClass(t):n&&e.$el.removeClass(t)}},updateAutoHeight:function(e){const t=this,n=[],r=t.virtual&&t.params.virtual.enabled;let i,a=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const o=e=>r?t.slides.filter((t=>parseInt(t.getAttribute("data-swiper-slide-index"),10)===e))[0]:t.slides.eq(e)[0];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||aa([])).each((e=>{n.push(e)}));else for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length&&!r)break;n.push(o(e))}else n.push(o(t.activeIndex));for(i=0;i<n.length;i+=1)if(void 0!==n[i]){const e=n[i].offsetHeight;a=e>a?e:a}(a||0===a)&&t.$wrapperEl.css("height",`${a}px`)},updateSlidesOffset:function(){const e=this,t=e.slides;for(let n=0;n<t.length;n+=1)t[n].swiperSlideOffset=e.isHorizontal()?t[n].offsetLeft:t[n].offsetTop},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,n=t.params,{slides:r,rtlTranslate:i,snapGrid:a}=t;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();let o=-e;i&&(o=e),r.removeClass(n.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<r.length;e+=1){const s=r[e];let l=s.swiperSlideOffset;n.cssMode&&n.centeredSlides&&(l-=r[0].swiperSlideOffset);const u=(o+(n.centeredSlides?t.minTranslate():0)-l)/(s.swiperSlideSize+n.spaceBetween),c=(o-a[0]+(n.centeredSlides?t.minTranslate():0)-l)/(s.swiperSlideSize+n.spaceBetween),p=-(o-l),d=p+t.slidesSizesGrid[e];(p>=0&&p<t.size-1||d>1&&d<=t.size||p<=0&&d>=t.size)&&(t.visibleSlides.push(s),t.visibleSlidesIndexes.push(e),r.eq(e).addClass(n.slideVisibleClass)),s.progress=i?-u:u,s.originalProgress=i?-c:c}t.visibleSlides=aa(t.visibleSlides)},updateProgress:function(e){const t=this;if(void 0===e){const n=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*n||0}const n=t.params,r=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:a,isEnd:o}=t;const s=a,l=o;0===r?(i=0,a=!0,o=!0):(i=(e-t.minTranslate())/r,a=i<=0,o=i>=1),Object.assign(t,{progress:i,isBeginning:a,isEnd:o}),(n.watchSlidesProgress||n.centeredSlides&&n.autoHeight)&&t.updateSlidesProgress(e),a&&!s&&t.emit("reachBeginning toEdge"),o&&!l&&t.emit("reachEnd toEdge"),(s&&!a||l&&!o)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:n,$wrapperEl:r,activeIndex:i,realIndex:a}=e,o=e.virtual&&n.virtual.enabled;let s;t.removeClass(`${n.slideActiveClass} ${n.slideNextClass} ${n.slidePrevClass} ${n.slideDuplicateActiveClass} ${n.slideDuplicateNextClass} ${n.slideDuplicatePrevClass}`),s=o?e.$wrapperEl.find(`.${n.slideClass}[data-swiper-slide-index="${i}"]`):t.eq(i),s.addClass(n.slideActiveClass),n.loop&&(s.hasClass(n.slideDuplicateClass)?r.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${a}"]`).addClass(n.slideDuplicateActiveClass):r.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${a}"]`).addClass(n.slideDuplicateActiveClass));let l=s.nextAll(`.${n.slideClass}`).eq(0).addClass(n.slideNextClass);n.loop&&0===l.length&&(l=t.eq(0),l.addClass(n.slideNextClass));let u=s.prevAll(`.${n.slideClass}`).eq(0).addClass(n.slidePrevClass);n.loop&&0===u.length&&(u=t.eq(-1),u.addClass(n.slidePrevClass)),n.loop&&(l.hasClass(n.slideDuplicateClass)?r.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicateNextClass):r.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicateNextClass),u.hasClass(n.slideDuplicateClass)?r.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${u.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicatePrevClass):r.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${u.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicatePrevClass)),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,n=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:r,snapGrid:i,params:a,activeIndex:o,realIndex:s,snapIndex:l}=t;let u,c=e;if(void 0===c){for(let e=0;e<r.length;e+=1)void 0!==r[e+1]?n>=r[e]&&n<r[e+1]-(r[e+1]-r[e])/2?c=e:n>=r[e]&&n<r[e+1]&&(c=e+1):n>=r[e]&&(c=e);a.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}if(i.indexOf(n)>=0)u=i.indexOf(n);else{const e=Math.min(a.slidesPerGroupSkip,c);u=e+Math.floor((c-e)/a.slidesPerGroup)}if(u>=i.length&&(u=i.length-1),c===o)return void(u!==l&&(t.snapIndex=u,t.emit("snapIndexChange")));const p=parseInt(t.slides.eq(c).attr("data-swiper-slide-index")||c,10);Object.assign(t,{snapIndex:u,realIndex:p,previousIndex:o,activeIndex:c}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),s!==p&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,n=t.params,r=aa(e).closest(`.${n.slideClass}`)[0];let i,a=!1;if(r)for(let e=0;e<t.slides.length;e+=1)if(t.slides[e]===r){a=!0,i=e;break}if(!r||!a)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=r,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(aa(r).attr("data-swiper-slide-index"),10):t.clickedIndex=i,n.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};function va({swiper:e,runCallbacks:t,direction:n,step:r}){const{activeIndex:i,previousIndex:a}=e;let o=n;if(o||(o=i>a?"next":i<a?"prev":"reset"),e.emit(`transition${r}`),t&&i!==a){if("reset"===o)return void e.emit(`slideResetTransition${r}`);e.emit(`slideChangeTransition${r}`),"next"===o?e.emit(`slideNextTransition${r}`):e.emit(`slidePrevTransition${r}`)}}var ba={slideTo:function(e=0,t=this.params.speed,n=!0,r,i){if("number"!=typeof e&&"string"!=typeof e)throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof e}] given.`);if("string"==typeof e){const t=parseInt(e,10);if(!isFinite(t))throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${e}] given.`);e=t}const a=this;let o=e;o<0&&(o=0);const{params:s,snapGrid:l,slidesGrid:u,previousIndex:c,activeIndex:p,rtlTranslate:d,wrapperEl:f,enabled:h}=a;if(a.animating&&s.preventInteractionOnTransition||!h&&!r&&!i)return!1;const g=Math.min(a.params.slidesPerGroupSkip,o);let m=g+Math.floor((o-g)/a.params.slidesPerGroup);m>=l.length&&(m=l.length-1);const A=-l[m];if(s.normalizeSlideIndex)for(let e=0;e<u.length;e+=1){const t=-Math.floor(100*A),n=Math.floor(100*u[e]),r=Math.floor(100*u[e+1]);void 0!==u[e+1]?t>=n&&t<r-(r-n)/2?o=e:t>=n&&t<r&&(o=e+1):t>=n&&(o=e)}if(a.initialized&&o!==p){if(!a.allowSlideNext&&A<a.translate&&A<a.minTranslate())return!1;if(!a.allowSlidePrev&&A>a.translate&&A>a.maxTranslate()&&(p||0)!==o)return!1}let v;if(o!==(c||0)&&n&&a.emit("beforeSlideChangeStart"),a.updateProgress(A),v=o>p?"next":o<p?"prev":"reset",d&&-A===a.translate||!d&&A===a.translate)return a.updateActiveIndex(o),s.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==s.effect&&a.setTranslate(A),"reset"!==v&&(a.transitionStart(n,v),a.transitionEnd(n,v)),!1;if(s.cssMode){const e=a.isHorizontal(),n=d?A:-A;if(0===t){const t=a.virtual&&a.params.virtual.enabled;t&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),f[e?"scrollLeft":"scrollTop"]=n,t&&requestAnimationFrame((()=>{a.wrapperEl.style.scrollSnapType="",a._swiperImmediateVirtual=!1}))}else{if(!a.support.smoothScroll)return pa({swiper:a,targetPosition:n,side:e?"left":"top"}),!0;f.scrollTo({[e?"left":"top"]:n,behavior:"smooth"})}return!0}return a.setTransition(t),a.setTranslate(A),a.updateActiveIndex(o),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,r),a.transitionStart(n,v),0===t?a.transitionEnd(n,v):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(n,v))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e=0,t=this.params.speed,n=!0,r){if("string"==typeof e){const t=parseInt(e,10);if(!isFinite(t))throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${e}] given.`);e=t}const i=this;let a=e;return i.params.loop&&(a+=i.loopedSlides),i.slideTo(a,t,n,r)},slideNext:function(e=this.params.speed,t=!0,n){const r=this,{animating:i,enabled:a,params:o}=r;if(!a)return r;let s=o.slidesPerGroup;"auto"===o.slidesPerView&&1===o.slidesPerGroup&&o.slidesPerGroupAuto&&(s=Math.max(r.slidesPerViewDynamic("current",!0),1));const l=r.activeIndex<o.slidesPerGroupSkip?1:s;if(o.loop){if(i&&o.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}return o.rewind&&r.isEnd?r.slideTo(0,e,t,n):r.slideTo(r.activeIndex+l,e,t,n)},slidePrev:function(e=this.params.speed,t=!0,n){const r=this,{params:i,animating:a,snapGrid:o,slidesGrid:s,rtlTranslate:l,enabled:u}=r;if(!u)return r;if(i.loop){if(a&&i.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}function c(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=c(l?r.translate:-r.translate),d=o.map((e=>c(e)));let f=o[d.indexOf(p)-1];if(void 0===f&&i.cssMode){let e;o.forEach(((t,n)=>{p>=t&&(e=n)})),void 0!==e&&(f=o[e>0?e-1:e])}let h=0;if(void 0!==f&&(h=s.indexOf(f),h<0&&(h=r.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(h=h-r.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),i.rewind&&r.isBeginning){const i=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(i,e,t,n)}return r.slideTo(h,e,t,n)},slideReset:function(e=this.params.speed,t=!0,n){return this.slideTo(this.activeIndex,e,t,n)},slideToClosest:function(e=this.params.speed,t=!0,n,r=.5){const i=this;let a=i.activeIndex;const o=Math.min(i.params.slidesPerGroupSkip,a),s=o+Math.floor((a-o)/i.params.slidesPerGroup),l=i.rtlTranslate?i.translate:-i.translate;if(l>=i.snapGrid[s]){const e=i.snapGrid[s];l-e>(i.snapGrid[s+1]-e)*r&&(a+=i.params.slidesPerGroup)}else{const e=i.snapGrid[s-1];l-e<=(i.snapGrid[s]-e)*r&&(a-=i.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,i.slidesGrid.length-1),i.slideTo(a,e,t,n)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:n}=e,r="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,a=e.clickedIndex;if(t.loop){if(e.animating)return;i=parseInt(aa(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?a<e.loopedSlides-r/2||a>e.slides.length-e.loopedSlides+r/2?(e.loopFix(),a=n.children(`.${t.slideClass}[data-swiper-slide-index="${i}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),oa((()=>{e.slideTo(a)}))):e.slideTo(a):a>e.slides.length-r?(e.loopFix(),a=n.children(`.${t.slideClass}[data-swiper-slide-index="${i}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),oa((()=>{e.slideTo(a)}))):e.slideTo(a)}else e.slideTo(a)}};function ya(e){const t=this,n=Zi(),r=Xi(),i=t.touchEventsData,{params:a,touches:o,enabled:s}=t;if(!s)return;if(t.animating&&a.preventInteractionOnTransition)return;!t.animating&&a.cssMode&&a.loop&&t.loopFix();let l=e;l.originalEvent&&(l=l.originalEvent);let u=aa(l.target);if("wrapper"===a.touchEventsTarget&&!u.closest(t.wrapperEl).length)return;if(i.isTouchEvent="touchstart"===l.type,!i.isTouchEvent&&"which"in l&&3===l.which)return;if(!i.isTouchEvent&&"button"in l&&l.button>0)return;if(i.isTouched&&i.isMoved)return;const c=!!a.noSwipingClass&&""!==a.noSwipingClass,p=e.composedPath?e.composedPath():e.path;c&&l.target&&l.target.shadowRoot&&p&&(u=aa(p[0]));const d=a.noSwipingSelector?a.noSwipingSelector:`.${a.noSwipingClass}`,f=!(!l.target||!l.target.shadowRoot);if(a.noSwiping&&(f?function(e,t=this){return function t(n){if(!n||n===Zi()||n===Xi())return null;n.assignedSlot&&(n=n.assignedSlot);const r=n.closest(e);return r||n.getRootNode?r||t(n.getRootNode().host):null}(t)}(d,u[0]):u.closest(d)[0]))return void(t.allowClick=!0);if(a.swipeHandler&&!u.closest(a.swipeHandler)[0])return;o.currentX="touchstart"===l.type?l.targetTouches[0].pageX:l.pageX,o.currentY="touchstart"===l.type?l.targetTouches[0].pageY:l.pageY;const h=o.currentX,g=o.currentY,m=a.edgeSwipeDetection||a.iOSEdgeSwipeDetection,A=a.edgeSwipeThreshold||a.iOSEdgeSwipeThreshold;if(m&&(h<=A||h>=r.innerWidth-A)){if("prevent"!==m)return;e.preventDefault()}if(Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=h,o.startY=g,i.touchStartTime=sa(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,a.threshold>0&&(i.allowThresholdMove=!1),"touchstart"!==l.type){let e=!0;u.is(i.focusableElements)&&(e=!1,"SELECT"===u[0].nodeName&&(i.isTouched=!1)),n.activeElement&&aa(n.activeElement).is(i.focusableElements)&&n.activeElement!==u[0]&&n.activeElement.blur();const r=e&&t.allowTouchMove&&a.touchStartPreventDefault;!a.touchStartForcePreventDefault&&!r||u[0].isContentEditable||l.preventDefault()}t.params.freeMode&&t.params.freeMode.enabled&&t.freeMode&&t.animating&&!a.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",l)}function wa(e){const t=Zi(),n=this,r=n.touchEventsData,{params:i,touches:a,rtlTranslate:o,enabled:s}=n;if(!s)return;let l=e;if(l.originalEvent&&(l=l.originalEvent),!r.isTouched)return void(r.startMoving&&r.isScrolling&&n.emit("touchMoveOpposite",l));if(r.isTouchEvent&&"touchmove"!==l.type)return;const u="touchmove"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),c="touchmove"===l.type?u.pageX:l.pageX,p="touchmove"===l.type?u.pageY:l.pageY;if(l.preventedByNestedSwiper)return a.startX=c,void(a.startY=p);if(!n.allowTouchMove)return aa(l.target).is(r.focusableElements)||(n.allowClick=!1),void(r.isTouched&&(Object.assign(a,{startX:c,startY:p,currentX:c,currentY:p}),r.touchStartTime=sa()));if(r.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(n.isVertical()){if(p<a.startY&&n.translate<=n.maxTranslate()||p>a.startY&&n.translate>=n.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(c<a.startX&&n.translate<=n.maxTranslate()||c>a.startX&&n.translate>=n.minTranslate())return;if(r.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&aa(l.target).is(r.focusableElements))return r.isMoved=!0,void(n.allowClick=!1);if(r.allowTouchCallbacks&&n.emit("touchMove",l),l.targetTouches&&l.targetTouches.length>1)return;a.currentX=c,a.currentY=p;const d=a.currentX-a.startX,f=a.currentY-a.startY;if(n.params.threshold&&Math.sqrt(d**2+f**2)<n.params.threshold)return;if(void 0===r.isScrolling){let e;n.isHorizontal()&&a.currentY===a.startY||n.isVertical()&&a.currentX===a.startX?r.isScrolling=!1:d*d+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(d))/Math.PI,r.isScrolling=n.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(r.isScrolling&&n.emit("touchMoveOpposite",l),void 0===r.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(r.startMoving=!0)),r.isScrolling)return void(r.isTouched=!1);if(!r.startMoving)return;n.allowClick=!1,!i.cssMode&&l.cancelable&&l.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&l.stopPropagation(),r.isMoved||(i.loop&&!i.cssMode&&n.loopFix(),r.startTranslate=n.getTranslate(),n.setTransition(0),n.animating&&n.$wrapperEl.trigger("webkitTransitionEnd transitionend"),r.allowMomentumBounce=!1,!i.grabCursor||!0!==n.allowSlideNext&&!0!==n.allowSlidePrev||n.setGrabCursor(!0),n.emit("sliderFirstMove",l)),n.emit("sliderMove",l),r.isMoved=!0;let h=n.isHorizontal()?d:f;a.diff=h,h*=i.touchRatio,o&&(h=-h),n.swipeDirection=h>0?"prev":"next",r.currentTranslate=h+r.startTranslate;let g=!0,m=i.resistanceRatio;if(i.touchReleaseOnEdges&&(m=0),h>0&&r.currentTranslate>n.minTranslate()?(g=!1,i.resistance&&(r.currentTranslate=n.minTranslate()-1+(-n.minTranslate()+r.startTranslate+h)**m)):h<0&&r.currentTranslate<n.maxTranslate()&&(g=!1,i.resistance&&(r.currentTranslate=n.maxTranslate()+1-(n.maxTranslate()-r.startTranslate-h)**m)),g&&(l.preventedByNestedSwiper=!0),!n.allowSlideNext&&"next"===n.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!n.allowSlidePrev&&"prev"===n.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),n.allowSlidePrev||n.allowSlideNext||(r.currentTranslate=r.startTranslate),i.threshold>0){if(!(Math.abs(h)>i.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,r.currentTranslate=r.startTranslate,void(a.diff=n.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&n.freeMode||i.watchSlidesProgress)&&(n.updateActiveIndex(),n.updateSlidesClasses()),n.params.freeMode&&i.freeMode.enabled&&n.freeMode&&n.freeMode.onTouchMove(),n.updateProgress(r.currentTranslate),n.setTranslate(r.currentTranslate))}function Ca(e){const t=this,n=t.touchEventsData,{params:r,touches:i,rtlTranslate:a,slidesGrid:o,enabled:s}=t;if(!s)return;let l=e;if(l.originalEvent&&(l=l.originalEvent),n.allowTouchCallbacks&&t.emit("touchEnd",l),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&r.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);r.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const u=sa(),c=u-n.touchStartTime;if(t.allowClick){const e=l.path||l.composedPath&&l.composedPath();t.updateClickedSlide(e&&e[0]||l.target),t.emit("tap click",l),c<300&&u-n.lastClickTime<300&&t.emit("doubleTap doubleClick",l)}if(n.lastClickTime=sa(),oa((()=>{t.destroyed||(t.allowClick=!0)})),!n.isTouched||!n.isMoved||!t.swipeDirection||0===i.diff||n.currentTranslate===n.startTranslate)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);let p;if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,p=r.followFinger?a?t.translate:-t.translate:-n.currentTranslate,r.cssMode)return;if(t.params.freeMode&&r.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:p});let d=0,f=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<r.slidesPerGroupSkip?1:r.slidesPerGroup){const t=e<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==o[e+t]?p>=o[e]&&p<o[e+t]&&(d=e,f=o[e+t]-o[e]):p>=o[e]&&(d=e,f=o[o.length-1]-o[o.length-2])}let h=null,g=null;r.rewind&&(t.isBeginning?g=t.params.virtual&&t.params.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(h=0));const m=(p-o[d])/f,A=d<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(c>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(m>=r.longSwipesRatio?t.slideTo(r.rewind&&t.isEnd?h:d+A):t.slideTo(d)),"prev"===t.swipeDirection&&(m>1-r.longSwipesRatio?t.slideTo(d+A):null!==g&&m<0&&Math.abs(m)>r.longSwipesRatio?t.slideTo(g):t.slideTo(d))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||l.target!==t.navigation.nextEl&&l.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==h?h:d+A),"prev"===t.swipeDirection&&t.slideTo(null!==g?g:d)):l.target===t.navigation.nextEl?t.slideTo(d+A):t.slideTo(d)}}function xa(){const e=this,{params:t,el:n}=e;if(n&&0===n.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:i,snapGrid:a}=e;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=i,e.allowSlideNext=r,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function Sa(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function _a(){const e=this,{wrapperEl:t,rtlTranslate:n,enabled:r}=e;if(!r)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();i=0===a?0:(e.translate-e.minTranslate())/a,i!==e.progress&&e.updateProgress(n?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}let ka=!1;function Ea(){}const Ta=(e,t)=>{const n=Zi(),{params:r,touchEvents:i,el:a,wrapperEl:o,device:s,support:l}=e,u=!!r.nested,c="on"===t?"addEventListener":"removeEventListener",p=t;if(l.touch){const t=!("touchstart"!==i.start||!l.passiveListener||!r.passiveListeners)&&{passive:!0,capture:!1};a[c](i.start,e.onTouchStart,t),a[c](i.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:u}:u),a[c](i.end,e.onTouchEnd,t),i.cancel&&a[c](i.cancel,e.onTouchEnd,t)}else a[c](i.start,e.onTouchStart,!1),n[c](i.move,e.onTouchMove,u),n[c](i.end,e.onTouchEnd,!1);(r.preventClicks||r.preventClicksPropagation)&&a[c]("click",e.onClick,!0),r.cssMode&&o[c]("scroll",e.onScroll),r.updateOnWindowResize?e[p](s.ios||s.android?"resize orientationchange observerUpdate":"resize observerUpdate",xa,!0):e[p]("observerUpdate",xa,!0)};var Oa={attachEvents:function(){const e=this,t=Zi(),{params:n,support:r}=e;e.onTouchStart=ya.bind(e),e.onTouchMove=wa.bind(e),e.onTouchEnd=Ca.bind(e),n.cssMode&&(e.onScroll=_a.bind(e)),e.onClick=Sa.bind(e),r.touch&&!ka&&(t.addEventListener("touchstart",Ea),ka=!0),Ta(e,"on")},detachEvents:function(){Ta(this,"off")}};const Pa=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var Ba={addClasses:function(){const e=this,{classNames:t,params:n,rtl:r,$el:i,device:a,support:o}=e,s=function(e,t){const n=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((r=>{e[r]&&n.push(t+r)})):"string"==typeof e&&n.push(t+e)})),n}(["initialized",n.direction,{"pointer-events":!o.touch},{"free-mode":e.params.freeMode&&n.freeMode.enabled},{autoheight:n.autoHeight},{rtl:r},{grid:n.grid&&n.grid.rows>1},{"grid-column":n.grid&&n.grid.rows>1&&"column"===n.grid.fill},{android:a.android},{ios:a.ios},{"css-mode":n.cssMode},{centered:n.cssMode&&n.centeredSlides},{"watch-progress":n.watchSlidesProgress}],n.containerModifierClass);t.push(...s),i.addClass([...t].join(" ")),e.emitContainerClasses()},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" ")),this.emitContainerClasses()}},Ma={init:!0,direction:"horizontal",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopedSlidesLimit:!0,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};function Da(e,t){return function(n={}){const r=Object.keys(n)[0],i=n[r];"object"==typeof i&&null!==i?(["navigation","pagination","scrollbar"].indexOf(r)>=0&&!0===e[r]&&(e[r]={auto:!0}),r in e&&"enabled"in i?(!0===e[r]&&(e[r]={enabled:!0}),"object"!=typeof e[r]||"enabled"in e[r]||(e[r].enabled=!0),e[r]||(e[r]={enabled:!1}),ua(t,n)):ua(t,n)):ua(t,n)}}const za={eventsEmitter:ma,update:Aa,translate:{getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:n,translate:r,$wrapperEl:i}=this;if(t.virtualTranslate)return n?-r:r;if(t.cssMode)return r;let a=function(e,t="x"){const n=Xi();let r,i,a;const o=function(e){const t=Xi();let n;return t.getComputedStyle&&(n=t.getComputedStyle(e,null)),!n&&e.currentStyle&&(n=e.currentStyle),n||(n=e.style),n}(e);return n.WebKitCSSMatrix?(i=o.transform||o.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map((e=>e.replace(",","."))).join(", ")),a=new n.WebKitCSSMatrix("none"===i?"":i)):(a=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=a.toString().split(",")),"x"===t&&(i=n.WebKitCSSMatrix?a.m41:16===r.length?parseFloat(r[12]):parseFloat(r[4])),"y"===t&&(i=n.WebKitCSSMatrix?a.m42:16===r.length?parseFloat(r[13]):parseFloat(r[5])),i||0}(i[0],e);return n&&(a=-a),a||0},setTranslate:function(e,t){const n=this,{rtlTranslate:r,params:i,$wrapperEl:a,wrapperEl:o,progress:s}=n;let l,u=0,c=0;n.isHorizontal()?u=r?-e:e:c=e,i.roundLengths&&(u=Math.floor(u),c=Math.floor(c)),i.cssMode?o[n.isHorizontal()?"scrollLeft":"scrollTop"]=n.isHorizontal()?-u:-c:i.virtualTranslate||a.transform(`translate3d(${u}px, ${c}px, 0px)`),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?u:c;const p=n.maxTranslate()-n.minTranslate();l=0===p?0:(e-n.minTranslate())/p,l!==s&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e=0,t=this.params.speed,n=!0,r=!0,i){const a=this,{params:o,wrapperEl:s}=a;if(a.animating&&o.preventInteractionOnTransition)return!1;const l=a.minTranslate(),u=a.maxTranslate();let c;if(c=r&&e>l?l:r&&e<u?u:e,a.updateProgress(c),o.cssMode){const e=a.isHorizontal();if(0===t)s[e?"scrollLeft":"scrollTop"]=-c;else{if(!a.support.smoothScroll)return pa({swiper:a,targetPosition:-c,side:e?"left":"top"}),!0;s.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(a.setTransition(0),a.setTranslate(c),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(c),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,n&&a.emit("transitionEnd"))}),a.$wrapperEl[0].addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const n=this;n.params.cssMode||n.$wrapperEl.transition(e),n.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const n=this,{params:r}=n;r.cssMode||(r.autoHeight&&n.updateAutoHeight(),va({swiper:n,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e=!0,t){const n=this,{params:r}=n;n.animating=!1,r.cssMode||(n.setTransition(0),va({swiper:n,runCallbacks:e,direction:t,step:"End"}))}},slide:ba,loop:{loopCreate:function(){const e=this,t=Zi(),{params:n,$wrapperEl:r}=e,i=r.children().length>0?aa(r.children()[0].parentNode):r;i.children(`.${n.slideClass}.${n.slideDuplicateClass}`).remove();let a=i.children(`.${n.slideClass}`);if(n.loopFillGroupWithBlank){const e=n.slidesPerGroup-a.length%n.slidesPerGroup;if(e!==n.slidesPerGroup){for(let r=0;r<e;r+=1){const e=aa(t.createElement("div")).addClass(`${n.slideClass} ${n.slideBlankClass}`);i.append(e)}a=i.children(`.${n.slideClass}`)}}"auto"!==n.slidesPerView||n.loopedSlides||(n.loopedSlides=a.length),e.loopedSlides=Math.ceil(parseFloat(n.loopedSlides||n.slidesPerView,10)),e.loopedSlides+=n.loopAdditionalSlides,e.loopedSlides>a.length&&e.params.loopedSlidesLimit&&(e.loopedSlides=a.length);const o=[],s=[];a.each(((e,t)=>{aa(e).attr("data-swiper-slide-index",t)}));for(let t=0;t<e.loopedSlides;t+=1){const e=t-Math.floor(t/a.length)*a.length;s.push(a.eq(e)[0]),o.unshift(a.eq(a.length-e-1)[0])}for(let e=0;e<s.length;e+=1)i.append(aa(s[e].cloneNode(!0)).addClass(n.slideDuplicateClass));for(let e=o.length-1;e>=0;e-=1)i.prepend(aa(o[e].cloneNode(!0)).addClass(n.slideDuplicateClass))},loopFix:function(){const e=this;e.emit("beforeLoopFix");const{activeIndex:t,slides:n,loopedSlides:r,allowSlidePrev:i,allowSlideNext:a,snapGrid:o,rtlTranslate:s}=e;let l;e.allowSlidePrev=!0,e.allowSlideNext=!0;const u=-o[t]-e.getTranslate();t<r?(l=n.length-3*r+t,l+=r,e.slideTo(l,0,!1,!0)&&0!==u&&e.setTranslate((s?-e.translate:e.translate)-u)):t>=n.length-r&&(l=-n.length+t+r,l+=r,e.slideTo(l,0,!1,!0)&&0!==u&&e.setTranslate((s?-e.translate:e.translate)-u)),e.allowSlidePrev=i,e.allowSlideNext=a,e.emit("loopFix")},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:n}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass},.${t.slideClass}.${t.slideBlankClass}`).remove(),n.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){const t=this;if(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const n="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;n.style.cursor="move",n.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){const e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="")}},events:Oa,breakpoints:{setBreakpoint:function(){const e=this,{activeIndex:t,initialized:n,loopedSlides:r=0,params:i,$el:a}=e,o=i.breakpoints;if(!o||o&&0===Object.keys(o).length)return;const s=e.getBreakpoint(o,e.params.breakpointsBase,e.el);if(!s||e.currentBreakpoint===s)return;const l=(s in o?o[s]:void 0)||e.originalParams,u=Pa(e,i),c=Pa(e,l),p=i.enabled;u&&!c?(a.removeClass(`${i.containerModifierClass}grid ${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!u&&c&&(a.addClass(`${i.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===i.grid.fill)&&a.addClass(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{const n=i[t]&&i[t].enabled,r=l[t]&&l[t].enabled;n&&!r&&e[t].disable(),!n&&r&&e[t].enable()}));const d=l.direction&&l.direction!==i.direction,f=i.loop&&(l.slidesPerView!==i.slidesPerView||d);d&&n&&e.changeDirection(),ua(e.params,l);const h=e.params.enabled;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),p&&!h?e.disable():!p&&h&&e.enable(),e.currentBreakpoint=s,e.emit("_beforeBreakpoint",l),f&&n&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-r+e.loopedSlides,0,!1)),e.emit("breakpoint",l)},getBreakpoint:function(e,t="window",n){if(!e||"container"===t&&!n)return;let r=!1;const i=Xi(),a="window"===t?i.innerHeight:n.clientHeight,o=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:a*t,point:e}}return{value:e,point:e}}));o.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<o.length;e+=1){const{point:a,value:s}=o[e];"window"===t?i.matchMedia(`(min-width: ${s}px)`).matches&&(r=a):s<=n.clientWidth&&(r=a)}return r||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:n}=e,{slidesOffsetBefore:r}=n;if(r){const t=e.slides.length-1,n=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*r;e.isLocked=e.size>n}else e.isLocked=1===e.snapGrid.length;!0===n.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===n.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:Ba,images:{loadImage:function(e,t,n,r,i,a){const o=Xi();let s;function l(){a&&a()}aa(e).parent("picture")[0]||e.complete&&i?l():t?(s=new o.Image,s.onload=l,s.onerror=l,r&&(s.sizes=r),n&&(s.srcset=n),t&&(s.src=t)):l()},preloadImages:function(){const e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(let n=0;n<e.imagesToLoad.length;n+=1){const r=e.imagesToLoad[n];e.loadImage(r,r.currentSrc||r.getAttribute("src"),r.srcset||r.getAttribute("srcset"),r.sizes||r.getAttribute("sizes"),!0,t)}}}},Na={};class ja{constructor(...e){let t,n;if(1===e.length&&e[0].constructor&&"Object"===Object.prototype.toString.call(e[0]).slice(8,-1)?n=e[0]:[t,n]=e,n||(n={}),n=ua({},n),t&&!n.el&&(n.el=t),n.el&&aa(n.el).length>1){const e=[];return aa(n.el).each((t=>{const r=ua({},n,{el:t});e.push(new ja(r))})),e}const r=this;r.__swiper__=!0,r.support=ga(),r.device=function(e={}){return fa||(fa=function({userAgent:e}={}){const t=ga(),n=Xi(),r=n.navigator.platform,i=e||n.navigator.userAgent,a={ios:!1,android:!1},o=n.screen.width,s=n.screen.height,l=i.match(/(Android);?[\s\/]+([\d.]+)?/);let u=i.match(/(iPad).*OS\s([\d_]+)/);const c=i.match(/(iPod)(.*OS\s([\d_]+))?/),p=!u&&i.match(/(iPhone\sOS|iOS)\s([\d_]+)/),d="Win32"===r;let f="MacIntel"===r;return!u&&f&&t.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${s}`)>=0&&(u=i.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),f=!1),l&&!d&&(a.os="android",a.android=!0),(u||p||c)&&(a.os="ios",a.ios=!0),a}(e)),fa}({userAgent:n.userAgent}),r.browser=(ha||(ha=function(){const e=Xi();return{isSafari:function(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),ha),r.eventsListeners={},r.eventsAnyListeners=[],r.modules=[...r.__modules__],n.modules&&Array.isArray(n.modules)&&r.modules.push(...n.modules);const i={};r.modules.forEach((e=>{e({swiper:r,extendParams:Da(n,i),on:r.on.bind(r),once:r.once.bind(r),off:r.off.bind(r),emit:r.emit.bind(r)})}));const a=ua({},Ma,i);return r.params=ua({},a,Na,n),r.originalParams=ua({},r.params),r.passedParams=ua({},n),r.params&&r.params.on&&Object.keys(r.params.on).forEach((e=>{r.on(e,r.params.on[e])})),r.params&&r.params.onAny&&r.onAny(r.params.onAny),r.$=aa,Object.assign(r,{enabled:r.params.enabled,el:t,classNames:[],slides:aa(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return"horizontal"===r.params.direction},isVertical(){return"vertical"===r.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEvents:function(){const e=["touchstart","touchmove","touchend","touchcancel"],t=["pointerdown","pointermove","pointerup"];return r.touchEventsTouch={start:e[0],move:e[1],end:e[2],cancel:e[3]},r.touchEventsDesktop={start:t[0],move:t[1],end:t[2]},r.support.touch||!r.params.simulateTouch?r.touchEventsTouch:r.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:r.params.focusableElements,lastClickTime:sa(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.emit("_swiper"),r.params.init&&r.init(),r}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const n=this;e=Math.min(Math.max(e,0),1);const r=n.minTranslate(),i=(n.maxTranslate()-r)*e+r;n.translateTo(i,void 0===t?0:t),n.updateActiveIndex(),n.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.each((n=>{const r=e.getSlideClasses(n);t.push({slideEl:n,classNames:r}),e.emit("_slideClass",n,r)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e="current",t=!1){const{params:n,slides:r,slidesGrid:i,slidesSizesGrid:a,size:o,activeIndex:s}=this;let l=1;if(n.centeredSlides){let e,t=r[s].swiperSlideSize;for(let n=s+1;n<r.length;n+=1)r[n]&&!e&&(t+=r[n].swiperSlideSize,l+=1,t>o&&(e=!0));for(let n=s-1;n>=0;n-=1)r[n]&&!e&&(t+=r[n].swiperSlideSize,l+=1,t>o&&(e=!0))}else if("current"===e)for(let e=s+1;e<r.length;e+=1)(t?i[e]+a[e]-i[s]<o:i[e]-i[s]<o)&&(l+=1);else for(let e=s-1;e>=0;e-=1)i[s]-i[e]<o&&(l+=1);return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:n}=e;function r(){const t=e.rtlTranslate?-1*e.translate:e.translate,n=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses()}let i;n.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode&&e.params.freeMode.enabled?(r(),e.params.autoHeight&&e.updateAutoHeight()):(i=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),i||r()),n.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t=!0){const n=this,r=n.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(n.$el.removeClass(`${n.params.containerModifierClass}${r}`).addClass(`${n.params.containerModifierClass}${e}`),n.emitContainerClasses(),n.params.direction=e,n.slides.each((t=>{"vertical"===e?t.style.width="":t.style.height=""})),n.emit("changeDirection"),t&&n.update()),n}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.$el.addClass(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.$el.removeClass(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;const n=aa(e||t.params.el);if(!(e=n[0]))return!1;e.swiper=t;const r=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=(()=>{if(e&&e.shadowRoot&&e.shadowRoot.querySelector){const t=aa(e.shadowRoot.querySelector(r()));return t.children=e=>n.children(e),t}return n.children?n.children(r()):aa(n).children(r())})();if(0===i.length&&t.params.createElements){const e=Zi().createElement("div");i=aa(e),e.className=t.params.wrapperClass,n.append(e),n.children(`.${t.params.slideClass}`).each((e=>{i.append(e)}))}return Object.assign(t,{$el:n,el:e,$wrapperEl:i,wrapperEl:i[0],mounted:!0,rtl:"rtl"===e.dir.toLowerCase()||"rtl"===n.css("direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===n.css("direction")),wrongRTL:"-webkit-box"===i.css("display")}),!0}init(e){const t=this;return t.initialized||!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.attachEvents(),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t}destroy(e=!0,t=!0){const n=this,{params:r,$el:i,$wrapperEl:a,slides:o}=n;return void 0===n.params||n.destroyed||(n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),r.loop&&n.loopDestroy(),t&&(n.removeClasses(),i.removeAttr("style"),a.removeAttr("style"),o&&o.length&&o.removeClass([r.slideVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),n.emit("destroy"),Object.keys(n.eventsListeners).forEach((e=>{n.off(e)})),!1!==e&&(n.$el[0].swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(n)),n.destroyed=!0),null}static extendDefaults(e){ua(Na,e)}static get extendedDefaults(){return Na}static get defaults(){return Ma}static installModule(e){ja.prototype.__modules__||(ja.prototype.__modules__=[]);const t=ja.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>ja.installModule(e))),ja):(ja.installModule(e),ja)}}Object.keys(za).forEach((e=>{Object.keys(za[e]).forEach((t=>{ja.prototype[t]=za[e][t]}))})),ja.use([function({swiper:e,on:t,emit:n}){const r=Xi();let i=null,a=null;const o=()=>{e&&!e.destroyed&&e.initialized&&(n("beforeResize"),n("resize"))},s=()=>{e&&!e.destroyed&&e.initialized&&n("orientationchange")};t("init",(()=>{e.params.resizeObserver&&void 0!==r.ResizeObserver?e&&!e.destroyed&&e.initialized&&(i=new ResizeObserver((t=>{a=r.requestAnimationFrame((()=>{const{width:n,height:r}=e;let i=n,a=r;t.forEach((({contentBoxSize:t,contentRect:n,target:r})=>{r&&r!==e.el||(i=n?n.width:(t[0]||t).inlineSize,a=n?n.height:(t[0]||t).blockSize)})),i===n&&a===r||o()}))})),i.observe(e.el)):(r.addEventListener("resize",o),r.addEventListener("orientationchange",s))})),t("destroy",(()=>{a&&r.cancelAnimationFrame(a),i&&i.unobserve&&e.el&&(i.unobserve(e.el),i=null),r.removeEventListener("resize",o),r.removeEventListener("orientationchange",s)}))},function({swiper:e,extendParams:t,on:n,emit:r}){const i=[],a=Xi(),o=(e,t={})=>{const n=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(1===e.length)return void r("observerUpdate",e[0]);const t=function(){r("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(t):a.setTimeout(t,0)}));n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.push(n)};t({observer:!1,observeParents:!1,observeSlideChildren:!1}),n("init",(()=>{if(e.params.observer){if(e.params.observeParents){const t=e.$el.parents();for(let e=0;e<t.length;e+=1)o(t[e])}o(e.$el[0],{childList:e.params.observeSlideChildren}),o(e.$wrapperEl[0],{attributes:!1})}})),n("destroy",(()=>{i.forEach((e=>{e.disconnect()})),i.splice(0,i.length)}))}]);var La=ja;function Ia(e,t,n,r){const i=Zi();return e.params.createElements&&Object.keys(r).forEach((a=>{if(!n[a]&&!0===n.auto){let o=e.$el.children(`.${r[a]}`)[0];o||(o=i.createElement("div"),o.className=r[a],e.$el.append(o)),n[a]=o,t[a]=o}})),n}function Fa({swiper:e,extendParams:t,on:n,emit:r}){function i(t){let n;return t&&(n=aa(t),e.params.uniqueNavElements&&"string"==typeof t&&n.length>1&&1===e.$el.find(t).length&&(n=e.$el.find(t))),n}function a(t,n){const r=e.params.navigation;t&&t.length>0&&(t[n?"addClass":"removeClass"](r.disabledClass),t[0]&&"BUTTON"===t[0].tagName&&(t[0].disabled=n),e.params.watchOverflow&&e.enabled&&t[e.isLocked?"addClass":"removeClass"](r.lockClass))}function o(){if(e.params.loop)return;const{$nextEl:t,$prevEl:n}=e.navigation;a(n,e.isBeginning&&!e.params.rewind),a(t,e.isEnd&&!e.params.rewind)}function s(t){t.preventDefault(),(!e.isBeginning||e.params.loop||e.params.rewind)&&(e.slidePrev(),r("navigationPrev"))}function l(t){t.preventDefault(),(!e.isEnd||e.params.loop||e.params.rewind)&&(e.slideNext(),r("navigationNext"))}function u(){const t=e.params.navigation;if(e.params.navigation=Ia(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!t.nextEl&&!t.prevEl)return;const n=i(t.nextEl),r=i(t.prevEl);n&&n.length>0&&n.on("click",l),r&&r.length>0&&r.on("click",s),Object.assign(e.navigation,{$nextEl:n,nextEl:n&&n[0],$prevEl:r,prevEl:r&&r[0]}),e.enabled||(n&&n.addClass(t.lockClass),r&&r.addClass(t.lockClass))}function c(){const{$nextEl:t,$prevEl:n}=e.navigation;t&&t.length&&(t.off("click",l),t.removeClass(e.params.navigation.disabledClass)),n&&n.length&&(n.off("click",s),n.removeClass(e.params.navigation.disabledClass))}t({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,$nextEl:null,prevEl:null,$prevEl:null},n("init",(()=>{!1===e.params.navigation.enabled?p():(u(),o())})),n("toEdge fromEdge lock unlock",(()=>{o()})),n("destroy",(()=>{c()})),n("enable disable",(()=>{const{$nextEl:t,$prevEl:n}=e.navigation;t&&t[e.enabled?"removeClass":"addClass"](e.params.navigation.lockClass),n&&n[e.enabled?"removeClass":"addClass"](e.params.navigation.lockClass)})),n("click",((t,n)=>{const{$nextEl:i,$prevEl:a}=e.navigation,o=n.target;if(e.params.navigation.hideOnClick&&!aa(o).is(a)&&!aa(o).is(i)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===o||e.pagination.el.contains(o)))return;let t;i?t=i.hasClass(e.params.navigation.hiddenClass):a&&(t=a.hasClass(e.params.navigation.hiddenClass)),r(!0===t?"navigationShow":"navigationHide"),i&&i.toggleClass(e.params.navigation.hiddenClass),a&&a.toggleClass(e.params.navigation.hiddenClass)}}));const p=()=>{e.$el.addClass(e.params.navigation.navigationDisabledClass),c()};Object.assign(e.navigation,{enable:()=>{e.$el.removeClass(e.params.navigation.navigationDisabledClass),u(),o()},disable:p,update:o,init:u,destroy:c})}function Ra(e=""){return`.${e.trim().replace(/([\.:!\/])/g,"\\$1").replace(/ /g,".")}`}function $a({swiper:e,extendParams:t,on:n,emit:r}){const i="swiper-pagination";let a;t({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${i}-bullet`,bulletActiveClass:`${i}-bullet-active`,modifierClass:`${i}-`,currentClass:`${i}-current`,totalClass:`${i}-total`,hiddenClass:`${i}-hidden`,progressbarFillClass:`${i}-progressbar-fill`,progressbarOppositeClass:`${i}-progressbar-opposite`,clickableClass:`${i}-clickable`,lockClass:`${i}-lock`,horizontalClass:`${i}-horizontal`,verticalClass:`${i}-vertical`,paginationDisabledClass:`${i}-disabled`}}),e.pagination={el:null,$el:null,bullets:[]};let o=0;function s(){return!e.params.pagination.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length}function l(t,n){const{bulletActiveClass:r}=e.params.pagination;t[n]().addClass(`${r}-${n}`)[n]().addClass(`${r}-${n}-${n}`)}function u(){const t=e.rtl,n=e.params.pagination;if(s())return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,u=e.pagination.$el;let c;const p=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(c=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup),c>i-1-2*e.loopedSlides&&(c-=i-2*e.loopedSlides),c>p-1&&(c-=p),c<0&&"bullets"!==e.params.paginationType&&(c=p+c)):c=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===n.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const r=e.pagination.bullets;let i,s,p;if(n.dynamicBullets&&(a=r.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),u.css(e.isHorizontal()?"width":"height",a*(n.dynamicMainBullets+4)+"px"),n.dynamicMainBullets>1&&void 0!==e.previousIndex&&(o+=c-(e.previousIndex-e.loopedSlides||0),o>n.dynamicMainBullets-1?o=n.dynamicMainBullets-1:o<0&&(o=0)),i=Math.max(c-o,0),s=i+(Math.min(r.length,n.dynamicMainBullets)-1),p=(s+i)/2),r.removeClass(["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${n.bulletActiveClass}${e}`)).join(" ")),u.length>1)r.each((e=>{const t=aa(e),r=t.index();r===c&&t.addClass(n.bulletActiveClass),n.dynamicBullets&&(r>=i&&r<=s&&t.addClass(`${n.bulletActiveClass}-main`),r===i&&l(t,"prev"),r===s&&l(t,"next"))}));else{const t=r.eq(c),a=t.index();if(t.addClass(n.bulletActiveClass),n.dynamicBullets){const t=r.eq(i),o=r.eq(s);for(let e=i;e<=s;e+=1)r.eq(e).addClass(`${n.bulletActiveClass}-main`);if(e.params.loop)if(a>=r.length){for(let e=n.dynamicMainBullets;e>=0;e-=1)r.eq(r.length-e).addClass(`${n.bulletActiveClass}-main`);r.eq(r.length-n.dynamicMainBullets-1).addClass(`${n.bulletActiveClass}-prev`)}else l(t,"prev"),l(o,"next");else l(t,"prev"),l(o,"next")}}if(n.dynamicBullets){const i=Math.min(r.length,n.dynamicMainBullets+4),o=(a*i-a)/2-p*a,s=t?"right":"left";r.css(e.isHorizontal()?s:"top",`${o}px`)}}if("fraction"===n.type&&(u.find(Ra(n.currentClass)).text(n.formatFractionCurrent(c+1)),u.find(Ra(n.totalClass)).text(n.formatFractionTotal(p))),"progressbar"===n.type){let t;t=n.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const r=(c+1)/p;let i=1,a=1;"horizontal"===t?i=r:a=r,u.find(Ra(n.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${i}) scaleY(${a})`).transition(e.params.speed)}"custom"===n.type&&n.renderCustom?(u.html(n.renderCustom(e,c+1,p)),r("paginationRender",u[0])):r("paginationUpdate",u[0]),e.params.watchOverflow&&e.enabled&&u[e.isLocked?"addClass":"removeClass"](n.lockClass)}function c(){const t=e.params.pagination;if(s())return;const n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el;let a="";if("bullets"===t.type){let r=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&!e.params.loop&&r>n&&(r=n);for(let n=0;n<r;n+=1)t.renderBullet?a+=t.renderBullet.call(e,n,t.bulletClass):a+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`;i.html(a),e.pagination.bullets=i.find(Ra(t.bulletClass))}"fraction"===t.type&&(a=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`,i.html(a)),"progressbar"===t.type&&(a=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`,i.html(a)),"custom"!==t.type&&r("paginationRender",e.pagination.$el[0])}function p(){e.params.pagination=Ia(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const t=e.params.pagination;if(!t.el)return;let n=aa(t.el);0!==n.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&n.length>1&&(n=e.$el.find(t.el),n.length>1&&(n=n.filter((t=>aa(t).parents(".swiper")[0]===e.el)))),"bullets"===t.type&&t.clickable&&n.addClass(t.clickableClass),n.addClass(t.modifierClass+t.type),n.addClass(e.isHorizontal()?t.horizontalClass:t.verticalClass),"bullets"===t.type&&t.dynamicBullets&&(n.addClass(`${t.modifierClass}${t.type}-dynamic`),o=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&n.addClass(t.progressbarOppositeClass),t.clickable&&n.on("click",Ra(t.bulletClass),(function(t){t.preventDefault();let n=aa(this).index()*e.params.slidesPerGroup;e.params.loop&&(n+=e.loopedSlides),e.slideTo(n)})),Object.assign(e.pagination,{$el:n,el:n[0]}),e.enabled||n.addClass(t.lockClass))}function d(){const t=e.params.pagination;if(s())return;const n=e.pagination.$el;n.removeClass(t.hiddenClass),n.removeClass(t.modifierClass+t.type),n.removeClass(e.isHorizontal()?t.horizontalClass:t.verticalClass),e.pagination.bullets&&e.pagination.bullets.removeClass&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&n.off("click",Ra(t.bulletClass))}n("init",(()=>{!1===e.params.pagination.enabled?f():(p(),c(),u())})),n("activeIndexChange",(()=>{(e.params.loop||void 0===e.snapIndex)&&u()})),n("snapIndexChange",(()=>{e.params.loop||u()})),n("slidesLengthChange",(()=>{e.params.loop&&(c(),u())})),n("snapGridLengthChange",(()=>{e.params.loop||(c(),u())})),n("destroy",(()=>{d()})),n("enable disable",(()=>{const{$el:t}=e.pagination;t&&t[e.enabled?"removeClass":"addClass"](e.params.pagination.lockClass)})),n("lock unlock",(()=>{u()})),n("click",((t,n)=>{const i=n.target,{$el:a}=e.pagination;if(e.params.pagination.el&&e.params.pagination.hideOnClick&&a&&a.length>0&&!aa(i).hasClass(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&i===e.navigation.nextEl||e.navigation.prevEl&&i===e.navigation.prevEl))return;const t=a.hasClass(e.params.pagination.hiddenClass);r(!0===t?"paginationShow":"paginationHide"),a.toggleClass(e.params.pagination.hiddenClass)}}));const f=()=>{e.$el.addClass(e.params.pagination.paginationDisabledClass),e.pagination.$el&&e.pagination.$el.addClass(e.params.pagination.paginationDisabledClass),d()};Object.assign(e.pagination,{enable:()=>{e.$el.removeClass(e.params.pagination.paginationDisabledClass),e.pagination.$el&&e.pagination.$el.removeClass(e.params.pagination.paginationDisabledClass),p(),c(),u()},disable:f,render:c,update:u,init:p,destroy:d})}function Ga({swiper:e,extendParams:t,on:n}){t({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let r=null;function i(e){const t=r;0!==t.length&&(t.html(""),t.html(e))}function a(e){e.attr("tabIndex","0")}function o(e){e.attr("tabIndex","-1")}function s(e,t){e.attr("role",t)}function l(e,t){e.attr("aria-roledescription",t)}function u(e,t){e.attr("aria-label",t)}function c(e){e.attr("aria-disabled",!0)}function p(e){e.attr("aria-disabled",!1)}function d(t){if(13!==t.keyCode&&32!==t.keyCode)return;const n=e.params.a11y,r=aa(t.target);e.navigation&&e.navigation.$nextEl&&r.is(e.navigation.$nextEl)&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?i(n.lastSlideMessage):i(n.nextSlideMessage)),e.navigation&&e.navigation.$prevEl&&r.is(e.navigation.$prevEl)&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?i(n.firstSlideMessage):i(n.prevSlideMessage)),e.pagination&&r.is(Ra(e.params.pagination.bulletClass))&&r[0].click()}function f(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function h(){return f()&&e.params.pagination.clickable}const g=(e,t,n)=>{a(e),"BUTTON"!==e[0].tagName&&(s(e,"button"),e.on("keydown",d)),u(e,n),function(e,t){e.attr("aria-controls",t)}(e,t)},m=()=>{e.a11y.clicked=!0},A=()=>{requestAnimationFrame((()=>{requestAnimationFrame((()=>{e.destroyed||(e.a11y.clicked=!1)}))}))},v=t=>{if(e.a11y.clicked)return;const n=t.target.closest(`.${e.params.slideClass}`);if(!n||!e.slides.includes(n))return;const r=e.slides.indexOf(n)===e.activeIndex,i=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(n);r||i||t.sourceCapabilities&&t.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,e.slideTo(e.slides.indexOf(n),0))},b=()=>{const t=e.params.a11y;t.itemRoleDescriptionMessage&&l(aa(e.slides),t.itemRoleDescriptionMessage),t.slideRole&&s(aa(e.slides),t.slideRole);const n=e.params.loop?e.slides.filter((t=>!t.classList.contains(e.params.slideDuplicateClass))).length:e.slides.length;t.slideLabelMessage&&e.slides.each(((r,i)=>{const a=aa(r),o=e.params.loop?parseInt(a.attr("data-swiper-slide-index"),10):i;u(a,t.slideLabelMessage.replace(/\{\{index\}\}/,o+1).replace(/\{\{slidesLength\}\}/,n))}))};n("beforeInit",(()=>{r=aa(`<span class="${e.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`)})),n("afterInit",(()=>{e.params.a11y.enabled&&(()=>{const t=e.params.a11y;e.$el.append(r);const n=e.$el;t.containerRoleDescriptionMessage&&l(n,t.containerRoleDescriptionMessage),t.containerMessage&&u(n,t.containerMessage);const i=e.$wrapperEl,a=t.id||i.attr("id")||`swiper-wrapper-${function(e=16){return"x".repeat(e).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}(16)}`,o=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";var s;let c,p;s=a,i.attr("id",s),function(e,t){e.attr("aria-live",t)}(i,o),b(),e.navigation&&e.navigation.$nextEl&&(c=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(p=e.navigation.$prevEl),c&&c.length&&g(c,a,t.nextSlideMessage),p&&p.length&&g(p,a,t.prevSlideMessage),h()&&e.pagination.$el.on("keydown",Ra(e.params.pagination.bulletClass),d),e.$el.on("focus",v,!0),e.$el.on("pointerdown",m,!0),e.$el.on("pointerup",A,!0)})()})),n("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{e.params.a11y.enabled&&b()})),n("fromEdge toEdge afterInit lock unlock",(()=>{e.params.a11y.enabled&&function(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{$nextEl:t,$prevEl:n}=e.navigation;n&&n.length>0&&(e.isBeginning?(c(n),o(n)):(p(n),a(n))),t&&t.length>0&&(e.isEnd?(c(t),o(t)):(p(t),a(t)))}()})),n("paginationUpdate",(()=>{e.params.a11y.enabled&&function(){const t=e.params.a11y;f()&&e.pagination.bullets.each((n=>{const r=aa(n);e.params.pagination.clickable&&(a(r),e.params.pagination.renderBullet||(s(r,"button"),u(r,t.paginationBulletMessage.replace(/\{\{index\}\}/,r.index()+1)))),r.is(`.${e.params.pagination.bulletActiveClass}`)?r.attr("aria-current","true"):r.removeAttr("aria-current")}))}()})),n("destroy",(()=>{e.params.a11y.enabled&&function(){let t,n;r&&r.length>0&&r.remove(),e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(n=e.navigation.$prevEl),t&&t.off("keydown",d),n&&n.off("keydown",d),h()&&e.pagination.$el.off("keydown",Ra(e.params.pagination.bulletClass),d),e.$el.off("focus",v,!0),e.$el.off("pointerdown",m,!0),e.$el.off("pointerup",A,!0)}()}))}function Ya(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function Ua(e,t){const n=["__proto__","constructor","prototype"];Object.keys(t).filter((e=>n.indexOf(e)<0)).forEach((n=>{void 0===e[n]?e[n]=t[n]:Ya(t[n])&&Ya(e[n])&&Object.keys(t[n]).length>0?t[n].__swiper__?e[n]=t[n]:Ua(e[n],t[n]):e[n]=t[n]}))}function Va(e={}){return e.navigation&&void 0===e.navigation.nextEl&&void 0===e.navigation.prevEl}function Ha(e={}){return e.pagination&&void 0===e.pagination.el}function Wa(e={}){return e.scrollbar&&void 0===e.scrollbar.el}function Qa(e=""){const t=e.split(" ").map((e=>e.trim())).filter((e=>!!e)),n=[];return t.forEach((e=>{n.indexOf(e)<0&&n.push(e)})),n.join(" ")}const Za=["modules","init","_direction","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_preloadImages","updateOnImagesReady","_loop","_loopAdditionalSlides","_loopedSlides","_loopedSlidesLimit","_loopFillGroupWithBlank","loopPreventsSlide","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideBlankClass","slideActiveClass","slideDuplicateActiveClass","slideVisibleClass","slideDuplicateClass","slideNextClass","slideDuplicateNextClass","slidePrevClass","slideDuplicatePrevClass","wrapperClass","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","lazy","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom"],qa=(e,t)=>{let n=t.slidesPerView;if(t.breakpoints){const e=La.prototype.getBreakpoint(t.breakpoints),r=e in t.breakpoints?t.breakpoints[e]:void 0;r&&r.slidesPerView&&(n=r.slidesPerView)}let r=Math.ceil(parseFloat(t.loopedSlides||n,10));return r+=t.loopAdditionalSlides,r>e.length&&t.loopedSlidesLimit&&(r=e.length),r};function Xa(e){return e.type&&e.type.displayName&&e.type.displayName.includes("SwiperSlide")}function Ka(t){const n=[];return e.Children.toArray(t).forEach((e=>{Xa(e)?n.push(e):e.props&&e.props.children&&Ka(e.props.children).forEach((e=>n.push(e)))})),n}function Ja(t){const n=[],r={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return e.Children.toArray(t).forEach((e=>{if(Xa(e))n.push(e);else if(e.props&&e.props.slot&&r[e.props.slot])r[e.props.slot].push(e);else if(e.props&&e.props.children){const t=Ka(e.props.children);t.length>0?t.forEach((e=>n.push(e))):r["container-end"].push(e)}else r["container-end"].push(e)})),{slides:n,slots:r}}function eo(t,n){return"undefined"==typeof window?(0,e.useEffect)(t,n):(0,e.useLayoutEffect)(t,n)}const to=(0,e.createContext)(null),no=(0,e.createContext)(null);function ro(){return ro=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ro.apply(this,arguments)}const io=(0,e.forwardRef)((function(t,n){let{className:r,tag:i="div",wrapperTag:a="div",children:o,onSwiper:s,...l}=void 0===t?{}:t,u=!1;const[c,p]=(0,e.useState)("swiper"),[d,f]=(0,e.useState)(null),[h,g]=(0,e.useState)(!1),m=(0,e.useRef)(!1),A=(0,e.useRef)(null),v=(0,e.useRef)(null),b=(0,e.useRef)(null),y=(0,e.useRef)(null),w=(0,e.useRef)(null),C=(0,e.useRef)(null),x=(0,e.useRef)(null),S=(0,e.useRef)(null),{params:_,passedParams:k,rest:E,events:T}=function(e={},t=!0){const n={on:{}},r={},i={};Ua(n,La.defaults),Ua(n,La.extendedDefaults),n._emitClasses=!0,n.init=!1;const a={},o=Za.map((e=>e.replace(/_/,""))),s=Object.assign({},e);return Object.keys(s).forEach((s=>{void 0!==e[s]&&(o.indexOf(s)>=0?Ya(e[s])?(n[s]={},i[s]={},Ua(n[s],e[s]),Ua(i[s],e[s])):(n[s]=e[s],i[s]=e[s]):0===s.search(/on[A-Z]/)&&"function"==typeof e[s]?t?r[`${s[2].toLowerCase()}${s.substr(3)}`]=e[s]:n.on[`${s[2].toLowerCase()}${s.substr(3)}`]=e[s]:a[s]=e[s])})),["navigation","pagination","scrollbar"].forEach((e=>{!0===n[e]&&(n[e]={}),!1===n[e]&&delete n[e]})),{params:n,passedParams:i,rest:a,events:r}}(l),{slides:O,slots:P}=Ja(o),B=()=>{g(!h)};Object.assign(_.on,{_containerClasses(e,t){p(t)}});const M=()=>{if(Object.assign(_.on,T),u=!0,v.current=new La(_),v.current.loopCreate=()=>{},v.current.loopDestroy=()=>{},_.loop&&(v.current.loopedSlides=qa(O,_)),v.current.virtual&&v.current.params.virtual.enabled){v.current.virtual.slides=O;const e={cache:!1,slides:O,renderExternal:f,renderExternalUpdate:!1};Ua(v.current.params.virtual,e),Ua(v.current.originalParams.virtual,e)}};return A.current||M(),v.current&&v.current.on("_beforeBreakpoint",B),(0,e.useEffect)((()=>()=>{v.current&&v.current.off("_beforeBreakpoint",B)})),(0,e.useEffect)((()=>{!m.current&&v.current&&(v.current.emitSlidesClasses(),m.current=!0)})),eo((()=>{if(n&&(n.current=A.current),A.current)return v.current.destroyed&&M(),function({el:e,nextEl:t,prevEl:n,paginationEl:r,scrollbarEl:i,swiper:a},o){Va(o)&&t&&n&&(a.params.navigation.nextEl=t,a.originalParams.navigation.nextEl=t,a.params.navigation.prevEl=n,a.originalParams.navigation.prevEl=n),Ha(o)&&r&&(a.params.pagination.el=r,a.originalParams.pagination.el=r),Wa(o)&&i&&(a.params.scrollbar.el=i,a.originalParams.scrollbar.el=i),a.init(e)}({el:A.current,nextEl:w.current,prevEl:C.current,paginationEl:x.current,scrollbarEl:S.current,swiper:v.current},_),s&&s(v.current),()=>{v.current&&!v.current.destroyed&&v.current.destroy(!0,!1)}}),[]),eo((()=>{!u&&T&&v.current&&Object.keys(T).forEach((e=>{v.current.on(e,T[e])}));const e=function(e,t,n,r,i){const a=[];if(!t)return a;const o=e=>{a.indexOf(e)<0&&a.push(e)};if(n&&r){const e=r.map(i),t=n.map(i);e.join("")!==t.join("")&&o("children"),r.length!==n.length&&o("children")}return Za.filter((e=>"_"===e[0])).map((e=>e.replace(/_/,""))).forEach((n=>{if(n in e&&n in t)if(Ya(e[n])&&Ya(t[n])){const r=Object.keys(e[n]),i=Object.keys(t[n]);r.length!==i.length?o(n):(r.forEach((r=>{e[n][r]!==t[n][r]&&o(n)})),i.forEach((r=>{e[n][r]!==t[n][r]&&o(n)})))}else e[n]!==t[n]&&o(n)})),a}(k,b.current,O,y.current,(e=>e.key));return b.current=k,y.current=O,e.length&&v.current&&!v.current.destroyed&&function({swiper:e,slides:t,passedParams:n,changedParams:r,nextEl:i,prevEl:a,scrollbarEl:o,paginationEl:s}){const l=r.filter((e=>"children"!==e&&"direction"!==e)),{params:u,pagination:c,navigation:p,scrollbar:d,virtual:f,thumbs:h}=e;let g,m,A,v,b;r.includes("thumbs")&&n.thumbs&&n.thumbs.swiper&&u.thumbs&&!u.thumbs.swiper&&(g=!0),r.includes("controller")&&n.controller&&n.controller.control&&u.controller&&!u.controller.control&&(m=!0),r.includes("pagination")&&n.pagination&&(n.pagination.el||s)&&(u.pagination||!1===u.pagination)&&c&&!c.el&&(A=!0),r.includes("scrollbar")&&n.scrollbar&&(n.scrollbar.el||o)&&(u.scrollbar||!1===u.scrollbar)&&d&&!d.el&&(v=!0),r.includes("navigation")&&n.navigation&&(n.navigation.prevEl||a)&&(n.navigation.nextEl||i)&&(u.navigation||!1===u.navigation)&&p&&!p.prevEl&&!p.nextEl&&(b=!0),l.forEach((t=>{if(Ya(u[t])&&Ya(n[t]))Ua(u[t],n[t]);else{const i=n[t];!0!==i&&!1!==i||"navigation"!==t&&"pagination"!==t&&"scrollbar"!==t?u[t]=n[t]:!1===i&&e[r=t]&&(e[r].destroy(),"navigation"===r?(u[r].prevEl=void 0,u[r].nextEl=void 0,e[r].prevEl=void 0,e[r].nextEl=void 0):(u[r].el=void 0,e[r].el=void 0))}var r})),l.includes("controller")&&!m&&e.controller&&e.controller.control&&u.controller&&u.controller.control&&(e.controller.control=u.controller.control),r.includes("children")&&t&&f&&u.virtual.enabled?(f.slides=t,f.update(!0)):r.includes("children")&&e.lazy&&e.params.lazy.enabled&&e.lazy.load(),g&&h.init()&&h.update(!0),m&&(e.controller.control=u.controller.control),A&&(s&&(u.pagination.el=s),c.init(),c.render(),c.update()),v&&(o&&(u.scrollbar.el=o),d.init(),d.updateSize(),d.setTranslate()),b&&(i&&(u.navigation.nextEl=i),a&&(u.navigation.prevEl=a),p.init(),p.update()),r.includes("allowSlideNext")&&(e.allowSlideNext=n.allowSlideNext),r.includes("allowSlidePrev")&&(e.allowSlidePrev=n.allowSlidePrev),r.includes("direction")&&e.changeDirection(n.direction,!1),e.update()}({swiper:v.current,slides:O,passedParams:k,changedParams:e,nextEl:w.current,prevEl:C.current,scrollbarEl:S.current,paginationEl:x.current}),()=>{T&&v.current&&Object.keys(T).forEach((e=>{v.current.off(e,T[e])}))}})),eo((()=>{var e;!(e=v.current)||e.destroyed||!e.params.virtual||e.params.virtual&&!e.params.virtual.enabled||(e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.lazy&&e.params.lazy.enabled&&e.lazy.load(),e.parallax&&e.params.parallax&&e.params.parallax.enabled&&e.parallax.setTranslate())}),[d]),e.createElement(i,ro({ref:A,className:Qa(`${c}${r?` ${r}`:""}`)},E),e.createElement(no.Provider,{value:v.current},P["container-start"],e.createElement(a,{className:"swiper-wrapper"},P["wrapper-start"],_.virtual?function(t,n,r){if(!r)return null;const i=t.isHorizontal()?{[t.rtlTranslate?"right":"left"]:`${r.offset}px`}:{top:`${r.offset}px`};return n.filter(((e,t)=>t>=r.from&&t<=r.to)).map((n=>e.cloneElement(n,{swiper:t,style:i})))}(v.current,O,d):!_.loop||v.current&&v.current.destroyed?O.map((t=>e.cloneElement(t,{swiper:v.current}))):function(t,n,r){const i=n.map(((n,r)=>e.cloneElement(n,{swiper:t,"data-swiper-slide-index":r})));function a(t,n,i){return e.cloneElement(t,{key:`${t.key}-duplicate-${n}-${i}`,className:`${t.props.className||""} ${r.slideDuplicateClass}`})}if(r.loopFillGroupWithBlank){const t=r.slidesPerGroup-i.length%r.slidesPerGroup;if(t!==r.slidesPerGroup)for(let n=0;n<t;n+=1){const t=e.createElement("div",{className:`${r.slideClass} ${r.slideBlankClass}`});i.push(t)}}"auto"!==r.slidesPerView||r.loopedSlides||(r.loopedSlides=i.length);const o=qa(i,r),s=[],l=[];for(let e=0;e<o;e+=1){const t=e-Math.floor(e/i.length)*i.length;l.push(a(i[t],e,"append")),s.unshift(a(i[i.length-t-1],e,"prepend"))}return t&&(t.loopedSlides=o),[...s,...i,...l]}(v.current,O,_),P["wrapper-end"]),Va(_)&&e.createElement(e.Fragment,null,e.createElement("div",{ref:C,className:"swiper-button-prev"}),e.createElement("div",{ref:w,className:"swiper-button-next"})),Wa(_)&&e.createElement("div",{ref:S,className:"swiper-scrollbar"}),Ha(_)&&e.createElement("div",{ref:x,className:"swiper-pagination"}),P["container-end"]))}));function ao(){return ao=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ao.apply(this,arguments)}io.displayName="Swiper";const oo=(0,e.forwardRef)((function(t,n){let{tag:r="div",children:i,className:a="",swiper:o,zoom:s,virtualIndex:l,...u}=void 0===t?{}:t;const c=(0,e.useRef)(null),[p,d]=(0,e.useState)("swiper-slide");function f(e,t,n){t===c.current&&d(n)}eo((()=>{if(n&&(n.current=c.current),c.current&&o){if(!o.destroyed)return o.on("_slideClass",f),()=>{o&&o.off("_slideClass",f)};"swiper-slide"!==p&&d("swiper-slide")}})),eo((()=>{o&&c.current&&!o.destroyed&&d(o.getSlideClasses(c.current))}),[o]);const h={isActive:p.indexOf("swiper-slide-active")>=0||p.indexOf("swiper-slide-duplicate-active")>=0,isVisible:p.indexOf("swiper-slide-visible")>=0,isDuplicate:p.indexOf("swiper-slide-duplicate")>=0,isPrev:p.indexOf("swiper-slide-prev")>=0||p.indexOf("swiper-slide-duplicate-prev")>=0,isNext:p.indexOf("swiper-slide-next")>=0||p.indexOf("swiper-slide-duplicate-next")>=0},g=()=>"function"==typeof i?i(h):i;return e.createElement(r,ao({ref:c,className:Qa(`${p}${a?` ${a}`:""}`),"data-swiper-slide-index":l},u),e.createElement(to.Provider,{value:h},s?e.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":"number"==typeof s?s:void 0},g()):g()))}));oo.displayName="SwiperSlide";var so=n(697),lo={};lo.styleTagTransform=m(),lo.setAttributes=d(),lo.insert=c().bind(null,"head"),lo.domAPI=l(),lo.insertStyleElement=h(),o()(so.Z,lo);var uo=so.Z&&so.Z.locals?so.Z.locals:void 0;function co(e){return co="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},co(e)}var po=["date","info","className"];function fo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ho(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fo(Object(n),!0).forEach((function(t){go(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function go(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==co(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==co(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===co(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var mo,Ao=function(e){var t=e.date,n=e.info,r=e.className,a=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(e,po);return(0,y.jsxs)("div",ho(ho({className:i()(uo.slide,r)},a),{},{children:[(0,y.jsx)("div",{className:uo.slideTitle,children:t}),(0,y.jsx)("div",{className:uo.slideText,children:n})]}))};function vo(){return vo=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},vo.apply(this,arguments)}var bo=function(t){return e.createElement("svg",vo({width:5,height:10,viewBox:"0 0 8 12",fill:"none",xmlns:"http://www.w3.org/2000/svg"},t),mo||(mo=e.createElement("path",{d:"m1 1 5 5-5 5",stroke:"#000",strokeWidth:2})))},yo=n(4633),wo={};wo.styleTagTransform=m(),wo.setAttributes=d(),wo.insert=c().bind(null,"head"),wo.domAPI=l(),wo.insertStyleElement=h(),o()(yo.Z,wo);var Co=yo.Z&&yo.Z.locals?yo.Z.locals:void 0;function xo(e){return xo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xo(e)}var So=["arrow","styleType","arrSize","className"];function _o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ko(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_o(Object(n),!0).forEach((function(t){Eo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Eo(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==xo(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==xo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===xo(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var To=(0,e.forwardRef)((function(e,t){var n=e.arrow,r=e.styleType,a=void 0===r?"gray":r,o=e.arrSize,s=void 0===o?"s":o,l=e.className,u=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(e,So);return(0,y.jsx)("button",ko(ko({className:i()(Co.arrowBtn,Co[a],Co[n],l),"aria-label":"left"===n?"К предыдущему слайду":"К следующему слайду"},u),{},{ref:t,children:(0,y.jsx)(bo,ko({},"m"===s?{width:10,height:14}:{width:5,height:10}))}))})),Oo=n(8885),Po={};Po.styleTagTransform=m(),Po.setAttributes=d(),Po.insert=c().bind(null,"head"),Po.domAPI=l(),Po.insertStyleElement=h(),o()(Oo.Z,Po),Oo.Z&&Oo.Z.locals&&Oo.Z.locals;var Bo=n(4155),Mo={};Mo.styleTagTransform=m(),Mo.setAttributes=d(),Mo.insert=c().bind(null,"head"),Mo.domAPI=l(),Mo.insertStyleElement=h(),o()(Bo.Z,Mo),Bo.Z&&Bo.Z.locals&&Bo.Z.locals;var Do=n(9258),zo={};zo.styleTagTransform=m(),zo.setAttributes=d(),zo.insert=c().bind(null,"head"),zo.domAPI=l(),zo.insertStyleElement=h(),o()(Do.Z,zo),Do.Z&&Do.Z.locals&&Do.Z.locals;var No=n(2270),jo={};jo.styleTagTransform=m(),jo.setAttributes=d(),jo.insert=c().bind(null,"head"),jo.domAPI=l(),jo.insertStyleElement=h(),o()(No.Z,jo),No.Z&&No.Z.locals&&No.Z.locals;var Lo=n(3862),Io={};Io.styleTagTransform=m(),Io.setAttributes=d(),Io.insert=c().bind(null,"head"),Io.domAPI=l(),Io.insertStyleElement=h(),o()(Lo.Z,Io);var Fo=Lo.Z&&Lo.Z.locals?Lo.Z.locals:void 0;function Ro(e){return Ro="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ro(e)}var $o=["sliderId","topic","events","className"];function Go(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Yo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Go(Object(n),!0).forEach((function(t){Uo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Go(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Uo(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Ro(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Ro(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ro(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Vo=function(t){var n=t.sliderId,r=t.topic,a=t.events,o=t.className,s=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(t,$o),l=(0,e.useRef)(null),u=(0,e.useRef)(null),c=(0,e.useRef)(null);(0,e.useLayoutEffect)((function(){var e=Ai.context((function(){Ai.from(c.current,{opacity:0,duration:1})}),c);return function(){return e.revert()}}),[n,a]);var p=a.map((function(e){return(0,y.jsx)(oo,{className:Fo.sliderSlide,children:(0,y.jsx)(Ao,{date:e.date,info:e.event})},e.date)}));return(0,y.jsxs)("div",Yo(Yo({className:i()(Fo.slider,o)},s),{},{ref:c,children:[(0,y.jsx)("span",{className:Fo.sliderTopic,children:r}),(0,y.jsx)(To,{arrow:"left",styleType:"blue",className:i()(Fo.sliderNav_prev,"prev_".concat(n)),ref:u}),(0,y.jsx)(io,{className:Fo.sliderWrapper,modules:[Fa,$a,Ga],navigation:{prevEl:".prev_".concat(n),nextEl:".next_".concat(n)},pagination:{clickable:!0,el:".pagination_".concat(n)},spaceBetween:20,breakpoints:{525:{spaceBetween:40},725:{spaceBetween:80}},slidesPerView:"auto",onProgress:function(e,t){return function(e){l.current&&u.current&&(e<=0&&(u.current.style.opacity="0"),1===e&&(l.current.style.opacity="0"),e>0&&e<1&&(u.current.style.opacity="1",l.current.style.opacity="1"))}(t)},draggable:!0,grabCursor:!0,id:n,children:(0,y.jsx)("div",{className:"",children:p})}),(0,y.jsx)(To,{arrow:"right",styleType:"blue",className:i()(Fo.sliderNav_next,"next_".concat(n)),ref:l})]}))},Ho=(n(3112),n(3359)),Wo={};Wo.styleTagTransform=m(),Wo.setAttributes=d(),Wo.insert=c().bind(null,"head"),Wo.domAPI=l(),Wo.insertStyleElement=h(),o()(Ho.Z,Wo);var Qo=Ho.Z&&Ho.Z.locals?Ho.Z.locals:void 0;function Zo(e){return Zo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zo(e)}var qo=["sliderId","totalAmount","activePeriod","setActivePeriod","className"];function Xo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ko(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xo(Object(n),!0).forEach((function(t){Jo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Jo(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Zo(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Zo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Zo(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var es=function(t){var n=t.sliderId,r=t.totalAmount,a=t.activePeriod,o=t.setActivePeriod,s=t.className,l=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(t,qo),u=(0,e.useMemo)((function(){return String(r).padStart(2,"0")}),[r]),c=(0,e.useMemo)((function(){return String(a+1).padStart(2,"0")}),[a]),p=function(e){"prev"===e&&a>0&&o(a-1),"next"===e&&a<r-1&&o(a+1)};return(0,y.jsxs)("div",Ko(Ko({className:i()(Qo.controls,s)},l),{},{children:[(0,y.jsxs)("div",{className:Qo.controlsCount,children:[(0,y.jsx)("span",{children:c}),"/",(0,y.jsx)("span",{children:u})]}),(0,y.jsxs)("div",{className:Qo.controlsBtns,children:[(0,y.jsx)(To,{className:Qo.controlsBtn,arrow:"left",arrSize:"m",disabled:0===a,onClick:function(){return p("prev")}}),(0,y.jsx)(To,{className:Qo.controlsBtn,arrow:"right",arrSize:"m",disabled:a===r-1,onClick:function(){return p("next")}})]}),(0,y.jsx)("div",{className:i()(Qo.sliderPag,"pagination_".concat(n))})]}))},ts=n(5512),ns={};ns.styleTagTransform=m(),ns.setAttributes=d(),ns.insert=c().bind(null,"head"),ns.domAPI=l(),ns.insertStyleElement=h(),o()(ts.Z,ns);var rs=ts.Z&&ts.Z.locals?ts.Z.locals:void 0;function is(e){return is="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},is(e)}var as=["children","className"];function os(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ss(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?os(Object(n),!0).forEach((function(t){ls(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):os(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ls(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==is(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==is(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===is(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var us=function(e){var t=e.children,n=e.className,r=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(e,as);return(0,y.jsx)("h2",ss(ss({className:i()(rs.title,n)},r),{},{children:t}))},cs=n(4880),ps={};ps.styleTagTransform=m(),ps.setAttributes=d(),ps.insert=c().bind(null,"head"),ps.domAPI=l(),ps.insertStyleElement=h(),o()(cs.Z,ps);var ds=cs.Z&&cs.Z.locals?cs.Z.locals:void 0;function fs(e){return fs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fs(e)}var hs=["carouselId","carouselTitle","timePeriods","className"];function gs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ms(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gs(Object(n),!0).forEach((function(t){As(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function As(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==fs(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==fs(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===fs(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function vs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var bs=function(t){var n,r,a=t.carouselId,o=t.carouselTitle,s=t.timePeriods,l=t.className,u=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(t,hs),c=(n=(0,e.useState)(0),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],l=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(n,r)||function(e,t){if(e){if("string"==typeof e)return vs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?vs(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),p=c[0],d=c[1],f=T("(max-width: 525px)");return(0,y.jsxs)("div",ms(ms({className:i()(ds.carousel,l)},u),{},{children:[(0,y.jsx)(us,{children:o}),(0,y.jsxs)("div",{className:ds.carouselDataWrapper,children:[(0,y.jsxs)("div",{className:ds.carouselCountDown,children:[(0,y.jsx)(Ei,{number:s[p].period[0]}),(0,y.jsx)(Ei,{number:s[p].period[1],styleType:"accentSecond"})]}),!f&&(0,y.jsx)(Vi,{timePeriods:s,currentPeriodIdx:p,setCurrentPeriodIdx:d})]}),(0,y.jsxs)("div",{className:ds.carouselSliderWrapper,children:[(0,y.jsx)(es,{sliderId:a,className:ds.carouselControls,totalAmount:s.length,activePeriod:p,setActivePeriod:d}),(0,y.jsx)(Vo,{events:s[p].events,topic:s[p].topic,sliderId:a})]})]}))},ys=n(6810),ws={};ws.styleTagTransform=m(),ws.setAttributes=d(),ws.insert=c().bind(null,"head"),ws.domAPI=l(),ws.insertStyleElement=h(),o()(ys.Z,ws),ys.Z&&ys.Z.locals&&ys.Z.locals;var Cs=n(3533),xs={};xs.styleTagTransform=m(),xs.setAttributes=d(),xs.insert=c().bind(null,"head"),xs.domAPI=l(),xs.insertStyleElement=h(),o()(Cs.Z,xs),Cs.Z&&Cs.Z.locals&&Cs.Z.locals;var Ss=[{period:[1987,1991],topic:"Кино",events:[{date:1987,event:'"Хищник"/Predator — американский фантастический боевик, снятый Джоном Мактирнаном по сценарию братьев Томас'},{date:1988,event:"«Кто подставил кролика Роджера»/Who Framed Roger Rabbit — американский комедийный анимационно-игровой фильм режиссёра Роберта Земекиса"},{date:1989,event:'"Назад в будущее 2"/Back To The Future, Part II — научно-фантастический фильм режиссёра Роберта Земекиса по сценарию Боба Гейла, вторая часть трилогии "Назад в будущее"'},{date:1990,event:"Крепкий орешек 2/Die Hard 2 — американский боевик 1990-го года и вторая часть серии фильмов о полицейском Джоне Макклейне"},{date:1991,event:'"Терминатор 2: Судный день"/Terminator 2: Judgment Day — американский научно-фантастический боевик режиссёра Джеймса Кэмерона'}]},{period:[1992,1997],topic:"Литература",events:[{date:1992,event:'Нобелевская премия по литературе - Дерек Уоллкот "За блестящий образец карибского эпоса в 64 резделах"'},{date:1994,event:'"Бессонница" - роман Стивена Кинга'},{date:1995,event:"Нобелевская премия по литературе - Шеймас Хини"},{date:1996,event:'Нобелевская премия по литературе — Вислава Шимборская, "За поэзию, которая с предельной точностью описывает исторические и биологические явления в контексте человеческой реальности"'},{date:1997,event:'Нобелевская премия по литературе — Дарио Фо, "Наследуя средневековых шутов, порицает власть и авторитет и защищает достоинство угнетённых"'}]},{period:[1999,2004],topic:"Театр",events:[{date:1999,event:'Премьера балета "Золушка" в постановке Жан-Кристофа Майо, сценография Эрнеста Пиньона'},{date:2e3,event:'Возобновлено издание журнала "Театр"'},{date:2002,event:'Премьера трилогии Тома Стоппарда "Берег утопии", Королевский национальный театр, Лондон'},{date:2003,event:'В Венеции после восьмилетней реставрации постановкой оперы Джузеппе Верди "Травиата" открылся театр "Ла Фениче", пострадавший в пожаре 1996 года'},{date:2004,event:'8 октября в Театре на покровке состоялась премьера спектакля "Последние страницы из дневника женщины" по мотивам одноимённой повести В. Брюсова — пронзительная история о любви'}]},{period:[2005,2010],topic:"Космос",events:[{date:2005,event:"Зонд «Гюйгенс» вошёл в атмосферу Титана, совершил мягкую посадку на поверхность и передал снимки и другие данные через аппарат «Кассини» на Землю"},{date:2007,event:"Открытие планеты Глизе 581c"},{date:2008,event:"Автоматическая межпланетная станция MESSENGER сделала первый из трёх планируемых облётов Меркурия. Подлетев на расстояние 200 километров, она передала множество снимков планеты"},{date:2009,event:"Был запущен российский спутник «Коронас-ФОТОН». Он стал третьим спутником, запущенным в рамках программы КОРОНАС (Комплексные орбитальные околоземные наблюдения активности Солнца)"},{date:2010,event:"Орбитальный телескоп «Кеплер» открыл свои первые пять экзопланет: Kepler-4 b, Kepler-5 b, Kepler-6 b, Kepler-7 b, Kepler-8 b"}]},{period:[2015,2022],topic:"Наука",events:[{date:2015,event:"13 сентября — частное солнечное затмение, видимое в Южной Африке и части Антарктиды"},{date:2016,event:"Телескоп «Хаббл» обнаружил самую удалённую из всех обнаруженных галактик, получившую обозначение GN-z11"},{date:2017,event:"Компания Tesla официально представила первый в мире электрический грузовик Tesla Semi"},{date:2018,event:"Официально подтверждено открытие нового класса антибиотиков Odilorhabdin, анонсированное в 2013 году, а также описан механизм его действия"},{date:2019,event:"Google объявил о создании 53-кубитного квантового компьютера"},{date:2020,event:"При анализе мурчисонского метеорита обнаружены древнейшие на Земле частицы вещества, появившиеся когда ещё не существовало Солнечной системы"},{date:2021,event:"Учёные создали гибридные эмбрионы человека и обезьяны"},{date:2022,event:"Найдено вулканическое озеро с условиями жизни как на Марсе. В вулканическом озере вулкана Поас обитает единственный вид бактерий — Acidiphilium. Такое открытие наглядно даёт понять, как на Марсе может существовать жизнь"}]}],_s=[{period:[1987,1991],topic:"Кино",events:[{date:1987,event:'"Хищник"/Predator — американский фантастический боевик, снятый Джоном Мактирнаном по сценарию братьев Томас'},{date:1988,event:"«Кто подставил кролика Роджера»/Who Framed Roger Rabbit — американский комедийный анимационно-игровой фильм режиссёра Роберта Земекиса"},{date:1989,event:'"Назад в будущее 2"/Back To The Future, Part II — научно-фантастический фильм режиссёра Роберта Земекиса по сценарию Боба Гейла, вторая часть трилогии "Назад в будущее"'},{date:1990,event:"Крепкий орешек 2/Die Hard 2 — американский боевик 1990-го года и вторая часть серии фильмов о полицейском Джоне Макклейне"},{date:1991,event:'"Терминатор 2: Судный день"/Terminator 2: Judgment Day — американский научно-фантастический боевик режиссёра Джеймса Кэмерона'}]},{period:[1992,1997],topic:"Литература",events:[{date:1992,event:'Нобелевская премия по литературе - Дерек Уоллкот "За блестящий образец карибского эпоса в 64 резделах"'},{date:1994,event:'"Бессонница" - роман Стивена Кинга'},{date:1995,event:"Нобелевская премия по литературе - Шеймас Хини"},{date:1997,event:"-"}]},{period:[2005,2010],topic:"Космос",events:[{date:2005,event:"Зонд «Гюйгенс» вошёл в атмосферу Титана, совершил мягкую посадку на поверхность и передал снимки и другие данные через аппарат «Кассини» на Землю"},{date:2007,event:"Открытие планеты Глизе 581c"},{date:2008,event:"Автоматическая межпланетная станция MESSENGER сделала первый из трёх планируемых облётов Меркурия. Подлетев на расстояние 200 километров, она передала множество снимков планеты"},{date:2009,event:"Был запущен российский спутник «Коронас-ФОТОН». Он стал третьим спутником, запущенным в рамках программы КОРОНАС (Комплексные орбитальные околоземные наблюдения активности Солнца)"},{date:2010,event:"Орбитальный телескоп «Кеплер» открыл свои первые пять экзопланет: Kepler-4 b, Kepler-5 b, Kepler-6 b, Kepler-7 b, Kepler-8 b"}]},{period:[2015,2022],topic:"Наука",events:[{date:2015,event:"13 сентября — частное солнечное затмение, видимое в Южной Африке и части Антарктиды"},{date:2016,event:"Телескоп «Хаббл» обнаружил самую удалённую из всех обнаруженных галактик, получившую обозначение GN-z11"},{date:2017,event:"Компания Tesla официально представила первый в мире электрический грузовик Tesla Semi"},{date:2018,event:"Официально подтверждено открытие нового класса антибиотиков Odilorhabdin, анонсированное в 2013 году, а также описан механизм его действия"},{date:2019,event:"Google объявил о создании 53-кубитного квантового компьютера"},{date:2020,event:"При анализе мурчисонского метеорита обнаружены древнейшие на Земле частицы вещества, появившиеся когда ещё не существовало Солнечной системы"},{date:2021,event:"Учёные создали гибридные эмбрионы человека и обезьяны"},{date:2022,event:"Найдено вулканическое озеро с условиями жизни как на Марсе. В вулканическом озере вулкана Поас обитает единственный вид бактерий — Acidiphilium. Такое открытие наглядно даёт понять, как на Марсе может существовать жизнь"}]}],ks=function(){return(0,y.jsxs)(k,{children:[(0,y.jsx)(bs,{timePeriods:Ss,carouselTitle:(0,y.jsxs)(y.Fragment,{children:["Исторические",(0,y.jsx)("br",{}),"даты"]}),carouselId:"dates_1"}),(0,y.jsx)(bs,{timePeriods:_s,carouselTitle:(0,y.jsxs)(y.Fragment,{children:["Исторические",(0,y.jsx)("br",{}),"даты"]}),carouselId:"dates_2"})]})},Es=document.getElementById("app");Es&&(0,t.s)(Es).render((0,y.jsx)(ks,{}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FDSWQsS0FBTSxLQUNOYyxNQUFPLGtJQUluQixDQUNJK29DLE9BQVEsQ0FBQyxLQUFNLE1BQ2ZnaEIsTUFBTyxRQUNQMEQsT0FBUSxDQUNKLENBQ0l2dUQsS0FBTSxLQUNOYyxNQUFPLHVGQUVYLENBQ0lkLEtBQU0sS0FDTmMsTUFBTywyR0FFWCxDQUNJZCxLQUFNLEtBQ05jLE1BQU8seUZBRVgsQ0FDSWQsS0FBTSxLQUNOYyxNQUFPLDhJQUVYLENBQ0lkLEtBQU0sS0FDTmMsTUFBTyxnRUFFWCxDQUNJZCxLQUFNLEtBQ05jLE1BQU8sZ0pBRVgsQ0FDSWQsS0FBTSxLQUNOYyxNQUFPLHlEQUVYLENBQ0lkLEtBQU0sS0FDTmMsTUFBTyxrT0N6UFYwK0UsR0FBTSxXQUNmLE9BQ0ksVUFBQ3B2RCxFQUFTLFlBQ04sU0FBQyt1RCxHQUFhLENBQ1YvMEIsWUFBYUEsR0FDYmkxQixlQUFlLGdEQUFjLGtCQUFNLFVBQ25DRCxXQUFXLGFBRWYsU0FBQ0QsR0FBYSxDQUNWLzBCLFlBQWFtMUIsR0FDYkYsZUFBZSxnREFBYyxrQkFBTSxVQUNuQ0QsV0FBVyxjQUkzQixFQ2xCTUssR0FBTzM3RyxTQUFTa25GLGVBQWUsT0FDakN5MEIsS0FDRjMyRCxFQUFBQSxFQUFBQSxHQUFXMjJELElBQU1yNEYsUUFBTyxTQUFDLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNhbGxhYmxlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWFsbC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9lcy1ub3QtZXhjZWVkLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHkuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLXRydW5jLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcGFkLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90cnktdG8tc3RyaW5nLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3doaXRlc3BhY2VzLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmZvci5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5rZXktZm9yLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLm1pbi5jc3MiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9wYWdpbmF0aW9uL3BhZ2luYXRpb24ubWluLmNzcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXIubWluLmNzcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL0FwcC5zY3NzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9BcnJvd0J1dHRvbi9zdHlsZS5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvQ29udGFpbmVyL3N0eWxlLm1vZHVsZS5zY3NzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9Db3VudGRvd24vc3R5bGUubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9jb21wb25lbnRzL0RhdGVzQ2Fyb3VzZWwvc3R5bGUubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9jb21wb25lbnRzL0RvdEJ1dHRvbi9zdHlsZS5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvRG90c0NpcmNsZS9zdHlsZS5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvRXZlbnRTbGlkZS9zdHlsZS5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvRXZlbnRTbGlkZXIvc2xpZGVyU3R5bGUuc2NzcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvRXZlbnRTbGlkZXIvc3R5bGUubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9jb21wb25lbnRzL1BlcmlvZENvbnRyb2xzL3N0eWxlLm1vZHVsZS5zY3NzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9UaXRsZS9zdHlsZS5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL3N0eWxlcy9yZXNldC5zY3NzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9jb21wb25lbnRzL0NvbnRhaW5lci9zdHlsZS5tb2R1bGUuc2Nzcz81ZDk0Iiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9Db250YWluZXIvaW5kZXgudHN4Iiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvaG9va3MvdXNlTWF0aE1lZGlhLnRzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvZ3NhcC9nc2FwLWNvcmUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9jb21wb25lbnRzL0NvdW50ZG93bi9zdHlsZS5tb2R1bGUuc2Nzcz8zZjFkIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9Db3VudGRvd24vaW5kZXgudHN4Iiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9Eb3RCdXR0b24vc3R5bGUubW9kdWxlLnNjc3M/MzE4MiIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvRG90QnV0dG9uL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvRG90c0NpcmNsZS9zdHlsZS5tb2R1bGUuc2Nzcz9iZWZlIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9Eb3RzQ2lyY2xlL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3Nzci13aW5kb3cvc3NyLXdpbmRvdy5lc20uanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9kb203L2RvbTcuZXNtLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9kb20uanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3V0aWxzLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9nZXQtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZ2V0LWRldmljZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZ2V0LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMtZW1pdHRlci5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVTaXplLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVBdXRvSGVpZ2h0LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc09mZnNldC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNDbGFzc2VzLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZUFjdGl2ZUluZGV4LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZUNsaWNrZWRTbGlkZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvbkVtaXQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlVG8uanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvTG9vcC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlTmV4dC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlUHJldi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlUmVzZXQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvQ2xvc2VzdC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlVG9DbGlja2VkU2xpZGUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25Ub3VjaFN0YXJ0LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uVG91Y2hNb3ZlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uVG91Y2hFbmQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25SZXNpemUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25DbGljay5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vblNjcm9sbC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2JyZWFrcG9pbnRzL3NldEJyZWFrcG9pbnQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9icmVha3BvaW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2NsYXNzZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jbGFzc2VzL2FkZENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jbGFzc2VzL3JlbW92ZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL21vZHVsZUV4dGVuZFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2NvcmUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvZ2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL3NldFRyYW5zbGF0ZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zbGF0ZS9taW5UcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvbWF4VHJhbnNsYXRlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL3RyYW5zbGF0ZVRvLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vc2V0VHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvblN0YXJ0LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNpdGlvbi90cmFuc2l0aW9uRW5kLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbG9vcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2xvb3AvbG9vcENyZWF0ZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2xvb3AvbG9vcEZpeC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2xvb3AvbG9vcERlc3Ryb3kuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ncmFiLWN1cnNvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2dyYWItY3Vyc29yL3NldEdyYWJDdXJzb3IuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ncmFiLWN1cnNvci91bnNldEdyYWJDdXJzb3IuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9icmVha3BvaW50cy9nZXRCcmVha3BvaW50LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvY2hlY2stb3ZlcmZsb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9pbWFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9pbWFnZXMvbG9hZEltYWdlLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvaW1hZ2VzL3ByZWxvYWRJbWFnZXMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9tb2R1bGVzL29ic2VydmVyL29ic2VydmVyLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2ExMXkvYTExeS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb21wb25lbnRzLXNoYXJlZC91dGlscy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb21wb25lbnRzLXNoYXJlZC9wYXJhbXMtbGlzdC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2FsYy1sb29wZWQtc2xpZGVzLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3JlYWN0L2dldC1jaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9yZWFjdC91c2UtaXNvbW9ycGhpYy1sYXlvdXQtZWZmZWN0LmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3JlYWN0L2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvcmVhY3Qvc3dpcGVyLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvbXBvbmVudHMtc2hhcmVkL2dldC1wYXJhbXMuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29tcG9uZW50cy1zaGFyZWQvbW91bnQtc3dpcGVyLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvbXBvbmVudHMtc2hhcmVkL2dldC1jaGFuZ2VkLXBhcmFtcy5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb21wb25lbnRzLXNoYXJlZC91cGRhdGUtc3dpcGVyLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvbXBvbmVudHMtc2hhcmVkL3VwZGF0ZS1vbi12aXJ0dWFsLWRhdGEuanMiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvcmVhY3QvdmlydHVhbC5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9yZWFjdC9sb29wLmpzIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3JlYWN0L3N3aXBlci1zbGlkZS5qcyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvRXZlbnRTbGlkZS9zdHlsZS5tb2R1bGUuc2Nzcz9kMGFlIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9FdmVudFNsaWRlL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2Fzc2V0cy9pY29ucy9hcnJvd1JpZ2h0LnN2ZyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvQXJyb3dCdXR0b24vc3R5bGUubW9kdWxlLnNjc3M/N2EzMyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvQXJyb3dCdXR0b24vaW5kZXgudHN4Iiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3N3aXBlci5taW4uY3NzP2RhYTAiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9uYXZpZ2F0aW9uL25hdmlnYXRpb24ubWluLmNzcz83ODhiIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLm1pbi5jc3M/Mzk1ZiIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvRXZlbnRTbGlkZXIvc2xpZGVyU3R5bGUuc2Nzcz9jNmE0Iiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9FdmVudFNsaWRlci9zdHlsZS5tb2R1bGUuc2Nzcz9iOTYyIiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9FdmVudFNsaWRlci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9jb21wb25lbnRzL1BlcmlvZENvbnRyb2xzL3N0eWxlLm1vZHVsZS5zY3NzPzQxODYiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9jb21wb25lbnRzL1BlcmlvZENvbnRyb2xzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvVGl0bGUvc3R5bGUubW9kdWxlLnNjc3M/OThjYyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL2NvbXBvbmVudHMvVGl0bGUvaW5kZXgudHN4Iiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvY29tcG9uZW50cy9EYXRlc0Nhcm91c2VsL3N0eWxlLm1vZHVsZS5zY3NzP2Q1MWUiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9jb21wb25lbnRzL0RhdGVzQ2Fyb3VzZWwvaW5kZXgudHN4Iiwid2VicGFjazovL2V2ZW50LXNsaWRlcnMvLi9zcmMvc3R5bGVzL3Jlc2V0LnNjc3M/OTdkMyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL0FwcC5zY3NzP2JmODYiLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9hc3NldHMvZGF0YS9UaW1lUGVyaW9kcy50cyIsIndlYnBhY2s6Ly9ldmVudC1zbGlkZXJzLy4vc3JjL0FwcC50c3giLCJ3ZWJwYWNrOi8vZXZlbnQtc2xpZGVycy8uL3NyYy9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogSXNDYWxsYWJsZShhcmd1bWVudCkgaXMgdHJ1ZWBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAodHlwZW9mIGFyZ3VtZW50ID09ICdvYmplY3QnIHx8IGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyAkU3RyaW5nKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5KEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRTdHJpbmcgPSBTdHJpbmc7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzT2JqZWN0KGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyAkVHlwZUVycm9yKCRTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZm9yRWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSAhU1RSSUNUX01FVEhPRCA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtZm9yZWFjaCAtLSBzYWZlXG59IDogW10uZm9yRWFjaDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIElTX0NPTlNUUlVDVE9SID0gaXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICEodGhpcyA9PT0gJEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcygpIDogW107XG4gICAgZm9yICg7IShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMobGVuZ3RoKSA6ICRBcnJheShsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwidmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbnZhciAkQXJyYXkgPSBBcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICB2YXIgcmVzdWx0ID0gJEFycmF5KG1heChmaW4gLSBrLCAwKSk7XG4gIGZvciAodmFyIG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKFtdLnNsaWNlKTtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xuXG4vLyBhIHBhcnQgb2YgYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmIChpc0NvbnN0cnVjdG9yKEMpICYmIChDID09PSAkQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gJEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSAkT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSAmJiAhKGV4Y2VwdGlvbnMgJiYgaGFzT3duKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsIi8vIGBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlaXRlcnJlc3VsdG9iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIGRvbmUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiBkb25lIH07XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYERhdGUucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBhbk9iamVjdCh0aGlzKTtcbiAgaWYgKGhpbnQgPT09ICdzdHJpbmcnIHx8IGhpbnQgPT09ICdkZWZhdWx0JykgaGludCA9ICdzdHJpbmcnO1xuICBlbHNlIGlmIChoaW50ICE9PSAnbnVtYmVyJykgdGhyb3cgJFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUodGhpcywgaGludCk7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMuZW51bWVyYWJsZTtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSBtYWtlQnVpbHRJbih2YWx1ZSwgbmFtZSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLmdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lR2xvYmFsUHJvcGVydHkoa2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghb3B0aW9ucy51bnNhZmUpIGRlbGV0ZSBPW2tleV07XG4gICAgICBlbHNlIGlmIChPW2tleV0pIHNpbXBsZSA9IHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiAhb3B0aW9ucy5ub25Db25maWd1cmFibGUsXG4gICAgICB3cml0YWJsZTogIW9wdGlvbnMubm9uV3JpdGFibGVcbiAgICB9KTtcbiAgfSByZXR1cm4gTztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZG9jdW1lbnRBbGwgPSB0eXBlb2YgZG9jdW1lbnQgPT0gJ29iamVjdCcgJiYgZG9jdW1lbnQuYWxsO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90XG52YXIgSVNfSFRNTEREQSA9IHR5cGVvZiBkb2N1bWVudEFsbCA9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudEFsbCAhPT0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWxsOiBkb2N1bWVudEFsbCxcbiAgSVNfSFRNTEREQTogSVNfSFRNTEREQVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgJFR5cGVFcnJvcignTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERlbm8gPSBnbG9iYWwuRGVubztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucyB8fCBEZW5vICYmIERlbm8udmVyc2lvbjtcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICAvLyBpbiBvbGQgQ2hyb21lLCB2ZXJzaW9ucyBvZiBWOCBpc24ndCBWOCA9IENocm9tZSAvIDEwXG4gIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG4gIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG59XG5cbi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuLy8gc28gY2hlY2sgYHVzZXJBZ2VudGAgZXZlbiBpZiBgLnY4YCBleGlzdHMsIGJ1dCAwXG5pZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbjtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAgICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMuZG9udENhbGxHZXRTZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5kb250Q2FsbEdldFNldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgYmluZCA9IHVuY3VycnlUaGlzKHVuY3VycnlUaGlzLmJpbmQpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0KSB7XG4gIGFDYWxsYWJsZShmbik7XG4gIHJldHVybiB0aGF0ID09PSB1bmRlZmluZWQgPyBmbiA6IE5BVElWRV9CSU5EID8gYmluZChmbiwgdGhhdCkgOiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1mdW5jdGlvbi1wcm90b3R5cGUtYmluZCAtLSBzYWZlXG4gIHZhciB0ZXN0ID0gKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkuYmluZCgpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ICE9ICdmdW5jdGlvbicgfHwgdGVzdC5oYXNPd25Qcm9wZXJ0eSgncHJvdG90eXBlJyk7XG59KTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGNhbGwpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShjYWxsLCBhcmd1bWVudHMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgLy8gTmFzaG9ybiBidWc6XG4gIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMjhcbiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEzMFxuICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHJldHVybiB1bmN1cnJ5VGhpcyhmbik7XG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpc1dpdGhCaW5kID0gTkFUSVZFX0JJTkQgJiYgRnVuY3Rpb25Qcm90b3R5cGUuYmluZC5iaW5kKGNhbGwsIGNhbGwpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gdW5jdXJyeVRoaXNXaXRoQmluZCA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdCkpIHJldHVybiBnZXRNZXRob2QoaXQsIElURVJBVE9SKVxuICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCB1c2luZ0l0ZXJhdG9yKSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZ2V0SXRlcmF0b3JNZXRob2QoYXJndW1lbnQpIDogdXNpbmdJdGVyYXRvcjtcbiAgaWYgKGFDYWxsYWJsZShpdGVyYXRvck1ldGhvZCkpIHJldHVybiBhbk9iamVjdChjYWxsKGl0ZXJhdG9yTWV0aG9kLCBhcmd1bWVudCkpO1xuICB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcblxuLy8gYEdldE1ldGhvZGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldG1ldGhvZFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoViwgUCkge1xuICB2YXIgZnVuYyA9IFZbUF07XG4gIHJldHVybiBpc051bGxPclVuZGVmaW5lZChmdW5jKSA/IHVuZGVmaW5lZCA6IGFDYWxsYWJsZShmdW5jKTtcbn07XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1nbG9iYWwtdGhpcyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSBmYWxsYmFja1xuICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkoKSB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyh7fS5oYXNPd25Qcm9wZXJ0eSk7XG5cbi8vIGBIYXNPd25Qcm9wZXJ0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWhhc293bnByb3BlcnR5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWhhc293biAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5KHRvT2JqZWN0KGl0KSwga2V5KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmtzIHRvIElFOCBmb3IgaXRzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICEkT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdChpdCwgJycpIDogJE9iamVjdChpdCk7XG59IDogJE9iamVjdDtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIGlzQ2FsbGFibGUoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpICYmXG4gICAgTmV3VGFyZ2V0ICE9PSBXcmFwcGVyICYmXG4gICAgaXNPYmplY3QoTmV3VGFyZ2V0UHJvdG90eXBlID0gTmV3VGFyZ2V0LnByb3RvdHlwZSkgJiZcbiAgICBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlXG4gICkgc2V0UHJvdG90eXBlT2YoJHRoaXMsIE5ld1RhcmdldFByb3RvdHlwZSk7XG4gIHJldHVybiAkdGhpcztcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGBjb3JlLWpzQDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKCFpc0NhbGxhYmxlKHN0b3JlLmluc3BlY3RTb3VyY2UpKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZyhpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2Vhay1tYXAtYmFzaWMtZGV0ZWN0aW9uJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtYXNzaWduIC0tIHByb3RvdHlwZSBtZXRob2RzIHByb3RlY3Rpb24gKi9cbiAgc3RvcmUuZ2V0ID0gc3RvcmUuZ2V0O1xuICBzdG9yZS5oYXMgPSBzdG9yZS5oYXM7XG4gIHN0b3JlLnNldCA9IHN0b3JlLnNldDtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWFzc2lnbiAtLSBwcm90b3R5cGUgbWV0aG9kcyBwcm90ZWN0aW9uICovXG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAoc3RvcmUuaGFzKGl0KSkgdGhyb3cgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBzdG9yZS5zZXQoaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBzdG9yZS5nZXQoaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gc3RvcmUuaGFzKGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGhhc093bihpdCwgU1RBVEUpKSB0aHJvdyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2FycmF5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmd1bWVudCkge1xuICByZXR1cm4gY2xhc3NvZihhcmd1bWVudCkgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgJGRvY3VtZW50QWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWFsbCcpO1xuXG52YXIgZG9jdW1lbnRBbGwgPSAkZG9jdW1lbnRBbGwuYWxsO1xuXG4vLyBgSXNDYWxsYWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcbm1vZHVsZS5leHBvcnRzID0gJGRvY3VtZW50QWxsLklTX0hUTUxEREEgPyBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nIHx8IGFyZ3VtZW50ID09PSBkb2N1bWVudEFsbDtcbn0gOiBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgZW1wdHkgPSBbXTtcbnZhciBjb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIGNvbnN0cnVjdG9yUmVnRXhwID0gL15cXHMqKD86Y2xhc3N8ZnVuY3Rpb24pXFxiLztcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoY29uc3RydWN0b3JSZWdFeHAuZXhlYyk7XG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9ICFjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKG5vb3ApO1xuXG52YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0cnVjdChub29wLCBlbXB0eSwgYXJndW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzogcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gd2UgY2FuJ3QgY2hlY2sgLnByb3RvdHlwZSBzaW5jZSBjb25zdHJ1Y3RvcnMgcHJvZHVjZWQgYnkgLmJpbmQgaGF2ZW4ndCBpdFxuICAgIC8vIGBGdW5jdGlvbiN0b1N0cmluZ2AgdGhyb3dzIG9uIHNvbWUgYnVpbHQtaXQgZnVuY3Rpb24gaW4gc29tZSBsZWdhY3kgZW5naW5lc1xuICAgIC8vIChmb3IgZXhhbXBsZSwgYERPTVF1YWRgIGFuZCBzaW1pbGFyIGluIEZGNDEtKVxuICAgIHJldHVybiBJTkNPUlJFQ1RfVE9fU1RSSU5HIHx8ICEhZXhlYyhjb25zdHJ1Y3RvclJlZ0V4cCwgaW5zcGVjdFNvdXJjZShhcmd1bWVudCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5pc0NvbnN0cnVjdG9yTGVnYWN5LnNoYW0gPSB0cnVlO1xuXG4vLyBgSXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gIWNvbnN0cnVjdCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsZWQ7XG4gIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihPYmplY3QpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlOyB9KVxuICAgIHx8IGNhbGxlZDtcbn0pID8gaXNDb25zdHJ1Y3RvckxlZ2FjeSA6IGlzQ29uc3RydWN0b3JNb2Rlcm47XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCIvLyB3ZSBjYW4ndCB1c2UganVzdCBgaXQgPT0gbnVsbGAgc2luY2Ugb2YgYGRvY3VtZW50LmFsbGAgc3BlY2lhbCBjYXNlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90LWFlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSBudWxsIHx8IGl0ID09PSB1bmRlZmluZWQ7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciAkZG9jdW1lbnRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtYWxsJyk7XG5cbnZhciBkb2N1bWVudEFsbCA9ICRkb2N1bWVudEFsbC5hbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gJGRvY3VtZW50QWxsLklTX0hUTUxEREEgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZShpdCkgfHwgaXQgPT09IGRvY3VtZW50QWxsO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsICRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGtpbmQsIHZhbHVlKSB7XG4gIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjtcbiAgYW5PYmplY3QoaXRlcmF0b3IpO1xuICB0cnkge1xuICAgIGlubmVyUmVzdWx0ID0gZ2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG4gICAgaWYgKCFpbm5lclJlc3VsdCkge1xuICAgICAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpbm5lclJlc3VsdCA9IGNhbGwoaW5uZXJSZXN1bHQsIGl0ZXJhdG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbm5lckVycm9yID0gdHJ1ZTtcbiAgICBpbm5lclJlc3VsdCA9IGVycm9yO1xuICB9XG4gIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgaWYgKGlubmVyRXJyb3IpIHRocm93IGlubmVyUmVzdWx0O1xuICBhbk9iamVjdChpbm5lclJlc3VsdCk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCshRU5VTUVSQUJMRV9ORVhULCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgICAgZGVmaW5lQnVpbHRJbihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheS5wcm90b3R5cGUueyB2YWx1ZXMsIEBAaXRlcmF0b3IgfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIGlmICghSVNfUFVSRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbmFtZScsIFZBTFVFUyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBjYWxsKG5hdGl2ZUl0ZXJhdG9yLCB0aGlzKTsgfTtcbiAgICB9XG4gIH1cblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgZGVmaW5lQnVpbHRJbihJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBkZWZpbmVCdWlsdEluKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yLCB7IG5hbWU6IERFRkFVTFQgfSk7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSAhaXNPYmplY3QoSXRlcmF0b3JQcm90b3R5cGUpIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgLy8gRkY0NC0gbGVnYWN5IGl0ZXJhdG9ycyBjYXNlXG4gIHJldHVybiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbCh0ZXN0KSAhPT0gdGVzdDtcbn0pO1xuXG5pZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbmVsc2UgaWYgKElTX1BVUkUpIEl0ZXJhdG9yUHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtQEBpdGVyYXRvclxuaWYgKCFpc0NhbGxhYmxlKEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHtcbiAgZGVmaW5lQnVpbHRJbihJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgTGVuZ3RoT2ZBcnJheUxpa2VgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0b0xlbmd0aChvYmoubGVuZ3RoKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5DT05GSUdVUkFCTEU7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgQ09ORklHVVJBQkxFX0xFTkdUSCA9IERFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdsZW5ndGgnLCB7IHZhbHVlOiA4IH0pLmxlbmd0aCAhPT0gODtcbn0pO1xuXG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbnZhciBtYWtlQnVpbHRJbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChTdHJpbmcobmFtZSkuc2xpY2UoMCwgNykgPT09ICdTeW1ib2woJykge1xuICAgIG5hbWUgPSAnWycgKyBTdHJpbmcobmFtZSkucmVwbGFjZSgvXlN5bWJvbFxcKChbXildKilcXCkvLCAnJDEnKSArICddJztcbiAgfVxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdldHRlcikgbmFtZSA9ICdnZXQgJyArIG5hbWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2V0dGVyKSBuYW1lID0gJ3NldCAnICsgbmFtZTtcbiAgaWYgKCFoYXNPd24odmFsdWUsICduYW1lJykgfHwgKENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FICYmIHZhbHVlLm5hbWUgIT09IG5hbWUpKSB7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCB7IHZhbHVlOiBuYW1lLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgZWxzZSB2YWx1ZS5uYW1lID0gbmFtZTtcbiAgfVxuICBpZiAoQ09ORklHVVJBQkxFX0xFTkdUSCAmJiBvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAnYXJpdHknKSAmJiB2YWx1ZS5sZW5ndGggIT09IG9wdGlvbnMuYXJpdHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ2xlbmd0aCcsIHsgdmFsdWU6IG9wdGlvbnMuYXJpdHkgfSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2NvbnN0cnVjdG9yJykgJiYgb3B0aW9ucy5jb25zdHJ1Y3Rvcikge1xuICAgICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ3Byb3RvdHlwZScsIHsgd3JpdGFibGU6IGZhbHNlIH0pO1xuICAgIC8vIGluIFY4IH4gQ2hyb21lIDUzLCBwcm90b3R5cGVzIG9mIHNvbWUgbWV0aG9kcywgbGlrZSBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AsIGFyZSBub24td3JpdGFibGVcbiAgICB9IGVsc2UgaWYgKHZhbHVlLnByb3RvdHlwZSkgdmFsdWUucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgaWYgKCFoYXNPd24oc3RhdGUsICdzb3VyY2UnKSkge1xuICAgIHN0YXRlLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgPyBuYW1lIDogJycpO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG5cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dGVuZC1uYXRpdmUgLS0gcmVxdWlyZWRcbkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IG1ha2VCdWlsdEluKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gaXNDYWxsYWJsZSh0aGlzKSAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSwgJ3RvU3RyaW5nJyk7XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBNYXRoLnRydW5jYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuY1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtdHJ1bmMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnRydW5jIHx8IGZ1bmN0aW9uIHRydW5jKHgpIHtcbiAgdmFyIG4gPSAreDtcbiAgcmV0dXJuIChuID4gMCA/IGZsb29yIDogY2VpbCkobik7XG59O1xuIiwiLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgLS0gb2xkIElFLCBXU0ggKi9cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnXG4gICAgPyBkb2N1bWVudC5kb21haW4gJiYgYWN0aXZlWERvY3VtZW50XG4gICAgICA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSAvLyBvbGQgSUVcbiAgICAgIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKClcbiAgICA6IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KTsgLy8gV1NIXG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1jcmVhdGUgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllc01vZHVsZS5mKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBFTlVNRVJBQkxFID0gJ2VudW1lcmFibGUnO1xudmFyIENPTkZJR1VSQUJMRSA9ICdjb25maWd1cmFibGUnO1xudmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJztcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKHR5cGVvZiBPID09PSAnZnVuY3Rpb24nICYmIFAgPT09ICdwcm90b3R5cGUnICYmICd2YWx1ZScgaW4gQXR0cmlidXRlcyAmJiBXUklUQUJMRSBpbiBBdHRyaWJ1dGVzICYmICFBdHRyaWJ1dGVzW1dSSVRBQkxFXSkge1xuICAgIHZhciBjdXJyZW50ID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50W1dSSVRBQkxFXSkge1xuICAgICAgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gICAgICBBdHRyaWJ1dGVzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IENPTkZJR1VSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tDT05GSUdVUkFCTEVdIDogY3VycmVudFtDT05GSUdVUkFCTEVdLFxuICAgICAgICBlbnVtZXJhYmxlOiBFTlVNRVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0VOVU1FUkFCTEVdIDogY3VycmVudFtFTlVNRVJBQkxFXSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfSByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xufSA6ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgJFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXNPd24oTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIWNhbGwocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiwgTywgUCksIE9bUF0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmUgKi9cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBhcnJheVNsaWNlKHdpbmRvd05hbWVzKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIGNsYXNzb2YoaXQpID09ICdXaW5kb3cnXG4gICAgPyBnZXRXaW5kb3dOYW1lcyhpdClcbiAgICA6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gJE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyAkT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzT3duKG9iamVjdCwgSUVfUFJPVE8pKSByZXR1cm4gb2JqZWN0W0lFX1BST1RPXTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBpZiAoaXNDYWxsYWJsZShjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiAkT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoe30uaXNQcm90b3R5cGVPZik7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24oTywga2V5KSAmJiBwdXNoKHJlc3VsdCwga2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhc093bihPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWtleXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICEkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpcyhPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQpO1xuICAgIHNldHRlcih0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlcihPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChwcmVmID09PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQoa2V5cywgZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLWVtcHR5LWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwLCByZWdleHAvbm8tbGF6eS1lbmRzIC0tIHRlc3RpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby11c2VsZXNzLXF1YW50aWZpZXIgLS0gdGVzdGluZyAqL1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgVU5TVVBQT1JURURfTkNHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cnKTtcblxudmFyIG5hdGl2ZVJlcGxhY2UgPSBzaGFyZWQoJ25hdGl2ZS1zdHJpbmctcmVwbGFjZScsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBpbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLztcbiAgdmFyIHJlMiA9IC9iKi9nO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMSwgJ2EnKTtcbiAgY2FsbChuYXRpdmVFeGVjLCByZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuQlJPS0VOX0NBUkVUO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRCB8fCBVTlNVUFBPUlRFRF9ZIHx8IFVOU1VQUE9SVEVEX0RPVF9BTEwgfHwgVU5TVVBQT1JURURfTkNHO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cmluZykge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShyZSk7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJhdyA9IHN0YXRlLnJhdztcbiAgICB2YXIgcmVzdWx0LCByZUNvcHksIGxhc3RJbmRleCwgbWF0Y2gsIGksIG9iamVjdCwgZ3JvdXA7XG5cbiAgICBpZiAocmF3KSB7XG4gICAgICByYXcubGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgcmVzdWx0ID0gY2FsbChwYXRjaGVkRXhlYywgcmF3LCBzdHIpO1xuICAgICAgcmUubGFzdEluZGV4ID0gcmF3Lmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGdyb3VwcyA9IHN0YXRlLmdyb3VwcztcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSAmJiByZS5zdGlja3k7XG4gICAgdmFyIGZsYWdzID0gY2FsbChyZWdleHBGbGFncywgcmUpO1xuICAgIHZhciBzb3VyY2UgPSByZS5zb3VyY2U7XG4gICAgdmFyIGNoYXJzQWRkZWQgPSAwO1xuICAgIHZhciBzdHJDb3B5ID0gc3RyO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAneScsICcnKTtcbiAgICAgIGlmIChpbmRleE9mKGZsYWdzLCAnZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBzdHJpbmdTbGljZShzdHIsIHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBjaGFyQXQoc3RyLCByZS5sYXN0SW5kZXggLSAxKSAhPT0gJ1xcbicpKSB7XG4gICAgICAgIHNvdXJjZSA9ICcoPzogJyArIHNvdXJjZSArICcpJztcbiAgICAgICAgc3RyQ29weSA9ICcgJyArIHN0ckNvcHk7XG4gICAgICAgIGNoYXJzQWRkZWQrKztcbiAgICAgIH1cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBzdHIgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14oPzonICsgc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgfVxuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcblxuICAgIG1hdGNoID0gY2FsbChuYXRpdmVFeGVjLCBzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBzdHJpbmdTbGljZShtYXRjaC5pbnB1dCwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gc3RyaW5nU2xpY2UobWF0Y2hbMF0sIGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaC5pbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgICAgcmUubGFzdEluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSByZS5sYXN0SW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbid0IHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIGNhbGwobmF0aXZlUmVwbGFjZSwgbWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXRjaCAmJiBncm91cHMpIHtcbiAgICAgIG1hdGNoLmdyb3VwcyA9IG9iamVjdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbaV07XG4gICAgICAgIG9iamVjdFtncm91cFswXV0gPSBtYXRjaFtncm91cFsxXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5oYXNJbmRpY2VzKSByZXN1bHQgKz0gJ2QnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC51bmljb2RlU2V0cykgcmVzdWx0ICs9ICd2JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuLy8gVUMgQnJvd3NlciBidWdcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMDA4XG52YXIgTUlTU0VEX1NUSUNLWSA9IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISRSZWdFeHAoJ2EnLCAneScpLnN0aWNreTtcbn0pO1xuXG52YXIgQlJPS0VOX0NBUkVUID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSAkUmVnRXhwKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQlJPS0VOX0NBUkVUOiBCUk9LRU5fQ0FSRVQsXG4gIE1JU1NFRF9TVElDS1k6IE1JU1NFRF9TVElDS1ksXG4gIFVOU1VQUE9SVEVEX1k6IFVOU1VQUE9SVEVEX1lcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnLicsICdzJykgLT4gLy4vcyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcuJywgJ3MnKTtcbiAgcmV0dXJuICEocmUuZG90QWxsICYmIHJlLmV4ZWMoJ1xcbicpICYmIHJlLmZsYWdzID09PSAncycpO1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcoPzxhPmIpJywgJ2cnKTtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2InKS5ncm91cHMuYSAhPT0gJ2InIHx8XG4gICAgJ2InLnJlcGxhY2UocmUsICckPGE+YycpICE9PSAnYmMnO1xufSk7XG4iLCJ2YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIFRBRywgU1RBVElDKSB7XG4gIGlmICh0YXJnZXQgJiYgIVNUQVRJQykgdGFyZ2V0ID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgaWYgKHRhcmdldCAmJiAhaGFzT3duKHRhcmdldCwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMjYuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDIyIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMjYuMS9MSUNFTlNFJyxcbiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnXG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyT3JJbmZpbml0eShwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBjaGFyQXQoUywgcG9zaXRpb24pXG4gICAgICAgICAgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBzdHJpbmdTbGljZShTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKVxuICAgICAgICAgIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvVmVyc2lvblxcLzEwKD86XFwuXFxkKyl7MSwyfSg/OiBbXFx3Li9dKyk/KD86IE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIHJlcGVhdCA9IHVuY3VycnlUaGlzKCRyZXBlYXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgcGFkU3RhcnQsIHBhZEVuZCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0VORCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiB0b1N0cmluZyhmaWxsU3RyaW5nKTtcbiAgICB2YXIgZmlsbExlbiwgc3RyaW5nRmlsbGVyO1xuICAgIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICAgIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gICAgc3RyaW5nRmlsbGVyID0gcmVwZWF0KGZpbGxTdHIsIGNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdTbGljZShzdHJpbmdGaWxsZXIsIDAsIGZpbGxMZW4pO1xuICAgIHJldHVybiBJU19FTkQgPyBTICsgc3RyaW5nRmlsbGVyIDogc3RyaW5nRmlsbGVyICsgUztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyT3JJbmZpbml0eShjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyAkUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgbHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGBnZXQtb3duLXByb3BlcnR5LXN5bWJvbHNgIHBvbHlmaWxsIHN5bWJvbHMgY29udmVydGVkIHRvIG9iamVjdCBhcmUgbm90IFN5bWJvbCBpbnN0YW5jZXNcbiAgcmV0dXJuICFTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fFxuICAgIC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG4gICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xufSk7XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIFN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpO1xuICB2YXIgU3ltYm9sUHJvdG90eXBlID0gU3ltYm9sICYmIFN5bWJvbC5wcm90b3R5cGU7XG4gIHZhciB2YWx1ZU9mID0gU3ltYm9sUHJvdG90eXBlICYmIFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mO1xuICB2YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4gIGlmIChTeW1ib2xQcm90b3R5cGUgJiYgIVN5bWJvbFByb3RvdHlwZVtUT19QUklNSVRJVkVdKSB7XG4gICAgLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciAubGVuZ3RoXG4gICAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAgIHJldHVybiBjYWxsKHZhbHVlT2YsIHRoaXMpO1xuICAgIH0sIHsgYXJpdHk6IDEgfSk7XG4gIH1cbn07XG4iLCJ2YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSBzYWZlICovXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0wgJiYgISFTeW1ib2xbJ2ZvciddICYmICEhU3ltYm9sLmtleUZvcjtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxuLy8gYHRoaXNOdW1iZXJWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRoaXNudW1iZXJ2YWx1ZVxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcygxLjAudmFsdWVPZik7XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIHRydW5jID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtdHJ1bmMnKTtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbnVtYmVyID0gK2FyZ3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IHRydW5jKG51bWJlcik7XG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlck9ySW5maW5pdHkoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbiAgfVxuICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBwcmVmKTtcbn07XG4iLCJ2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG5cbi8vIGBUb1Byb3BlcnR5S2V5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnc3RyaW5nJyk7XG4gIHJldHVybiBpc1N5bWJvbChrZXkpID8ga2V5IDoga2V5ICsgJyc7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoY2xhc3NvZihhcmd1bWVudCkgPT09ICdTeW1ib2wnKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgJFN0cmluZyA9IFN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJFN0cmluZyhhcmd1bWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmcoKytpZCArIHBvc3RmaXgsIDM2KTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ3Byb3RvdHlwZScsIHtcbiAgICB2YWx1ZTogNDIsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pLnByb3RvdHlwZSAhPSA0Mjtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNDYWxsYWJsZShXZWFrTWFwKSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoU3RyaW5nKFdlYWtNYXApKTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzT3duKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5leHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN5bWJvbEZvciA9IFN5bWJvbCAmJiBTeW1ib2xbJ2ZvciddO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhc093bihXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpIHx8ICEoTkFUSVZFX1NZTUJPTCB8fCB0eXBlb2YgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID09ICdzdHJpbmcnKSkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICdTeW1ib2wuJyArIG5hbWU7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzT3duKFN5bWJvbCwgbmFtZSkpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICB9IGVsc2UgaWYgKFVTRV9TWU1CT0xfQVNfVUlEICYmIHN5bWJvbEZvcikge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gc3ltYm9sRm9yKGRlc2NyaXB0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICB9XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXInKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0XG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAaXNDb25jYXRTcHJlYWRhYmxlIGFuZCBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBhcml0eTogMSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoRSk7XG4gICAgICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihuICsgbGVuKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyKG4gKyAxKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1pbmRleG9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbmF0aXZlSW5kZXhPZiA9IHVuY3VycnlUaGlzKFtdLmluZGV4T2YpO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gbmF0aXZlSW5kZXhPZihbMV0sIDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2luZGV4T2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgdmFyIGZyb21JbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IG5hdGl2ZUluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4KSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG4vLyBgQXJyYXkuaXNBcnJheWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmlzYXJyYXlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUgfSwge1xuICBpc0FycmF5OiBpc0FycmF5XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lJyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGluZGV4LCBmYWxzZSk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh0YXJnZXRbaW5kZXhdLCBmYWxzZSk7XG4gIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGZhbHNlKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxudmFyIHZhbHVlcyA9IEl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vLyBWOCB+IENocm9tZSA0NS0gYnVnXG5pZiAoIUlTX1BVUkUgJiYgREVTQ1JJUFRPUlMgJiYgdmFsdWVzLm5hbWUgIT09ICd2YWx1ZXMnKSB0cnkge1xuICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsICduYW1lJywgeyB2YWx1ZTogJ3ZhbHVlcycgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciBuYXRpdmVTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmIChpc0NvbnN0cnVjdG9yKENvbnN0cnVjdG9yKSAmJiAoQ29uc3RydWN0b3IgPT09ICRBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gJEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/ICRBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkYXRlVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghaGFzT3duKERhdGVQcm90b3R5cGUsIFRPX1BSSU1JVElWRSkpIHtcbiAgZGVmaW5lQnVpbHRJbihEYXRlUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGRhdGVUb1ByaW1pdGl2ZSk7XG59XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGVU5DVElPTl9OQU1FX0VYSVNUUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuRVhJU1RTO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nKTtcbnZhciBuYW1lUkUgPSAvZnVuY3Rpb25cXGIoPzpcXHN8XFwvXFwqW1xcU1xcc10qP1xcKlxcL3xcXC9cXC9bXlxcblxccl0qW1xcblxccl0rKSooW15cXHMoL10qKS87XG52YXIgcmVnRXhwRXhlYyA9IHVuY3VycnlUaGlzKG5hbWVSRS5leGVjKTtcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICFGVU5DVElPTl9OQU1FX0VYSVNUUykge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZWdFeHBFeGVjKG5hbWVSRSwgZnVuY3Rpb25Ub1N0cmluZyh0aGlzKSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG52YXIgdGVzdGVyID0gL1tcXHVEODAwLVxcdURGRkZdL2c7XG52YXIgbG93ID0gL15bXFx1RDgwMC1cXHVEQkZGXSQvO1xudmFyIGhpID0gL15bXFx1REMwMC1cXHVERkZGXSQvO1xuXG52YXIgV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJykoKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xufSk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXdlbGwtZm9ybWVkLXN0cmluZ2lmeVxudmFyIElMTF9GT1JNRURfVU5JQ09ERSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRzdHJpbmdpZnkoJ1xcdURGMDZcXHVEODM0JykgIT09ICdcIlxcXFx1ZGYwNlxcXFx1ZDgzNFwiJ1xuICAgIHx8ICRzdHJpbmdpZnkoJ1xcdURFQUQnKSAhPT0gJ1wiXFxcXHVkZWFkXCInO1xufSk7XG5cbnZhciBzdHJpbmdpZnlXaXRoU3ltYm9sc0ZpeCA9IGZ1bmN0aW9uIChpdCwgcmVwbGFjZXIpIHtcbiAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gIHZhciAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKGlzQ2FsbGFibGUoJHJlcGxhY2VyKSkgdmFsdWUgPSBjYWxsKCRyZXBsYWNlciwgdGhpcywga2V5LCB2YWx1ZSk7XG4gICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgfTtcbiAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICByZXR1cm4gYXBwbHkoJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG59O1xuXG52YXIgZml4SWxsRm9ybWVkID0gZnVuY3Rpb24gKG1hdGNoLCBvZmZzZXQsIHN0cmluZykge1xuICB2YXIgcHJldiA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCAtIDEpO1xuICB2YXIgbmV4dCA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCArIDEpO1xuICBpZiAoKGV4ZWMobG93LCBtYXRjaCkgJiYgIWV4ZWMoaGksIG5leHQpKSB8fCAoZXhlYyhoaSwgbWF0Y2gpICYmICFleGVjKGxvdywgcHJldikpKSB7XG4gICAgcmV0dXJuICdcXFxcdScgKyBudW1iZXJUb1N0cmluZyhjaGFyQ29kZUF0KG1hdGNoLCAwKSwgMTYpO1xuICB9IHJldHVybiBtYXRjaDtcbn07XG5cbmlmICgkc3RyaW5naWZ5KSB7XG4gIC8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBhcml0eTogMywgZm9yY2VkOiBXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gfHwgSUxMX0ZPUk1FRF9VTklDT0RFIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMpO1xuICAgICAgdmFyIHJlc3VsdCA9IGFwcGx5KFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiA/IHN0cmluZ2lmeVdpdGhTeW1ib2xzRml4IDogJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG4gICAgICByZXR1cm4gSUxMX0ZPUk1FRF9VTklDT0RFICYmIHR5cGVvZiByZXN1bHQgPT0gJ3N0cmluZycgPyByZXBsYWNlKHJlc3VsdCwgdGVzdGVyLCBmaXhJbGxGb3JtZWQpIDogcmVzdWx0O1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcblxudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyIE5hdGl2ZU51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIE51bWJlclByb3RvdHlwZSA9IE5hdGl2ZU51bWJlci5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBhcnJheVNsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcblxuLy8gYFRvTnVtZXJpY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbnVtZXJpY1xudmFyIHRvTnVtZXJpYyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJpbVZhbHVlID0gdG9QcmltaXRpdmUodmFsdWUsICdudW1iZXInKTtcbiAgcmV0dXJuIHR5cGVvZiBwcmltVmFsdWUgPT0gJ2JpZ2ludCcgPyBwcmltVmFsdWUgOiB0b051bWJlcihwcmltVmFsdWUpO1xufTtcblxuLy8gYFRvTnVtYmVyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1iZXJcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ251bWJlcicpO1xuICB2YXIgZmlyc3QsIHRoaXJkLCByYWRpeCwgbWF4Q29kZSwgZGlnaXRzLCBsZW5ndGgsIGluZGV4LCBjb2RlO1xuICBpZiAoaXNTeW1ib2woaXQpKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgbnVtYmVyJyk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gdHJpbShpdCk7XG4gICAgZmlyc3QgPSBjaGFyQ29kZUF0KGl0LCAwKTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBjaGFyQ29kZUF0KGl0LCAyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGNoYXJDb2RlQXQoaXQsIDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBkaWdpdHMgPSBhcnJheVNsaWNlKGl0LCAyKTtcbiAgICAgIGxlbmd0aCA9IGRpZ2l0cy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29kZSA9IGNoYXJDb2RlQXQoZGlnaXRzLCBpbmRleCk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG4vLyBgTnVtYmVyYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXItY29uc3RydWN0b3JcbmlmIChpc0ZvcmNlZChOVU1CRVIsICFOYXRpdmVOdW1iZXIoJyAwbzEnKSB8fCAhTmF0aXZlTnVtYmVyKCcwYjEnKSB8fCBOYXRpdmVOdW1iZXIoJysweDEnKSkpIHtcbiAgdmFyIE51bWJlcldyYXBwZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IE5hdGl2ZU51bWJlcih0b051bWVyaWModmFsdWUpKTtcbiAgICB2YXIgZHVtbXkgPSB0aGlzO1xuICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgIHJldHVybiBpc1Byb3RvdHlwZU9mKE51bWJlclByb3RvdHlwZSwgZHVtbXkpICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgdGhpc051bWJlclZhbHVlKGR1bW15KTsgfSlcbiAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQoT2JqZWN0KG4pLCBkdW1teSwgTnVtYmVyV3JhcHBlcikgOiBuO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gREVTQ1JJUFRPUlMgPyBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZU51bWJlcikgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzIwMTUgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzIwMTUgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixNQVhfU0FGRV9JTlRFR0VSLE1JTl9TQUZFX0lOVEVHRVIsaXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIscGFyc2VGbG9hdCxwYXJzZUludCwnICtcbiAgICAvLyBFU05leHRcbiAgICAnZnJvbVN0cmluZyxyYW5nZSdcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXNPd24oTmF0aXZlTnVtYmVyLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzT3duKE51bWJlcldyYXBwZXIsIGtleSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KE51bWJlcldyYXBwZXIsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE5hdGl2ZU51bWJlciwga2V5KSk7XG4gICAgfVxuICB9XG4gIE51bWJlcldyYXBwZXIucHJvdG90eXBlID0gTnVtYmVyUHJvdG90eXBlO1xuICBOdW1iZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSBOdW1iZXJXcmFwcGVyO1xuICBkZWZpbmVCdWlsdEluKGdsb2JhbCwgTlVNQkVSLCBOdW1iZXJXcmFwcGVyLCB7IGNvbnN0cnVjdG9yOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBuYXRpdmVUb0ZpeGVkID0gdW5jdXJyeVRoaXMoMS4wLnRvRml4ZWQpO1xuXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKGRhdGEsIG4sIGMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2luZGV4IDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xuXG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKGRhdGEsIG4pIHtcbiAgdmFyIGluZGV4ID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcblxudmFyIGRhdGFUb1N0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBpbmRleCA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaW5kZXggPT09IDAgfHwgZGF0YVtpbmRleF0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gJFN0cmluZyhkYXRhW2luZGV4XSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdCgnMCcsIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVUb0ZpeGVkKDAuMDAwMDgsIDMpICE9PSAnMC4wMDAnIHx8XG4gICAgbmF0aXZlVG9GaXhlZCgwLjksIDApICE9PSAnMScgfHxcbiAgICBuYXRpdmVUb0ZpeGVkKDEuMjU1LCAyKSAhPT0gJzEuMjUnIHx8XG4gICAgbmF0aXZlVG9GaXhlZCgxMDAwMDAwMDAwMDAwMDAwMTI4LjAsIDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCc7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICBuYXRpdmVUb0ZpeGVkKHt9KTtcbn0pO1xuXG4vLyBgTnVtYmVyLnByb3RvdHlwZS50b0ZpeGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b2ZpeGVkXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciBudW1iZXIgPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgdmFyIGZyYWN0RGlnaXRzID0gdG9JbnRlZ2VyT3JJbmZpbml0eShmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgdmFyIHNpZ24gPSAnJztcbiAgICB2YXIgcmVzdWx0ID0gJzAnO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuXG4gICAgLy8gVE9ETzogRVMyMDE4IGluY3JlYXNlZCB0aGUgbWF4aW11bSBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRvIDEwMCwgbmVlZCB0byBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgIGlmIChmcmFjdERpZ2l0cyA8IDAgfHwgZnJhY3REaWdpdHMgPiAyMCkgdGhyb3cgJFJhbmdlRXJyb3IoJ0luY29ycmVjdCBmcmFjdGlvbiBkaWdpdHMnKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChudW1iZXIgIT0gbnVtYmVyKSByZXR1cm4gJ05hTic7XG4gICAgaWYgKG51bWJlciA8PSAtMWUyMSB8fCBudW1iZXIgPj0gMWUyMSkgcmV0dXJuICRTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KGRhdGEsIDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDEsIDEpO1xuICAgICAgICBkaXZpZGUoZGF0YSwgMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDAsIHopO1xuICAgICAgICBtdWx0aXBseShkYXRhLCAxIDw8IC1lLCAwKTtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVRvU3RyaW5nKGRhdGEpICsgcmVwZWF0KCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQoJzAnLCBmcmFjdERpZ2l0cyAtIGspICsgcmVzdWx0XG4gICAgICAgIDogc3RyaW5nU2xpY2UocmVzdWx0LCAwLCBrIC0gZnJhY3REaWdpdHMpICsgJy4nICsgc3RyaW5nU2xpY2UocmVzdWx0LCBrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpLmY7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgIT09IGRlZmluZVByb3BlcnRpZXMsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09IGRlZmluZVByb3BlcnR5LCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHlcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcigxKTsgfSk7XG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IEZBSUxTX09OX1BSSU1JVElWRVM7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0luZGV4ZWRPYmplY3QoaXQpLCBrZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbi8vIFY4IH4gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xudmFyIEZPUkNFRCA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eXN5bWJvbHNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgdmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5U3ltYm9scyA/ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHModG9PYmplY3QoaXQpKSA6IFtdO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlS2V5cygxKTsgfSk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAga2V5czogZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICBkZWZpbmVCdWlsdEluKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZXhlY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUuZXhlY1xuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHRvU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChwb2ludCwgZmFsc2UpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFkU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLnN0YXJ0O1xudmFyIFdFQktJVF9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZC13ZWJraXQtYnVnJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFdFQktJVF9CVUcgfSwge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkU3RhcnQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xudmFyIGRlZmluZVN5bWJvbFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG5cbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sICYmICRTeW1ib2xbUFJPVE9UWVBFXTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoU3ltYm9sUHJvdG90eXBlKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhc093bihBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzT3duKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXNPd24oTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGNhbGwoJHByb3BlcnR5SXNFbnVtZXJhYmxlLCBwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1Byb3BlcnR5S2V5KFYpO1xuICB2YXIgZW51bWVyYWJsZSA9IGNhbGwobmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUsIHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhc093bihBbGxTeW1ib2xzLCBQKSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXNPd24odGhpcywgUCkgfHwgIWhhc093bihBbGxTeW1ib2xzLCBQKSB8fCBoYXNPd24odGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF1cbiAgICA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzT3duKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpKSBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIChPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzT3duKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHB1c2gocmVzdWx0LCBBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmIChpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcykpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAkdG9TdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBjYWxsKHNldHRlciwgT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhc093bih0aGlzLCBISURERU4pICYmIGhhc093bih0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2xbUFJPVE9UWVBFXTtcblxuICBkZWZpbmVCdWlsdEluKFN5bWJvbFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICBkZWZpbmVCdWlsdEluKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydGllcztcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICBkZWZpbmVCdWlsdEluKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXNcbn0pO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUoKTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG5cbmlmIChERVNDUklQVE9SUyAmJiBpc0NhbGxhYmxlKE5hdGl2ZVN5bWJvbCkgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBTeW1ib2xQcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSBpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcylcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gU3ltYm9sUHJvdG90eXBlO1xuICBTeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBOQVRJVkVfU1lNQk9MID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHRoaXNTeW1ib2xWYWx1ZSA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mKTtcbiAgdmFyIHN5bWJvbERlc2NyaXB0aXZlU3RyaW5nID0gdW5jdXJyeVRoaXMoU3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIHZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG4gIHZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuICBkZWZpbmVQcm9wZXJ0eShTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSB0aGlzU3ltYm9sVmFsdWUodGhpcyk7XG4gICAgICBpZiAoaGFzT3duKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbERlc2NyaXB0aXZlU3RyaW5nKHN5bWJvbCk7XG4gICAgICB2YXIgZGVzYyA9IE5BVElWRV9TWU1CT0wgPyBzdHJpbmdTbGljZShzdHJpbmcsIDcsIC0xKSA6IHJlcGxhY2Uoc3RyaW5nLCByZWdleHAsICckMScpO1xuICAgICAgcmV0dXJuIGRlc2MgPT09ICcnID8gdW5kZWZpbmVkIDogZGVzYztcbiAgICB9XG4gIH0pO1xuXG4gICQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uJyk7XG5cbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xuXG4vLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiQoeyB0YXJnZXQ6ICdTeW1ib2wnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIH0sIHtcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzT3duKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9XG59KTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBzcGxpdCB0byBtb2R1bGVzIGxpc3RlZCBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmZvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wua2V5LWZvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uJyk7XG5cbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG5cbi8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuJCh7IHRhcmdldDogJ1N5bWJvbCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0xfUkVHSVNUUlkgfSwge1xuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhzeW0pICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzT3duKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH1cbn0pO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcbnZhciBkZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtZGVmaW5lLXRvLXByaW1pdGl2ZScpO1xuXG4vLyBgU3ltYm9sLnRvUHJpbWl0aXZlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9wcmltaXRpdmVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmRlZmluZVN5bWJvbFRvUHJpbWl0aXZlKCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSB7XG4gICAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKSB7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKTtcbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSwgJ0RPTVRva2VuTGlzdCcpO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiOnJvb3R7LS1zd2lwZXItbmF2aWdhdGlvbi1zaXplOjQ0cHh9LnN3aXBlci1idXR0b24tbmV4dCwuc3dpcGVyLWJ1dHRvbi1wcmV2e3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7d2lkdGg6Y2FsYyh2YXIoLS1zd2lwZXItbmF2aWdhdGlvbi1zaXplKS80NCoyNyk7aGVpZ2h0OnZhcigtLXN3aXBlci1uYXZpZ2F0aW9uLXNpemUpO21hcmdpbi10b3A6Y2FsYygwcHggLSB2YXIoLS1zd2lwZXItbmF2aWdhdGlvbi1zaXplKS8yKTt6LWluZGV4OjEwO2N1cnNvcjpwb2ludGVyO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtjb2xvcjp2YXIoLS1zd2lwZXItbmF2aWdhdGlvbi1jb2xvciwgdmFyKC0tc3dpcGVyLXRoZW1lLWNvbG9yKSl9LnN3aXBlci1idXR0b24tbmV4dC5zd2lwZXItYnV0dG9uLWRpc2FibGVkLC5zd2lwZXItYnV0dG9uLXByZXYuc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZHtvcGFjaXR5Oi4zNTtjdXJzb3I6YXV0bztwb2ludGVyLWV2ZW50czpub25lfS5zd2lwZXItYnV0dG9uLW5leHQuc3dpcGVyLWJ1dHRvbi1oaWRkZW4sLnN3aXBlci1idXR0b24tcHJldi5zd2lwZXItYnV0dG9uLWhpZGRlbntvcGFjaXR5OjA7Y3Vyc29yOmF1dG87cG9pbnRlci1ldmVudHM6bm9uZX0uc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQgLnN3aXBlci1idXR0b24tbmV4dCwuc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQgLnN3aXBlci1idXR0b24tcHJldntkaXNwbGF5Om5vbmUgIWltcG9ydGFudH0uc3dpcGVyLWJ1dHRvbi1uZXh0OmFmdGVyLC5zd2lwZXItYnV0dG9uLXByZXY6YWZ0ZXJ7Zm9udC1mYW1pbHk6c3dpcGVyLWljb25zO2ZvbnQtc2l6ZTp2YXIoLS1zd2lwZXItbmF2aWdhdGlvbi1zaXplKTt0ZXh0LXRyYW5zZm9ybTpub25lICFpbXBvcnRhbnQ7bGV0dGVyLXNwYWNpbmc6MDtmb250LXZhcmlhbnQ6aW5pdGlhbDtsaW5lLWhlaWdodDoxfS5zd2lwZXItYnV0dG9uLXByZXYsLnN3aXBlci1ydGwgLnN3aXBlci1idXR0b24tbmV4dHtsZWZ0OjEwcHg7cmlnaHQ6YXV0b30uc3dpcGVyLWJ1dHRvbi1wcmV2OmFmdGVyLC5zd2lwZXItcnRsIC5zd2lwZXItYnV0dG9uLW5leHQ6YWZ0ZXJ7Y29udGVudDpcXFwicHJldlxcXCJ9LnN3aXBlci1idXR0b24tbmV4dCwuc3dpcGVyLXJ0bCAuc3dpcGVyLWJ1dHRvbi1wcmV2e3JpZ2h0OjEwcHg7bGVmdDphdXRvfS5zd2lwZXItYnV0dG9uLW5leHQ6YWZ0ZXIsLnN3aXBlci1ydGwgLnN3aXBlci1idXR0b24tcHJldjphZnRlcntjb250ZW50OlxcXCJuZXh0XFxcIn0uc3dpcGVyLWJ1dHRvbi1sb2Nre2Rpc3BsYXk6bm9uZX1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLm1pbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsTUFBQSw2QkFBQSxDQUFBLHdDQUFBLGlCQUFBLENBQUEsT0FBQSxDQUFBLCtDQUFBLENBQUEsb0NBQUEsQ0FBQSxzREFBQSxDQUFBLFVBQUEsQ0FBQSxjQUFBLENBQUEsWUFBQSxDQUFBLGtCQUFBLENBQUEsc0JBQUEsQ0FBQSwrREFBQSxDQUFBLHNGQUFBLFdBQUEsQ0FBQSxXQUFBLENBQUEsbUJBQUEsQ0FBQSxrRkFBQSxTQUFBLENBQUEsV0FBQSxDQUFBLG1CQUFBLENBQUEsZ0dBQUEsdUJBQUEsQ0FBQSxvREFBQSx3QkFBQSxDQUFBLHVDQUFBLENBQUEsOEJBQUEsQ0FBQSxnQkFBQSxDQUFBLG9CQUFBLENBQUEsYUFBQSxDQUFBLG9EQUFBLFNBQUEsQ0FBQSxVQUFBLENBQUEsZ0VBQUEsY0FBQSxDQUFBLG9EQUFBLFVBQUEsQ0FBQSxTQUFBLENBQUEsZ0VBQUEsY0FBQSxDQUFBLG9CQUFBLFlBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3R7LS1zd2lwZXItbmF2aWdhdGlvbi1zaXplOjQ0cHh9LnN3aXBlci1idXR0b24tbmV4dCwuc3dpcGVyLWJ1dHRvbi1wcmV2e3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7d2lkdGg6Y2FsYyh2YXIoLS1zd2lwZXItbmF2aWdhdGlvbi1zaXplKS8gNDQgKiAyNyk7aGVpZ2h0OnZhcigtLXN3aXBlci1uYXZpZ2F0aW9uLXNpemUpO21hcmdpbi10b3A6Y2FsYygwcHggLSAodmFyKC0tc3dpcGVyLW5hdmlnYXRpb24tc2l6ZSkvIDIpKTt6LWluZGV4OjEwO2N1cnNvcjpwb2ludGVyO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtjb2xvcjp2YXIoLS1zd2lwZXItbmF2aWdhdGlvbi1jb2xvcix2YXIoLS1zd2lwZXItdGhlbWUtY29sb3IpKX0uc3dpcGVyLWJ1dHRvbi1uZXh0LnN3aXBlci1idXR0b24tZGlzYWJsZWQsLnN3aXBlci1idXR0b24tcHJldi5zd2lwZXItYnV0dG9uLWRpc2FibGVke29wYWNpdHk6LjM1O2N1cnNvcjphdXRvO3BvaW50ZXItZXZlbnRzOm5vbmV9LnN3aXBlci1idXR0b24tbmV4dC5zd2lwZXItYnV0dG9uLWhpZGRlbiwuc3dpcGVyLWJ1dHRvbi1wcmV2LnN3aXBlci1idXR0b24taGlkZGVue29wYWNpdHk6MDtjdXJzb3I6YXV0bztwb2ludGVyLWV2ZW50czpub25lfS5zd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCAuc3dpcGVyLWJ1dHRvbi1uZXh0LC5zd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCAuc3dpcGVyLWJ1dHRvbi1wcmV2e2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LnN3aXBlci1idXR0b24tbmV4dDphZnRlciwuc3dpcGVyLWJ1dHRvbi1wcmV2OmFmdGVye2ZvbnQtZmFtaWx5OnN3aXBlci1pY29ucztmb250LXNpemU6dmFyKC0tc3dpcGVyLW5hdmlnYXRpb24tc2l6ZSk7dGV4dC10cmFuc2Zvcm06bm9uZSFpbXBvcnRhbnQ7bGV0dGVyLXNwYWNpbmc6MDtmb250LXZhcmlhbnQ6aW5pdGlhbDtsaW5lLWhlaWdodDoxfS5zd2lwZXItYnV0dG9uLXByZXYsLnN3aXBlci1ydGwgLnN3aXBlci1idXR0b24tbmV4dHtsZWZ0OjEwcHg7cmlnaHQ6YXV0b30uc3dpcGVyLWJ1dHRvbi1wcmV2OmFmdGVyLC5zd2lwZXItcnRsIC5zd2lwZXItYnV0dG9uLW5leHQ6YWZ0ZXJ7Y29udGVudDoncHJldid9LnN3aXBlci1idXR0b24tbmV4dCwuc3dpcGVyLXJ0bCAuc3dpcGVyLWJ1dHRvbi1wcmV2e3JpZ2h0OjEwcHg7bGVmdDphdXRvfS5zd2lwZXItYnV0dG9uLW5leHQ6YWZ0ZXIsLnN3aXBlci1ydGwgLnN3aXBlci1idXR0b24tcHJldjphZnRlcntjb250ZW50OiduZXh0J30uc3dpcGVyLWJ1dHRvbi1sb2Nre2Rpc3BsYXk6bm9uZX1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnN3aXBlci1wYWdpbmF0aW9ue3Bvc2l0aW9uOmFic29sdXRlO3RleHQtYWxpZ246Y2VudGVyO3RyYW5zaXRpb246LjNzIG9wYWNpdHk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApO3otaW5kZXg6MTB9LnN3aXBlci1wYWdpbmF0aW9uLnN3aXBlci1wYWdpbmF0aW9uLWhpZGRlbntvcGFjaXR5OjB9LnN3aXBlci1wYWdpbmF0aW9uLWRpc2FibGVkPi5zd2lwZXItcGFnaW5hdGlvbiwuc3dpcGVyLXBhZ2luYXRpb24uc3dpcGVyLXBhZ2luYXRpb24tZGlzYWJsZWR7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9LnN3aXBlci1ob3Jpem9udGFsPi5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLnN3aXBlci1wYWdpbmF0aW9uLWhvcml6b250YWwsLnN3aXBlci1wYWdpbmF0aW9uLWN1c3RvbSwuc3dpcGVyLXBhZ2luYXRpb24tZnJhY3Rpb257Ym90dG9tOjEwcHg7bGVmdDowO3dpZHRoOjEwMCV9LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pY3tvdmVyZmxvdzpoaWRkZW47Zm9udC1zaXplOjB9LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pYyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0ey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMzMpO3RyYW5zZm9ybTpzY2FsZSgwLjMzKTtwb3NpdGlvbjpyZWxhdGl2ZX0uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlLW1haW57LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfS5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUtcHJldnstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjY2KTt0cmFuc2Zvcm06c2NhbGUoMC42Nil9LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pYyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZS1wcmV2LXByZXZ7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4zMyk7dHJhbnNmb3JtOnNjYWxlKDAuMzMpfS5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUtbmV4dHstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjY2KTt0cmFuc2Zvcm06c2NhbGUoMC42Nil9LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pYyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZS1uZXh0LW5leHR7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4zMyk7dHJhbnNmb3JtOnNjYWxlKDAuMzMpfS5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXR7d2lkdGg6dmFyKC0tc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LXdpZHRoLCB2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtc2l6ZSwgOHB4KSk7aGVpZ2h0OnZhcigtLXN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1oZWlnaHQsIHZhcigtLXN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1zaXplLCA4cHgpKTtkaXNwbGF5OmlubGluZS1ibG9jaztib3JkZXItcmFkaXVzOjUwJTtiYWNrZ3JvdW5kOnZhcigtLXN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1pbmFjdGl2ZS1jb2xvciwgIzAwMCk7b3BhY2l0eTp2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtaW5hY3RpdmUtb3BhY2l0eSwgMC4yKX1idXR0b24uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0e2JvcmRlcjpub25lO21hcmdpbjowO3BhZGRpbmc6MDtib3gtc2hhZG93Om5vbmU7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lfS5zd2lwZXItcGFnaW5hdGlvbi1jbGlja2FibGUgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHtjdXJzb3I6cG9pbnRlcn0uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0Om9ubHktY2hpbGR7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmV7b3BhY2l0eTp2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtb3BhY2l0eSwgMSk7YmFja2dyb3VuZDp2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1jb2xvciwgdmFyKC0tc3dpcGVyLXRoZW1lLWNvbG9yKSl9LnN3aXBlci1wYWdpbmF0aW9uLXZlcnRpY2FsLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMsLnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0c3tyaWdodDoxMHB4O3RvcDo1MCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMHB4LCAtNTAlLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMHB4LCAtNTAlLCAwKX0uc3dpcGVyLXBhZ2luYXRpb24tdmVydGljYWwuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LC5zd2lwZXItdmVydGljYWw+LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHttYXJnaW46dmFyKC0tc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LXZlcnRpY2FsLWdhcCwgNnB4KSAwO2Rpc3BsYXk6YmxvY2t9LnN3aXBlci1wYWdpbmF0aW9uLXZlcnRpY2FsLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljLC5zd2lwZXItdmVydGljYWw+LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWlje3RvcDo1MCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKTt3aWR0aDo4cHh9LnN3aXBlci1wYWdpbmF0aW9uLXZlcnRpY2FsLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQsLnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHtkaXNwbGF5OmlubGluZS1ibG9jazt0cmFuc2l0aW9uOi4ycyB0cmFuc2Zvcm0sLjJzIHRvcH0uc3dpcGVyLWhvcml6b250YWw+LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCwuc3dpcGVyLXBhZ2luYXRpb24taG9yaXpvbnRhbC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXR7bWFyZ2luOjAgdmFyKC0tc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWhvcml6b250YWwtZ2FwLCA0cHgpfS5zd2lwZXItaG9yaXpvbnRhbD4uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWMsLnN3aXBlci1wYWdpbmF0aW9uLWhvcml6b250YWwuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWN7bGVmdDo1MCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKTt3aGl0ZS1zcGFjZTpub3dyYXB9LnN3aXBlci1ob3Jpem9udGFsPi5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pYyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LC5zd2lwZXItcGFnaW5hdGlvbi1ob3Jpem9udGFsLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXR7dHJhbnNpdGlvbjouMnMgdHJhbnNmb3JtLC4ycyBsZWZ0fS5zd2lwZXItaG9yaXpvbnRhbC5zd2lwZXItcnRsPi5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHt0cmFuc2l0aW9uOi4ycyB0cmFuc2Zvcm0sLjJzIHJpZ2h0fS5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2JhcntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjI1KTtwb3NpdGlvbjphYnNvbHV0ZX0uc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXIgLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLWZpbGx7YmFja2dyb3VuZDp2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1jb2xvciwgdmFyKC0tc3dpcGVyLXRoZW1lLWNvbG9yKSk7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMCk7dHJhbnNmb3JtOnNjYWxlKDApOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IHRvcDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgdG9wfS5zd2lwZXItcnRsIC5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2JhciAuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wfS5zd2lwZXItaG9yaXpvbnRhbD4uc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXIsLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLnN3aXBlci1wYWdpbmF0aW9uLWhvcml6b250YWwsLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLnN3aXBlci1wYWdpbmF0aW9uLXZlcnRpY2FsLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLW9wcG9zaXRlLC5zd2lwZXItdmVydGljYWw+LnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLW9wcG9zaXRle3dpZHRoOjEwMCU7aGVpZ2h0OjRweDtsZWZ0OjA7dG9wOjB9LnN3aXBlci1ob3Jpem9udGFsPi5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1vcHBvc2l0ZSwuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXIuc3dpcGVyLXBhZ2luYXRpb24taG9yaXpvbnRhbC5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1vcHBvc2l0ZSwuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXIuc3dpcGVyLXBhZ2luYXRpb24tdmVydGljYWwsLnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXJ7d2lkdGg6NHB4O2hlaWdodDoxMDAlO2xlZnQ6MDt0b3A6MH0uc3dpcGVyLXBhZ2luYXRpb24tbG9ja3tkaXNwbGF5Om5vbmV9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5taW4uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLG1CQUFBLGlCQUFBLENBQUEsaUJBQUEsQ0FBQSxzQkFBQSxDQUFBLHNDQUFBLENBQUEsOEJBQUEsQ0FBQSxVQUFBLENBQUEsNENBQUEsU0FBQSxDQUFBLDZGQUFBLHVCQUFBLENBQUEsNEpBQUEsV0FBQSxDQUFBLE1BQUEsQ0FBQSxVQUFBLENBQUEsbUNBQUEsZUFBQSxDQUFBLFdBQUEsQ0FBQSw2REFBQSw2QkFBQSxDQUFBLHFCQUFBLENBQUEsaUJBQUEsQ0FBQSxvRUFBQSwwQkFBQSxDQUFBLGtCQUFBLENBQUEseUVBQUEsMEJBQUEsQ0FBQSxrQkFBQSxDQUFBLHlFQUFBLDZCQUFBLENBQUEscUJBQUEsQ0FBQSw4RUFBQSw2QkFBQSxDQUFBLHFCQUFBLENBQUEseUVBQUEsNkJBQUEsQ0FBQSxxQkFBQSxDQUFBLDhFQUFBLDZCQUFBLENBQUEscUJBQUEsQ0FBQSwwQkFBQSxzRkFBQSxDQUFBLHdGQUFBLENBQUEsb0JBQUEsQ0FBQSxpQkFBQSxDQUFBLCtEQUFBLENBQUEsNkRBQUEsQ0FBQSxnQ0FBQSxXQUFBLENBQUEsUUFBQSxDQUFBLFNBQUEsQ0FBQSxlQUFBLENBQUEsdUJBQUEsQ0FBQSxlQUFBLENBQUEsdURBQUEsY0FBQSxDQUFBLHFDQUFBLHVCQUFBLENBQUEsaUNBQUEsa0RBQUEsQ0FBQSxvRUFBQSxDQUFBLGtHQUFBLFVBQUEsQ0FBQSxPQUFBLENBQUEsMkNBQUEsQ0FBQSxtQ0FBQSxDQUFBLHNKQUFBLDBEQUFBLENBQUEsYUFBQSxDQUFBLHNLQUFBLE9BQUEsQ0FBQSxrQ0FBQSxDQUFBLDBCQUFBLENBQUEsU0FBQSxDQUFBLDBOQUFBLG9CQUFBLENBQUEsZ0NBQUEsQ0FBQSwwSkFBQSw0REFBQSxDQUFBLDBLQUFBLFFBQUEsQ0FBQSxrQ0FBQSxDQUFBLDBCQUFBLENBQUEsa0JBQUEsQ0FBQSw4TkFBQSxpQ0FBQSxDQUFBLDJGQUFBLGtDQUFBLENBQUEsK0JBQUEsMEJBQUEsQ0FBQSxpQkFBQSxDQUFBLG1FQUFBLG9FQUFBLENBQUEsaUJBQUEsQ0FBQSxNQUFBLENBQUEsS0FBQSxDQUFBLFVBQUEsQ0FBQSxXQUFBLENBQUEsMEJBQUEsQ0FBQSxrQkFBQSxDQUFBLGlDQUFBLENBQUEseUJBQUEsQ0FBQSwrRUFBQSxrQ0FBQSxDQUFBLDBCQUFBLENBQUEsc1NBQUEsVUFBQSxDQUFBLFVBQUEsQ0FBQSxNQUFBLENBQUEsS0FBQSxDQUFBLHNTQUFBLFNBQUEsQ0FBQSxXQUFBLENBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBQSx3QkFBQSxZQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zd2lwZXItcGFnaW5hdGlvbntwb3NpdGlvbjphYnNvbHV0ZTt0ZXh0LWFsaWduOmNlbnRlcjt0cmFuc2l0aW9uOi4zcyBvcGFjaXR5O3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDAsMCk7ei1pbmRleDoxMH0uc3dpcGVyLXBhZ2luYXRpb24uc3dpcGVyLXBhZ2luYXRpb24taGlkZGVue29wYWNpdHk6MH0uc3dpcGVyLXBhZ2luYXRpb24tZGlzYWJsZWQ+LnN3aXBlci1wYWdpbmF0aW9uLC5zd2lwZXItcGFnaW5hdGlvbi5zd2lwZXItcGFnaW5hdGlvbi1kaXNhYmxlZHtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fS5zd2lwZXItaG9yaXpvbnRhbD4uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cywuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy5zd2lwZXItcGFnaW5hdGlvbi1ob3Jpem9udGFsLC5zd2lwZXItcGFnaW5hdGlvbi1jdXN0b20sLnN3aXBlci1wYWdpbmF0aW9uLWZyYWN0aW9ue2JvdHRvbToxMHB4O2xlZnQ6MDt3aWR0aDoxMDAlfS5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWN7b3ZlcmZsb3c6aGlkZGVuO2ZvbnQtc2l6ZTowfS5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHt0cmFuc2Zvcm06c2NhbGUoLjMzKTtwb3NpdGlvbjpyZWxhdGl2ZX0uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZle3RyYW5zZm9ybTpzY2FsZSgxKX0uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlLW1haW57dHJhbnNmb3JtOnNjYWxlKDEpfS5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUtcHJldnt0cmFuc2Zvcm06c2NhbGUoLjY2KX0uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlLXByZXYtcHJldnt0cmFuc2Zvcm06c2NhbGUoLjMzKX0uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlLW5leHR7dHJhbnNmb3JtOnNjYWxlKC42Nil9LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pYyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZS1uZXh0LW5leHR7dHJhbnNmb3JtOnNjYWxlKC4zMyl9LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHt3aWR0aDp2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtd2lkdGgsdmFyKC0tc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LXNpemUsOHB4KSk7aGVpZ2h0OnZhcigtLXN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1oZWlnaHQsdmFyKC0tc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LXNpemUsOHB4KSk7ZGlzcGxheTppbmxpbmUtYmxvY2s7Ym9yZGVyLXJhZGl1czo1MCU7YmFja2dyb3VuZDp2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtaW5hY3RpdmUtY29sb3IsIzAwMCk7b3BhY2l0eTp2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtaW5hY3RpdmUtb3BhY2l0eSwgLjIpfWJ1dHRvbi5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXR7Ym9yZGVyOm5vbmU7bWFyZ2luOjA7cGFkZGluZzowO2JveC1zaGFkb3c6bm9uZTstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmV9LnN3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZSAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0e2N1cnNvcjpwb2ludGVyfS5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQ6b25seS1jaGlsZHtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fS5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZle29wYWNpdHk6dmFyKC0tc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LW9wYWNpdHksIDEpO2JhY2tncm91bmQ6dmFyKC0tc3dpcGVyLXBhZ2luYXRpb24tY29sb3IsdmFyKC0tc3dpcGVyLXRoZW1lLWNvbG9yKSl9LnN3aXBlci1wYWdpbmF0aW9uLXZlcnRpY2FsLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMsLnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0c3tyaWdodDoxMHB4O3RvcDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDBweCwtNTAlLDApfS5zd2lwZXItcGFnaW5hdGlvbi12ZXJ0aWNhbC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQsLnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0e21hcmdpbjp2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtdmVydGljYWwtZ2FwLDZweCkgMDtkaXNwbGF5OmJsb2NrfS5zd2lwZXItcGFnaW5hdGlvbi12ZXJ0aWNhbC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pYywuc3dpcGVyLXZlcnRpY2FsPi5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pY3t0b3A6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01MCUpO3dpZHRoOjhweH0uc3dpcGVyLXBhZ2luYXRpb24tdmVydGljYWwuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCwuc3dpcGVyLXZlcnRpY2FsPi5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pYyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO3RyYW5zaXRpb246LjJzIHRyYW5zZm9ybSwuMnMgdG9wfS5zd2lwZXItaG9yaXpvbnRhbD4uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LC5zd2lwZXItcGFnaW5hdGlvbi1ob3Jpem9udGFsLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHttYXJnaW46MCB2YXIoLS1zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtaG9yaXpvbnRhbC1nYXAsNHB4KX0uc3dpcGVyLWhvcml6b250YWw+LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljLC5zd2lwZXItcGFnaW5hdGlvbi1ob3Jpem9udGFsLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWlje2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpO3doaXRlLXNwYWNlOm5vd3JhcH0uc3dpcGVyLWhvcml6b250YWw+LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy1keW5hbWljIC5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQsLnN3aXBlci1wYWdpbmF0aW9uLWhvcml6b250YWwuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0cy5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXRzLWR5bmFtaWMgLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHt0cmFuc2l0aW9uOi4ycyB0cmFuc2Zvcm0sLjJzIGxlZnR9LnN3aXBlci1ob3Jpem9udGFsLnN3aXBlci1ydGw+LnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHMtZHluYW1pYyAuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0e3RyYW5zaXRpb246LjJzIHRyYW5zZm9ybSwuMnMgcmlnaHR9LnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFye2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMjUpO3Bvc2l0aW9uOmFic29sdXRlfS5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2JhciAuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbHtiYWNrZ3JvdW5kOnZhcigtLXN3aXBlci1wYWdpbmF0aW9uLWNvbG9yLHZhcigtLXN3aXBlci10aGVtZS1jb2xvcikpO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RyYW5zZm9ybTpzY2FsZSgwKTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgdG9wfS5zd2lwZXItcnRsIC5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2JhciAuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbHt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcH0uc3dpcGVyLWhvcml6b250YWw+LnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLC5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci5zd2lwZXItcGFnaW5hdGlvbi1ob3Jpem9udGFsLC5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci5zd2lwZXItcGFnaW5hdGlvbi12ZXJ0aWNhbC5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1vcHBvc2l0ZSwuc3dpcGVyLXZlcnRpY2FsPi5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci5zd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1vcHBvc2l0ZXt3aWR0aDoxMDAlO2hlaWdodDo0cHg7bGVmdDowO3RvcDowfS5zd2lwZXItaG9yaXpvbnRhbD4uc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXIuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItb3Bwb3NpdGUsLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLnN3aXBlci1wYWdpbmF0aW9uLWhvcml6b250YWwuc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItb3Bwb3NpdGUsLnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLnN3aXBlci1wYWdpbmF0aW9uLXZlcnRpY2FsLC5zd2lwZXItdmVydGljYWw+LnN3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFye3dpZHRoOjRweDtoZWlnaHQ6MTAwJTtsZWZ0OjA7dG9wOjB9LnN3aXBlci1wYWdpbmF0aW9uLWxvY2t7ZGlzcGxheTpub25lfVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiZGF0YTphcHBsaWNhdGlvbi9mb250LXdvZmY7Y2hhcnNldD11dGYtODtiYXNlNjQsIGQwOUdSZ0FCQUFBQUFBWmdBQkFBQUFBQURBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCR1JsUk5BQUFHUkFBQUFCb0FBQUFjaTZxSGtVZEVSVVlBQUFXZ0FBQUFJd0FBQUNRQVlBQlhSMUJQVXdBQUJoUUFBQUF1QUFBQU51QVk3K3hIVTFWQ0FBQUZ4QUFBQUZBQUFBQm0yZlBjelU5VEx6SUFBQUhjQUFBQVNnQUFBR0JQOVY1UlkyMWhjQUFBQWtRQUFBQ0lBQUFCWXQ2RjBjQmpkblFnQUFBQ3pBQUFBQVFBQUFBRUFCRUJSR2RoYzNBQUFBV1lBQUFBQ0FBQUFBai8vd0FEWjJ4NVpnQUFBeXdBQUFETUFBQUQyTUh0cnlWb1pXRmtBQUFCYkFBQUFEQUFBQUEyRTIrZW9XaG9aV0VBQUFHY0FBQUFId0FBQUNRQzlnRHphRzEwZUFBQUFpZ0FBQUFaQUFBQXJnSmtBQkZzYjJOaEFBQUMwQUFBQUZvQUFBQmFGUUFVR0cxaGVIQUFBQUc4QUFBQUh3QUFBQ0FBY0FCQWJtRnRaUUFBQS9nQUFBRTVBQUFDWHZGZEJ3bHdiM04wQUFBRk5BQUFBR0lBQUFDRTVzNzRoWGphWTJCa1lHQUFZcGY1SHUvaitXMitNbkF6TVlEQXphWDZRakQ2LzQvL0J4ajVHQThBdVJ3TVlHa0FQeXdMMTNqYVkyQmtZR0E4OFA4QWd4NGorLzhmUURZZkExQUVCV2dEQUlCMkJPb0FlTnBqWUdSZ1lOQmg0R2RnWWdBQkVNbklBQkp6WU5BRENRQUFDV2dBc1FCNDJtTmdZZnpDT0lHQmxZR0IwWWN4allHQndSMUtmMldRWkdoaFlHQmlZR1ZtZ0FGR0JpUVFrT2Fhd3REQW9NQlF4WGpnL3dFR1BjWUREQTR3TlVBMkNDZ3dzQUFBTzRFTDZnQUFlTnBqMk0wZ3lBQUNxeGdHTldCa1oyRDQvd01BK3hrRGRnQUFBSGphWTJCZ1lHYUFZQmtHUmdZUWlBSHlHTUY4RmdZSElNM0R3TUhBQkdRck1PZ3lXRExFTTFUOS93OFVCZkVNZ0x6RS8vLy9QLzUvL2YvVi94dityNGVhQUFlTWJBeHdJVVltSU1IRWdLWUFZalVjc0RBd3NMS3hjM0J5Y2ZQdzhqRVFBL2daQkFTRmhFVkV4Y1FsSktXa1pXVGw1QlVVbFpSVlZOWFVOVFFaQmdNQUFNUitFK2dBRVFGRUFBQUFLZ0FxQUNvQU5BQStBRWdBVWdCY0FHWUFjQUI2QUlRQWpnQ1lBS0lBckFDMkFNQUF5Z0RVQU40QTZBRHlBUHdCQmdFUUFSb0JKQUV1QVRnQlFnRk1BVllCWUFGcUFYUUJmZ0dJQVpJQm5BR21BYklCemdIc0FBQjQydTJOTVE2Q1VBeUdXNTY4eDlBbmVZWWdtNE1KYmhLRmFFeElPQVZYOEFwZXdTdDRCaWM0QWZlQWlkM1ZPQml4RHhmUFlFemE1TytYZmkwNFlBRGdnaVVJVUxDdUVKSzhWaE80YlN2cGRua3RISTVRQ1l0ZGkyc2w4Wm5YYUhscVVyTkt6ZEtjVDhjamxxK3J3WlN2SVZjek5pZXpzZm5QL3V6bm1mUEZCTk9ETTJLN01UUTQ1WUVBWnFHUDgxQW1HR2NGM2lQcU9vcDByMVNQVGFUYlZrZlVlNEhYajk3d1lFK3lOd1dZeHdXdTR2MXVnV0hnbzNTMVhkWkVWcVdNN0VUMGNmbkxHeFdma2dSNDJvMlB2V3JETUJTRmovSUhMYUYwektqUmdkaVZNd1NjTlJBb1dVb0g3OFkyaWNCL3lJWTA5QW42QUgyQmR1L1VCK3l4b3BZc2hRaUV2bnZ1MGRVUmdEdDhRZUM4UER3N0ZwamkzZkVBNHovUEVKNllPQjVoS2g0ZGozRXZYaHhQcUgvU0tVWTNySjdzclo0RlpuaDFQTUF0UGh3UDZmbDJQTUpNUERnZVE0clk4WVQ2R3phbzBlQUVBNDA5RHVnZ21UbkZuT2NTQ2lFaUxNZ3hDaVRJNkNxNURaVWQzUW1wMTB2TzBMYUxUZDJjak40Zk91bWxjN2xVWWJTUWNaRmt1dFJHN2c2SktaS3kwUm1kTFk2ODBDRG5FSitVTWtwRkZlMVJON254ZFZwWHJDNGFUdG5hdXJPblllcmNaZzJZVm1MTi9kL2djemZFaW1yRS9mcy9iT3VxMjlabW44dGxvT1JhWGdaZ0dhNzh5TzkvY25YbTJCcGFHdnEyNUR2OVM0RTkrNVNJYzlQcXVwSktoWUZTU2w0NytRY3IxbVlOQUFBQWVOcHR3MGNLd2tBQUFNRFpKQThRN09VSnZrTHNQZlo2ekZWRVJQeThxSGgyWUVSKzNpL0JQODN2SUJMTHlTc29LaW1ycUtxcGEyaHA2K2pxNlJzWUdobWJtSnFaU3kwc3JheHRiTzNzSFJ5ZG5FTVU0dVI2eXg3SkpYdmVQN1dyRHljQUFBQUFBQUgvL3dBQ2VOcGpZR1JnWU9BQlloa2daZ0pDWmdaTkJrWUdMUVp0SUpzRkxNWUFBQXczQUxnQWVOb2xpekVLZ0RBUUJDY2hSYkMyc0ZFUjBZRDZxVlFpQkN2L0g5ZXpHSTZaNVhCQXc4Q0JLL201aVFRVmF1VmJYTG5Pck1adjJvTGRLRmE4UGp1cnUyaEp6R2FibU9TTHpOTXp2dXRwQjNONDJtTmdaR0JnNEdLUVl6QmhZTXhKTE1sajRHQmdBWW93L1AvUEFKSmhMTTZzU29XS2ZXQ0FBd0RBamdiUkFBQjQybU5nWUdCa0FJSWJDWm81SVBybVVuMGhHQTBBTzhFRlRRQUFcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAZm9udC1mYWNle2ZvbnQtZmFtaWx5OnN3aXBlci1pY29ucztzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9OnJvb3R7LS1zd2lwZXItdGhlbWUtY29sb3I6IzAwN2FmZn0uc3dpcGVye21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG87cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3c6aGlkZGVuO2xpc3Qtc3R5bGU6bm9uZTtwYWRkaW5nOjA7ei1pbmRleDoxfS5zd2lwZXItdmVydGljYWw+LnN3aXBlci13cmFwcGVye2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uc3dpcGVyLXdyYXBwZXJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt6LWluZGV4OjE7ZGlzcGxheTpmbGV4O3RyYW5zaXRpb24tcHJvcGVydHk6LXdlYmtpdC10cmFuc2Zvcm07dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm07dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm0sIC13ZWJraXQtdHJhbnNmb3JtO2JveC1zaXppbmc6Y29udGVudC1ib3h9LnN3aXBlci1hbmRyb2lkIC5zd2lwZXItc2xpZGUsLnN3aXBlci13cmFwcGVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDBweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDBweCwgMCwgMCl9LnN3aXBlci1wb2ludGVyLWV2ZW50c3t0b3VjaC1hY3Rpb246cGFuLXl9LnN3aXBlci1wb2ludGVyLWV2ZW50cy5zd2lwZXItdmVydGljYWx7dG91Y2gtYWN0aW9uOnBhbi14fS5zd2lwZXItc2xpZGV7ZmxleC1zaHJpbms6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO3RyYW5zaXRpb24tcHJvcGVydHk6LXdlYmtpdC10cmFuc2Zvcm07dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm07dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm0sIC13ZWJraXQtdHJhbnNmb3JtfS5zd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5re3Zpc2liaWxpdHk6aGlkZGVufS5zd2lwZXItYXV0b2hlaWdodCwuc3dpcGVyLWF1dG9oZWlnaHQgLnN3aXBlci1zbGlkZXtoZWlnaHQ6YXV0b30uc3dpcGVyLWF1dG9oZWlnaHQgLnN3aXBlci13cmFwcGVye2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7dHJhbnNpdGlvbi1wcm9wZXJ0eTpoZWlnaHQsLXdlYmtpdC10cmFuc2Zvcm07dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm0saGVpZ2h0O3RyYW5zaXRpb24tcHJvcGVydHk6dHJhbnNmb3JtLGhlaWdodCwtd2Via2l0LXRyYW5zZm9ybX0uc3dpcGVyLWJhY2tmYWNlLWhpZGRlbiAuc3dpcGVyLXNsaWRley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbn0uc3dpcGVyLTNkLC5zd2lwZXItM2Quc3dpcGVyLWNzcy1tb2RlIC5zd2lwZXItd3JhcHBlcnstd2Via2l0LXBlcnNwZWN0aXZlOjEyMDBweDtwZXJzcGVjdGl2ZToxMjAwcHh9LnN3aXBlci0zZCAuc3dpcGVyLWN1YmUtc2hhZG93LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZSwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLC5zd2lwZXItM2QgLnN3aXBlci13cmFwcGVyey13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOnByZXNlcnZlLTNkO3RyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZH0uc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9we3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3BvaW50ZXItZXZlbnRzOm5vbmU7ei1pbmRleDoxMH0uc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93e2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMTUpfS5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdHtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCByZ2JhKDAsIDAsIDAsIDAuNSksIHJnYmEoMCwgMCwgMCwgMCkpfS5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHR7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoMCwgMCwgMCwgMC41KSwgcmdiYSgwLCAwLCAwLCAwKSl9LnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3B7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gdG9wLCByZ2JhKDAsIDAsIDAsIDAuNSksIHJnYmEoMCwgMCwgMCwgMCkpfS5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9te2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgcmdiYSgwLCAwLCAwLCAwLjUpLCByZ2JhKDAsIDAsIDAsIDApKX0uc3dpcGVyLWNzcy1tb2RlPi5zd2lwZXItd3JhcHBlcntvdmVyZmxvdzphdXRvO3Njcm9sbGJhci13aWR0aDpub25lOy1tcy1vdmVyZmxvdy1zdHlsZTpub25lfS5zd2lwZXItY3NzLW1vZGU+LnN3aXBlci13cmFwcGVyOjotd2Via2l0LXNjcm9sbGJhcntkaXNwbGF5Om5vbmV9LnN3aXBlci1jc3MtbW9kZT4uc3dpcGVyLXdyYXBwZXI+LnN3aXBlci1zbGlkZXtzY3JvbGwtc25hcC1hbGlnbjpzdGFydCBzdGFydH0uc3dpcGVyLWhvcml6b250YWwuc3dpcGVyLWNzcy1tb2RlPi5zd2lwZXItd3JhcHBlcntzY3JvbGwtc25hcC10eXBlOnggbWFuZGF0b3J5fS5zd2lwZXItdmVydGljYWwuc3dpcGVyLWNzcy1tb2RlPi5zd2lwZXItd3JhcHBlcntzY3JvbGwtc25hcC10eXBlOnkgbWFuZGF0b3J5fS5zd2lwZXItY2VudGVyZWQ+LnN3aXBlci13cmFwcGVyOjpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjtmbGV4LXNocmluazowO29yZGVyOjk5OTl9LnN3aXBlci1jZW50ZXJlZC5zd2lwZXItaG9yaXpvbnRhbD4uc3dpcGVyLXdyYXBwZXI+LnN3aXBlci1zbGlkZTpmaXJzdC1jaGlsZHstd2Via2l0LW1hcmdpbi1zdGFydDp2YXIoLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZSk7bWFyZ2luLWlubGluZS1zdGFydDp2YXIoLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZSl9LnN3aXBlci1jZW50ZXJlZC5zd2lwZXItaG9yaXpvbnRhbD4uc3dpcGVyLXdyYXBwZXI6OmJlZm9yZXtoZWlnaHQ6MTAwJTttaW4taGVpZ2h0OjFweDt3aWR0aDp2YXIoLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyKX0uc3dpcGVyLWNlbnRlcmVkLnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXdyYXBwZXI+LnN3aXBlci1zbGlkZTpmaXJzdC1jaGlsZHstd2Via2l0LW1hcmdpbi1iZWZvcmU6dmFyKC0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUpO21hcmdpbi1ibG9jay1zdGFydDp2YXIoLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZSl9LnN3aXBlci1jZW50ZXJlZC5zd2lwZXItdmVydGljYWw+LnN3aXBlci13cmFwcGVyOjpiZWZvcmV7d2lkdGg6MTAwJTttaW4td2lkdGg6MXB4O2hlaWdodDp2YXIoLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyKX0uc3dpcGVyLWNlbnRlcmVkPi5zd2lwZXItd3JhcHBlcj4uc3dpcGVyLXNsaWRle3Njcm9sbC1zbmFwLWFsaWduOmNlbnRlciBjZW50ZXJ9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXIubWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFZQSxXQUFBLHdCQUFBLENBQUEsMkNBQUEsQ0FBQSxlQUFBLENBQUEsaUJBQUEsQ0FBQSxNQUFBLDRCQUFBLENBQUEsUUFBQSxnQkFBQSxDQUFBLGlCQUFBLENBQUEsaUJBQUEsQ0FBQSxlQUFBLENBQUEsZUFBQSxDQUFBLFNBQUEsQ0FBQSxTQUFBLENBQUEsaUNBQUEscUJBQUEsQ0FBQSxnQkFBQSxpQkFBQSxDQUFBLFVBQUEsQ0FBQSxXQUFBLENBQUEsU0FBQSxDQUFBLFlBQUEsQ0FBQSxxQ0FBQSxDQUFBLDZCQUFBLENBQUEsZ0RBQUEsQ0FBQSxzQkFBQSxDQUFBLDhDQUFBLHdDQUFBLENBQUEsZ0NBQUEsQ0FBQSx1QkFBQSxrQkFBQSxDQUFBLHVDQUFBLGtCQUFBLENBQUEsY0FBQSxhQUFBLENBQUEsVUFBQSxDQUFBLFdBQUEsQ0FBQSxpQkFBQSxDQUFBLHFDQUFBLENBQUEsNkJBQUEsQ0FBQSxnREFBQSxDQUFBLDhCQUFBLGlCQUFBLENBQUEsb0RBQUEsV0FBQSxDQUFBLG1DQUFBLHNCQUFBLENBQUEsNENBQUEsQ0FBQSxvQ0FBQSxDQUFBLHNEQUFBLENBQUEsc0NBQUEsK0JBQUEsQ0FBQSx1QkFBQSxDQUFBLGtDQUFBLENBQUEsMEJBQUEsQ0FBQSxzREFBQSwwQkFBQSxDQUFBLGtCQUFBLENBQUEseVFBQUEsbUNBQUEsQ0FBQSwyQkFBQSxDQUFBLHNMQUFBLGlCQUFBLENBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBQSxVQUFBLENBQUEsV0FBQSxDQUFBLG1CQUFBLENBQUEsVUFBQSxDQUFBLGdDQUFBLDBCQUFBLENBQUEscUNBQUEsK0VBQUEsQ0FBQSxzQ0FBQSxnRkFBQSxDQUFBLG9DQUFBLDhFQUFBLENBQUEsdUNBQUEsaUZBQUEsQ0FBQSxpQ0FBQSxhQUFBLENBQUEsb0JBQUEsQ0FBQSx1QkFBQSxDQUFBLG9EQUFBLFlBQUEsQ0FBQSwrQ0FBQSw2QkFBQSxDQUFBLG1EQUFBLDRCQUFBLENBQUEsaURBQUEsNEJBQUEsQ0FBQSx5Q0FBQSxVQUFBLENBQUEsYUFBQSxDQUFBLFVBQUEsQ0FBQSw2RUFBQSx5REFBQSxDQUFBLHdEQUFBLENBQUEsMkRBQUEsV0FBQSxDQUFBLGNBQUEsQ0FBQSx5Q0FBQSxDQUFBLDJFQUFBLDBEQUFBLENBQUEsdURBQUEsQ0FBQSx5REFBQSxVQUFBLENBQUEsYUFBQSxDQUFBLDBDQUFBLENBQUEsK0NBQUEsK0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyoqXFxuICogU3dpcGVyIDguNC41XFxuICogTW9zdCBtb2Rlcm4gbW9iaWxlIHRvdWNoIHNsaWRlciBhbmQgZnJhbWV3b3JrIHdpdGggaGFyZHdhcmUgYWNjZWxlcmF0ZWQgdHJhbnNpdGlvbnNcXG4gKiBodHRwczovL3N3aXBlcmpzLmNvbVxcbiAqXFxuICogQ29weXJpZ2h0IDIwMTQtMjAyMiBWbGFkaW1pciBLaGFybGFtcGlkaVxcbiAqXFxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXFxuICpcXG4gKiBSZWxlYXNlZCBvbjogTm92ZW1iZXIgMjEsIDIwMjJcXG4gKi9cXG5cXG5AZm9udC1mYWNle2ZvbnQtZmFtaWx5OnN3aXBlci1pY29ucztzcmM6dXJsKCdkYXRhOmFwcGxpY2F0aW9uL2ZvbnQtd29mZjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwgZDA5R1JnQUJBQUFBQUFaZ0FCQUFBQUFBREFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJHUmxSTkFBQUdSQUFBQUJvQUFBQWNpNnFIa1VkRVJVWUFBQVdnQUFBQUl3QUFBQ1FBWUFCWFIxQlBVd0FBQmhRQUFBQXVBQUFBTnVBWTcreEhVMVZDQUFBRnhBQUFBRkFBQUFCbTJmUGN6VTlUTHpJQUFBSGNBQUFBU2dBQUFHQlA5VjVSWTIxaGNBQUFBa1FBQUFDSUFBQUJZdDZGMGNCamRuUWdBQUFDekFBQUFBUUFBQUFFQUJFQlJHZGhjM0FBQUFXWUFBQUFDQUFBQUFqLy93QURaMng1WmdBQUF5d0FBQURNQUFBRDJNSHRyeVZvWldGa0FBQUJiQUFBQURBQUFBQTJFMitlb1dob1pXRUFBQUdjQUFBQUh3QUFBQ1FDOWdEemFHMTBlQUFBQWlnQUFBQVpBQUFBcmdKa0FCRnNiMk5oQUFBQzBBQUFBRm9BQUFCYUZRQVVHRzFoZUhBQUFBRzhBQUFBSHdBQUFDQUFjQUJBYm1GdFpRQUFBL2dBQUFFNUFBQUNYdkZkQndsd2IzTjBBQUFGTkFBQUFHSUFBQUNFNXM3NGhYamFZMkJrWUdBQVlwZjVIdS9qK1cyK01uQXpNWURBemFYNlFqRDYvNC8vQnhqNUdBOEF1UndNWUdrQVB5d0wxM2phWTJCa1lHQTg4UDhBZ3g0aisvOGZRRFlmQTFBRUJXZ0RBSUIyQk9vQWVOcGpZR1JnWU5CaDRHZGdZZ0FCRU1uSUFCSnpZTkFEQ1FBQUNXZ0FzUUI0Mm1OZ1lmekNPSUdCbFlHQjBZY3hqWUdCd1IxS2YyV1FaR2hoWUdCaVlHVm1nQUZHQmlRUWtPYWF3dERBb01CUXhYamcvd0VHUGNZRERBNHdOVUEyQ0Nnd3NBQUFPNEVMNmdBQWVOcGoyTTBneUFBQ3F4Z0dOV0JrWjJENC93TUEreGtEZGdBQUFIamFZMkJnWUdhQVlCa0dSZ1lRaUFIeUdNRjhGZ1lISU0zRHdNSEFCR1FyTU9neVdETEVNMVQ5L3c4VUJmRU1nTHpFLy8vL1AvNS8vZi9WL3h2K3I0ZWFBQWVNYkF4d0lVWW1JTUhFZ0tZQVlqVWNzREF3c0xLeGMzQnljZlB3OGpFUUEvZ1pCQVNGaEVWRXhjUWxKS1drWldUbDVCVVVsWlJWVk5YVU5UUVpCZ01BQU1SK0UrZ0FFUUZFQUFBQUtnQXFBQ29BTkFBK0FFZ0FVZ0JjQUdZQWNBQjZBSVFBamdDWUFLSUFyQUMyQU1BQXlnRFVBTjRBNkFEeUFQd0JCZ0VRQVJvQkpBRXVBVGdCUWdGTUFWWUJZQUZxQVhRQmZnR0lBWklCbkFHbUFiSUJ6Z0hzQUFCNDJ1Mk5NUTZDVUF5R1c1Njh4OUFuZVlZZ200TUpiaEtGYUV4SU9BVlg4QXBld1N0NEJpYzRBZmVBaWQzVk9CaXhEeGZQWUV6YTVPK1hmaTA0WUFEZ2dpVUlVTEN1RUpLOFZoTzRiU3ZwZG5rdEhJNVFDWXRkaTJzbDhablhhSGxxVXJOS3pkS2NUOGNqbHErcndaU3ZJVmN6TmllenNmblAvdXpubWZQRkJOT0RNMks3TVRRNDVZRUFacUdQODFBbUdHY0YzaVBxT29wMHIxU1BUYVRiVmtmVWU0SFhqOTd3WUUreU53V1l4d1d1NHYxdWdXSGdvM1MxWGRaRVZxV003RVQwY2ZuTEd4V2ZrZ1I0Mm8yUHZXckRNQlNGai9JSExhRjB6S2pSZ2RpVk13U2NOUkFvV1VvSDc4WTJpY0IveUlZMDlBbjZBSDJCZHUvVUIreXhvcFlzaFFpRXZudnUwZFVSZ0R0OFFlQzhQRHc3RnBqaTNmRUE0ei9QRUo2WU9CNWhLaDRkajNFdlhoeFBxSC9TS1VZM3JKN3NyWjRGWm5oMVBNQXRQaHdQNmZsMlBNSk1QRGdlUTRyWThZVDZHemFvMGVBRUE0MDlEdWdnbVRuRm5PY1NDaUVpTE1neENpVEk2Q3E1RFpVZDNRbXAxMHZPMExhTFRkMmNqTjRmT3VtbGM3bFVZYlNRY1pGa3V0Ukc3ZzZKS1pLeTBSbWRMWTY4MENEbkVKK1VNa3BGRmUxUk43bnhkVnBYckM0YVR0bmF1ck9uWWVyY1pnMllWbUxOL2QvZ2N6ZkVpbXJFL2ZzL2JPdXEyOVptbjh0bG9PUmFYZ1pnR2E3OHlPOS9jblhtMkJwYUd2cTI1RHY5UzRFOSs1U0ljOVBxdXBKS2hZRlNTbDQ3K1FjcjFtWU5BQUFBZU5wdHcwY0t3a0FBQU1EWkpBOFE3T1VKdmtMc1BmWjZ6RlZFUlB5OHFIaDJZRVIrM2kvQlA4M3ZJQkxMeVNzb0tpbXJxS3FwYTJocDYranE2UnNZR2htYm1KcVpTeTBzcmF4dGJPM3NIUnlkbkVNVTR1UjZ5eDdKSlh2ZVA3V3JEeWNBQUFBQUFBSC8vd0FDZU5wallHUmdZT0FCWWhrZ1pnSkNaZ1pOQmtZR0xRWnRJSnNGTE1ZQUFBdzNBTGdBZU5vbGl6RUtnREFRQkNjaFJiQzJzRkVSMFlENnFWUWlCQ3YvSDllekdJNlo1WEJBdzhDQksvbTVpUVFWYXVWYlhMbk9yTVp2Mm9MZEtGYThQanVydTJoSnpHYWJtT1NMek5NenZ1dHBCM040Mm1OZ1pHQmc0R0tRWXpCaFlNeEpMTWxqNEdCZ0FZb3cvUC9QQUpKaExNNnNTb1dLZldDQUF3REFqZ2JSQUFCNDJtTmdZR0JrQUlJYkNabzVJUHJtVW4waEdBMEFPOEVGVFFBQScpO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH06cm9vdHstLXN3aXBlci10aGVtZS1jb2xvcjojMDA3YWZmfS5zd2lwZXJ7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0bztwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzpoaWRkZW47bGlzdC1zdHlsZTpub25lO3BhZGRpbmc6MDt6LWluZGV4OjF9LnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXdyYXBwZXJ7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5zd2lwZXItd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MTtkaXNwbGF5OmZsZXg7dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm07Ym94LXNpemluZzpjb250ZW50LWJveH0uc3dpcGVyLWFuZHJvaWQgLnN3aXBlci1zbGlkZSwuc3dpcGVyLXdyYXBwZXJ7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDBweCwwLDApfS5zd2lwZXItcG9pbnRlci1ldmVudHN7dG91Y2gtYWN0aW9uOnBhbi15fS5zd2lwZXItcG9pbnRlci1ldmVudHMuc3dpcGVyLXZlcnRpY2Fse3RvdWNoLWFjdGlvbjpwYW4teH0uc3dpcGVyLXNsaWRle2ZsZXgtc2hyaW5rOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTt0cmFuc2l0aW9uLXByb3BlcnR5OnRyYW5zZm9ybX0uc3dpcGVyLXNsaWRlLWludmlzaWJsZS1ibGFua3t2aXNpYmlsaXR5OmhpZGRlbn0uc3dpcGVyLWF1dG9oZWlnaHQsLnN3aXBlci1hdXRvaGVpZ2h0IC5zd2lwZXItc2xpZGV7aGVpZ2h0OmF1dG99LnN3aXBlci1hdXRvaGVpZ2h0IC5zd2lwZXItd3JhcHBlcnthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O3RyYW5zaXRpb24tcHJvcGVydHk6dHJhbnNmb3JtLGhlaWdodH0uc3dpcGVyLWJhY2tmYWNlLWhpZGRlbiAuc3dpcGVyLXNsaWRle3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApOy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW59LnN3aXBlci0zZCwuc3dpcGVyLTNkLnN3aXBlci1jc3MtbW9kZSAuc3dpcGVyLXdyYXBwZXJ7cGVyc3BlY3RpdmU6MTIwMHB4fS5zd2lwZXItM2QgLnN3aXBlci1jdWJlLXNoYWRvdywuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUsLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdywuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQsLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwuc3dpcGVyLTNkIC5zd2lwZXItd3JhcHBlcnt0cmFuc2Zvcm0tc3R5bGU6cHJlc2VydmUtM2R9LnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdywuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQsLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXRvcHtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwb2ludGVyLWV2ZW50czpub25lO3otaW5kZXg6MTB9LnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvd3tiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjE1KX0uc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnR7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gbGVmdCxyZ2JhKDAsMCwwLC41KSxyZ2JhKDAsMCwwLDApKX0uc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0e2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LHJnYmEoMCwwLDAsLjUpLHJnYmEoMCwwLDAsMCkpfS5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9we2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvIHRvcCxyZ2JhKDAsMCwwLC41KSxyZ2JhKDAsMCwwLDApKX0uc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbXtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byBib3R0b20scmdiYSgwLDAsMCwuNSkscmdiYSgwLDAsMCwwKSl9LnN3aXBlci1jc3MtbW9kZT4uc3dpcGVyLXdyYXBwZXJ7b3ZlcmZsb3c6YXV0bztzY3JvbGxiYXItd2lkdGg6bm9uZTstbXMtb3ZlcmZsb3ctc3R5bGU6bm9uZX0uc3dpcGVyLWNzcy1tb2RlPi5zd2lwZXItd3JhcHBlcjo6LXdlYmtpdC1zY3JvbGxiYXJ7ZGlzcGxheTpub25lfS5zd2lwZXItY3NzLW1vZGU+LnN3aXBlci13cmFwcGVyPi5zd2lwZXItc2xpZGV7c2Nyb2xsLXNuYXAtYWxpZ246c3RhcnQgc3RhcnR9LnN3aXBlci1ob3Jpem9udGFsLnN3aXBlci1jc3MtbW9kZT4uc3dpcGVyLXdyYXBwZXJ7c2Nyb2xsLXNuYXAtdHlwZTp4IG1hbmRhdG9yeX0uc3dpcGVyLXZlcnRpY2FsLnN3aXBlci1jc3MtbW9kZT4uc3dpcGVyLXdyYXBwZXJ7c2Nyb2xsLXNuYXAtdHlwZTp5IG1hbmRhdG9yeX0uc3dpcGVyLWNlbnRlcmVkPi5zd2lwZXItd3JhcHBlcjo6YmVmb3Jle2NvbnRlbnQ6Jyc7ZmxleC1zaHJpbms6MDtvcmRlcjo5OTk5fS5zd2lwZXItY2VudGVyZWQuc3dpcGVyLWhvcml6b250YWw+LnN3aXBlci13cmFwcGVyPi5zd2lwZXItc2xpZGU6Zmlyc3QtY2hpbGR7bWFyZ2luLWlubGluZS1zdGFydDp2YXIoLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZSl9LnN3aXBlci1jZW50ZXJlZC5zd2lwZXItaG9yaXpvbnRhbD4uc3dpcGVyLXdyYXBwZXI6OmJlZm9yZXtoZWlnaHQ6MTAwJTttaW4taGVpZ2h0OjFweDt3aWR0aDp2YXIoLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyKX0uc3dpcGVyLWNlbnRlcmVkLnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXdyYXBwZXI+LnN3aXBlci1zbGlkZTpmaXJzdC1jaGlsZHttYXJnaW4tYmxvY2stc3RhcnQ6dmFyKC0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUpfS5zd2lwZXItY2VudGVyZWQuc3dpcGVyLXZlcnRpY2FsPi5zd2lwZXItd3JhcHBlcjo6YmVmb3Jle3dpZHRoOjEwMCU7bWluLXdpZHRoOjFweDtoZWlnaHQ6dmFyKC0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcil9LnN3aXBlci1jZW50ZXJlZD4uc3dpcGVyLXdyYXBwZXI+LnN3aXBlci1zbGlkZXtzY3JvbGwtc25hcC1hbGlnbjpjZW50ZXIgY2VudGVyfVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHl7YmFja2dyb3VuZC1jb2xvcjojZjRmNWY5fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsS0FDQyx3QkNESVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuL3N0eWxlcy92YXJzXFxcIjtcXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiAkYmc7XFxyXFxufVxcclxcblwiLFwiQGltcG9ydCBcXFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1CZWJhcytOZXVlJmZhbWlseT1QVCtTYW5zOndnaHRANDAwOzcwMCZkaXNwbGF5PXN3YXBcXFwiO1xcclxcblxcclxcbiRiZzogI0Y0RjVGOTtcXHJcXG4kbGluZXM6ICM0MjU2N0E7XFxyXFxuJG1haW4tdGV4dDogIzQyNTY3QTtcXHJcXG4kc2xpZGVyLWFjY2VudDogIzM4NzdFRTtcXHJcXG4kYWNjZW50LWZpcnN0OiAjNUQ1RkVGO1xcclxcbiRhY2NlbnQtc2Vjb25kOiAjRUY1REE4O1xcclxcbiRhY2NlbnQtZ3JhZGllbnQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYig1NiAxMTkgMjM4IC8gMTAwJSkgMCUsIHJnYigyMzkgOTMgMTY4IC8gMTAwJSkgODAlKTtcXHJcXG5cXHJcXG4vLyBmb250czpcXHJcXG4kbWFpbi1mb250OiBcXFwiUFQgU2Fuc1xcXCIsIHNhbnMtc2VyaWY7XFxyXFxuJGFjY2VudC1mb250OiBcXFwiQmViYXMgTmV1ZVxcXCIsIGN1cnNpdmU7XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9QmViYXMrTmV1ZSZmYW1pbHk9UFQrU2Fuczp3Z2h0QDQwMDs3MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmR5a3g1WFN2SzM5OHlGSHlYSEdUe2Rpc3BsYXk6ZmxleDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7cGFkZGluZzowO3RyYW5zaXRpb246Ym94LXNoYWRvdyAzMDBtcyxvcGFjaXR5IDMwMG1zO2JvcmRlci1yYWRpdXM6NTAlO2N1cnNvcjpwb2ludGVyfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUyNXB4KXsuZHlreDVYU3ZLMzk4eUZIeVhIR1R7d2lkdGg6MjVweDtoZWlnaHQ6MjVweH0uZHlreDVYU3ZLMzk4eUZIeVhIR1Qgc3Zne3dpZHRoOjVweH19LmR5a3g1WFN2SzM5OHlGSHlYSEdULnRXc1c3SE9RRDFMeTRBUXBEWDAwe2JvcmRlcjoxcHggc29saWQgcmdiYSg2Niw4NiwxMjIsLjUpfS5keWt4NVhTdkszOTh5Rkh5WEhHVC50V3NXN0hPUUQxTHk0QVFwRFgwMCBzdmcgcGF0aHtzdHJva2U6IzQyNTY3YX0uZHlreDVYU3ZLMzk4eUZIeVhIR1QudFdzVzdIT1FEMUx5NEFRcERYMDA6aG92ZXIsLmR5a3g1WFN2SzM5OHlGSHlYSEdULnRXc1c3SE9RRDFMeTRBUXBEWDAwOmZvY3Vze2JveC1zaGFkb3c6MCAwIDE1cHggcmdiYSg2Niw4NiwxMjIsLjE1KX0uZHlreDVYU3ZLMzk4eUZIeVhIR1QudFdzVzdIT1FEMUx5NEFRcERYMDA6ZGlzYWJsZWR7b3BhY2l0eTouNTtwb2ludGVyLWV2ZW50czpub25lfS5keWt4NVhTdkszOTh5Rkh5WEhHVC5hUUpNcWNrY0JlOHdaTFpTNFJNeXtib3gtc2hhZG93OjAgMCAxNXB4IHJnYmEoNTYsMTE5LDIzOCwuMTUpfS5keWt4NVhTdkszOTh5Rkh5WEhHVC5hUUpNcWNrY0JlOHdaTFpTNFJNeSBzdmcgcGF0aHtzdHJva2U6IzM4NzdlZX0uZHlreDVYU3ZLMzk4eUZIeVhIR1QuYVFKTXFja2NCZTh3WkxaUzRSTXk6aG92ZXIsLmR5a3g1WFN2SzM5OHlGSHlYSEdULmFRSk1xY2tjQmU4d1pMWlM0Uk15OmZvY3Vze2JveC1zaGFkb3c6MCAwIDE1cHggcmdiYSg1NiwxMTksMjM4LC4zKX0uZHlreDVYU3ZLMzk4eUZIeVhIR1QuYVFKTXFja2NCZTh3WkxaUzRSTXk6ZGlzYWJsZWR7b3BhY2l0eTowO3BvaW50ZXItZXZlbnRzOm5vbmV9LmR5a3g1WFN2SzM5OHlGSHlYSEdULmtOdWducmU5UXp0cUVlN0I4QUZRIHN2Z3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQXJyb3dCdXR0b24vc3R5bGUubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFycy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLHNCQUNDLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBQ0Esc0JBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUNBLFNBQUEsQ0FDQSx5Q0FBQSxDQUNBLGlCQUFBLENBQ0EsY0FBQSxDQUVBLHFDQVpELHNCQWFFLFVBQUEsQ0FDQSxXQUFBLENBRUEsMEJBQ0MsU0FBQSxDQUFBLENBS0gsMkNBQ0MsbUNBQUEsQ0FHQyxvREFDQyxjQ3pCUyxDRDZCWCxrR0FFQyx1Q0FBQSxDQUdELG9EQUNDLFVBQUEsQ0FDQSxtQkFBQSxDQUlGLDJDQUNDLHdDQUFBLENBR0Msb0RBQ0MsY0M1Q2EsQ0RnRGYsa0dBRUMsdUNBQUEsQ0FHRCxvREFDQyxTQUFBLENBQ0EsbUJBQUEsQ0FLRCwrQ0FDQyxnQ0FBQSxDQUFBLHdCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL3N0eWxlcy92YXJzXFxcIjtcXHJcXG5cXHJcXG4uYXJyb3dCdG4ge1xcclxcblxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0Ym94LXNpemluZzogY29udGVudC1ib3g7XFxyXFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHR3aWR0aDogNTBweDtcXHJcXG5cXHRoZWlnaHQ6IDUwcHg7XFxyXFxuXFx0cGFkZGluZzogMDtcXHJcXG5cXHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDMwMG1zLCBvcGFjaXR5IDMwMG1zO1xcclxcblxcdGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG5cXHRjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpIHtcXHJcXG5cXHRcXHR3aWR0aDogMjVweDtcXHJcXG5cXHRcXHRoZWlnaHQ6IDI1cHg7XFxyXFxuXFxyXFxuXFx0XFx0c3ZnIHtcXHJcXG5cXHRcXHRcXHR3aWR0aDogNXB4O1xcclxcblxcdFxcdH1cXHJcXG5cXHR9XFxyXFxufVxcclxcblxcclxcbi5hcnJvd0J0bi5ncmF5IHtcXHJcXG5cXHRib3JkZXI6IDFweCBzb2xpZCByZ2JhKCRtYWluLXRleHQsICRhbHBoYTogMC41KTtcXHJcXG5cXHJcXG5cXHRzdmcge1xcclxcblxcdFxcdHBhdGgge1xcclxcblxcdFxcdFxcdHN0cm9rZTogJG1haW4tdGV4dDtcXHJcXG5cXHRcXHR9XFxyXFxuXFx0fVxcclxcblxcclxcblxcdCY6aG92ZXIsXFxyXFxuXFx0Jjpmb2N1cyB7XFxyXFxuXFx0XFx0Ym94LXNoYWRvdzogMCAwIDE1cHggcmdiYSgkbWFpbi10ZXh0LCAkYWxwaGE6IDAuMTUpO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQmOmRpc2FibGVkIHtcXHJcXG5cXHRcXHRvcGFjaXR5OiAwLjU7XFxyXFxuXFx0XFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuXFx0fVxcclxcbn1cXHJcXG5cXHJcXG4uYXJyb3dCdG4uYmx1ZSB7XFxyXFxuXFx0Ym94LXNoYWRvdzogMCAwIDE1cHggcmdiYSgkc2xpZGVyLWFjY2VudCwgJGFscGhhOiAwLjE1KTtcXHJcXG5cXHJcXG5cXHRzdmcge1xcclxcblxcdFxcdHBhdGgge1xcclxcblxcdFxcdFxcdHN0cm9rZTogJHNsaWRlci1hY2NlbnQ7XFxyXFxuXFx0XFx0fVxcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQmOmhvdmVyLFxcclxcblxcdCY6Zm9jdXMge1xcclxcblxcdFxcdGJveC1zaGFkb3c6IDAgMCAxNXB4IHJnYmEoJHNsaWRlci1hY2NlbnQsICRhbHBoYTogMC4zKTtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0JjpkaXNhYmxlZCB7XFxyXFxuXFx0XFx0b3BhY2l0eTogMDtcXHJcXG5cXHRcXHRwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG5cXHR9XFxyXFxufVxcclxcblxcclxcbi5hcnJvd0J0bi5sZWZ0IHtcXHJcXG5cXHRzdmcge1xcclxcblxcdFxcdHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XFxyXFxuXFx0fVxcclxcbn1cXHJcXG5cIixcIkBpbXBvcnQgXFxcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9QmViYXMrTmV1ZSZmYW1pbHk9UFQrU2Fuczp3Z2h0QDQwMDs3MDAmZGlzcGxheT1zd2FwXFxcIjtcXHJcXG5cXHJcXG4kYmc6ICNGNEY1Rjk7XFxyXFxuJGxpbmVzOiAjNDI1NjdBO1xcclxcbiRtYWluLXRleHQ6ICM0MjU2N0E7XFxyXFxuJHNsaWRlci1hY2NlbnQ6ICMzODc3RUU7XFxyXFxuJGFjY2VudC1maXJzdDogIzVENUZFRjtcXHJcXG4kYWNjZW50LXNlY29uZDogI0VGNURBODtcXHJcXG4kYWNjZW50LWdyYWRpZW50OiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2IoNTYgMTE5IDIzOCAvIDEwMCUpIDAlLCByZ2IoMjM5IDkzIDE2OCAvIDEwMCUpIDgwJSk7XFxyXFxuXFxyXFxuLy8gZm9udHM6XFxyXFxuJG1haW4tZm9udDogXFxcIlBUIFNhbnNcXFwiLCBzYW5zLXNlcmlmO1xcclxcbiRhY2NlbnQtZm9udDogXFxcIkJlYmFzIE5ldWVcXFwiLCBjdXJzaXZlO1xcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImFycm93QnRuXCI6IFwiZHlreDVYU3ZLMzk4eUZIeVhIR1RcIixcblx0XCJncmF5XCI6IFwidFdzVzdIT1FEMUx5NEFRcERYMDBcIixcblx0XCJibHVlXCI6IFwiYVFKTXFja2NCZTh3WkxaUzRSTXlcIixcblx0XCJsZWZ0XCI6IFwia051Z25yZTlRenRxRWU3QjhBRlFcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuVm1ZTGYyRVlmZXlwZjV5Tm9ZdDR7bWF4LXdpZHRoOjE0NzBweDttYXJnaW46MCBhdXRvO3BhZGRpbmc6MTVweH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MjVweCl7LlZtWUxmMkVZZmV5cGY1eU5vWXQ0e3BhZGRpbmc6MTBweH19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQ29udGFpbmVyL3N0eWxlLm1vZHVsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLHNCQUNDLGdCQUFBLENBQ0EsYUFBQSxDQUNBLFlBQUEsQ0FFQSxxQ0FMRCxzQkFNRSxZQUFBLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNvbnRhaW5lciB7XFxyXFxuXFx0bWF4LXdpZHRoOiAxNDcwcHg7XFxyXFxuXFx0bWFyZ2luOiAwIGF1dG87XFxyXFxuXFx0cGFkZGluZzogMTVweDtcXHJcXG5cXHJcXG5cXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MjVweCkge1xcclxcblxcdFxcdHBhZGRpbmc6IDEwcHg7XFxyXFxuXFx0fVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJjb250YWluZXJcIjogXCJWbVlMZjJFWWZleXBmNXlOb1l0NFwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5Wcl9GOHNkQWdkN0ZEbkx2SjI3Z3tmb250LWZhbWlseTpcXFwiUFQgU2Fuc1xcXCIsc2Fucy1zZXJpZjtmb250LXNpemU6MjAwcHg7Zm9udC13ZWlnaHQ6Ym9sZDtsZXR0ZXItc3BhY2luZzotMiU7bGluZS1oZWlnaHQ6MS42fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwNjBweCl7LlZyX0Y4c2RBZ2Q3RkRuTHZKMjdne2ZvbnQtc2l6ZToxMjhweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzI1cHgpey5Wcl9GOHNkQWdkN0ZEbkx2SjI3Z3tmb250LXNpemU6NzJweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpey5Wcl9GOHNkQWdkN0ZEbkx2SjI3Z3tmb250LXNpemU6NTZweH19LlI1am1wajE1akdfRkxvQ1Y3T0l4e2NvbG9yOiM1ZDVmZWZ9Lnp1RzV5SmFkOVVGc1NMZklTRXVze2NvbG9yOiNlZjVkYTh9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQ291bnRkb3duL3N0eWxlLm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcnMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSxzQkFDQyxnQ0NRVyxDRFBYLGVBQUEsQ0FDQSxnQkFBQSxDQUNBLGtCQUFBLENBQ0EsZUFBQSxDQUVBLHNDQVBELHNCQVFFLGVBQUEsQ0FBQSxDQUdELHFDQVhELHNCQVlFLGNBQUEsQ0FBQSxDQUdELHFDQWZELHNCQWdCRSxjQUFBLENBQUEsQ0FJRixzQkFDQyxhQ2pCYyxDRG9CZixzQkFDQyxhQ3BCZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9zdHlsZXMvdmFyc1xcXCI7XFxyXFxuXFxyXFxuLmNvdW50ZG93biB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6ICRtYWluLWZvbnQ7XFxyXFxuXFx0Zm9udC1zaXplOiAyMDBweDtcXHJcXG5cXHRmb250LXdlaWdodDogYm9sZDtcXHJcXG5cXHRsZXR0ZXItc3BhY2luZzogLTIlO1xcclxcblxcdGxpbmUtaGVpZ2h0OiAxLjY7XFxyXFxuXFxyXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTA2MHB4KSB7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxMjhweDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzI1cHgpIHtcXHJcXG5cXHRcXHRmb250LXNpemU6IDcycHg7XFxyXFxuXFx0fVxcclxcblxcclxcblxcdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUyNXB4KSB7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiA1NnB4O1xcclxcblxcdH1cXHJcXG59XFxyXFxuXFxyXFxuLmFjY2VudEZpcnN0IHtcXHJcXG5cXHRjb2xvcjogJGFjY2VudC1maXJzdDtcXHJcXG59XFxyXFxuXFxyXFxuLmFjY2VudFNlY29uZCB7XFxyXFxuXFx0Y29sb3I6ICRhY2NlbnQtc2Vjb25kO1xcclxcbn1cXHJcXG5cIixcIkBpbXBvcnQgXFxcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9QmViYXMrTmV1ZSZmYW1pbHk9UFQrU2Fuczp3Z2h0QDQwMDs3MDAmZGlzcGxheT1zd2FwXFxcIjtcXHJcXG5cXHJcXG4kYmc6ICNGNEY1Rjk7XFxyXFxuJGxpbmVzOiAjNDI1NjdBO1xcclxcbiRtYWluLXRleHQ6ICM0MjU2N0E7XFxyXFxuJHNsaWRlci1hY2NlbnQ6ICMzODc3RUU7XFxyXFxuJGFjY2VudC1maXJzdDogIzVENUZFRjtcXHJcXG4kYWNjZW50LXNlY29uZDogI0VGNURBODtcXHJcXG4kYWNjZW50LWdyYWRpZW50OiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2IoNTYgMTE5IDIzOCAvIDEwMCUpIDAlLCByZ2IoMjM5IDkzIDE2OCAvIDEwMCUpIDgwJSk7XFxyXFxuXFxyXFxuLy8gZm9udHM6XFxyXFxuJG1haW4tZm9udDogXFxcIlBUIFNhbnNcXFwiLCBzYW5zLXNlcmlmO1xcclxcbiRhY2NlbnQtZm9udDogXFxcIkJlYmFzIE5ldWVcXFwiLCBjdXJzaXZlO1xcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvdW50ZG93blwiOiBcIlZyX0Y4c2RBZ2Q3RkRuTHZKMjdnXCIsXG5cdFwiYWNjZW50Rmlyc3RcIjogXCJSNWptcGoxNWpHX0ZMb0NWN09JeFwiLFxuXHRcImFjY2VudFNlY29uZFwiOiBcInp1RzV5SmFkOVVGc1NMZklTRXVzXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9QmViYXMrTmV1ZSZmYW1pbHk9UFQrU2Fuczp3Z2h0QDQwMDs3MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmY3UFhtN0dRaFp6eE1zSVU1WWZae3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6NTBweCAwO2JvcmRlci1yaWdodDoxcHggc29saWQgcmdiYSg2Niw4NiwxMjIsLjEpO2JvcmRlci1sZWZ0OjFweCBzb2xpZCByZ2JhKDY2LDg2LDEyMiwuMSk7Zm9udC1mYW1pbHk6XFxcIlBUIFNhbnNcXFwiLHNhbnMtc2VyaWZ9LmY3UFhtN0dRaFp6eE1zSVU1WWZaOjpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MDt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDt3aWR0aDoxcHg7aGVpZ2h0OjEwMCU7bWFyZ2luOmF1dG87YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDY2LDg2LDEyMiwuMSl9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpey5mN1BYbTdHUWhaenhNc0lVNVlmWjo6YmVmb3Jle2Rpc3BsYXk6bm9uZX19Lk81Qld5eUx2WFQ0MWR2aWcyX3Bne3Bvc2l0aW9uOnJlbGF0aXZlfS5PNUJXeXlMdlhUNDFkdmlnMl9wZzo6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MDt0b3A6MDtib3R0b206MDt3aWR0aDoxMDAlO2hlaWdodDoxcHg7bWFyZ2luOmF1dG87YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDY2LDg2LDEyMiwuMSl9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpey5PNUJXeXlMdlhUNDFkdmlnMl9wZzo6YWZ0ZXJ7ZGlzcGxheTpub25lfX0uaUVDQzR1eDlwQjdSUmdtbmtvR0t7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MTA7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7bWFyZ2luLWJvdHRvbToxMzdweH0uaUVDQzR1eDlwQjdSUmdtbmtvR0sgZGl2OmZpcnN0LWNoaWxke21hcmdpbi1yaWdodDpjYWxjKDI1cHggKyA1NSooMTAwdncgLSAzMjBweCkvMTEyMCl9LmNkM2MzZF9sVXJCc0dTbVBLMk9Pe21hcmdpbi1ib3R0b206NTZweDttYXJnaW4tbGVmdDo4MHB4fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDcyNXB4KXsuZjdQWG03R1FoWnp4TXNJVTVZZlp7cGFkZGluZzozMHB4IDB9LmlFQ0M0dXg5cEI3UlJnbW5rb0dLe21hcmdpbi10b3A6MTAwcHg7bWFyZ2luLWJvdHRvbToxMDBweH0uY2QzYzNkX2xVckJzR1NtUEsyT097bWFyZ2luLWxlZnQ6MTVweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpey5mN1BYbTdHUWhaenhNc0lVNVlmWntwYWRkaW5nOjIwcHggMDtib3JkZXI6bm9uZX0uaUVDQzR1eDlwQjdSUmdtbmtvR0t7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDtwYWRkaW5nLWJvdHRvbTo1NnB4fS5XQjh6YUNNRDBwRUdSVDQyY1A4OHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2V9LmNkM2MzZF9sVXJCc0dTbVBLMk9Pe21hcmdpbi10b3A6MzZweDttYXJnaW4tYm90dG9tOjA7bWFyZ2luLWxlZnQ6MH19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvRGF0ZXNDYXJvdXNlbC9zdHlsZS5tb2R1bGUuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsc0JBQ0MsaUJBQUEsQ0FDQSxjQUFBLENBQ0EseUNBQUEsQ0FDQSx3Q0FBQSxDQUNBLGdDQ0lXLENERlgsOEJBQ0MsVUFBQSxDQUNBLGFBQUEsQ0FDQSxpQkFBQSxDQUNBLFNBQUEsQ0FDQSxLQUFBLENBQ0EsT0FBQSxDQUNBLFFBQUEsQ0FDQSxNQUFBLENBQ0EsU0FBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0EsbUNBQUEsQ0FFQSxxQ0FkRCw4QkFlRSxZQUFBLENBQUEsQ0FJRixzQkFDQyxpQkFBQSxDQUVBLDZCQUNDLFVBQUEsQ0FDQSxhQUFBLENBQ0EsaUJBQUEsQ0FDQSxTQUFBLENBQ0EsS0FBQSxDQUNBLFFBQUEsQ0FDQSxVQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FDQSxtQ0FBQSxDQUVBLHFDQVpELDZCQWFFLFlBQUEsQ0FBQSxDQUtILHNCQUNDLFlBQUEsQ0FDQSxpQkFBQSxDQUNBLFVBQUEsQ0FDQSxrQkFBQSxDQUNBLHNCQUFBLENBQ0EsbUJBQUEsQ0FFQSxzQ0FDQyxpREFBQSxDQUlGLHNCQUNDLGtCQUFBLENBQ0EsZ0JBQUEsQ0FHRCxxQ0FqRUQsc0JBa0VFLGNBQUEsQ0FFQSxzQkFDQyxnQkFBQSxDQUNBLG1CQUFBLENBR0Qsc0JBQ0MsZ0JBQUEsQ0FBQSxDQUlGLHFDQTlFRCxzQkErRUUsY0FBQSxDQUNBLFdBQUEsQ0FFQSxzQkFDQyxZQUFBLENBQ0EsZUFBQSxDQUNBLG1CQUFBLENBR0Qsc0JBQ0MsWUFBQSxDQUNBLDZCQUFBLENBR0Qsc0JBQ0MsZUFBQSxDQUNBLGVBQUEsQ0FDQSxhQUFBLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vc3R5bGVzL3ZhcnNcXFwiO1xcclxcblxcclxcbi5jYXJvdXNlbCB7XFxyXFxuXFx0cG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcdHBhZGRpbmc6IDUwcHggMDtcXHJcXG5cXHRib3JkZXItcmlnaHQ6IDFweCBzb2xpZCByZ2JhKCRsaW5lcywgJGFscGhhOiAwLjEpO1xcclxcblxcdGJvcmRlci1sZWZ0OiAxcHggc29saWQgcmdiYSgkbGluZXMsICRhbHBoYTogMC4xKTtcXHJcXG5cXHRmb250LWZhbWlseTogJG1haW4tZm9udDtcXHJcXG5cXHJcXG5cXHQmOjpiZWZvcmUge1xcclxcblxcdFxcdGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcblxcdFxcdGRpc3BsYXk6IGJsb2NrO1xcclxcblxcdFxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG5cXHRcXHR6LWluZGV4OiAwO1xcclxcblxcdFxcdHRvcDogMDtcXHJcXG5cXHRcXHRyaWdodDogMDtcXHJcXG5cXHRcXHRib3R0b206IDA7XFxyXFxuXFx0XFx0bGVmdDogMDtcXHJcXG5cXHRcXHR3aWR0aDogMXB4O1xcclxcblxcdFxcdGhlaWdodDogMTAwJTtcXHJcXG5cXHRcXHRtYXJnaW46IGF1dG87XFxyXFxuXFx0XFx0YmFja2dyb3VuZC1jb2xvcjogcmdiYSgkbGluZXMsICRhbHBoYTogMC4xKTtcXHJcXG5cXHJcXG5cXHRcXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MjVweCkge1xcclxcblxcdFxcdFxcdGRpc3BsYXk6IG5vbmU7XFxyXFxuXFx0XFx0fVxcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQmRGF0YVdyYXBwZXIge1xcclxcblxcdFxcdHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG5cXHJcXG5cXHRcXHQmOjphZnRlciB7XFxyXFxuXFx0XFx0XFx0Y29udGVudDogXFxcIlxcXCI7XFxyXFxuXFx0XFx0XFx0ZGlzcGxheTogYmxvY2s7XFxyXFxuXFx0XFx0XFx0cG9zaXRpb246IGFic29sdXRlO1xcclxcblxcdFxcdFxcdHotaW5kZXg6IDA7XFxyXFxuXFx0XFx0XFx0dG9wOiAwO1xcclxcblxcdFxcdFxcdGJvdHRvbTogMDtcXHJcXG5cXHRcXHRcXHR3aWR0aDogMTAwJTtcXHJcXG5cXHRcXHRcXHRoZWlnaHQ6IDFweDtcXHJcXG5cXHRcXHRcXHRtYXJnaW46IGF1dG87XFxyXFxuXFx0XFx0XFx0YmFja2dyb3VuZC1jb2xvcjogcmdiYSgkbGluZXMsICRhbHBoYTogMC4xKTtcXHJcXG5cXHJcXG5cXHRcXHRcXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MjVweCkge1xcclxcblxcdFxcdFxcdFxcdGRpc3BsYXk6IG5vbmU7XFxyXFxuXFx0XFx0XFx0fVxcclxcblxcdFxcdH1cXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0JkNvdW50RG93biB7XFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRcXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuXFx0XFx0ei1pbmRleDogMTA7XFxyXFxuXFx0XFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHRcXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHRcXHRtYXJnaW4tYm90dG9tOiAxMzdweDtcXHJcXG5cXHJcXG5cXHRcXHRkaXY6Zmlyc3QtY2hpbGQge1xcclxcblxcdFxcdFxcdG1hcmdpbi1yaWdodDogY2FsYygyNXB4ICsgKDgwIC0gMjUpICogKCgxMDB2dyAtIDMyMHB4KSAvICgxNDQwIC0gMzIwKSkpO1xcclxcblxcdFxcdH1cXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0JkNvbnRyb2xzIHtcXHJcXG5cXHRcXHRtYXJnaW4tYm90dG9tOiA1NnB4O1xcclxcblxcdFxcdG1hcmdpbi1sZWZ0OiA4MHB4O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHRAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MjVweCkge1xcclxcblxcdFxcdHBhZGRpbmc6IDMwcHggMDtcXHJcXG5cXHJcXG5cXHRcXHQmQ291bnREb3duIHtcXHJcXG5cXHRcXHRcXHRtYXJnaW4tdG9wOiAxMDBweDtcXHJcXG5cXHRcXHRcXHRtYXJnaW4tYm90dG9tOiAxMDBweDtcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0JkNvbnRyb2xzIHtcXHJcXG5cXHRcXHRcXHRtYXJnaW4tbGVmdDogMTVweDtcXHJcXG5cXHRcXHR9XFxyXFxuXFx0fVxcclxcblxcclxcblxcdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUyNXB4KSB7XFxyXFxuXFx0XFx0cGFkZGluZzogMjBweCAwO1xcclxcblxcdFxcdGJvcmRlcjogbm9uZTtcXHJcXG5cXHJcXG5cXHRcXHQmQ291bnREb3duIHtcXHJcXG5cXHRcXHRcXHRtYXJnaW4tdG9wOiAwO1xcclxcblxcdFxcdFxcdG1hcmdpbi1ib3R0b206IDA7XFxyXFxuXFx0XFx0XFx0cGFkZGluZy1ib3R0b206IDU2cHg7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCZTbGlkZXJXcmFwcGVyIHtcXHJcXG5cXHRcXHRcXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdFxcdFxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0JkNvbnRyb2xzIHtcXHJcXG5cXHRcXHRcXHRtYXJnaW4tdG9wOiAzNnB4O1xcclxcblxcdFxcdFxcdG1hcmdpbi1ib3R0b206IDA7XFxyXFxuXFx0XFx0XFx0bWFyZ2luLWxlZnQ6IDA7XFxyXFxuXFx0XFx0fVxcclxcblxcdH1cXHJcXG59XFxyXFxuXCIsXCJAaW1wb3J0IFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcFxcXCI7XFxyXFxuXFxyXFxuJGJnOiAjRjRGNUY5O1xcclxcbiRsaW5lczogIzQyNTY3QTtcXHJcXG4kbWFpbi10ZXh0OiAjNDI1NjdBO1xcclxcbiRzbGlkZXItYWNjZW50OiAjMzg3N0VFO1xcclxcbiRhY2NlbnQtZmlyc3Q6ICM1RDVGRUY7XFxyXFxuJGFjY2VudC1zZWNvbmQ6ICNFRjVEQTg7XFxyXFxuJGFjY2VudC1ncmFkaWVudDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiKDU2IDExOSAyMzggLyAxMDAlKSAwJSwgcmdiKDIzOSA5MyAxNjggLyAxMDAlKSA4MCUpO1xcclxcblxcclxcbi8vIGZvbnRzOlxcclxcbiRtYWluLWZvbnQ6IFxcXCJQVCBTYW5zXFxcIiwgc2Fucy1zZXJpZjtcXHJcXG4kYWNjZW50LWZvbnQ6IFxcXCJCZWJhcyBOZXVlXFxcIiwgY3Vyc2l2ZTtcXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJjYXJvdXNlbFwiOiBcImY3UFhtN0dRaFp6eE1zSVU1WWZaXCIsXG5cdFwiY2Fyb3VzZWxEYXRhV3JhcHBlclwiOiBcIk81Qld5eUx2WFQ0MWR2aWcyX3BnXCIsXG5cdFwiY2Fyb3VzZWxDb3VudERvd25cIjogXCJpRUNDNHV4OXBCN1JSZ21ua29HS1wiLFxuXHRcImNhcm91c2VsQ29udHJvbHNcIjogXCJjZDNjM2RfbFVyQnNHU21QSzJPT1wiLFxuXHRcImNhcm91c2VsU2xpZGVyV3JhcHBlclwiOiBcIldCOHphQ01EMHBFR1JUNDJjUDg4XCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9QmViYXMrTmV1ZSZmYW1pbHk9UFQrU2Fuczp3Z2h0QDQwMDs3MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLlRSSjJzcXFDdlJWejBNUzliZnBRey0tb3BhY2l0eTogMDtkaXNwbGF5OmlubGluZS1mbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjU2cHg7aGVpZ2h0OjU2cHg7cGFkZGluZzowO292ZXJmbG93OmhpZGRlbjstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjExKTt0cmFuc2Zvcm06c2NhbGUoMC4xMSk7Ym9yZGVyLXJhZGl1czo1MCU7YmFja2dyb3VuZC1jb2xvcjojNDI1NjdhO2NvbG9yOiM0MjU2N2E7Zm9udC1mYW1pbHk6XFxcIlBUIFNhbnNcXFwiLHNhbnMtc2VyaWY7Zm9udC1zaXplOjIwcHg7Y3Vyc29yOnBvaW50ZXJ9LkxqYVJfNTRobzZlTXRrTzR4UXlpe3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93OnZpc2libGV9LkxqYVJfNTRobzZlTXRrTzR4UXlpOjphZnRlcntjb250ZW50OmF0dHIoZGF0YS1sYWJlbCk7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo0Ljc1cmVtO29wYWNpdHk6dmFyKC0tb3BhY2l0eSk7Zm9udC1zaXplOjEuMjVyZW07Zm9udC13ZWlnaHQ6Ym9sZDtsaW5lLWhlaWdodDoxLjE2O2N1cnNvcjpkZWZhdWx0fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0RvdEJ1dHRvbi9zdHlsZS5tb2R1bGUuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsc0JBQ0MsWUFBQSxDQUVBLG1CQUFBLENBQ0Esa0JBQUEsQ0FDQSxzQkFBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBQ0EsU0FBQSxDQUNBLGVBQUEsQ0FDQSw2QkFBQSxDQUFBLHFCQUFBLENBQ0EsaUJBQUEsQ0FDQSx3QkNWVyxDRFdYLGFDWFcsQ0RZWCxnQ0NMVyxDRE1YLGNBQUEsQ0FDQSxjQUFBLENBRUEsc0JBQ0MsaUJBQUEsQ0FDQSxnQkFBQSxDQUVBLDZCQUNDLHdCQUFBLENBQ0EsaUJBQUEsQ0FDQSxZQUFBLENBQ0Esc0JBQUEsQ0FDQSxpQkFBQSxDQUNBLGdCQUFBLENBQ0EsZ0JBQUEsQ0FDQSxjQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL3N0eWxlcy92YXJzXFxcIjtcXHJcXG5cXHJcXG4uZG90QnRuIHtcXHJcXG5cXHQtLW9wYWNpdHk6IDA7XFxyXFxuXFxyXFxuXFx0ZGlzcGxheTogaW5saW5lLWZsZXg7XFxyXFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHR3aWR0aDogNTZweDtcXHJcXG5cXHRoZWlnaHQ6IDU2cHg7XFxyXFxuXFx0cGFkZGluZzogMDtcXHJcXG5cXHRvdmVyZmxvdzogaGlkZGVuO1xcclxcblxcdHRyYW5zZm9ybTogc2NhbGUoMC4xMSk7XFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogNTAlO1xcclxcblxcdGJhY2tncm91bmQtY29sb3I6ICRtYWluLXRleHQ7XFxyXFxuXFx0Y29sb3I6ICRtYWluLXRleHQ7XFxyXFxuXFx0Zm9udC1mYW1pbHk6ICRtYWluLWZvbnQ7XFxyXFxuXFx0Zm9udC1zaXplOiAyMHB4O1xcclxcblxcdGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHJcXG5cXHQmX2FjdGl2ZSB7XFxyXFxuXFx0XFx0cG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcdFxcdG92ZXJmbG93OiB2aXNpYmxlO1xcclxcblxcclxcblxcdFxcdCY6OmFmdGVyIHtcXHJcXG5cXHRcXHRcXHRjb250ZW50OiBhdHRyKGRhdGEtbGFiZWwpO1xcclxcblxcdFxcdFxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG5cXHRcXHRcXHRsZWZ0OiA0Ljc1cmVtO1xcclxcblxcdFxcdFxcdG9wYWNpdHk6IHZhcigtLW9wYWNpdHkpO1xcclxcblxcdFxcdFxcdGZvbnQtc2l6ZTogMS4yNXJlbTtcXHJcXG5cXHRcXHRcXHRmb250LXdlaWdodDogYm9sZDtcXHJcXG5cXHRcXHRcXHRsaW5lLWhlaWdodDogMS4xNjtcXHJcXG5cXHRcXHRcXHRjdXJzb3I6IGRlZmF1bHQ7XFxyXFxuXFx0XFx0fVxcclxcblxcdH1cXHJcXG59XFxyXFxuXCIsXCJAaW1wb3J0IFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcFxcXCI7XFxyXFxuXFxyXFxuJGJnOiAjRjRGNUY5O1xcclxcbiRsaW5lczogIzQyNTY3QTtcXHJcXG4kbWFpbi10ZXh0OiAjNDI1NjdBO1xcclxcbiRzbGlkZXItYWNjZW50OiAjMzg3N0VFO1xcclxcbiRhY2NlbnQtZmlyc3Q6ICM1RDVGRUY7XFxyXFxuJGFjY2VudC1zZWNvbmQ6ICNFRjVEQTg7XFxyXFxuJGFjY2VudC1ncmFkaWVudDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiKDU2IDExOSAyMzggLyAxMDAlKSAwJSwgcmdiKDIzOSA5MyAxNjggLyAxMDAlKSA4MCUpO1xcclxcblxcclxcbi8vIGZvbnRzOlxcclxcbiRtYWluLWZvbnQ6IFxcXCJQVCBTYW5zXFxcIiwgc2Fucy1zZXJpZjtcXHJcXG4kYWNjZW50LWZvbnQ6IFxcXCJCZWJhcyBOZXVlXFxcIiwgY3Vyc2l2ZTtcXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJkb3RCdG5cIjogXCJUUkoyc3FxQ3ZSVnowTVM5YmZwUVwiLFxuXHRcImRvdEJ0bl9hY3RpdmVcIjogXCJMamFSXzU0aG82ZU10a080eFF5aVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5wYnVOcFhWSmI5a2xyZEdkTFFnantkaXNwbGF5OmZsZXg7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMTt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDo1MjRweDtoZWlnaHQ6NTI0cHg7bWFyZ2luOmF1dG87Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDY2LDg2LDEyMiwuMik7Ym9yZGVyLXJhZGl1czo1MCV9LmZaTlpsbWhkVnE5blByZUh3MWpNe3Bvc2l0aW9uOmFic29sdXRlfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwNjBweCl7LnBidU5wWFZKYjlrbHJkR2RMUWdqe3dpZHRoOjMzMHB4O2hlaWdodDozMzBweH19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvRG90c0NpcmNsZS9zdHlsZS5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSxzQkFDQyxZQUFBLENBQ0EsaUJBQUEsQ0FDQSxVQUFBLENBQ0EsS0FBQSxDQUNBLE9BQUEsQ0FDQSxRQUFBLENBQ0EsTUFBQSxDQUNBLGtCQUFBLENBQ0Esc0JBQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQSxDQUNBLFdBQUEsQ0FDQSxtQ0FBQSxDQUNBLGlCQUFBLENBRUEsc0JBQ0MsaUJBQUEsQ0FHRCxzQ0FwQkQsc0JBcUJFLFdBQUEsQ0FDQSxZQUFBLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vc3R5bGVzL3ZhcnNcXFwiO1xcclxcblxcclxcbi5kb3RzIHtcXHJcXG5cXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG5cXHR6LWluZGV4OiAxMTtcXHJcXG5cXHR0b3A6IDA7XFxyXFxuXFx0cmlnaHQ6IDA7XFxyXFxuXFx0Ym90dG9tOiAwO1xcclxcblxcdGxlZnQ6IDA7XFxyXFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHR3aWR0aDogNTI0cHg7XFxyXFxuXFx0aGVpZ2h0OiA1MjRweDtcXHJcXG5cXHRtYXJnaW46IGF1dG87XFxyXFxuXFx0Ym9yZGVyOiAxcHggc29saWQgcmdiYSgkbWFpbi10ZXh0LCAkYWxwaGE6IDAuMik7XFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogNTAlO1xcclxcblxcclxcblxcdCZJdGVtIHtcXHJcXG5cXHRcXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0fVxcclxcblxcclxcblxcdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwNjBweCkge1xcclxcblxcdFxcdHdpZHRoOiAzMzBweDtcXHJcXG5cXHRcXHRoZWlnaHQ6IDMzMHB4O1xcclxcblxcdH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiZG90c1wiOiBcInBidU5wWFZKYjlrbHJkR2RMUWdqXCIsXG5cdFwiZG90c0l0ZW1cIjogXCJmWk5abG1oZFZxOW5QcmVIdzFqTVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5DaVI0MG1WVmFTSThacTZHbTZ6anttYXgtd2lkdGg6NDAwcHh9LndJM0JNMjBGUlc5MzM2VkdSQzZIe21hcmdpbi1ib3R0b206MTVweDtjb2xvcjojMzg3N2VlO2ZvbnQtZmFtaWx5OlxcXCJCZWJhcyBOZXVlXFxcIixjdXJzaXZlO2ZvbnQtc2l6ZToyNXB4O2xpbmUtaGVpZ2h0OjEuMn0uejVTN21QazlvelB1TzNZYzlYM2h7Y29sb3I6IzQyNTY3YTtmb250LWZhbWlseTpcXFwiUFQgU2Fuc1xcXCIsc2Fucy1zZXJpZjtmb250LXNpemU6MjBweDtsaW5lLWhlaWdodDoxLjE2fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUyNXB4KXsuQ2lSNDBtVlZhU0k4WnE2R202emp7bWF4LXdpZHRoOjE4MHB4fS53STNCTTIwRlJXOTMzNlZHUkM2SHtmb250LXNpemU6MTZweH0uejVTN21QazlvelB1TzNZYzlYM2h7Zm9udC1zaXplOjE0cHh9fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0V2ZW50U2xpZGUvc3R5bGUubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFycy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLHNCQUNDLGVBQUEsQ0FFQSxzQkFDQyxrQkFBQSxDQUNBLGFDRmMsQ0RHZCxnQ0NJWSxDREhaLGNBQUEsQ0FDQSxlQUFBLENBR0Qsc0JBQ0MsYUNWVSxDRFdWLGdDQ0pVLENES1YsY0FBQSxDQUNBLGdCQUFBLENBR0QscUNBbEJELHNCQW1CRSxlQUFBLENBRUEsc0JBQ0MsY0FBQSxDQUdELHNCQUNDLGNBQUEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9zdHlsZXMvdmFyc1xcXCI7XFxyXFxuXFxyXFxuLnNsaWRlIHtcXHJcXG5cXHRtYXgtd2lkdGg6IDQwMHB4O1xcclxcblxcclxcblxcdCZUaXRsZSB7XFxyXFxuXFx0XFx0bWFyZ2luLWJvdHRvbTogMTVweDtcXHJcXG5cXHRcXHRjb2xvcjogJHNsaWRlci1hY2NlbnQ7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6ICRhY2NlbnQtZm9udDtcXHJcXG5cXHRcXHRmb250LXNpemU6IDI1cHg7XFxyXFxuXFx0XFx0bGluZS1oZWlnaHQ6IDEuMjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0JlRleHQge1xcclxcblxcdFxcdGNvbG9yOiAkbWFpbi10ZXh0O1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiAkbWFpbi1mb250O1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMjBweDtcXHJcXG5cXHRcXHRsaW5lLWhlaWdodDogMS4xNjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpIHtcXHJcXG5cXHRcXHRtYXgtd2lkdGg6IDE4MHB4O1xcclxcblxcclxcblxcdFxcdCZUaXRsZSB7XFxyXFxuXFx0XFx0XFx0Zm9udC1zaXplOiAxNnB4O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmVGV4dCB7XFxyXFxuXFx0XFx0XFx0Zm9udC1zaXplOiAxNHB4O1xcclxcblxcdFxcdH1cXHJcXG5cXHR9XFxyXFxufVxcclxcblwiLFwiQGltcG9ydCBcXFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1CZWJhcytOZXVlJmZhbWlseT1QVCtTYW5zOndnaHRANDAwOzcwMCZkaXNwbGF5PXN3YXBcXFwiO1xcclxcblxcclxcbiRiZzogI0Y0RjVGOTtcXHJcXG4kbGluZXM6ICM0MjU2N0E7XFxyXFxuJG1haW4tdGV4dDogIzQyNTY3QTtcXHJcXG4kc2xpZGVyLWFjY2VudDogIzM4NzdFRTtcXHJcXG4kYWNjZW50LWZpcnN0OiAjNUQ1RkVGO1xcclxcbiRhY2NlbnQtc2Vjb25kOiAjRUY1REE4O1xcclxcbiRhY2NlbnQtZ3JhZGllbnQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYig1NiAxMTkgMjM4IC8gMTAwJSkgMCUsIHJnYigyMzkgOTMgMTY4IC8gMTAwJSkgODAlKTtcXHJcXG5cXHJcXG4vLyBmb250czpcXHJcXG4kbWFpbi1mb250OiBcXFwiUFQgU2Fuc1xcXCIsIHNhbnMtc2VyaWY7XFxyXFxuJGFjY2VudC1mb250OiBcXFwiQmViYXMgTmV1ZVxcXCIsIGN1cnNpdmU7XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwic2xpZGVcIjogXCJDaVI0MG1WVmFTSThacTZHbTZ6alwiLFxuXHRcInNsaWRlVGl0bGVcIjogXCJ3STNCTTIwRlJXOTMzNlZHUkM2SFwiLFxuXHRcInNsaWRlVGV4dFwiOiBcIno1UzdtUGs5b3pQdU8zWWM5WDNoXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9QmViYXMrTmV1ZSZmYW1pbHk9UFQrU2Fuczp3Z2h0QDQwMDs3MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldHt3aWR0aDo2cHg7aGVpZ2h0OjZweDt0cmFuc2l0aW9uOmFsbCAzMDBtcztiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNjYsODYsMTIyLC43KX0uc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiM0MjU2N2F9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvRXZlbnRTbGlkZXIvc2xpZGVyU3R5bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSwwQkFDQyxTQUFBLENBQ0EsVUFBQSxDQUNBLG9CQUFBLENBQ0EsbUNBQUEsQ0FHRCxpQ0FDQyx3QkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9zdHlsZXMvdmFyc1xcXCI7XFxyXFxuXFxyXFxuLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCB7XFxyXFxuXFx0d2lkdGg6IDZweDtcXHJcXG5cXHRoZWlnaHQ6IDZweDtcXHJcXG5cXHR0cmFuc2l0aW9uOiBhbGwgMzAwbXM7XFxyXFxuXFx0YmFja2dyb3VuZC1jb2xvcjogcmdiYSgkbWFpbi10ZXh0LCAkYWxwaGE6IDAuNyk7XFxyXFxufVxcclxcblxcclxcbi5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlIHtcXHJcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCRtYWluLXRleHQsICRhbHBoYTogMSk7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5vd2g4aTBJYTlSQXJ5ZUZnOTF0TXtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMCV9Lkw1UVZfNTlmdWFzNlZxYTMzQnY4e21hcmdpbi1yaWdodDo4MHB4O21hcmdpbi1sZWZ0OjgwcHg7b3ZlcmZsb3c6aGlkZGVufS50Tmo0V3JtbDRWZThMOW9CNnlONntkaXNwbGF5Om5vbmV9LnpVTGVicE00N3J5T2VYNlBPME9Ye3dpZHRoOi13ZWJraXQtZml0LWNvbnRlbnQ7d2lkdGg6LW1vei1maXQtY29udGVudDt3aWR0aDpmaXQtY29udGVudH0uYjBHbXJXRl9TcUdGRVBfTkNWcDN7YmFja2dyb3VuZC1jb2xvcjojN2ZmZmQ0fS5oMFZmME9HSGRkcjN5ekw1dlNCUSwudWp3bjlOem9nS2hBX214cWM1U0d7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMDtmbGV4LXNocmluazowO3dpZHRoOjIuNXJlbSAhaW1wb3J0YW50O2hlaWdodDoyLjVyZW0gIWltcG9ydGFudH0uaDBWZjBPR0hkZHIzeXpMNXZTQlF7bGVmdDoyMHB4O29wYWNpdHk6MH0udWp3bjlOem9nS2hBX214cWM1U0d7cmlnaHQ6MjBweH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MjVweCl7Lkw1UVZfNTlmdWFzNlZxYTMzQnY4e21hcmdpbi1yaWdodDoxNXB4O21hcmdpbi1sZWZ0OjE1cHh9LmgwVmYwT0dIZGRyM3l6TDV2U0JRLC51anduOU56b2dLaEFfbXhxYzVTR3tkaXNwbGF5Om5vbmV9fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUyNXB4KXsuTDVRVl81OWZ1YXM2VnFhMzNCdjh7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLWxlZnQ6MDtwYWRkaW5nLXRvcDoyMHB4O3BhZGRpbmctYm90dG9tOjIwcHg7Ym9yZGVyLXRvcDoxcHggc29saWQgI2M3Y2RkOX0udE5qNFdybWw0VmU4TDlvQjZ5TjZ7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTI1cHg7bGVmdDowO2NvbG9yOiM0MjU2N2F9fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0V2ZW50U2xpZGVyL3N0eWxlLm1vZHVsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3ZhcnMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSxzQkFDQyxZQUFBLENBQ0EsaUJBQUEsQ0FDQSxrQkFBQSxDQUNBLFVBQUEsQ0FFQSxzQkFDQyxpQkFBQSxDQUNBLGdCQUFBLENBQ0EsZUFBQSxDQUdELHNCQUNDLFlBQUEsQ0FHRCxzQkFDQyx5QkFBQSxDQUFBLHNCQUFBLENBQUEsaUJBQUEsQ0FHRCxzQkFDQyx3QkFBQSxDQUdELDRDQUVDLGlCQUFBLENBQ0EsVUFBQSxDQUNBLGFBQUEsQ0FDQSx1QkFBQSxDQUNBLHdCQUFBLENBR0Qsc0JBQ0MsU0FBQSxDQUNBLFNBQUEsQ0FHRCxzQkFDQyxVQUFBLENBR0QscUNBQ0Msc0JBQ0MsaUJBQUEsQ0FDQSxnQkFBQSxDQUdELDRDQUVDLFlBQUEsQ0FBQSxDQUlGLHFDQUNDLHNCQUNDLGNBQUEsQ0FDQSxhQUFBLENBQ0EsZ0JBQUEsQ0FDQSxtQkFBQSxDQUNBLDRCQUFBLENBR0Qsc0JBQ0MsYUFBQSxDQUNBLGlCQUFBLENBQ0EsU0FBQSxDQUNBLE1BQUEsQ0FDQSxhQ2xFUyxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL3N0eWxlcy92YXJzXFxcIjtcXHJcXG5cXHJcXG4uc2xpZGVyIHtcXHJcXG5cXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcclxcblxcdHdpZHRoOiAxMDAlO1xcclxcblxcclxcblxcdCZXcmFwcGVyIHtcXHJcXG5cXHRcXHRtYXJnaW4tcmlnaHQ6IDgwcHg7XFxyXFxuXFx0XFx0bWFyZ2luLWxlZnQ6IDgwcHg7XFxyXFxuXFx0XFx0b3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0JlRvcGljIHtcXHJcXG5cXHRcXHRkaXNwbGF5OiBub25lO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQmU2xpZGUge1xcclxcblxcdFxcdHdpZHRoOiBmaXQtY29udGVudDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0JlBhZyB7XFxyXFxuXFx0XFx0YmFja2dyb3VuZC1jb2xvcjogYXF1YW1hcmluZTtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0Jk5hdl9wcmV2LFxcclxcblxcdCZOYXZfbmV4dCB7XFxyXFxuXFx0XFx0cG9zaXRpb246IGFic29sdXRlO1xcclxcblxcdFxcdHotaW5kZXg6IDEwO1xcclxcblxcdFxcdGZsZXgtc2hyaW5rOiAwO1xcclxcblxcdFxcdHdpZHRoOiAyLjVyZW0gIWltcG9ydGFudDtcXHJcXG5cXHRcXHRoZWlnaHQ6IDIuNXJlbSAhaW1wb3J0YW50O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQmTmF2X3ByZXYge1xcclxcblxcdFxcdGxlZnQ6IDIwcHg7XFxyXFxuXFx0XFx0b3BhY2l0eTogMDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0Jk5hdl9uZXh0IHtcXHJcXG5cXHRcXHRyaWdodDogMjBweDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzI1cHgpIHtcXHJcXG5cXHRcXHQmV3JhcHBlciB7XFxyXFxuXFx0XFx0XFx0bWFyZ2luLXJpZ2h0OiAxNXB4O1xcclxcblxcdFxcdFxcdG1hcmdpbi1sZWZ0OiAxNXB4O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmTmF2X3ByZXYsXFxyXFxuXFx0XFx0Jk5hdl9uZXh0IHtcXHJcXG5cXHRcXHRcXHRkaXNwbGF5OiBub25lO1xcclxcblxcdFxcdH1cXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpIHtcXHJcXG5cXHRcXHQmV3JhcHBlciB7XFxyXFxuXFx0XFx0XFx0bWFyZ2luLXJpZ2h0OiAwO1xcclxcblxcdFxcdFxcdG1hcmdpbi1sZWZ0OiAwO1xcclxcblxcdFxcdFxcdHBhZGRpbmctdG9wOiAyMHB4O1xcclxcblxcdFxcdFxcdHBhZGRpbmctYm90dG9tOiAyMHB4O1xcclxcblxcdFxcdFxcdGJvcmRlci10b3A6IDFweCBzb2xpZCAjQzdDREQ5O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmVG9waWMge1xcclxcblxcdFxcdFxcdGRpc3BsYXk6IGJsb2NrO1xcclxcblxcdFxcdFxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG5cXHRcXHRcXHR0b3A6IC0yNXB4O1xcclxcblxcdFxcdFxcdGxlZnQ6IDA7XFxyXFxuXFx0XFx0XFx0Y29sb3I6ICRtYWluLXRleHQ7XFxyXFxuXFx0XFx0fVxcclxcblxcdH1cXHJcXG59XFxyXFxuXCIsXCJAaW1wb3J0IFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcFxcXCI7XFxyXFxuXFxyXFxuJGJnOiAjRjRGNUY5O1xcclxcbiRsaW5lczogIzQyNTY3QTtcXHJcXG4kbWFpbi10ZXh0OiAjNDI1NjdBO1xcclxcbiRzbGlkZXItYWNjZW50OiAjMzg3N0VFO1xcclxcbiRhY2NlbnQtZmlyc3Q6ICM1RDVGRUY7XFxyXFxuJGFjY2VudC1zZWNvbmQ6ICNFRjVEQTg7XFxyXFxuJGFjY2VudC1ncmFkaWVudDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiKDU2IDExOSAyMzggLyAxMDAlKSAwJSwgcmdiKDIzOSA5MyAxNjggLyAxMDAlKSA4MCUpO1xcclxcblxcclxcbi8vIGZvbnRzOlxcclxcbiRtYWluLWZvbnQ6IFxcXCJQVCBTYW5zXFxcIiwgc2Fucy1zZXJpZjtcXHJcXG4kYWNjZW50LWZvbnQ6IFxcXCJCZWJhcyBOZXVlXFxcIiwgY3Vyc2l2ZTtcXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJzbGlkZXJcIjogXCJvd2g4aTBJYTlSQXJ5ZUZnOTF0TVwiLFxuXHRcInNsaWRlcldyYXBwZXJcIjogXCJMNVFWXzU5ZnVhczZWcWEzM0J2OFwiLFxuXHRcInNsaWRlclRvcGljXCI6IFwidE5qNFdybWw0VmU4TDlvQjZ5TjZcIixcblx0XCJzbGlkZXJTbGlkZVwiOiBcInpVTGVicE00N3J5T2VYNlBPME9YXCIsXG5cdFwic2xpZGVyUGFnXCI6IFwiYjBHbXJXRl9TcUdGRVBfTkNWcDNcIixcblx0XCJzbGlkZXJOYXZfcHJldlwiOiBcImgwVmYwT0dIZGRyM3l6TDV2U0JRXCIsXG5cdFwic2xpZGVyTmF2X25leHRcIjogXCJ1anduOU56b2dLaEFfbXhxYzVTR1wiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5LNXRDZUF4NFNGcWRPRWx0SWhpb3tkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOmF1dG8gMWZyIGF1dG8gMmZyO2NvbG9yOiM0MjU2N2F9LlNwamVreGFWdm05c1NPMG1nMHlZe2dyaWQtY29sdW1uOjE7bWFyZ2luLWJvdHRvbToyMHB4O2ZvbnQtc2l6ZToxNHB4fS5VSzJ5MVBPU3lrTHg1d2xMdGZLYXtkaXNwbGF5OmZsZXg7Z3JpZC1jb2x1bW46MTthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnR9LldzUTQ5UUZhVU04bE94TDNFb1pLOmZpcnN0LWNoaWxke21hcmdpbi1yaWdodDoyMHB4fS5LNXRDZUF4NFNGcWRPRWx0SWhpbyAuU216SHhWSEtLeVFZUGpDbFo4QWV7ZGlzcGxheTpub25lO3Bvc2l0aW9uOnJlbGF0aXZlO2dyaWQtY29sdW1uOjN9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpey5TcGpla3hhVnZtOXNTTzBtZzB5WXttYXJnaW4tYm90dG9tOjEwcHh9LldzUTQ5UUZhVU04bE94TDNFb1pLOmZpcnN0LWNoaWxke21hcmdpbi1yaWdodDo4cHh9Lks1dENlQXg0U0ZxZE9FbHRJaGlvIC5TbXpIeFZIS0t5UVlQakNsWjhBZXtkaXNwbGF5OmJsb2NrfX1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9QZXJpb2RDb250cm9scy9zdHlsZS5tb2R1bGUuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsc0JBQ0MsWUFBQSxDQUNBLHVDQUFBLENBQ0EsYUNEVyxDREdYLHNCQUNDLGFBQUEsQ0FDQSxrQkFBQSxDQUNBLGNBQUEsQ0FHRCxzQkFDQyxZQUFBLENBQ0EsYUFBQSxDQUNBLGtCQUFBLENBQ0EsMEJBQUEsQ0FHRCxrQ0FDQyxpQkFBQSxDQUdELDRDQUNDLFlBQUEsQ0FDQSxpQkFBQSxDQUNBLGFBQUEsQ0FHRCxxQ0FDQyxzQkFDQyxrQkFBQSxDQUdELGtDQUNDLGdCQUFBLENBR0QsNENBQ0MsYUFBQSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL3N0eWxlcy92YXJzXFxcIjtcXHJcXG5cXHJcXG4uY29udHJvbHMge1xcclxcblxcdGRpc3BsYXk6IGdyaWQ7XFxyXFxuXFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmciBhdXRvIDJmcjtcXHJcXG5cXHRjb2xvcjogJG1haW4tdGV4dDtcXHJcXG5cXHJcXG5cXHQmQ291bnQge1xcclxcblxcdFxcdGdyaWQtY29sdW1uOiAxO1xcclxcblxcdFxcdG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAxNHB4O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQmQnRucyB7XFxyXFxuXFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRcXHRncmlkLWNvbHVtbjogMTtcXHJcXG5cXHRcXHRhbGlnbi1pdGVtczogY2VudGVyO1xcclxcblxcdFxcdGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0JkJ0bjpmaXJzdC1jaGlsZCB7XFxyXFxuXFx0XFx0bWFyZ2luLXJpZ2h0OiAyMHB4O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQuc2xpZGVyUGFnIHtcXHJcXG5cXHRcXHRkaXNwbGF5OiBub25lO1xcclxcblxcdFxcdHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG5cXHRcXHRncmlkLWNvbHVtbjogMztcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpIHtcXHJcXG5cXHRcXHQmQ291bnQge1xcclxcblxcdFxcdFxcdG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCZCdG46Zmlyc3QtY2hpbGQge1xcclxcblxcdFxcdFxcdG1hcmdpbi1yaWdodDogOHB4O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQuc2xpZGVyUGFnIHtcXHJcXG5cXHRcXHRcXHRkaXNwbGF5OiBibG9jaztcXHJcXG5cXHRcXHR9XFxyXFxuXFx0fVxcclxcbn1cXHJcXG5cIixcIkBpbXBvcnQgXFxcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9QmViYXMrTmV1ZSZmYW1pbHk9UFQrU2Fuczp3Z2h0QDQwMDs3MDAmZGlzcGxheT1zd2FwXFxcIjtcXHJcXG5cXHJcXG4kYmc6ICNGNEY1Rjk7XFxyXFxuJGxpbmVzOiAjNDI1NjdBO1xcclxcbiRtYWluLXRleHQ6ICM0MjU2N0E7XFxyXFxuJHNsaWRlci1hY2NlbnQ6ICMzODc3RUU7XFxyXFxuJGFjY2VudC1maXJzdDogIzVENUZFRjtcXHJcXG4kYWNjZW50LXNlY29uZDogI0VGNURBODtcXHJcXG4kYWNjZW50LWdyYWRpZW50OiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2IoNTYgMTE5IDIzOCAvIDEwMCUpIDAlLCByZ2IoMjM5IDkzIDE2OCAvIDEwMCUpIDgwJSk7XFxyXFxuXFxyXFxuLy8gZm9udHM6XFxyXFxuJG1haW4tZm9udDogXFxcIlBUIFNhbnNcXFwiLCBzYW5zLXNlcmlmO1xcclxcbiRhY2NlbnQtZm9udDogXFxcIkJlYmFzIE5ldWVcXFwiLCBjdXJzaXZlO1xcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRyb2xzXCI6IFwiSzV0Q2VBeDRTRnFkT0VsdEloaW9cIixcblx0XCJjb250cm9sc0NvdW50XCI6IFwiU3BqZWt4YVZ2bTlzU08wbWcweVlcIixcblx0XCJjb250cm9sc0J0bnNcIjogXCJVSzJ5MVBPU3lrTHg1d2xMdGZLYVwiLFxuXHRcImNvbnRyb2xzQnRuXCI6IFwiV3NRNDlRRmFVTThsT3hMM0VvWktcIixcblx0XCJzbGlkZXJQYWdcIjogXCJTbXpIeFZIS0t5UVlQakNsWjhBZVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5wRngzaFlTbGUyX3F1S3pjSTBRZHtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW46MDttYXJnaW4tYm90dG9tOjU2cHg7cGFkZGluZy1sZWZ0Ojc4cHg7Y29sb3I6IzQyNTY3YTtmb250LWZhbWlseTpcXFwiUFQgU2Fuc1xcXCIsc2Fucy1zZXJpZjtmb250LXNpemU6NTZweDtmb250LXdlaWdodDo3MDA7bGluZS1oZWlnaHQ6MS4yfS5wRngzaFlTbGUyX3F1S3pjSTBRZDo6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3dpZHRoOjVweDtoZWlnaHQ6OTAlO21hcmdpbi10b3A6YXV0bzttYXJnaW4tYm90dG9tOmF1dG87YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2IoNTYsIDExOSwgMjM4KSAwJSwgcmdiKDIzOSwgOTMsIDE2OCkgODAlKTtiYWNrZ3JvdW5kLWNvbG9yOiNlZjVkYTh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpey5wRngzaFlTbGUyX3F1S3pjSTBRZDo6YmVmb3Jle2Rpc3BsYXk6bm9uZX19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTA2MHB4KXsucEZ4M2hZU2xlMl9xdUt6Y0kwUWR7cGFkZGluZy1sZWZ0OjU4cHg7Zm9udC1zaXplOjQwcHh9fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDcyNXB4KXsucEZ4M2hZU2xlMl9xdUt6Y0kwUWR7bWFyZ2luLWJvdHRvbTo3NnB4O3BhZGRpbmctbGVmdDoyOHB4O2ZvbnQtc2l6ZTozMnB4fX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MjVweCl7LnBGeDNoWVNsZTJfcXVLemNJMFFke21hcmdpbi1ib3R0b206MzZweDtwYWRkaW5nLWxlZnQ6MDtmb250LXNpemU6MjBweH19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvVGl0bGUvc3R5bGUubW9kdWxlLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFycy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLHNCQUNDLGlCQUFBLENBQ0EsUUFBQSxDQUNBLGtCQUFBLENBQ0EsaUJBQUEsQ0FDQSxhQ0hXLENESVgsZ0NDR1csQ0RGWCxjQUFBLENBQ0EsZUFBQSxDQUNBLGVBQUEsQ0FFQSw4QkFDQyxVQUFBLENBQ0EsaUJBQUEsQ0FDQSxLQUFBLENBQ0EsUUFBQSxDQUNBLE1BQUEsQ0FDQSxTQUFBLENBQ0EsVUFBQSxDQUNBLGVBQUEsQ0FDQSxrQkFBQSxDQUNBLCtFQ2ZnQixDRGdCaEIsd0JDakJjLENEbUJkLHFDQWJELDhCQWNFLFlBQUEsQ0FBQSxDQUlGLHNDQTdCRCxzQkE4QkUsaUJBQUEsQ0FDQSxjQUFBLENBQUEsQ0FHRCxxQ0FsQ0Qsc0JBbUNFLGtCQUFBLENBQ0EsaUJBQUEsQ0FDQSxjQUFBLENBQUEsQ0FHRCxxQ0F4Q0Qsc0JBeUNFLGtCQUFBLENBQ0EsY0FBQSxDQUNBLGNBQUEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9zdHlsZXMvdmFyc1xcXCI7XFxyXFxuXFxyXFxuLnRpdGxlIHtcXHJcXG5cXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuXFx0bWFyZ2luOiAwO1xcclxcblxcdG1hcmdpbi1ib3R0b206IDU2cHg7XFxyXFxuXFx0cGFkZGluZy1sZWZ0OiA3OHB4O1xcclxcblxcdGNvbG9yOiAkbWFpbi10ZXh0O1xcclxcblxcdGZvbnQtZmFtaWx5OiAkbWFpbi1mb250O1xcclxcblxcdGZvbnQtc2l6ZTogNTZweDtcXHJcXG5cXHRmb250LXdlaWdodDogNzAwO1xcclxcblxcdGxpbmUtaGVpZ2h0OiAxLjI7XFxyXFxuXFxyXFxuXFx0Jjo6YmVmb3JlIHtcXHJcXG5cXHRcXHRjb250ZW50OiBcXFwiXFxcIjtcXHJcXG5cXHRcXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0XFx0dG9wOiAwO1xcclxcblxcdFxcdGJvdHRvbTogMDtcXHJcXG5cXHRcXHRsZWZ0OiAwO1xcclxcblxcdFxcdHdpZHRoOiA1cHg7XFxyXFxuXFx0XFx0aGVpZ2h0OiA5MCU7XFxyXFxuXFx0XFx0bWFyZ2luLXRvcDogYXV0bztcXHJcXG5cXHRcXHRtYXJnaW4tYm90dG9tOiBhdXRvO1xcclxcblxcdFxcdGJhY2tncm91bmQ6ICRhY2NlbnQtZ3JhZGllbnQ7XFxyXFxuXFx0XFx0YmFja2dyb3VuZC1jb2xvcjogJGFjY2VudC1zZWNvbmQ7XFxyXFxuXFxyXFxuXFx0XFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTI1cHgpIHtcXHJcXG5cXHRcXHRcXHRkaXNwbGF5OiBub25lO1xcclxcblxcdFxcdH1cXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTA2MHB4KSB7XFxyXFxuXFx0XFx0cGFkZGluZy1sZWZ0OiA1OHB4O1xcclxcblxcdFxcdGZvbnQtc2l6ZTogNDBweDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzI1cHgpIHtcXHJcXG5cXHRcXHRtYXJnaW4tYm90dG9tOiA3NnB4O1xcclxcblxcdFxcdHBhZGRpbmctbGVmdDogMjhweDtcXHJcXG5cXHRcXHRmb250LXNpemU6IDMycHg7XFxyXFxuXFx0fVxcclxcblxcclxcblxcdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUyNXB4KSB7XFxyXFxuXFx0XFx0bWFyZ2luLWJvdHRvbTogMzZweDtcXHJcXG5cXHRcXHRwYWRkaW5nLWxlZnQ6IDA7XFxyXFxuXFx0XFx0Zm9udC1zaXplOiAyMHB4O1xcclxcblxcdH1cXHJcXG59XFxyXFxuXCIsXCJAaW1wb3J0IFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUJlYmFzK05ldWUmZmFtaWx5PVBUK1NhbnM6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcFxcXCI7XFxyXFxuXFxyXFxuJGJnOiAjRjRGNUY5O1xcclxcbiRsaW5lczogIzQyNTY3QTtcXHJcXG4kbWFpbi10ZXh0OiAjNDI1NjdBO1xcclxcbiRzbGlkZXItYWNjZW50OiAjMzg3N0VFO1xcclxcbiRhY2NlbnQtZmlyc3Q6ICM1RDVGRUY7XFxyXFxuJGFjY2VudC1zZWNvbmQ6ICNFRjVEQTg7XFxyXFxuJGFjY2VudC1ncmFkaWVudDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiKDU2IDExOSAyMzggLyAxMDAlKSAwJSwgcmdiKDIzOSA5MyAxNjggLyAxMDAlKSA4MCUpO1xcclxcblxcclxcbi8vIGZvbnRzOlxcclxcbiRtYWluLWZvbnQ6IFxcXCJQVCBTYW5zXFxcIiwgc2Fucy1zZXJpZjtcXHJcXG4kYWNjZW50LWZvbnQ6IFxcXCJCZWJhcyBOZXVlXFxcIiwgY3Vyc2l2ZTtcXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJ0aXRsZVwiOiBcInBGeDNoWVNsZTJfcXVLemNJMFFkXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKntib3gtc2l6aW5nOmJvcmRlci1ib3h9aHRtbCxib2R5e2hlaWdodDoxMDAlO21hcmdpbjowO3BhZGRpbmc6MH11bHttYXJnaW46MDtwYWRkaW5nOjB9dWwgbGl7bGlzdC1zdHlsZTpub25lfW9se21hcmdpbjowO3BhZGRpbmc6MH1we21hcmdpbjowfWlucHV0LHRleHRhcmVhe2ZvbnQtZmFtaWx5OmluaGVyaXR9aW5wdXRbdHlwZT1zZWFyY2hdOjotbXMtY2xlYXJ7ZGlzcGxheTpub25lO3dpZHRoOjA7aGVpZ2h0OjB9aW5wdXRbdHlwZT1zZWFyY2hdOjotbXMtcmV2ZWFse2Rpc3BsYXk6bm9uZTt3aWR0aDowO2hlaWdodDowfWlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbixpbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24saW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWJ1dHRvbixpbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLXJlc3VsdHMtZGVjb3JhdGlvbntkaXNwbGF5Om5vbmV9YnV0dG9ue2JvcmRlcjpub25lO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwKTtjb2xvcjppbmhlcml0O2ZvbnQtZmFtaWx5OmluaGVyaXR9YnV0dG9uOjotbW96LWZvY3VzLWlubmVye3BhZGRpbmc6MDtib3JkZXI6MH1he2NvbG9yOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOm5vbmV9YTp2aXNpdGVkLGE6aG92ZXJ7Y29sb3I6aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246bm9uZX1pbWd7bWF4LXdpZHRoOjEwMCU7dmVydGljYWwtYWxpZ246dG9wfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvcmVzZXQuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxFQUNDLHFCQUFBLENBR0QsVUFFQyxXQUFBLENBQ0EsUUFBQSxDQUNBLFNBQUEsQ0FHRCxHQUNDLFFBQUEsQ0FDQSxTQUFBLENBRUEsTUFDQyxlQUFBLENBSUYsR0FDQyxRQUFBLENBQ0EsU0FBQSxDQUdELEVBQ0MsUUFBQSxDQUdELGVBRUMsbUJBQUEsQ0FHRCw4QkFDQyxZQUFBLENBQ0EsT0FBQSxDQUNBLFFBQUEsQ0FHRCwrQkFDQyxZQUFBLENBQ0EsT0FBQSxDQUNBLFFBQUEsQ0FHRCx1TUFJQyxZQUFBLENBR0QsT0FDQyxXQUFBLENBQ0EsOEJBQUEsQ0FDQSxhQUFBLENBQ0EsbUJBQUEsQ0FFQSx5QkFDQyxTQUFBLENBQ0EsUUFBQSxDQUlGLEVBQ0MsYUFBQSxDQUNBLG9CQUFBLENBRUEsa0JBRUMsYUFBQSxDQUNBLG9CQUFBLENBSUYsSUFDQyxjQUFBLENBQ0Esa0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxyXFxuXFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG59XFxyXFxuXFxyXFxuaHRtbCxcXHJcXG5ib2R5IHtcXHJcXG5cXHRoZWlnaHQ6IDEwMCU7XFxyXFxuXFx0bWFyZ2luOiAwO1xcclxcblxcdHBhZGRpbmc6IDA7XFxyXFxufVxcclxcblxcclxcbnVsIHtcXHJcXG5cXHRtYXJnaW46IDA7XFxyXFxuXFx0cGFkZGluZzogMDtcXHJcXG5cXHJcXG5cXHRsaSB7XFxyXFxuXFx0XFx0bGlzdC1zdHlsZTogbm9uZTtcXHJcXG5cXHR9XFxyXFxufVxcclxcblxcclxcbm9sIHtcXHJcXG5cXHRtYXJnaW46IDA7XFxyXFxuXFx0cGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxucCB7XFxyXFxuXFx0bWFyZ2luOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dCxcXHJcXG50ZXh0YXJlYSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6IGluaGVyaXQ7XFxyXFxufVxcclxcblxcclxcbmlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdOjotbXMtY2xlYXIge1xcclxcblxcdGRpc3BsYXk6IG5vbmU7XFxyXFxuXFx0d2lkdGg6IDA7XFxyXFxuXFx0aGVpZ2h0OiAwO1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dFt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LW1zLXJldmVhbCB7XFxyXFxuXFx0ZGlzcGxheTogbm9uZTtcXHJcXG5cXHR3aWR0aDogMDtcXHJcXG5cXHRoZWlnaHQ6IDA7XFxyXFxufVxcclxcblxcclxcbmlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uLFxcclxcbmlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxcclxcbmlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWJ1dHRvbixcXHJcXG5pbnB1dFt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtcmVzdWx0cy1kZWNvcmF0aW9uIHtcXHJcXG5cXHRkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5idXR0b24ge1xcclxcblxcdGJvcmRlcjogbm9uZTtcXHJcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG5cXHRjb2xvcjogaW5oZXJpdDtcXHJcXG5cXHRmb250LWZhbWlseTogaW5oZXJpdDtcXHJcXG5cXHJcXG5cXHQmOjotbW96LWZvY3VzLWlubmVyIHtcXHJcXG5cXHRcXHRwYWRkaW5nOiAwO1xcclxcblxcdFxcdGJvcmRlcjogMDtcXHJcXG5cXHR9XFxyXFxufVxcclxcblxcclxcbmEge1xcclxcblxcdGNvbG9yOiBpbmhlcml0O1xcclxcblxcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG5cXHJcXG5cXHQmOnZpc2l0ZWQsXFxyXFxuXFx0Jjpob3ZlciB7XFxyXFxuXFx0XFx0Y29sb3I6IGluaGVyaXQ7XFxyXFxuXFx0XFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcblxcdH1cXHJcXG59XFxyXFxuXFxyXFxuaW1nIHtcXHJcXG5cXHRtYXgtd2lkdGg6IDEwMCU7XFxyXFxuXFx0dmVydGljYWwtYWxpZ246IHRvcDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksY2E9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBkYT1uZXcgU2V0LGVhPXt9O2Z1bmN0aW9uIGZhKGEsYil7aGEoYSxiKTtoYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gaGEoYSxiKXtlYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGEuYWRkKGJbYV0pfVxudmFyIGlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGthPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYT1cbnt9LG1hPXt9O2Z1bmN0aW9uIG9hKGEpe2lmKGphLmNhbGwobWEsYSkpcmV0dXJuITA7aWYoamEuY2FsbChsYSxhKSlyZXR1cm4hMTtpZihrYS50ZXN0KGEpKXJldHVybiBtYVthXT0hMDtsYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciByYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLFxuc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gdGEoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pcWEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciB1YT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHlhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBJYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIEphPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBLYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SmEmJmFbSmFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixMYTtmdW5jdGlvbiBNYShhKXtpZih2b2lkIDA9PT1MYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtMYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTGErYX12YXIgTmE9ITE7XG5mdW5jdGlvbiBPYShhLGIpe2lmKCFhfHxOYSlyZXR1cm5cIlwiO05hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e05hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TWEoYSk6XCJcIn1cbmZ1bmN0aW9uIFBhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBNYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE1hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBNYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE1hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1PYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1PYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1PYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFFhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2Ugd2E6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEFhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgRWE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRmE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQ2E6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgQmE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgRGE6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgR2E6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOlFhKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgSGE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFFhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBRYShiKTtjYXNlIDg6cmV0dXJuIGI9PT16YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gYWIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYmIoYSxiKXthYihhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2NiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmNiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBlYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihlYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBrYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24gbGIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2tiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG1iLG5iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21iPW1ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW1iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9iKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGJbYl09cGJbYV19KX0pO2Z1bmN0aW9uIHJiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxwYi5oYXNPd25Qcm9wZXJ0eShhKSYmcGJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gc2IoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9cmIoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdGI9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHViKGEsYil7aWYoYil7aWYodGJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHZiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgd2I9bnVsbDtmdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKCl7fXZhciBJYj0hMTtmdW5jdGlvbiBKYihhLGIsYyl7aWYoSWIpcmV0dXJuIGEoYixjKTtJYj0hMDt0cnl7cmV0dXJuIEdiKGEsYixjKX1maW5hbGx5e2lmKEliPSExLG51bGwhPT16Ynx8bnVsbCE9PUFiKUhiKCksRmIoKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgTGI9ITE7aWYoaWEpdHJ5e3ZhciBNYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0xiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYil9Y2F0Y2goYSl7TGI9ITF9ZnVuY3Rpb24gTmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIE9iPSExLFBiPW51bGwsUWI9ITEsUmI9bnVsbCxTYj17b25FcnJvcjpmdW5jdGlvbihhKXtPYj0hMDtQYj1hfX07ZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe09iPSExO1BiPW51bGw7TmIuYXBwbHkoU2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFViKGEsYixjLGQsZSxmLGcsaCxrKXtUYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoT2Ipe2lmKE9iKXt2YXIgbD1QYjtPYj0hMTtQYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtRYnx8KFFiPSEwLFJiPWwpfX1mdW5jdGlvbiBWYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFdiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGIoYSl7aWYoVmIoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gWWIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9VmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gWGIoZSksYTtpZihmPT09ZClyZXR1cm4gWGIoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBaYihhKXthPVliKGEpO3JldHVybiBudWxsIT09YT8kYihhKTpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj0kYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBhYz1jYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGJjPWNhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGNjPWNhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGRjPWNhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCPWNhLnVuc3RhYmxlX25vdyxlYz1jYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxmYz1jYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxnYz1jYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxoYz1jYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxpYz1jYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxqYz1jYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclJvb3QpdHJ5e2xjLm9uQ29tbWl0RmliZXJSb290KGtjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBvYz1NYXRoLmNsejMyP01hdGguY2x6MzI6bmMscGM9TWF0aC5sb2cscWM9TWF0aC5MTjI7ZnVuY3Rpb24gbmMoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0ocGMoYSkvcWN8MCl8MH12YXIgcmM9NjQsc2M9NDE5NDMwNDtcbmZ1bmN0aW9uIHRjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD10YyhoKTooZiY9ZywwIT09ZiYmKGQ9dGMoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXRjKGcpOjAhPT1mJiYoZD10YyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLW9jKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gdmMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB3YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtb2MoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109dmMoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHhjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB5Yygpe3ZhciBhPXJjO3JjPDw9MTswPT09KHJjJjQxOTQyNDApJiYocmM9NjQpO3JldHVybiBhfWZ1bmN0aW9uIHpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gQWMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLW9jKGIpO2FbYl09Y31mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtb2MoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fVxuZnVuY3Rpb24gQ2MoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtb2MoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEM9MDtmdW5jdGlvbiBEYyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfXZhciBFYyxGYyxHYyxIYyxJYyxKYz0hMSxLYz1bXSxMYz1udWxsLE1jPW51bGwsTmM9bnVsbCxPYz1uZXcgTWFwLFBjPW5ldyBNYXAsUWM9W10sUmM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gU2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6TWM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6TmM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlBjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gVGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmRmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gVWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gTGM9VGMoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIE1jPVRjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBOYz1UYyhOYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO09jLnNldChmLFRjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxQYy5zZXQoZixUYyhQYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1XYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVZiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVdiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0ljKGEucHJpb3JpdHksZnVuY3Rpb24oKXtHYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBYYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9WWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7d2I9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3diPW51bGx9ZWxzZSByZXR1cm4gYj1DYihjKSxudWxsIT09YiYmRmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gWmMoYSxiLGMpe1hjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiAkYygpe0pjPSExO251bGwhPT1MYyYmWGMoTGMpJiYoTGM9bnVsbCk7bnVsbCE9PU1jJiZYYyhNYykmJihNYz1udWxsKTtudWxsIT09TmMmJlhjKE5jKSYmKE5jPW51bGwpO09jLmZvckVhY2goWmMpO1BjLmZvckVhY2goWmMpfVxuZnVuY3Rpb24gYWQoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEpjfHwoSmM9ITAsY2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhjYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSwkYykpKX1cbmZ1bmN0aW9uIGJkKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIGFkKGIsYSl9aWYoMDxLYy5sZW5ndGgpe2FkKEtjWzBdLGEpO2Zvcih2YXIgYz0xO2M8S2MubGVuZ3RoO2MrKyl7dmFyIGQ9S2NbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1MYyYmYWQoTGMsYSk7bnVsbCE9PU1jJiZhZChNYyxhKTtudWxsIT09TmMmJmFkKE5jLGEpO09jLmZvckVhY2goYik7UGMuZm9yRWFjaChiKTtmb3IoYz0wO2M8UWMubGVuZ3RoO2MrKylkPVFjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxRYy5sZW5ndGgmJihjPVFjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmUWMuc2hpZnQoKX12YXIgY2Q9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsZGQ9ITA7XG5mdW5jdGlvbiBlZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9MSxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGdkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz00LGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBmZChhLGIsYyxkKXtpZihkZCl7dmFyIGU9WWMoYSxiLGMsZCk7aWYobnVsbD09PWUpaGQoYSxiLGQsaWQsYyksU2MoYSxkKTtlbHNlIGlmKFVjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKFNjKGEsZCksYiY0JiYtMTxSYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9Q2IoZSk7bnVsbCE9PWYmJkVjKGYpO2Y9WWMoYSxiLGMsZCk7bnVsbD09PWYmJmhkKGEsYixkLGlkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGhkKGEsYixkLG51bGwsYyl9fXZhciBpZD1udWxsO1xuZnVuY3Rpb24gWWMoYSxiLGMsZCl7aWQ9bnVsbDthPXhiKGQpO2E9V2MoYSk7aWYobnVsbCE9PWEpaWYoYj1WYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1XYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7aWQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGpkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGVjKCkpe2Nhc2UgZmM6cmV0dXJuIDE7Y2FzZSBnYzpyZXR1cm4gNDtjYXNlIGhjOmNhc2UgaWM6cmV0dXJuIDE2O2Nhc2UgamM6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO2Z1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9QSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPUEoe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPUEoe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPUEoe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1BKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9QSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1BKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9QSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1BKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1BKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9QSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9QSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9aWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9aWEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoaWEpe3ZhciB4ZTtpZihpYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO0piKHJlLGIpfX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlO1xuZnVuY3Rpb24gSWUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWphLmNhbGwoYixlKXx8IUhlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gSmUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1KZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1KZShjKX19ZnVuY3Rpb24gTGUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9MZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBNZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBOZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gT2UoYSl7dmFyIGI9TWUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkxlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZOZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1LZShjLGYpO3ZhciBnPUtlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUGU9aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk5lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkllKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cbmZ1bmN0aW9uIFZlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFdlPXthbmltYXRpb25lbmQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpWZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFhlPXt9LFllPXt9O1xuaWEmJihZZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBXZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBXZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFplKGEpe2lmKFhlW2FdKXJldHVybiBYZVthXTtpZighV2VbYV0pcmV0dXJuIGE7dmFyIGI9V2VbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWWUpcmV0dXJuIFhlW2FdPWJbY107cmV0dXJuIGF9dmFyICRlPVplKFwiYW5pbWF0aW9uZW5kXCIpLGFmPVplKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGJmPVplKFwiYW5pbWF0aW9uc3RhcnRcIiksY2Y9WmUoXCJ0cmFuc2l0aW9uZW5kXCIpLGRmPW5ldyBNYXAsZWY9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGZmKGEsYil7ZGYuc2V0KGEsYik7ZmEoYixbYV0pfWZvcih2YXIgZ2Y9MDtnZjxlZi5sZW5ndGg7Z2YrKyl7dmFyIGhmPWVmW2dmXSxqZj1oZi50b0xvd2VyQ2FzZSgpLGtmPWhmWzBdLnRvVXBwZXJDYXNlKCkraGYuc2xpY2UoMSk7ZmYoamYsXCJvblwiK2tmKX1mZigkZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2ZmKGFmLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7ZmYoYmYsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2ZmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7ZmYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2ZmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTtmZihjZixcIm9uVHJhbnNpdGlvbkVuZFwiKTtoYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmhhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZmEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtmYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgbGY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxtZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChsZikpO1xuZnVuY3Rpb24gbmYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7VWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfX19aWYoUWIpdGhyb3cgYT1SYixRYj0hMSxSYj1udWxsLGE7fVxuZnVuY3Rpb24gRChhLGIpe3ZhciBjPWJbb2ZdO3ZvaWQgMD09PWMmJihjPWJbb2ZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwocGYoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7cGYoYyxhLGQsYil9dmFyIHJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gc2YoYSl7aWYoIWFbcmZdKXthW3JmXT0hMDtkYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYobWYuaGFzKGIpfHxxZihiLCExLGEpLHFmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbcmZdfHwoYltyZl09ITAscWYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24gcGYoYSxiLGMsZCl7c3dpdGNoKGpkKGIpKXtjYXNlIDE6dmFyIGU9ZWQ7YnJlYWs7Y2FzZSA0OmU9Z2Q7YnJlYWs7ZGVmYXVsdDplPWZkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFMYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1KYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9ZGYuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSAkZTpjYXNlIGFmOmNhc2UgYmY6az1IZDticmVhaztjYXNlIGNmOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHQ9MCE9PShiJjQpLEo9IXQmJlwic2Nyb2xsXCI9PT1hLHg9dD9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt0PVtdO2Zvcih2YXIgdz1kLHU7bnVsbCE9PVxudzspe3U9dzt2YXIgRj11LnN0YXRlTm9kZTs1PT09dS50YWcmJm51bGwhPT1GJiYodT1GLG51bGwhPT14JiYoRj1LYih3LHgpLG51bGwhPUYmJnQucHVzaCh0Zih3LEYsdSkpKSk7aWYoSilicmVhazt3PXcucmV0dXJufTA8dC5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp0fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXdiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoV2Mobil8fG5bdWZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/V2Mobik6bnVsbCxudWxsIT09XG5uJiYoSj1WYihuKSxuIT09Snx8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Q9QmQ7Rj1cIm9uTW91c2VMZWF2ZVwiO3g9XCJvbk1vdXNlRW50ZXJcIjt3PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdD1UZCxGPVwib25Qb2ludGVyTGVhdmVcIix4PVwib25Qb2ludGVyRW50ZXJcIix3PVwicG9pbnRlclwiO0o9bnVsbD09az9oOnVlKGspO3U9bnVsbD09bj9oOnVlKG4pO2g9bmV3IHQoRix3K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9SjtoLnJlbGF0ZWRUYXJnZXQ9dTtGPW51bGw7V2MoZSk9PT1kJiYodD1uZXcgdCh4LHcrXCJlbnRlclwiLG4sYyxlKSx0LnRhcmdldD11LHQucmVsYXRlZFRhcmdldD1KLEY9dCk7Sj1GO2lmKGsmJm4pYjp7dD1rO3g9bjt3PTA7Zm9yKHU9dDt1O3U9dmYodSkpdysrO3U9MDtmb3IoRj14O0Y7Rj12ZihGKSl1Kys7Zm9yKDswPHctdTspdD12Zih0KSx3LS07Zm9yKDswPHUtdzspeD1cbnZmKHgpLHUtLTtmb3IoO3ctLTspe2lmKHQ9PT14fHxudWxsIT09eCYmdD09PXguYWx0ZXJuYXRlKWJyZWFrIGI7dD12Zih0KTt4PXZmKHgpfXQ9bnVsbH1lbHNlIHQ9bnVsbDtudWxsIT09ayYmd2YoZyxoLGssdCwhMSk7bnVsbCE9PW4mJm51bGwhPT1KJiZ3ZihnLEosbix0LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBuYT12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKW5hPUZlO2Vsc2V7bmE9RGU7dmFyIHhhPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYobmE9RWUpO2lmKG5hJiYobmE9bmEoYSxkKSkpe25lKGcsbmEsYyxlKTticmVhayBhfXhhJiZ4YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHhhPWguX3dyYXBwZXJTdGF0ZSkmJlxueGEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmY2IoaCxcIm51bWJlclwiLGgudmFsdWUpfXhhPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKHhhKXx8XCJ0cnVlXCI9PT14YS5jb250ZW50RWRpdGFibGUpUWU9eGEsUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciAkYTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmJhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpiYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWJhPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihiYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtiYSYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09YmE/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1iYSYmaWUmJigkYT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLHhhPW9lKGQsYmEpLDA8eGEubGVuZ3RoJiYoYmE9bmV3IExkKGJhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6YmEsbGlzdGVuZXJzOnhhfSksJGE/YmEuZGF0YT0kYTooJGE9aGUoYyksbnVsbCE9PSRhJiYoYmEuZGF0YT0kYSkpKSk7aWYoJGE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9JGEpfXNlKGcsYil9KX1mdW5jdGlvbiB0ZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9S2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQodGYoYSxmLGUpKSxmPUtiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHRmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdmYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHdmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9S2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQodGYoYyxrLGgpKSk6ZXx8KGs9S2IoYyxmKSxudWxsIT1rJiZnLnB1c2godGYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgeGY9L1xcclxcbj8vZyx5Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24gemYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh4ZixcIlxcblwiKS5yZXBsYWNlKHlmLFwiXCIpfWZ1bmN0aW9uIEFmKGEsYixjKXtiPXpmKGIpO2lmKHpmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBCZigpe31cbnZhciBDZj1udWxsLERmPW51bGw7ZnVuY3Rpb24gRWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsR2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEhmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLEpmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEhmP2Z1bmN0aW9uKGEpe3JldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpfTpGZjtmdW5jdGlvbiBJZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2JkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTtiZChiKX1mdW5jdGlvbiBMZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTWYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE9mPVwiX19yZWFjdEZpYmVyJFwiK05mLFBmPVwiX19yZWFjdFByb3BzJFwiK05mLHVmPVwiX19yZWFjdENvbnRhaW5lciRcIitOZixvZj1cIl9fcmVhY3RFdmVudHMkXCIrTmYsUWY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK05mLFJmPVwiX19yZWFjdEhhbmRsZXMkXCIrTmY7XG5mdW5jdGlvbiBXYyhhKXt2YXIgYj1hW09mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t1Zl18fGNbT2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TWYoYSk7bnVsbCE9PWE7KXtpZihjPWFbT2ZdKXJldHVybiBjO2E9TWYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVtPZl18fGFbdWZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVtQZl18fG51bGx9dmFyIFNmPVtdLFRmPS0xO2Z1bmN0aW9uIFVmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlRmfHwoYS5jdXJyZW50PVNmW1RmXSxTZltUZl09bnVsbCxUZi0tKX1mdW5jdGlvbiBHKGEsYil7VGYrKztTZltUZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBWZj17fSxIPVVmKFZmKSxXZj1VZighMSksWGY9VmY7ZnVuY3Rpb24gWWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBWZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFpmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gJGYoKXtFKFdmKTtFKEgpfWZ1bmN0aW9uIGFnKGEsYixjKXtpZihILmN1cnJlbnQhPT1WZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFdmLGMpfWZ1bmN0aW9uIGJnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUmEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gY2coYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFZmO1hmPUguY3VycmVudDtHKEgsYSk7RyhXZixXZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBkZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWJnKGEsYixYZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoV2YpLEUoSCksRyhILGEpKTpFKFdmKTtHKFdmLGMpfXZhciBlZz1udWxsLGZnPSExLGdnPSExO2Z1bmN0aW9uIGhnKGEpe251bGw9PT1lZz9lZz1bYV06ZWcucHVzaChhKX1mdW5jdGlvbiBpZyhhKXtmZz0hMDtoZyhhKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWdnJiZudWxsIT09ZWcpe2dnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1lZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWVnPW51bGw7Zmc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWVnJiYoZWc9ZWcuc2xpY2UoYSsxKSksYWMoZmMsamcpLGU7fWZpbmFsbHl7Qz1iLGdnPSExfX1yZXR1cm4gbnVsbH12YXIga2c9W10sbGc9MCxtZz1udWxsLG5nPTAsb2c9W10scGc9MCxxZz1udWxsLHJnPTEsc2c9XCJcIjtmdW5jdGlvbiB0ZyhhLGIpe2tnW2xnKytdPW5nO2tnW2xnKytdPW1nO21nPWE7bmc9Yn1cbmZ1bmN0aW9uIHVnKGEsYixjKXtvZ1twZysrXT1yZztvZ1twZysrXT1zZztvZ1twZysrXT1xZztxZz1hO3ZhciBkPXJnO2E9c2c7dmFyIGU9MzItb2MoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItb2MoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztyZz0xPDwzMi1vYyhiKStlfGM8PGV8ZDtzZz1mK2F9ZWxzZSByZz0xPDxmfGM8PGV8ZCxzZz1hfWZ1bmN0aW9uIHZnKGEpe251bGwhPT1hLnJldHVybiYmKHRnKGEsMSksdWcoYSwxLDApKX1mdW5jdGlvbiB3ZyhhKXtmb3IoO2E9PT1tZzspbWc9a2dbLS1sZ10sa2dbbGddPW51bGwsbmc9a2dbLS1sZ10sa2dbbGddPW51bGw7Zm9yKDthPT09cWc7KXFnPW9nWy0tcGddLG9nW3BnXT1udWxsLHNnPW9nWy0tcGddLG9nW3BnXT1udWxsLHJnPW9nWy0tcGddLG9nW3BnXT1udWxsfXZhciB4Zz1udWxsLHlnPW51bGwsST0hMSx6Zz1udWxsO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1CZyg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIENnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9TGYoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PXFnP3tpZDpyZyxvdmVyZmxvdzpzZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPUJnKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLHhnPWEseWc9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBEZyhhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIEVnKGEpe2lmKEkpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUNnKGEsYikpe2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1MZihjLm5leHRTaWJsaW5nKTt2YXIgZD14ZztiJiZDZyhhLGIpP0FnKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLEk9ITEseGc9YSl9fWVsc2V7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtJPSExO3hnPWF9fX1mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1cbmZ1bmN0aW9uIEdnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighSSlyZXR1cm4gRmcoYSksST0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFFZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9eWcpKXtpZihEZyhhKSl0aHJvdyBIZygpLEVycm9yKHAoNDE4KSk7Zm9yKDtiOylBZyhhLGIpLGI9TGYoYi5uZXh0U2libGluZyl9RmcoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXt5Zz1MZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfXlnPVxubnVsbH19ZWxzZSB5Zz14Zz9MZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBIZygpe2Zvcih2YXIgYT15ZzthOylhPUxmKGEubmV4dFNpYmxpbmcpfWZ1bmN0aW9uIElnKCl7eWc9eGc9bnVsbDtJPSExfWZ1bmN0aW9uIEpnKGEpe251bGw9PT16Zz96Zz1bYV06emcucHVzaChhKX12YXIgS2c9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gTGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIE1nPVVmKG51bGwpLE5nPW51bGwsT2c9bnVsbCxQZz1udWxsO2Z1bmN0aW9uIFFnKCl7UGc9T2c9Tmc9bnVsbH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1NZy5jdXJyZW50O0UoTWcpO2EuX2N1cnJlbnRWYWx1ZT1ifVxuZnVuY3Rpb24gU2coYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBUZyhhLGIpe05nPWE7UGc9T2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihVZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBWZyhhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYoUGchPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09T2cpe2lmKG51bGw9PT1OZyl0aHJvdyBFcnJvcihwKDMwOCkpO09nPWE7TmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIE9nPU9nLm5leHQ9YTtyZXR1cm4gYn12YXIgV2c9bnVsbDtmdW5jdGlvbiBYZyhhKXtudWxsPT09V2c/V2c9W2FdOldnLnB1c2goYSl9ZnVuY3Rpb24gWWcoYSxiLGMsZCl7dmFyIGU9Yi5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYy5uZXh0PWMsWGcoYikpOihjLm5leHQ9ZS5uZXh0LGUubmV4dD1jKTtiLmludGVybGVhdmVkPWM7cmV0dXJuIFpnKGEsZCl9XG5mdW5jdGlvbiBaZyhhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9dmFyICRnPSExO2Z1bmN0aW9uIGFoKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiBiaChhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiBjaChhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIGRoKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Q9ZC5zaGFyZWQ7aWYoMCE9PShLJjIpKXt2YXIgZT1kLnBlbmRpbmc7bnVsbD09PWU/Yi5uZXh0PWI6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QucGVuZGluZz1iO3JldHVybiBaZyhhLGMpfWU9ZC5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYi5uZXh0PWIsWGcoZCkpOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLmludGVybGVhdmVkPWI7cmV0dXJuIFpnKGEsYyl9ZnVuY3Rpb24gZWgoYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbmZ1bmN0aW9uIGZoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBnaChhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlOyRnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG09YS5hbHRlcm5hdGU7bnVsbCE9PW0mJihtPW0udXBkYXRlUXVldWUsaD1tLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bS5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxtLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHE9ZS5iYXNlU3RhdGU7Zz0wO209bD1rPW51bGw7aD1mO2Rve3ZhciByPWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnIpPT09cil7bnVsbCE9PW0mJihtPW0ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG49YSx0PWg7cj1iO3k9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpuPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbil7cT1uLmNhbGwoeSxxLHIpO2JyZWFrIGF9cT1uO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3M9bi5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDpuPXQucGF5bG9hZDtyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uY2FsbCh5LHEscik6bjtpZihudWxsPT09cnx8dm9pZCAwPT09cilicmVhayBhO3E9QSh7fSxxLHIpO2JyZWFrIGE7Y2FzZSAyOiRnPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHI9ZS5lZmZlY3RzLG51bGw9PT1yP2UuZWZmZWN0cz1baF06ci5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6cix0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1tPyhsPW09eSxrPXEpOm09bS5uZXh0PXksZ3w9cjtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHI9aCxoPXIubmV4dCxyLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXIsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1tJiYoaz1xKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1tO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTtoaHw9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXF9fVxuZnVuY3Rpb24gaWgoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgamg9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24ga2goYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIG5oPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1ZiKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9TCgpLGQ9XG5saChhKSxlPWNoKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7Yj1kaChhLGUsZCk7bnVsbCE9PWImJihtaChiLGEsZCxjKSxlaChiLGEsZCkpfX07ZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSWUoYyxkKXx8IUllKGUsZik6ITB9XG5mdW5jdGlvbiBwaChhLGIsYyl7dmFyIGQ9ITEsZT1WZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1WZyhmKTooZT1aZihiKT9YZjpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9ZZihhLGUpOlZmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9bmg7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBxaChhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiByaChhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpoO2FoKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9VmcoZik6KGY9WmYoYik/WGY6SC5jdXJyZW50LGUuY29udGV4dD1ZZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoa2goYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZ2goYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9XG5mdW5jdGlvbiBzaChhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7Yj09PWpoJiYoYj1lLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiB0aChhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiB1aChhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gdmgoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9d2goYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj14aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09eWEpcmV0dXJuIG0oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUhhJiZ1aChmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPXNoKGEsYixjKSxkLnJldHVybj1hLGQ7ZD15aChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1zaChhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXpoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1BaChjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj14aChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYz15aChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPXNoKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB3YTpyZXR1cm4gYj16aChiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBIYTp2YXIgZD1iLl9pbml0O3JldHVybiBxKGEsZChiLl9wYXlsb2FkKSxjKX1pZihlYihiKXx8S2EoYikpcmV0dXJuIGI9QWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7dGgoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHdhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgSGE6cmV0dXJuIGU9Yy5faW5pdCxyKGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoZWIoYyl8fEthKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTt0aChhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2Ugd2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBIYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoZWIoZCl8fEthKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTt0aChiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwsdT1nLHc9Zz0wLHg9bnVsbDtudWxsIT09dSYmdzxoLmxlbmd0aDt3Kyspe3UuaW5kZXg+dz8oeD11LHU9bnVsbCk6eD11LnNpYmxpbmc7dmFyIG49cihlLHUsaFt3XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXgpO2JyZWFrfWEmJnUmJm51bGw9PT1uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcsdyk7bnVsbD09PW0/bD1uOm0uc2libGluZz1uO209bjt1PXh9aWYodz09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT11KXtmb3IoO3c8aC5sZW5ndGg7dysrKXU9cShlLGhbd10sayksbnVsbCE9PXUmJihnPWYodSxnLHcpLG51bGw9PT1tP2w9dTptLnNpYmxpbmc9dSxtPXUpO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3c8aC5sZW5ndGg7dysrKXg9eSh1LGUsdyxoW3ddLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09XG54LmtleT93Ongua2V5KSxnPWYoeCxnLHcpLG51bGw9PT1tP2w9eDptLnNpYmxpbmc9eCxtPXgpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiB0KGUsZyxoLGspe3ZhciBsPUthKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgdT1sPW51bGwsbT1nLHc9Zz0wLHg9bnVsbCxuPWgubmV4dCgpO251bGwhPT1tJiYhbi5kb25lO3crKyxuPWgubmV4dCgpKXttLmluZGV4Pnc/KHg9bSxtPW51bGwpOng9bS5zaWJsaW5nO3ZhciB0PXIoZSxtLG4udmFsdWUsayk7aWYobnVsbD09PXQpe251bGw9PT1tJiYobT14KTticmVha31hJiZtJiZudWxsPT09dC5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodCxnLHcpO251bGw9PT11P2w9dDp1LnNpYmxpbmc9dDt1PXQ7bT14fWlmKG4uZG9uZSlyZXR1cm4gYyhlLFxubSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT1tKXtmb3IoOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj1xKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXkobSxlLHcsbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PW4ua2V5P3c6bi5rZXkpLGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIEooYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09eWEmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdmE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09eWEpe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUhhJiZ1aChrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9c2goYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXlhPyhkPUFoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD15aChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1zaChhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2Ugd2E6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD16aChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEhhOnJldHVybiBsPWYuX2luaXQsSihhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihlYihmKSlyZXR1cm4gbihhLGQsZixoKTtpZihLYShmKSlyZXR1cm4gdChhLGQsZixoKTt0aChhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPXhoKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEp9dmFyIEJoPXZoKCEwKSxDaD12aCghMSksRGg9e30sRWg9VWYoRGgpLEZoPVVmKERoKSxHaD1VZihEaCk7ZnVuY3Rpb24gSGgoYSl7aWYoYT09PURoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gSWgoYSxiKXtHKEdoLGIpO0coRmgsYSk7RyhFaCxEaCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpsYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bGIoYixhKX1FKEVoKTtHKEVoLGIpfWZ1bmN0aW9uIEpoKCl7RShFaCk7RShGaCk7RShHaCl9XG5mdW5jdGlvbiBLaChhKXtIaChHaC5jdXJyZW50KTt2YXIgYj1IaChFaC5jdXJyZW50KTt2YXIgYz1sYihiLGEudHlwZSk7YiE9PWMmJihHKEZoLGEpLEcoRWgsYykpfWZ1bmN0aW9uIExoKGEpe0ZoLmN1cnJlbnQ9PT1hJiYoRShFaCksRShGaCkpfXZhciBNPVVmKDApO1xuZnVuY3Rpb24gTWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5oPVtdO1xuZnVuY3Rpb24gT2goKXtmb3IodmFyIGE9MDthPE5oLmxlbmd0aDthKyspTmhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtOaC5sZW5ndGg9MH12YXIgUGg9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixRaD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxSaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLFNoPSExLFRoPSExLFVoPTAsVmg9MDtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gV2goYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKGEsYixjLGQsZSxmKXtSaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO1BoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/WWg6Wmg7YT1jKGQsZSk7aWYoVGgpe2Y9MDtkb3tUaD0hMTtVaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7UGguY3VycmVudD0kaDthPWMoZCxlKX13aGlsZShUaCl9UGguY3VycmVudD1haTtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O1JoPTA7UD1PPU49bnVsbDtTaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmkoKXt2YXIgYT0wIT09VWg7VWg9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uIGNpKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIGRpKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiBlaShhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIGZpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBtPWwubGFuZTtpZigoUmgmbSk9PT1tKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgcT17bGFuZTptLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az1xLGc9ZCk6az1rLm5leHQ9cTtOLmxhbmVzfD1tO2hofD1tfWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLE4ubGFuZXN8PWYsaGh8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBnaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBoaSgpe31cbmZ1bmN0aW9uIGlpKGEsYil7dmFyIGM9TixkPWRpKCksZT1iKCksZj0hSGUoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSxVZz0hMCk7ZD1kLnF1ZXVlO2ppKGtpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PVAmJlAubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIG5pKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIG1pKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7b2koYikmJnBpKGEpfWZ1bmN0aW9uIGtpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe29pKGIpJiZwaShhKX0pfWZ1bmN0aW9uIG9pKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgYz1iKCk7cmV0dXJuIUhlKGEsYyl9Y2F0Y2goZCl7cmV0dXJuITB9fWZ1bmN0aW9uIHBpKGEpe3ZhciBiPVpnKGEsMSk7bnVsbCE9PWImJm1oKGIsYSwxLC0xKX1cbmZ1bmN0aW9uIHFpKGEpe3ZhciBiPWNpKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6ZWksbGFzdFJlbmRlcmVkU3RhdGU6YX07Yi5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1yaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gbGkoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIHNpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiB0aShhLGIsYyxkKXt2YXIgZT1jaSgpO04uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1kaSgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJldoKGQsZy5kZXBzKSl7ZS5tZW1vaXplZFN0YXRlPWxpKGIsYyxmLGQpO3JldHVybn19Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsZixkKX1mdW5jdGlvbiB2aShhLGIpe3JldHVybiB0aSg4MzkwNjU2LDgsYSxiKX1mdW5jdGlvbiBqaShhLGIpe3JldHVybiB1aSgyMDQ4LDgsYSxiKX1mdW5jdGlvbiB3aShhLGIpe3JldHVybiB1aSg0LDIsYSxiKX1mdW5jdGlvbiB4aShhLGIpe3JldHVybiB1aSg0LDQsYSxiKX1cbmZ1bmN0aW9uIHlpKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gemkoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB1aSg0LDQseWkuYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gQWkoKXt9ZnVuY3Rpb24gQmkoYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBDaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBEaShhLGIsYyl7aWYoMD09PShSaCYyMSkpcmV0dXJuIGEuYmFzZVN0YXRlJiYoYS5iYXNlU3RhdGU9ITEsVWc9ITApLGEubWVtb2l6ZWRTdGF0ZT1jO0hlKGMsYil8fChjPXljKCksTi5sYW5lc3w9YyxoaHw9YyxhLmJhc2VTdGF0ZT0hMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gRWkoYSxiKXt2YXIgYz1DO0M9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9UWgudHJhbnNpdGlvbjtRaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtDPWMsUWgudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiBGaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9bGgoYSk7Yz17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixjKTtlbHNlIGlmKGM9WWcoYSxiLGMsZCksbnVsbCE9PWMpe3ZhciBlPUwoKTttaChjLGEsZCxlKTtKaShjLGIsZCl9fVxuZnVuY3Rpb24gcmkoYSxiLGMpe3ZhciBkPWxoKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsZSk7ZWxzZXt2YXIgZj1hLmFsdGVybmF0ZTtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1mfHwwPT09Zi5sYW5lcykmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5oYXNFYWdlclN0YXRlPSEwO2UuZWFnZXJTdGF0ZT1oO2lmKEhlKGgsZykpe3ZhciBrPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWs/KGUubmV4dD1lLFhnKGIpKTooZS5uZXh0PWsubmV4dCxrLm5leHQ9ZSk7Yi5pbnRlcmxlYXZlZD1lO3JldHVybn19Y2F0Y2gobCl7fWZpbmFsbHl7fWM9WWcoYSxiLGUsZCk7bnVsbCE9PWMmJihlPUwoKSxtaChjLGEsZCxlKSxKaShjLGIsZCkpfX1cbmZ1bmN0aW9uIEhpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09Tnx8bnVsbCE9PWImJmI9PT1OfWZ1bmN0aW9uIElpKGEsYil7VGg9U2g9ITA7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn1mdW5jdGlvbiBKaShhLGIsYyl7aWYoMCE9PShjJjQxOTQyNDApKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxudmFyIGFpPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlSW5zZXJ0aW9uRWZmZWN0OlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRLHVzZU11dGFibGVTb3VyY2U6USx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpRLHVzZUlkOlEsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxZaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtjaSgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDp2aSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdGkoNDE5NDMwOCxcbjQseWkuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0MTk0MzA4LDQsYSxiKX0sdXNlSW5zZXJ0aW9uRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9Y2koKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Y2koKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07ZC5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1HaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jaSgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpxaSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIGNpKCkubWVtb2l6ZWRTdGF0ZT1hfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9cWkoITEpLGI9YVswXTthPUVpLmJpbmQobnVsbCxhWzFdKTtjaSgpLm1lbW9pemVkU3RhdGU9YTtyZXR1cm5bYixhXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbigpe30sdXNlU3luY0V4dGVybmFsU3RvcmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU4sZT1jaSgpO2lmKEkpe2lmKHZvaWQgMD09PWMpdGhyb3cgRXJyb3IocCg0MDcpKTtjPWMoKX1lbHNle2M9YigpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7dmkoa2kuYmluZChudWxsLGQsXG5mLGEpLFthXSk7ZC5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxkLGYsYyxiKSx2b2lkIDAsbnVsbCk7cmV0dXJuIGN9LHVzZUlkOmZ1bmN0aW9uKCl7dmFyIGE9Y2koKSxiPVIuaWRlbnRpZmllclByZWZpeDtpZihJKXt2YXIgYz1zZzt2YXIgZD1yZztjPShkJn4oMTw8MzItb2MoZCktMSkpLnRvU3RyaW5nKDMyKStjO2I9XCI6XCIrYitcIlJcIitjO2M9VWgrKzswPGMmJihiKz1cIkhcIitjLnRvU3RyaW5nKDMyKSk7Yis9XCI6XCJ9ZWxzZSBjPVZoKyssYj1cIjpcIitiK1wiclwiK2MudG9TdHJpbmcoMzIpK1wiOlwiO3JldHVybiBhLm1lbW9pemVkU3RhdGU9Yn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxaaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpmaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZmkoZWkpfSxcbnVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWZpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LCRoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmdpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBnaShlaSl9LHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBudWxsPT09XG5PP2IubWVtb2l6ZWRTdGF0ZT1hOkRpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9Z2koZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07ZnVuY3Rpb24gS2koYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UGEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmUsZGlnZXN0Om51bGx9fWZ1bmN0aW9uIExpKGEsYixjKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6bnVsbCxzdGFjazpudWxsIT1jP2M6bnVsbCxkaWdlc3Q6bnVsbCE9Yj9iOm51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE5pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIE9pKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1BpfHwoUGk9ITAsUWk9ZCk7TWkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBSaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1TaT9TaT1uZXcgU2V0KFt0aGlzXSk6U2kuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFRpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgTmk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1VaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBWaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBXaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPWNoKC0xLDEpLGIudGFnPTIsZGgoYyxiLDEpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFhpPXVhLlJlYWN0Q3VycmVudE93bmVyLFVnPSExO2Z1bmN0aW9uIFlpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/Q2goYixudWxsLGMsZCk6QmgoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBaaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7VGcoYixlKTtkPVhoKGEsYixjLGQsZixlKTtjPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZjJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWooYSxiLGMsZCxlKXtpZihudWxsPT09YSl7dmFyIGY9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYhYmooZikmJnZvaWQgMD09PWYuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWYsY2ooYSxiLGYsZCxlKTthPXloKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZSk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWY9YS5jaGlsZDtpZigwPT09KGEubGFuZXMmZSkpe3ZhciBnPWYubWVtb2l6ZWRQcm9wcztjPWMuY29tcGFyZTtjPW51bGwhPT1jP2M6SWU7aWYoYyhnLGQpJiZhLnJlZj09PWIucmVmKXJldHVybiAkaShhLGIsZSl9Yi5mbGFnc3w9MTthPXdoKGYsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2ooYSxiLGMsZCxlKXtpZihudWxsIT09YSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKEllKGYsZCkmJmEucmVmPT09Yi5yZWYpaWYoVWc9ITEsYi5wZW5kaW5nUHJvcHM9ZD1mLDAhPT0oYS5sYW5lcyZlKSkwIT09KGEuZmxhZ3MmMTMxMDcyKSYmKFVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsJGkoYSxiLGUpfXJldHVybiBkaihhLGIsYyxkLGUpfVxuZnVuY3Rpb24gZWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxHKGZqLGdqKSxnanw9YztlbHNle2lmKDA9PT0oYyYxMDczNzQxODI0KSlyZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxHKGZqLGdqKSxnanw9YSxudWxsO2IubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH07ZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjO0coZmosZ2opO2dqfD1kfWVsc2UgbnVsbCE9PVxuZj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsRyhmaixnaiksZ2p8PWQ7WWkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24gZGooYSxiLGMsZCxlKXt2YXIgZj1aZihjKT9YZjpILmN1cnJlbnQ7Zj1ZZihiLGYpO1RnKGIsZSk7Yz1YaChhLGIsYyxkLGYsZSk7ZD1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmZCYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlqKGEsYixjLGQsZSl7aWYoWmYoYykpe3ZhciBmPSEwO2NnKGIpfWVsc2UgZj0hMTtUZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSlqaihhLGIpLHBoKGIsYyxkKSxyaChiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1WZyhsKToobD1aZihjKT9YZjpILmN1cnJlbnQsbD1ZZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PWR8fGshPT1sKSYmcWgoYixnLGQsbCk7JGc9ITE7dmFyIHI9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8ciE9PWt8fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtoKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD0kZ3x8b2goYixjLGgsZCxyLGssbCkpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOlxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7YmgoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpMZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO3E9Yi5wZW5kaW5nUHJvcHM7cj1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1WZyhrKTooaz1aZihjKT9YZjpILmN1cnJlbnQsaz1ZZihiLGspKTt2YXIgeT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXF8fHIhPT1rKSYmcWgoYixnLGQsayk7JGc9ITE7cj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO3ZhciBuPWIubWVtb2l6ZWRTdGF0ZTtoIT09cXx8ciE9PW58fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgeSYmKGtoKGIsYyx5LGQpLG49Yi5tZW1vaXplZFN0YXRlKSwobD0kZ3x8b2goYixjLGwsZCxyLG4sayl8fCExKT8obXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTEwMjQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9biksZy5wcm9wcz1kLGcuc3RhdGU9bixnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1cbmEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksZD0hMSl9cmV0dXJuIGtqKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGtqKGEsYixjLGQsZSxmKXtoaihhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyYxMjgpO2lmKCFkJiYhZylyZXR1cm4gZSYmZGcoYixjLCExKSwkaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtYaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPUJoKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9QmgoYixudWxsLGgsZikpOllpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJmRnKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gbGooYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9hZyhhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZhZyhhLGIuY29udGV4dCwhMSk7SWgoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gbWooYSxiLGMsZCxlKXtJZygpO0pnKGUpO2IuZmxhZ3N8PTI1NjtZaShhLGIsYyxkKTtyZXR1cm4gYi5jaGlsZH12YXIgbmo9e2RlaHlkcmF0ZWQ6bnVsbCx0cmVlQ29udGV4dDpudWxsLHJldHJ5TGFuZTowfTtmdW5jdGlvbiBvaihhKXtyZXR1cm57YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH19XG5mdW5jdGlvbiBwaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1NLmN1cnJlbnQsZj0hMSxnPTAhPT0oYi5mbGFncyYxMjgpLGg7KGg9Zyl8fChoPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7aWYoaClmPSEwLGIuZmxhZ3MmPS0xMjk7ZWxzZSBpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSllfD0xO0coTSxlJjEpO2lmKG51bGw9PT1hKXtFZyhiKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmKGE9YS5kZWh5ZHJhdGVkLG51bGwhPT1hKSlyZXR1cm4gMD09PShiLm1vZGUmMSk/Yi5sYW5lcz0xOlwiJCFcIj09PWEuZGF0YT9iLmxhbmVzPTg6Yi5sYW5lcz0xMDczNzQxODI0LG51bGw7Zz1kLmNoaWxkcmVuO2E9ZC5mYWxsYmFjaztyZXR1cm4gZj8oZD1iLm1vZGUsZj1iLmNoaWxkLGc9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpnfSwwPT09KGQmMSkmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1cbmcpOmY9cWooZyxkLDAsbnVsbCksYT1BaChhLGQsYyxudWxsKSxmLnJldHVybj1iLGEucmV0dXJuPWIsZi5zaWJsaW5nPWEsYi5jaGlsZD1mLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihjKSxiLm1lbW9pemVkU3RhdGU9bmosYSk6cmooYixnKX1lPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSYmKGg9ZS5kZWh5ZHJhdGVkLG51bGwhPT1oKSlyZXR1cm4gc2ooYSxiLGcsZCxoLGUsYyk7aWYoZil7Zj1kLmZhbGxiYWNrO2c9Yi5tb2RlO2U9YS5jaGlsZDtoPWUuc2libGluZzt2YXIgaz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmQuY2hpbGRyZW59OzA9PT0oZyYxKSYmYi5jaGlsZCE9PWU/KGQ9Yi5jaGlsZCxkLmNoaWxkTGFuZXM9MCxkLnBlbmRpbmdQcm9wcz1rLGIuZGVsZXRpb25zPW51bGwpOihkPXdoKGUsayksZC5zdWJ0cmVlRmxhZ3M9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1oP2Y9d2goaCxmKTooZj1BaChmLGcsYyxudWxsKSxmLmZsYWdzfD0yKTtmLnJldHVybj1cbmI7ZC5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7ZD1mO2Y9Yi5jaGlsZDtnPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZTtnPW51bGw9PT1nP29qKGMpOntiYXNlTGFuZXM6Zy5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfTtmLm1lbW9pemVkU3RhdGU9ZztmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZH1mPWEuY2hpbGQ7YT1mLnNpYmxpbmc7ZD13aChmLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59KTswPT09KGIubW9kZSYxKSYmKGQubGFuZXM9Yyk7ZC5yZXR1cm49YjtkLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGM9Yi5kZWxldGlvbnMsbnVsbD09PWM/KGIuZGVsZXRpb25zPVthXSxiLmZsYWdzfD0xNik6Yy5wdXNoKGEpKTtiLmNoaWxkPWQ7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGR9XG5mdW5jdGlvbiByaihhLGIpe2I9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Yn0sYS5tb2RlLDAsbnVsbCk7Yi5yZXR1cm49YTtyZXR1cm4gYS5jaGlsZD1ifWZ1bmN0aW9uIHRqKGEsYixjLGQpe251bGwhPT1kJiZKZyhkKTtCaChiLGEuY2hpbGQsbnVsbCxjKTthPXJqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiBzaihhLGIsYyxkLGUsZixnKXtpZihjKXtpZihiLmZsYWdzJjI1NilyZXR1cm4gYi5mbGFncyY9LTI1NyxkPUxpKEVycm9yKHAoNDIyKSkpLHRqKGEsYixnLGQpO2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGIuY2hpbGQ9YS5jaGlsZCxiLmZsYWdzfD0xMjgsbnVsbDtmPWQuZmFsbGJhY2s7ZT1iLm1vZGU7ZD1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSxlLDAsbnVsbCk7Zj1BaChmLGUsZyxudWxsKTtmLmZsYWdzfD0yO2QucmV0dXJuPWI7Zi5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7MCE9PShiLm1vZGUmMSkmJkJoKGIsYS5jaGlsZCxudWxsLGcpO2IuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihnKTtiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGZ9aWYoMD09PShiLm1vZGUmMSkpcmV0dXJuIHRqKGEsYixnLG51bGwpO2lmKFwiJCFcIj09PWUuZGF0YSl7ZD1lLm5leHRTaWJsaW5nJiZlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG5pZihkKXZhciBoPWQuZGdzdDtkPWg7Zj1FcnJvcihwKDQxOSkpO2Q9TGkoZixkLHZvaWQgMCk7cmV0dXJuIHRqKGEsYixnLGQpfWg9MCE9PShnJmEuY2hpbGRMYW5lcyk7aWYoVWd8fGgpe2Q9UjtpZihudWxsIT09ZCl7c3dpdGNoKGcmLWcpe2Nhc2UgNDplPTI7YnJlYWs7Y2FzZSAxNjplPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmU9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6ZT0yNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDplPTB9ZT0wIT09KGUmKGQuc3VzcGVuZGVkTGFuZXN8ZykpPzA6ZTtcbjAhPT1lJiZlIT09Zi5yZXRyeUxhbmUmJihmLnJldHJ5TGFuZT1lLFpnKGEsZSksbWgoZCxhLGUsLTEpKX11aigpO2Q9TGkoRXJyb3IocCg0MjEpKSk7cmV0dXJuIHRqKGEsYixnLGQpfWlmKFwiJD9cIj09PWUuZGF0YSlyZXR1cm4gYi5mbGFnc3w9MTI4LGIuY2hpbGQ9YS5jaGlsZCxiPXZqLmJpbmQobnVsbCxhKSxlLl9yZWFjdFJldHJ5PWIsbnVsbDthPWYudHJlZUNvbnRleHQ7eWc9TGYoZS5uZXh0U2libGluZyk7eGc9YjtJPSEwO3pnPW51bGw7bnVsbCE9PWEmJihvZ1twZysrXT1yZyxvZ1twZysrXT1zZyxvZ1twZysrXT1xZyxyZz1hLmlkLHNnPWEub3ZlcmZsb3cscWc9Yik7Yj1yaihiLGQuY2hpbGRyZW4pO2IuZmxhZ3N8PTQwOTY7cmV0dXJuIGJ9ZnVuY3Rpb24gd2ooYSxiLGMpe2EubGFuZXN8PWI7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbCE9PWQmJihkLmxhbmVzfD1iKTtTZyhhLnJldHVybixiLGMpfVxuZnVuY3Rpb24geGooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIHlqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7WWkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmd2ooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZyl3aihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoTSxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09TWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt4aihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PU1oKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX14aihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp4aihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBqaihhLGIpezA9PT0oYi5tb2RlJjEpJiZudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKX1mdW5jdGlvbiAkaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7aGh8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPXdoKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz13aChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gemooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmxqKGIpO0lnKCk7YnJlYWs7Y2FzZSA1OktoKGIpO2JyZWFrO2Nhc2UgMTpaZihiLnR5cGUpJiZjZyhiKTticmVhaztjYXNlIDQ6SWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhNLE0uY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gcGooYSxiLGMpO0coTSxNLmN1cnJlbnQmMSk7YT0kaShhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIHlqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKE0sTS5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsZWooYSxiLGMpfXJldHVybiAkaShhLGIsYyl9dmFyIEFqLEJqLENqLERqO1xuQWo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0JqPWZ1bmN0aW9uKCl7fTtcbkNqPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtIaChFaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX11YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RGo9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBFaihhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBTKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gRmooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFMoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO0poKCk7RShXZik7RShIKTtPaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClHZyhiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpKTtCaihhLGIpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkxoKGIpO3ZhciBlPUhoKEdoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKUNqKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtTKGIpO3JldHVybiBudWxsfWE9SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7ZFtQZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dWIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtkYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUJmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9a2IoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtPZl09YjthW1BmXT1kO0FqKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXZiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9Z2IoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXViKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3NiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZuYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm9iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZvYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZ0YShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2RiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1CZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGooYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz1IaChHaC5jdXJyZW50KTtIaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG54ZyxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzpBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtPZl09YixiLnN0YXRlTm9kZT1kfVMoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsIT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2lmKEkmJm51bGwhPT15ZyYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKUhnKCksSWcoKSxiLmZsYWdzfD05ODU2MCxmPSExO2Vsc2UgaWYoZj1HZyhiKSxudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7aWYobnVsbD09PVxuYSl7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTgpKTtmPWIubWVtb2l6ZWRTdGF0ZTtmPW51bGwhPT1mP2YuZGVoeWRyYXRlZDpudWxsO2lmKCFmKXRocm93IEVycm9yKHAoMzE3KSk7ZltPZl09Yn1lbHNlIElnKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtTKGIpO2Y9ITF9ZWxzZSBudWxsIT09emcmJihHaih6Zyksemc9bnVsbCksZj0hMDtpZighZilyZXR1cm4gYi5mbGFncyY2NTUzNj9iOm51bGx9aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7ZCE9PShudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkmJmQmJihiLmNoaWxkLmZsYWdzfD04MTkyLDAhPT0oYi5tb2RlJjEpJiYobnVsbD09PWF8fDAhPT0oTS5jdXJyZW50JjEpPzA9PT1UJiYoVD0zKTp1aigpKSk7bnVsbCE9PWIudXBkYXRlUXVldWUmJihiLmZsYWdzfD00KTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxcbkJqKGEsYiksbnVsbD09PWEmJnNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFMoYiksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLFMoYiksbnVsbDtjYXNlIDE3OnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDE5OkUoTSk7Zj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWYpcmV0dXJuIFMoYiksbnVsbDtkPTAhPT0oYi5mbGFncyYxMjgpO2c9Zi5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZClFaihmLCExKTtlbHNle2lmKDAhPT1UfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9TWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTEyODtFaihmLCExKTtkPWcudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5mbGFnc3w9NCk7Yi5zdWJ0cmVlRmxhZ3M9MDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0xNDY4MDA2Nixcbmc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5zdWJ0cmVlRmxhZ3M9MCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYuc3VidHJlZUZsYWdzPTAsZi5kZWxldGlvbnM9bnVsbCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxmLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0coTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPVxuYS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5IaiYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCl9ZWxzZXtpZighZClpZihhPU1oKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD0xMjgsZD0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRWooZiwhMCksbnVsbD09PWYudGFpbCYmXCJoaWRkZW5cIj09PWYudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIUkpcmV0dXJuIFMoYiksbnVsbH1lbHNlIDIqQigpLWYucmVuZGVyaW5nU3RhcnRUaW1lPkhqJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCk7Zi5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1mLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGYubGFzdD1nKX1pZihudWxsIT09Zi50YWlsKXJldHVybiBiPWYudGFpbCxmLnJlbmRlcmluZz1cbmIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1CKCksYi5zaWJsaW5nPW51bGwsYz1NLmN1cnJlbnQsRyhNLGQ/YyYxfDI6YyYxKSxiO1MoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PWQmJihiLmZsYWdzfD04MTkyKSxkJiYwIT09KGIubW9kZSYxKT8wIT09KGdqJjEwNzM3NDE4MjQpJiYoUyhiKSxiLnN1YnRyZWVGbGFncyY2JiYoYi5mbGFnc3w9ODE5MikpOlMoYiksbnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2Nhc2UgMjU6cmV0dXJuIG51bGx9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBKaihhLGIpe3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gSmgoKSxFKFdmKSxFKEgpLE9oKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gTGgoYiksbnVsbDtjYXNlIDEzOkUoTSk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO0lnKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBLaj0hMSxVPSExLExqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFY9bnVsbDtmdW5jdGlvbiBNaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1coYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gTmooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VyhhLGIsZCl9fXZhciBPaj0hMTtcbmZ1bmN0aW9uIFBqKGEsYil7Q2Y9ZGQ7YT1NZSgpO2lmKE5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKEYpe2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxtPTAscT1hLHI9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3EhPT1jfHwwIT09ZSYmMyE9PXEubm9kZVR5cGV8fChoPWcrZSk7cSE9PWZ8fDAhPT1kJiYzIT09cS5ub2RlVHlwZXx8KGs9ZytkKTszPT09cS5ub2RlVHlwZSYmKGcrPVxucS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9cS5maXJzdENoaWxkKSlicmVhaztyPXE7cT15fWZvcig7Oyl7aWYocT09PWEpYnJlYWsgYjtyPT09YyYmKytsPT09ZSYmKGg9Zyk7cj09PWYmJisrbT09PWQmJihrPWcpO2lmKG51bGwhPT0oeT1xLm5leHRTaWJsaW5nKSlicmVhaztxPXI7cj1xLnBhcmVudE5vZGV9cT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7RGY9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307ZGQ9ITE7Zm9yKFY9YjtudWxsIT09VjspaWYoYj1WLGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFY9YTtlbHNlIGZvcig7bnVsbCE9PVY7KXtiPVY7dHJ5e3ZhciBuPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW4pe3ZhciB0PW4ubWVtb2l6ZWRQcm9wcyxKPW4ubWVtb2l6ZWRTdGF0ZSx4PWIuc3RhdGVOb2RlLHc9eC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3Q6TGcoYi50eXBlLHQpLEopO3guX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9d31icmVhaztjYXNlIDM6dmFyIHU9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzsxPT09dS5ub2RlVHlwZT91LnRleHRDb250ZW50PVwiXCI6OT09PXUubm9kZVR5cGUmJnUuZG9jdW1lbnRFbGVtZW50JiZ1LnJlbW92ZUNoaWxkKHUuZG9jdW1lbnRFbGVtZW50KTticmVhaztjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9fWNhdGNoKEYpe1coYixiLnJldHVybixGKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47Vj1hO2JyZWFrfVY9Yi5yZXR1cm59bj1PajtPaj0hMTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFFqKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJk5qKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIFJqKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBTaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gVGooYSl7dmFyIGI9YS5hbHRlcm5hdGU7bnVsbCE9PWImJihhLmFsdGVybmF0ZT1udWxsLFRqKGIpKTthLmNoaWxkPW51bGw7YS5kZWxldGlvbnM9bnVsbDthLnNpYmxpbmc9bnVsbDs1PT09YS50YWcmJihiPWEuc3RhdGVOb2RlLG51bGwhPT1iJiYoZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW1BmXSxkZWxldGUgYltvZl0sZGVsZXRlIGJbUWZdLGRlbGV0ZSBiW1JmXSkpO2Euc3RhdGVOb2RlPW51bGw7YS5yZXR1cm49bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gVWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBWaihhKXthOmZvcig7Oyl7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxVaihhLnJldHVybikpcmV0dXJuIG51bGw7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2ZvcihhPWEuc2libGluZzs1IT09YS50YWcmJjYhPT1hLnRhZyYmMTghPT1hLnRhZzspe2lmKGEuZmxhZ3MmMiljb250aW51ZSBhO2lmKG51bGw9PT1hLmNoaWxkfHw0PT09YS50YWcpY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuPWEsYT1hLmNoaWxkfWlmKCEoYS5mbGFncyYyKSlyZXR1cm4gYS5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gV2ooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPUJmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspV2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gWGooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihYaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVhqKGEsYixjKSxhPWEuc2libGluZ312YXIgWD1udWxsLFlqPSExO2Z1bmN0aW9uIFpqKGEsYixjKXtmb3IoYz1jLmNoaWxkO251bGwhPT1jOylhayhhLGIsYyksYz1jLnNpYmxpbmd9XG5mdW5jdGlvbiBhayhhLGIsYyl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7bGMub25Db21taXRGaWJlclVubW91bnQoa2MsYyl9Y2F0Y2goaCl7fXN3aXRjaChjLnRhZyl7Y2FzZSA1OlV8fE1qKGMsYik7Y2FzZSA2OnZhciBkPVgsZT1ZajtYPW51bGw7WmooYSxiLGMpO1g9ZDtZaj1lO251bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKTphLnJlbW92ZUNoaWxkKGMpKTpYLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSAxODpudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9LZihhLnBhcmVudE5vZGUsYyk6MT09PWEubm9kZVR5cGUmJktmKGEsYyksYmQoYSkpOktmKFgsYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDQ6ZD1YO2U9WWo7WD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO1xuWmooYSxiLGMpO1g9ZDtZaj1lO2JyZWFrO2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTppZighVSYmKGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGQ9ZC5sYXN0RWZmZWN0LG51bGwhPT1kKSkpe2U9ZD1kLm5leHQ7ZG97dmFyIGY9ZSxnPWYuZGVzdHJveTtmPWYudGFnO3ZvaWQgMCE9PWcmJigwIT09KGYmMik/TmooYyxiLGcpOjAhPT0oZiY0KSYmTmooYyxiLGcpKTtlPWUubmV4dH13aGlsZShlIT09ZCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMTppZighVSYmKE1qKGMsYiksZD1jLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVW5tb3VudCkpdHJ5e2QucHJvcHM9Yy5tZW1vaXplZFByb3BzLGQuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChoKXtXKGMsYixoKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAyMTpaaihhLGIsYyk7YnJlYWs7Y2FzZSAyMjpjLm1vZGUmMT8oVT0oZD1VKXx8bnVsbCE9PVxuYy5tZW1vaXplZFN0YXRlLFpqKGEsYixjKSxVPWQpOlpqKGEsYixjKTticmVhaztkZWZhdWx0OlpqKGEsYixjKX19ZnVuY3Rpb24gYmsoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgTGopO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1jay5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIGRrKGEsYil7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e3ZhciBmPWEsZz1iLGg9ZzthOmZvcig7bnVsbCE9PWg7KXtzd2l0Y2goaC50YWcpe2Nhc2UgNTpYPWguc3RhdGVOb2RlO1lqPSExO2JyZWFrIGE7Y2FzZSAzOlg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhO2Nhc2UgNDpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYX1oPWgucmV0dXJufWlmKG51bGw9PT1YKXRocm93IEVycm9yKHAoMTYwKSk7YWsoZixnLGUpO1g9bnVsbDtZaj0hMTt2YXIgaz1lLmFsdGVybmF0ZTtudWxsIT09ayYmKGsucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2gobCl7VyhlLGIsbCl9fWlmKGIuc3VidHJlZUZsYWdzJjEyODU0KWZvcihiPWIuY2hpbGQ7bnVsbCE9PWI7KWVrKGIsYSksYj1iLnNpYmxpbmd9XG5mdW5jdGlvbiBlayhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5mbGFncztzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7dHJ5e1FqKDMsYSxhLnJldHVybiksUmooMyxhKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9dHJ5e1FqKDUsYSxhLnJldHVybil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDE6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2JyZWFrO2Nhc2UgNTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7aWYoYS5mbGFncyYzMil7dmFyIGU9YS5zdGF0ZU5vZGU7dHJ5e29iKGUsXCJcIil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1pZihkJjQmJihlPWEuc3RhdGVOb2RlLG51bGwhPWUpKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1udWxsIT09Yz9jLm1lbW9pemVkUHJvcHM6ZixoPWEudHlwZSxrPWEudXBkYXRlUXVldWU7XG5hLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWspdHJ5e1wiaW5wdXRcIj09PWgmJlwicmFkaW9cIj09PWYudHlwZSYmbnVsbCE9Zi5uYW1lJiZhYihlLGYpO3ZiKGgsZyk7dmFyIGw9dmIoaCxmKTtmb3IoZz0wO2c8ay5sZW5ndGg7Zys9Mil7dmFyIG09a1tnXSxxPWtbZysxXTtcInN0eWxlXCI9PT1tP3NiKGUscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bT9uYihlLHEpOlwiY2hpbGRyZW5cIj09PW0/b2IoZSxxKTp0YShlLG0scSxsKX1zd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6YmIoZSxmKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihlLGYpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp2YXIgcj1lLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZi5tdWx0aXBsZTt2YXIgeT1mLnZhbHVlO251bGwhPXk/ZmIoZSwhIWYubXVsdGlwbGUseSwhMSk6ciE9PSEhZi5tdWx0aXBsZSYmKG51bGwhPWYuZGVmYXVsdFZhbHVlP2ZiKGUsISFmLm11bHRpcGxlLFxuZi5kZWZhdWx0VmFsdWUsITApOmZiKGUsISFmLm11bHRpcGxlLGYubXVsdGlwbGU/W106XCJcIiwhMSkpfWVbUGZdPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDY6ZGsoYixhKTtmayhhKTtpZihkJjQpe2lmKG51bGw9PT1hLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2MikpO2U9YS5zdGF0ZU5vZGU7Zj1hLm1lbW9pemVkUHJvcHM7dHJ5e2Uubm9kZVZhbHVlPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDM6ZGsoYixhKTtmayhhKTtpZihkJjQmJm51bGwhPT1jJiZjLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXRyeXtiZChiLmNvbnRhaW5lckluZm8pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX1icmVhaztjYXNlIDQ6ZGsoYixhKTtmayhhKTticmVhaztjYXNlIDEzOmRrKGIsYSk7ZmsoYSk7ZT1hLmNoaWxkO2UuZmxhZ3MmODE5MiYmKGY9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZSxlLnN0YXRlTm9kZS5pc0hpZGRlbj1mLCFmfHxcbm51bGwhPT1lLmFsdGVybmF0ZSYmbnVsbCE9PWUuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGV8fChnaz1CKCkpKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjI6bT1udWxsIT09YyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZTthLm1vZGUmMT8oVT0obD1VKXx8bSxkayhiLGEpLFU9bCk6ZGsoYixhKTtmayhhKTtpZihkJjgxOTIpe2w9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZigoYS5zdGF0ZU5vZGUuaXNIaWRkZW49bCkmJiFtJiYwIT09KGEubW9kZSYxKSlmb3IoVj1hLG09YS5jaGlsZDtudWxsIT09bTspe2ZvcihxPVY9bTtudWxsIT09Vjspe3I9Vjt5PXIuY2hpbGQ7c3dpdGNoKHIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6UWooNCxyLHIucmV0dXJuKTticmVhaztjYXNlIDE6TWoocixyLnJldHVybik7dmFyIG49ci5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFVubW91bnQpe2Q9cjtjPXIucmV0dXJuO3RyeXtiPWQsbi5wcm9wcz1cbmIubWVtb2l6ZWRQcm9wcyxuLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxuLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7VyhkLGMsdCl9fWJyZWFrO2Nhc2UgNTpNaihyLHIucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1yLm1lbW9pemVkU3RhdGUpe2hrKHEpO2NvbnRpbnVlfX1udWxsIT09eT8oeS5yZXR1cm49cixWPXkpOmhrKHEpfW09bS5zaWJsaW5nfWE6Zm9yKG09bnVsbCxxPWE7Oyl7aWYoNT09PXEudGFnKXtpZihudWxsPT09bSl7bT1xO3RyeXtlPXEuc3RhdGVOb2RlLGw/KGY9ZS5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGg9cS5zdGF0ZU5vZGUsaz1xLm1lbW9pemVkUHJvcHMuc3R5bGUsZz12b2lkIDAhPT1rJiZudWxsIT09ayYmay5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ay5kaXNwbGF5Om51bGwsaC5zdHlsZS5kaXNwbGF5PVxucmIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19fWVsc2UgaWYoNj09PXEudGFnKXtpZihudWxsPT09bSl0cnl7cS5zdGF0ZU5vZGUubm9kZVZhbHVlPWw/XCJcIjpxLm1lbW9pemVkUHJvcHN9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1lbHNlIGlmKCgyMiE9PXEudGFnJiYyMyE9PXEudGFnfHxudWxsPT09cS5tZW1vaXplZFN0YXRlfHxxPT09YSkmJm51bGwhPT1xLmNoaWxkKXtxLmNoaWxkLnJldHVybj1xO3E9cS5jaGlsZDtjb250aW51ZX1pZihxPT09YSlicmVhayBhO2Zvcig7bnVsbD09PXEuc2libGluZzspe2lmKG51bGw9PT1xLnJldHVybnx8cS5yZXR1cm49PT1hKWJyZWFrIGE7bT09PXEmJihtPW51bGwpO3E9cS5yZXR1cm59bT09PXEmJihtPW51bGwpO3Euc2libGluZy5yZXR1cm49cS5yZXR1cm47cT1xLnNpYmxpbmd9fWJyZWFrO2Nhc2UgMTk6ZGsoYixhKTtmayhhKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDpkayhiLFxuYSksZmsoYSl9fWZ1bmN0aW9uIGZrKGEpe3ZhciBiPWEuZmxhZ3M7aWYoYiYyKXt0cnl7YTp7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoVWooYykpe3ZhciBkPWM7YnJlYWsgYX1jPWMucmV0dXJufXRocm93IEVycm9yKHAoMTYwKSk7fXN3aXRjaChkLnRhZyl7Y2FzZSA1OnZhciBlPWQuc3RhdGVOb2RlO2QuZmxhZ3MmMzImJihvYihlLFwiXCIpLGQuZmxhZ3MmPS0zMyk7dmFyIGY9VmooYSk7WGooYSxmLGUpO2JyZWFrO2Nhc2UgMzpjYXNlIDQ6dmFyIGc9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxoPVZqKGEpO1dqKGEsaCxnKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYxKSk7fX1jYXRjaChrKXtXKGEsYS5yZXR1cm4sayl9YS5mbGFncyY9LTN9YiY0MDk2JiYoYS5mbGFncyY9LTQwOTcpfWZ1bmN0aW9uIGlrKGEsYixjKXtWPWE7amsoYSxiLGMpfVxuZnVuY3Rpb24gamsoYSxiLGMpe2Zvcih2YXIgZD0wIT09KGEubW9kZSYxKTtudWxsIT09Vjspe3ZhciBlPVYsZj1lLmNoaWxkO2lmKDIyPT09ZS50YWcmJmQpe3ZhciBnPW51bGwhPT1lLm1lbW9pemVkU3RhdGV8fEtqO2lmKCFnKXt2YXIgaD1lLmFsdGVybmF0ZSxrPW51bGwhPT1oJiZudWxsIT09aC5tZW1vaXplZFN0YXRlfHxVO2g9S2o7dmFyIGw9VTtLaj1nO2lmKChVPWspJiYhbClmb3IoVj1lO251bGwhPT1WOylnPVYsaz1nLmNoaWxkLDIyPT09Zy50YWcmJm51bGwhPT1nLm1lbW9pemVkU3RhdGU/a2soZSk6bnVsbCE9PWs/KGsucmV0dXJuPWcsVj1rKTprayhlKTtmb3IoO251bGwhPT1mOylWPWYsamsoZixiLGMpLGY9Zi5zaWJsaW5nO1Y9ZTtLaj1oO1U9bH1sayhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxWPWYpOmxrKGEsYixjKX19XG5mdW5jdGlvbiBsayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlV8fFJqKDUsYik7YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKGIuZmxhZ3MmNCYmIVUpaWYobnVsbD09PWMpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGU9Yi5lbGVtZW50VHlwZT09PWIudHlwZT9jLm1lbW9pemVkUHJvcHM6TGcoYi50eXBlLGMubWVtb2l6ZWRQcm9wcyk7ZC5jb21wb25lbnREaWRVcGRhdGUoZSxjLm1lbW9pemVkU3RhdGUsZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIGY9Yi51cGRhdGVRdWV1ZTtudWxsIT09ZiYmaWgoYixmLGQpO2JyZWFrO2Nhc2UgMzp2YXIgZz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1nKXtjPW51bGw7aWYobnVsbCE9PWIuY2hpbGQpc3dpdGNoKGIuY2hpbGQudGFnKXtjYXNlIDU6Yz1cbmIuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpjPWIuY2hpbGQuc3RhdGVOb2RlfWloKGIsZyxjKX1icmVhaztjYXNlIDU6dmFyIGg9Yi5zdGF0ZU5vZGU7aWYobnVsbD09PWMmJmIuZmxhZ3MmNCl7Yz1oO3ZhciBrPWIubWVtb2l6ZWRQcm9wcztzd2l0Y2goYi50eXBlKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmsuYXV0b0ZvY3VzJiZjLmZvY3VzKCk7YnJlYWs7Y2FzZSBcImltZ1wiOmsuc3JjJiYoYy5zcmM9ay5zcmMpfX1icmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1iLmFsdGVybmF0ZTtpZihudWxsIT09bCl7dmFyIG09bC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKXt2YXIgcT1tLmRlaHlkcmF0ZWQ7bnVsbCE9PXEmJmJkKHEpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDIzOmNhc2UgMjU6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fVV8fGIuZmxhZ3MmNTEyJiZTaihiKX1jYXRjaChyKXtXKGIsYi5yZXR1cm4scil9fWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1mdW5jdGlvbiBoayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBjPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fVxuZnVuY3Rpb24ga2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7dHJ5e3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp2YXIgYz1iLnJldHVybjt0cnl7UmooNCxiKX1jYXRjaChrKXtXKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7VyhiLGUsayl9fXZhciBmPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZixrKX1icmVhaztjYXNlIDU6dmFyIGc9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixnLGspfX19Y2F0Y2goayl7VyhiLGIucmV0dXJuLGspfWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGg9Yi5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1iLnJldHVybjtWPWg7YnJlYWt9Vj1iLnJldHVybn19XG52YXIgbWs9TWF0aC5jZWlsLG5rPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsb2s9dWEuUmVhY3RDdXJyZW50T3duZXIscGs9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSz0wLFI9bnVsbCxZPW51bGwsWj0wLGdqPTAsZmo9VWYoMCksVD0wLHFrPW51bGwsaGg9MCxyaz0wLHNrPTAsdGs9bnVsbCx1az1udWxsLGdrPTAsSGo9SW5maW5pdHksdms9bnVsbCxQaT0hMSxRaT1udWxsLFNpPW51bGwsd2s9ITEseGs9bnVsbCx5az0wLHprPTAsQWs9bnVsbCxCaz0tMSxDaz0wO2Z1bmN0aW9uIEwoKXtyZXR1cm4gMCE9PShLJjYpP0IoKTotMSE9PUJrP0JrOkJrPUIoKX1cbmZ1bmN0aW9uIGxoKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oSyYyKSYmMCE9PVopcmV0dXJuIFomLVo7aWYobnVsbCE9PUtnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT1DayYmKENrPXljKCkpLENrO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6amQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBtaChhLGIsYyxkKXtpZig1MDx6ayl0aHJvdyB6az0wLEFrPW51bGwsRXJyb3IocCgxODUpKTtBYyhhLGMsZCk7aWYoMD09PShLJjIpfHxhIT09UilhPT09UiYmKDA9PT0oSyYyKSYmKHJrfD1jKSw0PT09VCYmRGsoYSxaKSksRWsoYSxkKSwxPT09YyYmMD09PUsmJjA9PT0oYi5tb2RlJjEpJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9XG5mdW5jdGlvbiBFayhhLGIpe3ZhciBjPWEuY2FsbGJhY2tOb2RlO3djKGEsYik7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKW51bGwhPT1jJiZiYyhjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wO2Vsc2UgaWYoYj1kJi1kLGEuY2FsbGJhY2tQcmlvcml0eSE9PWIpe251bGwhPWMmJmJjKGMpO2lmKDE9PT1iKTA9PT1hLnRhZz9pZyhGay5iaW5kKG51bGwsYSkpOmhnKEZrLmJpbmQobnVsbCxhKSksSmYoZnVuY3Rpb24oKXswPT09KEsmNikmJmpnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goRGMoZCkpe2Nhc2UgMTpjPWZjO2JyZWFrO2Nhc2UgNDpjPWdjO2JyZWFrO2Nhc2UgMTY6Yz1oYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWpjO2JyZWFrO2RlZmF1bHQ6Yz1oY31jPUdrKGMsSGsuYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEhrKGEsYil7Qms9LTE7Q2s9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihJaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1KayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPUs7S3w9Mjt2YXIgZj1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLEhqPUIoKSs1MDAsTGsoYSxiKTtkbyB0cnl7TWsoKTticmVha31jYXRjaChoKXtOayhhLGgpfXdoaWxlKDEpO1FnKCk7bmsuY3VycmVudD1mO0s9ZTtudWxsIT09WT9iPTA6KFI9bnVsbCxaPTAsYj1UKX1pZigwIT09Yil7Mj09PWImJihlPXhjKGEpLDAhPT1lJiYoZD1lLGI9T2soYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2lmKDY9PT1iKURrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhUGsoZSkmJihiPUprKGEsZCksMj09PWImJihmPXhjKGEpLDAhPT1mJiYoZD1mLGI9T2soYSxmKSkpLDE9PT1iKSl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOlFrKGEsdWssdmspO2JyZWFrO2Nhc2UgMzpEayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1nays1MDAtQigpLDEwPGIpKXtpZigwIT09dWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtMKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksYik7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA0OkRrKGEsZCk7aWYoKGQmNDE5NDI0MCk9PT1cbmQpYnJlYWs7Yj1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxkOyl7dmFyIGc9MzEtb2MoZCk7Zj0xPDxnO2c9YltnXTtnPmUmJihlPWcpO2QmPX5mfWQ9ZTtkPUIoKS1kO2Q9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqbWsoZC8xOTYwKSktZDtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGQpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNTpRayhhLHVrLHZrKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzI5KSk7fX19RWsoYSxCKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWM/SGsuYmluZChudWxsLGEpOm51bGx9XG5mdW5jdGlvbiBPayhhLGIpe3ZhciBjPXRrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmKExrKGEsYikuZmxhZ3N8PTI1Nik7YT1KayhhLGIpOzIhPT1hJiYoYj11ayx1az1jLG51bGwhPT1iJiZHaihiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gR2ooYSl7bnVsbD09PXVrP3VrPWE6dWsucHVzaC5hcHBseSh1ayxhKX1cbmZ1bmN0aW9uIFBrKGEpe2Zvcih2YXIgYj1hOzspe2lmKGIuZmxhZ3MmMTYzODQpe3ZhciBjPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMuc3RvcmVzLG51bGwhPT1jKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPWUuZ2V0U25hcHNob3Q7ZT1lLnZhbHVlO3RyeXtpZighSGUoZigpLGUpKXJldHVybiExfWNhdGNoKGcpe3JldHVybiExfX19Yz1iLmNoaWxkO2lmKGIuc3VidHJlZUZsYWdzJjE2Mzg0JiZudWxsIT09YyljLnJldHVybj1iLGI9YztlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiEwO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuITB9XG5mdW5jdGlvbiBEayhhLGIpe2ImPX5zaztiJj1+cms7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1vYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19ZnVuY3Rpb24gRmsoYSl7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7SWsoKTt2YXIgYj11YyhhLDApO2lmKDA9PT0oYiYxKSlyZXR1cm4gRWsoYSxCKCkpLG51bGw7dmFyIGM9SmsoYSxiKTtpZigwIT09YS50YWcmJjI9PT1jKXt2YXIgZD14YyhhKTswIT09ZCYmKGI9ZCxjPU9rKGEsZCkpfWlmKDE9PT1jKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGIpLEVrKGEsQigpKSxjO2lmKDY9PT1jKXRocm93IEVycm9yKHAoMzQ1KSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtRayhhLHVrLHZrKTtFayhhLEIoKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSayhhLGIpe3ZhciBjPUs7S3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtLPWMsMD09PUsmJihIaj1CKCkrNTAwLGZnJiZqZygpKX19ZnVuY3Rpb24gU2soYSl7bnVsbCE9PXhrJiYwPT09eGsudGFnJiYwPT09KEsmNikmJklrKCk7dmFyIGI9SztLfD0xO3ZhciBjPXBrLnRyYW5zaXRpb24sZD1DO3RyeXtpZihway50cmFuc2l0aW9uPW51bGwsQz0xLGEpcmV0dXJuIGEoKX1maW5hbGx5e0M9ZCxway50cmFuc2l0aW9uPWMsSz1iLDA9PT0oSyY2KSYmamcoKX19ZnVuY3Rpb24gSWooKXtnaj1mai5jdXJyZW50O0UoZmopfVxuZnVuY3Rpb24gTGsoYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsR2YoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yzt3ZyhkKTtzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmJGYoKTticmVhaztjYXNlIDM6SmgoKTtFKFdmKTtFKEgpO09oKCk7YnJlYWs7Y2FzZSA1OkxoKGQpO2JyZWFrO2Nhc2UgNDpKaCgpO2JyZWFrO2Nhc2UgMTM6RShNKTticmVhaztjYXNlIDE5OkUoTSk7YnJlYWs7Y2FzZSAxMDpSZyhkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpJaigpfWM9Yy5yZXR1cm59Uj1hO1k9YT13aChhLmN1cnJlbnQsbnVsbCk7Wj1naj1iO1Q9MDtxaz1udWxsO3NrPXJrPWhoPTA7dWs9dGs9bnVsbDtpZihudWxsIT09V2cpe2ZvcihiPVxuMDtiPFdnLmxlbmd0aDtiKyspaWYoYz1XZ1tiXSxkPWMuaW50ZXJsZWF2ZWQsbnVsbCE9PWQpe2MuaW50ZXJsZWF2ZWQ9bnVsbDt2YXIgZT1kLm5leHQsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe3ZhciBnPWYubmV4dDtmLm5leHQ9ZTtkLm5leHQ9Z31jLnBlbmRpbmc9ZH1XZz1udWxsfXJldHVybiBhfVxuZnVuY3Rpb24gTmsoYSxiKXtkb3t2YXIgYz1ZO3RyeXtRZygpO1BoLmN1cnJlbnQ9YWk7aWYoU2gpe2Zvcih2YXIgZD1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fVNoPSExfVJoPTA7UD1PPU49bnVsbDtUaD0hMTtVaD0wO29rLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtUPTE7cWs9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1aO2guZmxhZ3N8PTMyNzY4O2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWssbT1oLHE9bS50YWc7aWYoMD09PShtLm1vZGUmMSkmJigwPT09cXx8MTE9PT1xfHwxNT09PXEpKXt2YXIgcj1tLmFsdGVybmF0ZTtyPyhtLnVwZGF0ZVF1ZXVlPXIudXBkYXRlUXVldWUsbS5tZW1vaXplZFN0YXRlPXIubWVtb2l6ZWRTdGF0ZSxcbm0ubGFuZXM9ci5sYW5lcyk6KG0udXBkYXRlUXVldWU9bnVsbCxtLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIHk9VmkoZyk7aWYobnVsbCE9PXkpe3kuZmxhZ3MmPS0yNTc7V2koeSxnLGgsZixiKTt5Lm1vZGUmMSYmVGkoZixsLGIpO2I9eTtrPWw7dmFyIG49Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09bil7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtiLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBuLmFkZChrKTticmVhayBhfWVsc2V7aWYoMD09PShiJjEpKXtUaShmLGwsYik7dWooKTticmVhayBhfWs9RXJyb3IocCg0MjYpKX19ZWxzZSBpZihJJiZoLm1vZGUmMSl7dmFyIEo9VmkoZyk7aWYobnVsbCE9PUopezA9PT0oSi5mbGFncyY2NTUzNikmJihKLmZsYWdzfD0yNTYpO1dpKEosZyxoLGYsYik7SmcoS2koayxoKSk7YnJlYWsgYX19Zj1rPUtpKGssaCk7NCE9PVQmJihUPTIpO251bGw9PT10az90az1bZl06dGsucHVzaChmKTtmPWc7ZG97c3dpdGNoKGYudGFnKXtjYXNlIDM6Zi5mbGFnc3w9NjU1MzY7XG5iJj0tYjtmLmxhbmVzfD1iO3ZhciB4PU9pKGYsayxiKTtmaChmLHgpO2JyZWFrIGE7Y2FzZSAxOmg9azt2YXIgdz1mLnR5cGUsdT1mLnN0YXRlTm9kZTtpZigwPT09KGYuZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1LmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKHUpKSkpe2YuZmxhZ3N8PTY1NTM2O2ImPS1iO2YubGFuZXN8PWI7dmFyIEY9UmkoZixoLGIpO2ZoKGYsRik7YnJlYWsgYX19Zj1mLnJldHVybn13aGlsZShudWxsIT09Zil9VGsoYyl9Y2F0Y2gobmEpe2I9bmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiBLaygpe3ZhciBhPW5rLmN1cnJlbnQ7bmsuY3VycmVudD1haTtyZXR1cm4gbnVsbD09PWE/YWk6YX1cbmZ1bmN0aW9uIHVqKCl7aWYoMD09PVR8fDM9PT1UfHwyPT09VClUPTQ7bnVsbD09PVJ8fDA9PT0oaGgmMjY4NDM1NDU1KSYmMD09PShyayYyNjg0MzU0NTUpfHxEayhSLFopfWZ1bmN0aW9uIEprKGEsYil7dmFyIGM9SztLfD0yO3ZhciBkPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsTGsoYSxiKTtkbyB0cnl7VWsoKTticmVha31jYXRjaChlKXtOayhhLGUpfXdoaWxlKDEpO1FnKCk7Sz1jO25rLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcihwKDI2MSkpO1I9bnVsbDtaPTA7cmV0dXJuIFR9ZnVuY3Rpb24gVWsoKXtmb3IoO251bGwhPT1ZOylWayhZKX1mdW5jdGlvbiBNaygpe2Zvcig7bnVsbCE9PVkmJiFjYygpOylWayhZKX1mdW5jdGlvbiBWayhhKXt2YXIgYj1XayhhLmFsdGVybmF0ZSxhLGdqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/VGsoYSk6WT1iO29rLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFRrKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMzI3NjgpKXtpZihjPUZqKGMsYixnaiksbnVsbCE9PWMpe1k9YztyZXR1cm59fWVsc2V7Yz1KaihjLGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0zMjc2NztZPWM7cmV0dXJufWlmKG51bGwhPT1hKWEuZmxhZ3N8PTMyNzY4LGEuc3VidHJlZUZsYWdzPTAsYS5kZWxldGlvbnM9bnVsbDtlbHNle1Q9NjtZPW51bGw7cmV0dXJufX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVQmJihUPTUpfWZ1bmN0aW9uIFFrKGEsYixjKXt2YXIgZD1DLGU9cGsudHJhbnNpdGlvbjt0cnl7cGsudHJhbnNpdGlvbj1udWxsLEM9MSxYayhhLGIsYyxkKX1maW5hbGx5e3BrLnRyYW5zaXRpb249ZSxDPWR9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBYayhhLGIsYyxkKXtkbyBJaygpO3doaWxlKG51bGwhPT14ayk7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7Yz1hLmZpbmlzaGVkV29yazt2YXIgZT1hLmZpbmlzaGVkTGFuZXM7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHAoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrUHJpb3JpdHk9MDt2YXIgZj1jLmxhbmVzfGMuY2hpbGRMYW5lcztCYyhhLGYpO2E9PT1SJiYoWT1SPW51bGwsWj0wKTswPT09KGMuc3VidHJlZUZsYWdzJjIwNjQpJiYwPT09KGMuZmxhZ3MmMjA2NCl8fHdrfHwod2s9ITAsR2soaGMsZnVuY3Rpb24oKXtJaygpO3JldHVybiBudWxsfSkpO2Y9MCE9PShjLmZsYWdzJjE1OTkwKTtpZigwIT09KGMuc3VidHJlZUZsYWdzJjE1OTkwKXx8Zil7Zj1way50cmFuc2l0aW9uO3BrLnRyYW5zaXRpb249bnVsbDtcbnZhciBnPUM7Qz0xO3ZhciBoPUs7S3w9NDtvay5jdXJyZW50PW51bGw7UGooYSxjKTtlayhjLGEpO09lKERmKTtkZD0hIUNmO0RmPUNmPW51bGw7YS5jdXJyZW50PWM7aWsoYyxhLGUpO2RjKCk7Sz1oO0M9Zztway50cmFuc2l0aW9uPWZ9ZWxzZSBhLmN1cnJlbnQ9Yzt3ayYmKHdrPSExLHhrPWEseWs9ZSk7Zj1hLnBlbmRpbmdMYW5lczswPT09ZiYmKFNpPW51bGwpO21jKGMuc3RhdGVOb2RlLGQpO0VrKGEsQigpKTtpZihudWxsIT09Yilmb3IoZD1hLm9uUmVjb3ZlcmFibGVFcnJvcixjPTA7YzxiLmxlbmd0aDtjKyspZT1iW2NdLGQoZS52YWx1ZSx7Y29tcG9uZW50U3RhY2s6ZS5zdGFjayxkaWdlc3Q6ZS5kaWdlc3R9KTtpZihQaSl0aHJvdyBQaT0hMSxhPVFpLFFpPW51bGwsYTswIT09KHlrJjEpJiYwIT09YS50YWcmJklrKCk7Zj1hLnBlbmRpbmdMYW5lczswIT09KGYmMSk/YT09PUFrP3prKys6KHprPTAsQWs9YSk6ems9MDtqZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gSWsoKXtpZihudWxsIT09eGspe3ZhciBhPURjKHlrKSxiPXBrLnRyYW5zaXRpb24sYz1DO3RyeXtway50cmFuc2l0aW9uPW51bGw7Qz0xNj5hPzE2OmE7aWYobnVsbD09PXhrKXZhciBkPSExO2Vsc2V7YT14azt4az1udWxsO3lrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzMxKSk7dmFyIGU9SztLfD00O2ZvcihWPWEuY3VycmVudDtudWxsIT09Vjspe3ZhciBmPVYsZz1mLmNoaWxkO2lmKDAhPT0oVi5mbGFncyYxNikpe3ZhciBoPWYuZGVsZXRpb25zO2lmKG51bGwhPT1oKXtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKyl7dmFyIGw9aFtrXTtmb3IoVj1sO251bGwhPT1WOyl7dmFyIG09Vjtzd2l0Y2gobS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOCxtLGYpfXZhciBxPW0uY2hpbGQ7aWYobnVsbCE9PXEpcS5yZXR1cm49bSxWPXE7ZWxzZSBmb3IoO251bGwhPT1WOyl7bT1WO3ZhciByPW0uc2libGluZyx5PW0ucmV0dXJuO1RqKG0pO2lmKG09PT1cbmwpe1Y9bnVsbDticmVha31pZihudWxsIT09cil7ci5yZXR1cm49eTtWPXI7YnJlYWt9Vj15fX19dmFyIG49Zi5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe3ZhciB0PW4uY2hpbGQ7aWYobnVsbCE9PXQpe24uY2hpbGQ9bnVsbDtkb3t2YXIgSj10LnNpYmxpbmc7dC5zaWJsaW5nPW51bGw7dD1KfXdoaWxlKG51bGwhPT10KX19Vj1mfX1pZigwIT09KGYuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09ZylnLnJldHVybj1mLFY9ZztlbHNlIGI6Zm9yKDtudWxsIT09Vjspe2Y9VjtpZigwIT09KGYuZmxhZ3MmMjA0OCkpc3dpdGNoKGYudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksZixmLnJldHVybil9dmFyIHg9Zi5zaWJsaW5nO2lmKG51bGwhPT14KXt4LnJldHVybj1mLnJldHVybjtWPXg7YnJlYWsgYn1WPWYucmV0dXJufX12YXIgdz1hLmN1cnJlbnQ7Zm9yKFY9dztudWxsIT09Vjspe2c9Vjt2YXIgdT1nLmNoaWxkO2lmKDAhPT0oZy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1cbnUpdS5yZXR1cm49ZyxWPXU7ZWxzZSBiOmZvcihnPXc7bnVsbCE9PVY7KXtoPVY7aWYoMCE9PShoLmZsYWdzJjIwNDgpKXRyeXtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UmooOSxoKX19Y2F0Y2gobmEpe1coaCxoLnJldHVybixuYSl9aWYoaD09PWcpe1Y9bnVsbDticmVhayBifXZhciBGPWguc2libGluZztpZihudWxsIT09Ril7Ri5yZXR1cm49aC5yZXR1cm47Vj1GO2JyZWFrIGJ9Vj1oLnJldHVybn19Sz1lO2pnKCk7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2xjLm9uUG9zdENvbW1pdEZpYmVyUm9vdChrYyxhKX1jYXRjaChuYSl7fWQ9ITB9cmV0dXJuIGR9ZmluYWxseXtDPWMscGsudHJhbnNpdGlvbj1ifX1yZXR1cm4hMX1mdW5jdGlvbiBZayhhLGIsYyl7Yj1LaShjLGIpO2I9T2koYSxiLDEpO2E9ZGgoYSxiLDEpO2I9TCgpO251bGwhPT1hJiYoQWMoYSwxLGIpLEVrKGEsYikpfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoMz09PWEudGFnKVlrKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe1lrKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKGQpKSl7YT1LaShjLGEpO2E9UmkoYixhLDEpO2I9ZGgoYixhLDEpO2E9TCgpO251bGwhPT1iJiYoQWMoYiwxLGEpLEVrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFVpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1MKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1I9PT1hJiYoWiZjKT09PWMmJig0PT09VHx8Mz09PVQmJihaJjEzMDAyMzQyNCk9PT1aJiY1MDA+QigpLWdrP0xrKGEsMCk6c2t8PWMpO0VrKGEsYil9ZnVuY3Rpb24gWmsoYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1zYyxzYzw8PTEsMD09PShzYyYxMzAwMjM0MjQpJiYoc2M9NDE5NDMwNCkpKTt2YXIgYz1MKCk7YT1aZyhhLGIpO251bGwhPT1hJiYoQWMoYSxiLGMpLEVrKGEsYykpfWZ1bmN0aW9uIHZqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtaayhhLGMpfVxuZnVuY3Rpb24gY2soYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7WmsoYSxjKX12YXIgV2s7XG5Xaz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFdmLmN1cnJlbnQpVWc9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiBVZz0hMSx6aihhLGIsYyk7VWc9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSBVZz0hMSxJJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJnVnKGIsbmcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WWYoYixILmN1cnJlbnQpO1RnKGIsYyk7ZT1YaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9YmkoKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj8oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPVxubnVsbCxaZihkKT8oZj0hMCxjZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLGFoKGIpLGUudXBkYXRlcj1uaCxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIscmgoYixkLGEsYyksYj1raihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZ2ZyhiKSxZaShudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wcztlPWQuX2luaXQ7ZD1lKGQuX3BheWxvYWQpO2IudHlwZT1kO2U9Yi50YWc9JGsoZCk7YT1MZyhkLGEpO3N3aXRjaChlKXtjYXNlIDA6Yj1kaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9aWoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaShudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFqKG51bGwsYixkLExnKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LFxuZCxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxkaihhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxpaihhLGIsZCxlLGMpO2Nhc2UgMzphOntsaihiKTtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDM4NykpO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkU3RhdGU7ZT1mLmVsZW1lbnQ7YmgoYSxiKTtnaChiLGQsbnVsbCxjKTt2YXIgZz1iLm1lbW9pemVkU3RhdGU7ZD1nLmVsZW1lbnQ7aWYoZi5pc0RlaHlkcmF0ZWQpaWYoZj17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDohMSxjYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPVxuZixiLm1lbW9pemVkU3RhdGU9ZixiLmZsYWdzJjI1Nil7ZT1LaShFcnJvcihwKDQyMykpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgaWYoZCE9PWUpe2U9S2koRXJyb3IocCg0MjQpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGZvcih5Zz1MZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLHhnPWIsST0hMCx6Zz1udWxsLGM9Q2goYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3w0MDk2LGM9Yy5zaWJsaW5nO2Vsc2V7SWcoKTtpZihkPT09ZSl7Yj0kaShhLGIsYyk7YnJlYWsgYX1ZaShhLGIsZCxjKX1iPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBLaChiKSxudWxsPT09YSYmRWcoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixFZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRWYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxcbmhqKGEsYiksWWkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZFZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHBqKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPUJoKGIsbnVsbCxkLGMpOllpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxaaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7XG5nPWUudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1nO2lmKG51bGwhPT1mKWlmKEhlKGYudmFsdWUsZykpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhV2YuY3VycmVudCl7Yj0kaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZj1iLmNoaWxkLG51bGwhPT1mJiYoZi5yZXR1cm49Yik7bnVsbCE9PWY7KXt2YXIgaD1mLmRlcGVuZGVuY2llcztpZihudWxsIT09aCl7Zz1mLmNoaWxkO2Zvcih2YXIgaz1oLmZpcnN0Q29udGV4dDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQpe2lmKDE9PT1mLnRhZyl7az1jaCgtMSxjJi1jKTtrLnRhZz0yO3ZhciBsPWYudXBkYXRlUXVldWU7aWYobnVsbCE9PWwpe2w9bC5zaGFyZWQ7dmFyIG09bC5wZW5kaW5nO251bGw9PT1tP2submV4dD1rOihrLm5leHQ9bS5uZXh0LG0ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7U2coZi5yZXR1cm4sXG5jLGIpO2gubGFuZXN8PWM7YnJlYWt9az1rLm5leHR9fWVsc2UgaWYoMTA9PT1mLnRhZylnPWYudHlwZT09PWIudHlwZT9udWxsOmYuY2hpbGQ7ZWxzZSBpZigxOD09PWYudGFnKXtnPWYucmV0dXJuO2lmKG51bGw9PT1nKXRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lc3w9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoaC5sYW5lc3w9Yyk7U2coZyxjLGIpO2c9Zi5zaWJsaW5nfWVsc2UgZz1mLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWY7ZWxzZSBmb3IoZz1mO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31mPWcuc2libGluZztpZihudWxsIT09Zil7Zi5yZXR1cm49Zy5yZXR1cm47Zz1mO2JyZWFrfWc9Zy5yZXR1cm59Zj1nfVlpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sVGcoYixjKSxlPVZnKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLFlpKGEsYixkLGMpLFxuYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkPWIudHlwZSxlPUxnKGQsYi5wZW5kaW5nUHJvcHMpLGU9TGcoZC50eXBlLGUpLGFqKGEsYixkLGUsYyk7Y2FzZSAxNTpyZXR1cm4gY2ooYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGpqKGEsYiksYi50YWc9MSxaZihkKT8oYT0hMCxjZyhiKSk6YT0hMSxUZyhiLGMpLHBoKGIsZCxlKSxyaChiLGQsZSxjKSxraihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIHlqKGEsYixjKTtjYXNlIDIyOnJldHVybiBlaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9O2Z1bmN0aW9uIEdrKGEsYil7cmV0dXJuIGFjKGEsYil9XG5mdW5jdGlvbiBhbChhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBCZyhhLGIsYyxkKXtyZXR1cm4gbmV3IGFsKGEsYixjLGQpfWZ1bmN0aW9uIGJqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiAkayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PURhKXJldHVybiAxMTtpZihhPT09R2EpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gd2goYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1CZyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24geWgoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHlhOnJldHVybiBBaChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHphOmc9ODtlfD04O2JyZWFrO2Nhc2UgQWE6cmV0dXJuIGE9QmcoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT1BYSxhLmxhbmVzPWYsYTtjYXNlIEVhOnJldHVybiBhPUJnKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPUVhLGEubGFuZXM9ZixhO2Nhc2UgRmE6cmV0dXJuIGE9QmcoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RmEsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gcWooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEJhOmc9MTA7YnJlYWsgYTtjYXNlIENhOmc9OTticmVhayBhO2Nhc2UgRGE6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBHYTpnPTE0O2JyZWFrIGE7Y2FzZSBIYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9QmcoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBBaChhLGIsYyxkKXthPUJnKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBxaihhLGIsYyxkKXthPUJnKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17aXNIaWRkZW46ITF9O3JldHVybiBhfWZ1bmN0aW9uIHhoKGEsYixjKXthPUJnKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHpoKGEsYixjKXtiPUJnKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYmwoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz16YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz16YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz16YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gY2woYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3IGJsKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9QmcoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTthaChmKTtyZXR1cm4gYX1mdW5jdGlvbiBkbChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOndhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gZWwoYSl7aWYoIWEpcmV0dXJuIFZmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVmIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihaZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFpmKGMpKXJldHVybiBiZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBmbChhLGIsYyxkLGUsZixnLGgsayl7YT1jbChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1lbChudWxsKTtjPWEuY3VycmVudDtkPUwoKTtlPWxoKGMpO2Y9Y2goZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDtkaChjLGYsZSk7YS5jdXJyZW50LmxhbmVzPWU7QWMoYSxlLGQpO0VrKGEsZCk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2woYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9TCgpLGc9bGgoZSk7Yz1lbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWNoKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO2E9ZGgoZSxiLGcpO251bGwhPT1hJiYobWgoYSxlLGcsZiksZWgoYSxlLGcpKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGhsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gaWwoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGpsKGEsYil7aWwoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmlsKGEsYil9ZnVuY3Rpb24ga2woKXtyZXR1cm4gbnVsbH12YXIgbGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIG1sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnJlbmRlcj1tbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2dsKGEsYixudWxsLG51bGwpfTtubC5wcm90b3R5cGUudW5tb3VudD1tbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1NrKGZ1bmN0aW9uKCl7Z2wobnVsbCxhLG51bGwsbnVsbCl9KTtiW3VmXT1udWxsfX07ZnVuY3Rpb24gbmwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9SGMoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFFjLmxlbmd0aCYmMCE9PWImJmI8UWNbY10ucHJpb3JpdHk7YysrKTtRYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZWYyhhKX19O2Z1bmN0aW9uIG9sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBwbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gcWwoKXt9XG5mdW5jdGlvbiBybChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtmLmNhbGwoYSl9fXZhciBnPWZsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3VmXT1nLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChrKTtoLmNhbGwoYSl9fXZhciBrPWNsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt1Zl09ay5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTayhmdW5jdGlvbigpe2dsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBzbChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtoLmNhbGwoYSl9fWdsKGIsZyxhLGUpfWVsc2UgZz1ybChjLGIsYSxlLGQpO3JldHVybiBobChnKX1FYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXRjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKENjKGIsY3wxKSxFayhiLEIoKSksMD09PShLJjYpJiYoSGo9QigpKzUwMCxqZygpKSl9YnJlYWs7Y2FzZSAxMzpTayhmdW5jdGlvbigpe3ZhciBiPVpnKGEsMSk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMSxjKX19KSxqbChhLDEpfX07XG5GYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1aZyhhLDEzNDIxNzcyOCk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMTM0MjE3NzI4LGMpfWpsKGEsMTM0MjE3NzI4KX19O0djPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWxoKGEpLGM9WmcoYSxiKTtpZihudWxsIT09Yyl7dmFyIGQ9TCgpO21oKGMsYSxiLGQpfWpsKGEsYil9fTtIYz1mdW5jdGlvbigpe3JldHVybiBDfTtJYz1mdW5jdGlvbihhLGIpe3ZhciBjPUM7dHJ5e3JldHVybiBDPWEsYigpfWZpbmFsbHl7Qz1jfX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmJiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcihwKDkwKSk7V2EoZCk7YmIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVJrO0hiPVNrO1xudmFyIHRsPXt1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ITEsRXZlbnRzOltDYix1ZSxEYixFYixGYixSa119LHVsPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpXYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE4LjIuMFwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgdmw9e2J1bmRsZVR5cGU6dWwuYnVuZGxlVHlwZSx2ZXJzaW9uOnVsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp1bC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOnVsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1aYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dWwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxua2wsZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHdsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighd2wuaXNEaXNhYmxlZCYmd2wuc3VwcG9ydHNGaWJlcil0cnl7a2M9d2wuaW5qZWN0KHZsKSxsYz13bH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dGw7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFvbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBkbChhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9bGw7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWNsKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbdWZdPWIuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBtbChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9WmIoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gU2soYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9bGw7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWZsKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbdWZdPWIuY3VycmVudDtzZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IG5sKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXBsKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhTayhmdW5jdGlvbigpe3NsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt1Zl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVJrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcGwoYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIHNsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmNyZWF0ZVJvb3QoYywgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24oYywgaCwgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uaHlkcmF0ZVJvb3QoYywgaCwgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsZyl7dmFyIGIsZD17fSxlPW51bGwsaD1udWxsO3ZvaWQgMCE9PWcmJihlPVwiXCIrZyk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYoaD1hLnJlZik7Zm9yKGIgaW4gYSltLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6ayx0eXBlOmMsa2V5OmUscmVmOmgscHJvcHM6ZCxfb3duZXI6bi5jdXJyZW50fX1leHBvcnRzLkZyYWdtZW50PWw7ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7ZnVuY3Rpb24gZihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7MDxjOyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYoMDxnKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBoKGEpe3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfWZ1bmN0aW9uIGsoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybiBudWxsO3ZhciBiPWFbMF0sYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoLHc9ZT4+PjE7ZDx3Oyl7dmFyIG09MiooZCsxKS0xLEM9YVttXSxuPW0rMSx4PWFbbl07aWYoMD5nKEMsYykpbjxlJiYwPmcoeCxDKT8oYVtkXT14LGFbbl09YyxkPW4pOihhW2RdPUMsYVttXT1jLGQ9bSk7ZWxzZSBpZihuPGUmJjA+Zyh4LGMpKWFbZF09eCxhW25dPWMsZD1uO2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9XG5mdW5jdGlvbiBnKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfWlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX12YXIgcj1bXSx0PVtdLHU9MSx2PW51bGwseT0zLHo9ITEsQT0hMSxCPSExLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpudWxsLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6bnVsbCxGPVwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpudWxsO1xuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyYmbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcuYmluZChuYXZpZ2F0b3Iuc2NoZWR1bGluZyk7ZnVuY3Rpb24gRyhhKXtmb3IodmFyIGI9aCh0KTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKWsodCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlrKHQpLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsZihyLGIpO2Vsc2UgYnJlYWs7Yj1oKHQpfX1mdW5jdGlvbiBIKGEpe0I9ITE7RyhhKTtpZighQSlpZihudWxsIT09aChyKSlBPSEwLEkoSik7ZWxzZXt2YXIgYj1oKHQpO251bGwhPT1iJiZLKEgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gSihhLGIpe0E9ITE7QiYmKEI9ITEsRShMKSxMPS0xKTt6PSEwO3ZhciBjPXk7dHJ5e0coYik7Zm9yKHY9aChyKTtudWxsIT09diYmKCEodi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIU0oKSk7KXt2YXIgZD12LmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2LmNhbGxiYWNrPW51bGw7eT12LnByaW9yaXR5TGV2ZWw7dmFyIGU9ZCh2LmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/di5jYWxsYmFjaz1lOnY9PT1oKHIpJiZrKHIpO0coYil9ZWxzZSBrKHIpO3Y9aChyKX1pZihudWxsIT09dil2YXIgdz0hMDtlbHNle3ZhciBtPWgodCk7bnVsbCE9PW0mJksoSCxtLnN0YXJ0VGltZS1iKTt3PSExfXJldHVybiB3fWZpbmFsbHl7dj1udWxsLHk9Yyx6PSExfX12YXIgTj0hMSxPPW51bGwsTD0tMSxQPTUsUT0tMTtcbmZ1bmN0aW9uIE0oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKS1RPFA/ITE6ITB9ZnVuY3Rpb24gUigpe2lmKG51bGwhPT1PKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1E9YTt2YXIgYj0hMDt0cnl7Yj1PKCEwLGEpfWZpbmFsbHl7Yj9TKCk6KE49ITEsTz1udWxsKX19ZWxzZSBOPSExfXZhciBTO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBGKVM9ZnVuY3Rpb24oKXtGKFIpfTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9UjtTPWZ1bmN0aW9uKCl7VS5wb3N0TWVzc2FnZShudWxsKX19ZWxzZSBTPWZ1bmN0aW9uKCl7RChSLDApfTtmdW5jdGlvbiBJKGEpe089YTtOfHwoTj0hMCxTKCkpfWZ1bmN0aW9uIEsoYSxiKXtMPUQoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtBfHx6fHwoQT0hMCxJKEopKX07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpQPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gaChyKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaCh5KXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj15fXZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7eT1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz15O3k9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e3k9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDp1KyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxmKHQsYSksbnVsbD09PWgocikmJmE9PT1oKHQpJiYoQj8oRShMKSxMPS0xKTpCPSEwLEsoSCxjLWQpKSk6KGEuc29ydEluZGV4PWUsZihyLGEpLEF8fHp8fChBPSEwLEkoSikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPU07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9eTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7eT1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGU7IH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9zdHlsZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3N0eWxlLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgeyBDb250YWluZXJQcm9wcyB9IGZyb20gJy4vcHJvcHMnO1xyXG5cclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlLm1vZHVsZS5zY3NzJztcclxuXHJcbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCAuLi5yZXN0IH06IENvbnRhaW5lclByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y24oc3R5bGVzLmNvbnRhaW5lciwgY2xhc3NOYW1lKX0gey4uLnJlc3R9PlxyXG4gICAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgKi9cclxuLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MgKi9cclxuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuXHJcbnR5cGUgVXNlTWF0aE1lZGlhID0gKHF1ZXJ5OiBzdHJpbmcpID0+IGJvb2xlYW47XHJcblxyXG5leHBvcnQgY29uc3QgdXNlTWF0aE1lZGlhOiBVc2VNYXRoTWVkaWEgPSAocXVlcnk6IHN0cmluZykgPT4ge1xyXG5cclxuICAgIGNvbnN0IFttYXRjaCwgc2V0TWF0aF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1hdGNoT2JqID0gbWF0Y2hNZWRpYShxdWVyeSk7XHJcblxyXG4gICAgZnVuY3Rpb24gaGFuZGxlTWF0Y2goKSB7XHJcbiAgICAgICAgc2V0TWF0aChtYXRjaE9iai5tYXRjaGVzKTtcclxuICAgIH1cclxuXHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGhhbmRsZU1hdGNoKCk7XHJcbiAgICAgICAgbWF0Y2hPYmouYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlTWF0Y2gpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIG1hdGNoT2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGhhbmRsZU1hdGNoKTtcclxuICAgICAgICB9O1xyXG4gICAgfSwgW3F1ZXJ5XSk7XHJcblxyXG4gICAgcmV0dXJuIG1hdGNoO1xyXG59OyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyohXG4gKiBHU0FQIDMuMTEuM1xuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMiwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfY29uZmlnID0ge1xuICBhdXRvU2xlZXA6IDEyMCxcbiAgZm9yY2UzRDogXCJhdXRvXCIsXG4gIG51bGxUYXJnZXRXYXJuOiAxLFxuICB1bml0czoge1xuICAgIGxpbmVIZWlnaHQ6IFwiXCJcbiAgfVxufSxcbiAgICBfZGVmYXVsdHMgPSB7XG4gIGR1cmF0aW9uOiAuNSxcbiAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgZGVsYXk6IDBcbn0sXG4gICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICBfcmV2ZXJ0aW5nLFxuICAgIF9jb250ZXh0LFxuICAgIF9iaWdOdW0gPSAxZTgsXG4gICAgX3RpbnlOdW0gPSAxIC8gX2JpZ051bSxcbiAgICBfMlBJID0gTWF0aC5QSSAqIDIsXG4gICAgX0hBTEZfUEkgPSBfMlBJIC8gNCxcbiAgICBfZ3NJRCA9IDAsXG4gICAgX3NxcnQgPSBNYXRoLnNxcnQsXG4gICAgX2NvcyA9IE1hdGguY29zLFxuICAgIF9zaW4gPSBNYXRoLnNpbixcbiAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn0sXG4gICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59LFxuICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufSxcbiAgICBfaXNVbmRlZmluZWQgPSBmdW5jdGlvbiBfaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59LFxuICAgIF9pc05vdEZhbHNlID0gZnVuY3Rpb24gX2lzTm90RmFsc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBmYWxzZTtcbn0sXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfaXNGdW5jT3JTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSB8fCBfaXNTdHJpbmcodmFsdWUpO1xufSxcbiAgICBfaXNUeXBlZEFycmF5ID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgIC8vIG5vdGU6IElFMTAgaGFzIEFycmF5QnVmZmVyLCBidXQgTk9UIEFycmF5QnVmZmVyLmlzVmlldygpLlxuX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgIF9zdHJpY3ROdW1FeHAgPSAvKD86LT9cXC4/XFxkfFxcLikrL2dpLFxuICAgIC8vb25seSBudW1iZXJzIChpbmNsdWRpbmcgbmVnYXRpdmVzIGFuZCBkZWNpbWFscykgYnV0IE5PVCByZWxhdGl2ZSB2YWx1ZXMuXG5fbnVtRXhwID0gL1stKz0uXSpcXGQrWy5lXFwtK10qXFxkKltlXFwtK10qXFxkKi9nLFxuICAgIC8vZmluZHMgYW55IG51bWJlcnMsIGluY2x1ZGluZyBvbmVzIHRoYXQgc3RhcnQgd2l0aCArPSBvciAtPSwgbmVnYXRpdmUgbnVtYmVycywgYW5kIG9uZXMgaW4gc2NpZW50aWZpYyBub3RhdGlvbiBsaWtlIDFlLTguXG5fbnVtV2l0aFVuaXRFeHAgPSAvWy0rPS5dKlxcZCtbLmUtXSpcXGQqW2EteiVdKi9nLFxuICAgIF9jb21wbGV4U3RyaW5nTnVtRXhwID0gL1stKz0uXSpcXGQrXFwuP1xcZCooPzplLXxlXFwrKT9cXGQqL2dpLFxuICAgIC8vZHVwbGljYXRlIHNvIHRoYXQgd2hpbGUgd2UncmUgbG9vcGluZyB0aHJvdWdoIG1hdGNoZXMgZnJvbSBleGVjKCksIGl0IGRvZXNuJ3QgY29udGFtaW5hdGUgdGhlIGxhc3RJbmRleCBvZiBfbnVtRXhwIHdoaWNoIHdlIHVzZSB0byBzZWFyY2ggZm9yIGNvbG9ycyB0b28uXG5fcmVsRXhwID0gL1srLV09LT9bLlxcZF0rLyxcbiAgICBfZGVsaW1pdGVkVmFsdWVFeHAgPSAvW14sJ1wiXFxbXFxdXFxzXSsvZ2ksXG4gICAgLy8gcHJldmlvdXNseSAvWyNcXC0rLl0qXFxiW2EtelxcZFxcLT0rJS5dKy9naSBidXQgZGlkbid0IGNhdGNoIHNwZWNpYWwgY2hhcmFjdGVycy5cbl91bml0RXhwID0gL15bK1xcLT1lXFxzXFxkXSpcXGQrWy5cXGRdKihbYS16XSp8JSlcXHMqJC9pLFxuICAgIF9nbG9iYWxUaW1lbGluZSxcbiAgICBfd2luLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfZG9jLFxuICAgIF9nbG9iYWxzID0ge30sXG4gICAgX2luc3RhbGxTY29wZSA9IHt9LFxuICAgIF9jb3JlUmVhZHksXG4gICAgX2luc3RhbGwgPSBmdW5jdGlvbiBfaW5zdGFsbChzY29wZSkge1xuICByZXR1cm4gKF9pbnN0YWxsU2NvcGUgPSBfbWVyZ2Uoc2NvcGUsIF9nbG9iYWxzKSkgJiYgZ3NhcDtcbn0sXG4gICAgX21pc3NpbmdQbHVnaW4gPSBmdW5jdGlvbiBfbWlzc2luZ1BsdWdpbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIGNvbnNvbGUud2FybihcIkludmFsaWQgcHJvcGVydHlcIiwgcHJvcGVydHksIFwic2V0IHRvXCIsIHZhbHVlLCBcIk1pc3NpbmcgcGx1Z2luPyBnc2FwLnJlZ2lzdGVyUGx1Z2luKClcIik7XG59LFxuICAgIF93YXJuID0gZnVuY3Rpb24gX3dhcm4obWVzc2FnZSwgc3VwcHJlc3MpIHtcbiAgcmV0dXJuICFzdXBwcmVzcyAmJiBjb25zb2xlLndhcm4obWVzc2FnZSk7XG59LFxuICAgIF9hZGRHbG9iYWwgPSBmdW5jdGlvbiBfYWRkR2xvYmFsKG5hbWUsIG9iaikge1xuICByZXR1cm4gbmFtZSAmJiAoX2dsb2JhbHNbbmFtZV0gPSBvYmopICYmIF9pbnN0YWxsU2NvcGUgJiYgKF9pbnN0YWxsU2NvcGVbbmFtZV0gPSBvYmopIHx8IF9nbG9iYWxzO1xufSxcbiAgICBfZW1wdHlGdW5jID0gZnVuY3Rpb24gX2VtcHR5RnVuYygpIHtcbiAgcmV0dXJuIDA7XG59LFxuICAgIF9zdGFydEF0UmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAgaXNTdGFydDogdHJ1ZSxcbiAga2lsbDogZmFsc2Vcbn0sXG4gICAgX3JldmVydENvbmZpZ05vS2lsbCA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gIGtpbGw6IGZhbHNlXG59LFxuICAgIF9yZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlXG59LFxuICAgIF9yZXNlcnZlZFByb3BzID0ge30sXG4gICAgX2xhenlUd2VlbnMgPSBbXSxcbiAgICBfbGF6eUxvb2t1cCA9IHt9LFxuICAgIF9sYXN0UmVuZGVyZWRGcmFtZSxcbiAgICBfcGx1Z2lucyA9IHt9LFxuICAgIF9lZmZlY3RzID0ge30sXG4gICAgX25leHRHQ0ZyYW1lID0gMzAsXG4gICAgX2hhcm5lc3NQbHVnaW5zID0gW10sXG4gICAgX2NhbGxiYWNrTmFtZXMgPSBcIlwiLFxuICAgIF9oYXJuZXNzID0gZnVuY3Rpb24gX2hhcm5lc3ModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1swXSxcbiAgICAgIGhhcm5lc3NQbHVnaW4sXG4gICAgICBpO1xuICBfaXNPYmplY3QodGFyZ2V0KSB8fCBfaXNGdW5jdGlvbih0YXJnZXQpIHx8ICh0YXJnZXRzID0gW3RhcmdldHNdKTtcblxuICBpZiAoIShoYXJuZXNzUGx1Z2luID0gKHRhcmdldC5fZ3NhcCB8fCB7fSkuaGFybmVzcykpIHtcbiAgICAvLyBmaW5kIHRoZSBmaXJzdCB0YXJnZXQgd2l0aCBhIGhhcm5lc3MuIFdlIGFzc3VtZSB0YXJnZXRzIHBhc3NlZCBpbnRvIGFuIGFuaW1hdGlvbiB3aWxsIGJlIG9mIHNpbWlsYXIgdHlwZSwgbWVhbmluZyB0aGUgc2FtZSBraW5kIG9mIGhhcm5lc3MgY2FuIGJlIHVzZWQgZm9yIHRoZW0gYWxsIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgaSA9IF9oYXJuZXNzUGx1Z2lucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tICYmICFfaGFybmVzc1BsdWdpbnNbaV0udGFyZ2V0VGVzdCh0YXJnZXQpKSB7fVxuXG4gICAgaGFybmVzc1BsdWdpbiA9IF9oYXJuZXNzUGx1Z2luc1tpXTtcbiAgfVxuXG4gIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdGFyZ2V0c1tpXSAmJiAodGFyZ2V0c1tpXS5fZ3NhcCB8fCAodGFyZ2V0c1tpXS5fZ3NhcCA9IG5ldyBHU0NhY2hlKHRhcmdldHNbaV0sIGhhcm5lc3NQbHVnaW4pKSkgfHwgdGFyZ2V0cy5zcGxpY2UoaSwgMSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0cztcbn0sXG4gICAgX2dldENhY2hlID0gZnVuY3Rpb24gX2dldENhY2hlKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRvQXJyYXkodGFyZ2V0KSlbMF0uX2dzYXA7XG59LFxuICAgIF9nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB2KSB7XG4gIHJldHVybiAodiA9IHRhcmdldFtwcm9wZXJ0eV0pICYmIF9pc0Z1bmN0aW9uKHYpID8gdGFyZ2V0W3Byb3BlcnR5XSgpIDogX2lzVW5kZWZpbmVkKHYpICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgdjtcbn0sXG4gICAgX2ZvckVhY2hOYW1lID0gZnVuY3Rpb24gX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jKSB7XG4gIHJldHVybiAobmFtZXMgPSBuYW1lcy5zcGxpdChcIixcIikpLmZvckVhY2goZnVuYykgfHwgbmFtZXM7XG59LFxuICAgIC8vc3BsaXQgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBuYW1lcyBpbnRvIGFuIGFycmF5LCB0aGVuIHJ1biBhIGZvckVhY2goKSBmdW5jdGlvbiBhbmQgcmV0dXJuIHRoZSBzcGxpdCBhcnJheSAodGhpcyBpcyBqdXN0IGEgd2F5IHRvIGNvbnNvbGlkYXRlL3Nob3J0ZW4gc29tZSBjb2RlKS5cbl9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3JvdW5kUHJlY2lzZSA9IGZ1bmN0aW9uIF9yb3VuZFByZWNpc2UodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDAwMCkgLyAxMDAwMDAwMCB8fCAwO1xufSxcbiAgICAvLyBpbmNyZWFzZWQgcHJlY2lzaW9uIG1vc3RseSBmb3IgdGltaW5nIHZhbHVlcy5cbl9wYXJzZVJlbGF0aXZlID0gZnVuY3Rpb24gX3BhcnNlUmVsYXRpdmUoc3RhcnQsIHZhbHVlKSB7XG4gIHZhciBvcGVyYXRvciA9IHZhbHVlLmNoYXJBdCgwKSxcbiAgICAgIGVuZCA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDIpKTtcbiAgc3RhcnQgPSBwYXJzZUZsb2F0KHN0YXJ0KTtcbiAgcmV0dXJuIG9wZXJhdG9yID09PSBcIitcIiA/IHN0YXJ0ICsgZW5kIDogb3BlcmF0b3IgPT09IFwiLVwiID8gc3RhcnQgLSBlbmQgOiBvcGVyYXRvciA9PT0gXCIqXCIgPyBzdGFydCAqIGVuZCA6IHN0YXJ0IC8gZW5kO1xufSxcbiAgICBfYXJyYXlDb250YWluc0FueSA9IGZ1bmN0aW9uIF9hcnJheUNvbnRhaW5zQW55KHRvU2VhcmNoLCB0b0ZpbmQpIHtcbiAgLy9zZWFyY2hlcyBvbmUgYXJyYXkgdG8gZmluZCBtYXRjaGVzIGZvciBhbnkgb2YgdGhlIGl0ZW1zIGluIHRoZSB0b0ZpbmQgYXJyYXkuIEFzIHNvb24gYXMgb25lIGlzIGZvdW5kLCBpdCByZXR1cm5zIHRydWUuIEl0IGRvZXMgTk9UIHJldHVybiBhbGwgdGhlIG1hdGNoZXM7IGl0J3Mgc2ltcGx5IGEgYm9vbGVhbiBzZWFyY2guXG4gIHZhciBsID0gdG9GaW5kLmxlbmd0aCxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyB0b1NlYXJjaC5pbmRleE9mKHRvRmluZFtpXSkgPCAwICYmICsraSA8IGw7KSB7fVxuXG4gIHJldHVybiBpIDwgbDtcbn0sXG4gICAgX2xhenlSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVJlbmRlcigpIHtcbiAgdmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG4gICAgICBhID0gX2xhenlUd2VlbnMuc2xpY2UoMCksXG4gICAgICBpLFxuICAgICAgdHdlZW47XG5cbiAgX2xhenlMb29rdXAgPSB7fTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdHdlZW4gPSBhW2ldO1xuICAgIHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICYmICh0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKS5fbGF6eSA9IDApO1xuICB9XG59LFxuICAgIF9sYXp5U2FmZVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5U2FmZVJlbmRlcihhbmltYXRpb24sIHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTtcbiAgYW5pbWF0aW9uLnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UgfHwgX3JldmVydGluZyAmJiB0aW1lIDwgMCAmJiAoYW5pbWF0aW9uLl9pbml0dGVkIHx8IGFuaW1hdGlvbi5fc3RhcnRBdCkpO1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIHNvbWVvbmUgY2FsbHMgc2VlaygpIG9yIHRpbWUoKSBvciBwcm9ncmVzcygpLCB0aGV5IGV4cGVjdCBhbiBpbW1lZGlhdGUgcmVuZGVyLlxufSxcbiAgICBfbnVtZXJpY0lmUG9zc2libGUgPSBmdW5jdGlvbiBfbnVtZXJpY0lmUG9zc2libGUodmFsdWUpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgcmV0dXJuIChuIHx8IG4gPT09IDApICYmICh2YWx1ZSArIFwiXCIpLm1hdGNoKF9kZWxpbWl0ZWRWYWx1ZUV4cCkubGVuZ3RoIDwgMiA/IG4gOiBfaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59LFxuICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaChwKSB7XG4gIHJldHVybiBwO1xufSxcbiAgICBfc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0RGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF9zZXRLZXlmcmFtZURlZmF1bHRzID0gZnVuY3Rpb24gX3NldEtleWZyYW1lRGVmYXVsdHMoZXhjbHVkZUR1cmF0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBkZWZhdWx0cykge1xuICAgIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICAgIHAgaW4gb2JqIHx8IHAgPT09IFwiZHVyYXRpb25cIiAmJiBleGNsdWRlRHVyYXRpb24gfHwgcCA9PT0gXCJlYXNlXCIgfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgICB9XG4gIH07XG59LFxuICAgIF9tZXJnZSA9IGZ1bmN0aW9uIF9tZXJnZShiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIGJhc2VbcF0gPSB0b01lcmdlW3BdO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9tZXJnZURlZXAgPSBmdW5jdGlvbiBfbWVyZ2VEZWVwKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgcCAhPT0gXCJfX3Byb3RvX19cIiAmJiBwICE9PSBcImNvbnN0cnVjdG9yXCIgJiYgcCAhPT0gXCJwcm90b3R5cGVcIiAmJiAoYmFzZVtwXSA9IF9pc09iamVjdCh0b01lcmdlW3BdKSA/IF9tZXJnZURlZXAoYmFzZVtwXSB8fCAoYmFzZVtwXSA9IHt9KSwgdG9NZXJnZVtwXSkgOiB0b01lcmdlW3BdKTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfY29weUV4Y2x1ZGluZyA9IGZ1bmN0aW9uIF9jb3B5RXhjbHVkaW5nKG9iaiwgZXhjbHVkaW5nKSB7XG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBvYmopIHtcbiAgICBwIGluIGV4Y2x1ZGluZyB8fCAoY29weVtwXSA9IG9ialtwXSk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2luaGVyaXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9pbmhlcml0RGVmYXVsdHModmFycykge1xuICB2YXIgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgZnVuYyA9IHZhcnMua2V5ZnJhbWVzID8gX3NldEtleWZyYW1lRGVmYXVsdHMoX2lzQXJyYXkodmFycy5rZXlmcmFtZXMpKSA6IF9zZXREZWZhdWx0cztcblxuICBpZiAoX2lzTm90RmFsc2UodmFycy5pbmhlcml0KSkge1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGZ1bmModmFycywgcGFyZW50LnZhcnMuZGVmYXVsdHMpO1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudCB8fCBwYXJlbnQuX2RwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YXJzO1xufSxcbiAgICBfYXJyYXlzTWF0Y2ggPSBmdW5jdGlvbiBfYXJyYXlzTWF0Y2goYTEsIGEyKSB7XG4gIHZhciBpID0gYTEubGVuZ3RoLFxuICAgICAgbWF0Y2ggPSBpID09PSBhMi5sZW5ndGg7XG5cbiAgd2hpbGUgKG1hdGNoICYmIGktLSAmJiBhMVtpXSA9PT0gYTJbaV0pIHt9XG5cbiAgcmV0dXJuIGkgPCAwO1xufSxcbiAgICBfYWRkTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfYWRkTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCwgc29ydEJ5KSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBwYXJlbnRbbGFzdFByb3BdLFxuICAgICAgdDtcblxuICBpZiAoc29ydEJ5KSB7XG4gICAgdCA9IGNoaWxkW3NvcnRCeV07XG5cbiAgICB3aGlsZSAocHJldiAmJiBwcmV2W3NvcnRCeV0gPiB0KSB7XG4gICAgICBwcmV2ID0gcHJldi5fcHJldjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJldikge1xuICAgIGNoaWxkLl9uZXh0ID0gcHJldi5fbmV4dDtcbiAgICBwcmV2Ll9uZXh0ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQuX25leHQgPSBwYXJlbnRbZmlyc3RQcm9wXTtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgaWYgKGNoaWxkLl9uZXh0KSB7XG4gICAgY2hpbGQuX25leHQuX3ByZXYgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBjaGlsZC5fcHJldiA9IHByZXY7XG4gIGNoaWxkLnBhcmVudCA9IGNoaWxkLl9kcCA9IHBhcmVudDtcbiAgcmV0dXJuIGNoaWxkO1xufSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gY2hpbGQuX3ByZXYsXG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgaWYgKHByZXYpIHtcbiAgICBwcmV2Ll9uZXh0ID0gbmV4dDtcbiAgfSBlbHNlIGlmIChwYXJlbnRbZmlyc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IG5leHQ7XG4gIH1cblxuICBpZiAobmV4dCkge1xuICAgIG5leHQuX3ByZXYgPSBwcmV2O1xuICB9IGVsc2UgaWYgKHBhcmVudFtsYXN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IHByZXY7XG4gIH1cblxuICBjaGlsZC5fbmV4dCA9IGNoaWxkLl9wcmV2ID0gY2hpbGQucGFyZW50ID0gbnVsbDsgLy8gZG9uJ3QgZGVsZXRlIHRoZSBfZHAganVzdCBzbyB3ZSBjYW4gcmV2ZXJ0IGlmIG5lY2Vzc2FyeS4gQnV0IHBhcmVudCBzaG91bGQgYmUgbnVsbCB0byBpbmRpY2F0ZSB0aGUgaXRlbSBpc24ndCBpbiBhIGxpbmtlZCBsaXN0LlxufSxcbiAgICBfcmVtb3ZlRnJvbVBhcmVudCA9IGZ1bmN0aW9uIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkLCBvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlKSB7XG4gIGNoaWxkLnBhcmVudCAmJiAoIW9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUgfHwgY2hpbGQucGFyZW50LmF1dG9SZW1vdmVDaGlsZHJlbikgJiYgY2hpbGQucGFyZW50LnJlbW92ZShjaGlsZCk7XG4gIGNoaWxkLl9hY3QgPSAwO1xufSxcbiAgICBfdW5jYWNoZSA9IGZ1bmN0aW9uIF91bmNhY2hlKGFuaW1hdGlvbiwgY2hpbGQpIHtcbiAgaWYgKGFuaW1hdGlvbiAmJiAoIWNoaWxkIHx8IGNoaWxkLl9lbmQgPiBhbmltYXRpb24uX2R1ciB8fCBjaGlsZC5fc3RhcnQgPCAwKSkge1xuICAgIC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogaWYgYSBjaGlsZCBhbmltYXRpb24gaXMgcGFzc2VkIGluIHdlIHNob3VsZCBvbmx5IHVuY2FjaGUgaWYgdGhhdCBjaGlsZCBFWFRFTkRTIHRoZSBhbmltYXRpb24gKGl0cyBlbmQgdGltZSBpcyBiZXlvbmQgdGhlIGVuZClcbiAgICB2YXIgYSA9IGFuaW1hdGlvbjtcblxuICAgIHdoaWxlIChhKSB7XG4gICAgICBhLl9kaXJ0eSA9IDE7XG4gICAgICBhID0gYS5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3JlY2FjaGVBbmNlc3RvcnMgPSBmdW5jdGlvbiBfcmVjYWNoZUFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5wYXJlbnQ7XG5cbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgLy9zb21ldGltZXMgd2UgbXVzdCBmb3JjZSBhIHJlLXNvcnQgb2YgYWxsIGNoaWxkcmVuIGFuZCB1cGRhdGUgdGhlIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gb2YgYWxsIGFuY2VzdG9yIHRpbWVsaW5lcyBpbW1lZGlhdGVseSBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIG1pZGRsZSBvZiBhIHJlbmRlciBsb29wLCBvbmUgdHdlZW4gYWx0ZXJzIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgd2hpY2ggc2hvdmVzIGl0cyBzdGFydFRpbWUgYmVmb3JlIDAsIGZvcmNpbmcgdGhlIHBhcmVudCB0aW1lbGluZSB0byBzaGlmdCBhcm91bmQgYW5kIHNoaWZ0Q2hpbGRyZW4oKSB3aGljaCBjb3VsZCBhZmZlY3QgdGhhdCBuZXh0IHR3ZWVuJ3MgcmVuZGVyIChzdGFydFRpbWUpLiBEb2Vzbid0IG1hdHRlciBmb3IgdGhlIHJvb3QgdGltZWxpbmUgdGhvdWdoLlxuICAgIHBhcmVudC5fZGlydHkgPSAxO1xuICAgIHBhcmVudC50b3RhbER1cmF0aW9uKCk7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZXdpbmRTdGFydEF0ID0gZnVuY3Rpb24gX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHJldHVybiB0d2Vlbi5fc3RhcnRBdCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLnZhcnMuaW1tZWRpYXRlUmVuZGVyICYmICF0d2Vlbi52YXJzLmF1dG9SZXZlcnQgfHwgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKHRvdGFsVGltZSwgdHJ1ZSwgZm9yY2UpKTtcbn0sXG4gICAgX2hhc05vUGF1c2VkQW5jZXN0b3JzID0gZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICByZXR1cm4gIWFuaW1hdGlvbiB8fCBhbmltYXRpb24uX3RzICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24ucGFyZW50KTtcbn0sXG4gICAgX2VsYXBzZWRDeWNsZUR1cmF0aW9uID0gZnVuY3Rpb24gX2VsYXBzZWRDeWNsZUR1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUoYW5pbWF0aW9uLl90VGltZSwgYW5pbWF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKyBhbmltYXRpb24uX3JEZWxheSkgKiBhbmltYXRpb24gOiAwO1xufSxcbiAgICAvLyBmZWVkIGluIHRoZSB0b3RhbFRpbWUgYW5kIGN5Y2xlRHVyYXRpb24gYW5kIGl0J2xsIHJldHVybiB0aGUgY3ljbGUgKGl0ZXJhdGlvbiBtaW51cyAxKSBhbmQgaWYgdGhlIHBsYXloZWFkIGlzIGV4YWN0bHkgYXQgdGhlIHZlcnkgRU5ELCBpdCB3aWxsIE5PVCBidW1wIHVwIHRvIHRoZSBuZXh0IGN5Y2xlLlxuX2FuaW1hdGlvbkN5Y2xlID0gZnVuY3Rpb24gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCBjeWNsZUR1cmF0aW9uKSB7XG4gIHZhciB3aG9sZSA9IE1hdGguZmxvb3IodFRpbWUgLz0gY3ljbGVEdXJhdGlvbik7XG4gIHJldHVybiB0VGltZSAmJiB3aG9sZSA9PT0gdFRpbWUgPyB3aG9sZSAtIDEgOiB3aG9sZTtcbn0sXG4gICAgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUgPSBmdW5jdGlvbiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnRUaW1lLCBjaGlsZCkge1xuICByZXR1cm4gKHBhcmVudFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzICsgKGNoaWxkLl90cyA+PSAwID8gMCA6IGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKTtcbn0sXG4gICAgX3NldEVuZCA9IGZ1bmN0aW9uIF9zZXRFbmQoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX2VuZCA9IF9yb3VuZFByZWNpc2UoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG59LFxuICAgIF9hbGlnblBsYXloZWFkID0gZnVuY3Rpb24gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCB0b3RhbFRpbWUpIHtcbiAgLy8gYWRqdXN0cyB0aGUgYW5pbWF0aW9uJ3MgX3N0YXJ0IGFuZCBfZW5kIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgdG90YWxUaW1lIChvbmx5IGlmIHRoZSBwYXJlbnQncyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlIGFuZCB0aGUgYW5pbWF0aW9uIGlzbid0IHBhdXNlZCkuIEl0IGRvZXNuJ3QgZG8gYW55IHJlbmRlcmluZyBvciBmb3JjaW5nIHRoaW5ncyBiYWNrIGludG8gcGFyZW50IHRpbWVsaW5lcywgZXRjLiAtIHRoYXQncyB3aGF0IHRvdGFsVGltZSgpIGlzIGZvci5cbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgIGFuaW1hdGlvbi5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSAtIChhbmltYXRpb24uX3RzID4gMCA/IHRvdGFsVGltZSAvIGFuaW1hdGlvbi5fdHMgOiAoKGFuaW1hdGlvbi5fZGlydHkgPyBhbmltYXRpb24udG90YWxEdXJhdGlvbigpIDogYW5pbWF0aW9uLl90RHVyKSAtIHRvdGFsVGltZSkgLyAtYW5pbWF0aW9uLl90cykpO1xuXG4gICAgX3NldEVuZChhbmltYXRpb24pO1xuXG4gICAgcGFyZW50Ll9kaXJ0eSB8fCBfdW5jYWNoZShwYXJlbnQsIGFuaW1hdGlvbik7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG5cbi8qXG5fdG90YWxUaW1lVG9UaW1lID0gKGNsYW1wZWRUb3RhbFRpbWUsIGR1cmF0aW9uLCByZXBlYXQsIHJlcGVhdERlbGF5LCB5b3lvKSA9PiB7XG5cdGxldCBjeWNsZUR1cmF0aW9uID0gZHVyYXRpb24gKyByZXBlYXREZWxheSxcblx0XHR0aW1lID0gX3JvdW5kKGNsYW1wZWRUb3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblx0aWYgKHRpbWUgPiBkdXJhdGlvbikge1xuXHRcdHRpbWUgPSBkdXJhdGlvbjtcblx0fVxuXHRyZXR1cm4gKHlveW8gJiYgKH5+KGNsYW1wZWRUb3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSAmIDEpKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG59LFxuKi9cbl9wb3N0QWRkQ2hlY2tzID0gZnVuY3Rpb24gX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKSB7XG4gIHZhciB0O1xuXG4gIGlmIChjaGlsZC5fdGltZSB8fCBjaGlsZC5faW5pdHRlZCAmJiAhY2hpbGQuX2R1cikge1xuICAgIC8vaW4gY2FzZSwgZm9yIGV4YW1wbGUsIHRoZSBfc3RhcnQgaXMgbW92ZWQgb24gYSB0d2VlbiB0aGF0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLiBJbWFnaW5lIGl0J3MgYXQgaXRzIGVuZCBzdGF0ZSwgdGhlbiB0aGUgc3RhcnRUaW1lIGlzIG1vdmVkIFdBWSBsYXRlciAoYWZ0ZXIgdGhlIGVuZCBvZiB0aGlzIHRpbWVsaW5lKSwgaXQgc2hvdWxkIHJlbmRlciBhdCBpdHMgYmVnaW5uaW5nLlxuICAgIHQgPSBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lbGluZS5yYXdUaW1lKCksIGNoaWxkKTtcblxuICAgIGlmICghY2hpbGQuX2R1ciB8fCBfY2xhbXAoMCwgY2hpbGQudG90YWxEdXJhdGlvbigpLCB0KSAtIGNoaWxkLl90VGltZSA+IF90aW55TnVtKSB7XG4gICAgICBjaGlsZC5yZW5kZXIodCwgdHJ1ZSk7XG4gICAgfVxuICB9IC8vaWYgdGhlIHRpbWVsaW5lIGhhcyBhbHJlYWR5IGVuZGVkIGJ1dCB0aGUgaW5zZXJ0ZWQgdHdlZW4vdGltZWxpbmUgZXh0ZW5kcyB0aGUgZHVyYXRpb24sIHdlIHNob3VsZCBlbmFibGUgdGhpcyB0aW1lbGluZSBhZ2FpbiBzbyB0aGF0IGl0IHJlbmRlcnMgcHJvcGVybHkuIFdlIHNob3VsZCBhbHNvIGFsaWduIHRoZSBwbGF5aGVhZCB3aXRoIHRoZSBwYXJlbnQgdGltZWxpbmUncyB3aGVuIGFwcHJvcHJpYXRlLlxuXG5cbiAgaWYgKF91bmNhY2hlKHRpbWVsaW5lLCBjaGlsZCkuX2RwICYmIHRpbWVsaW5lLl9pbml0dGVkICYmIHRpbWVsaW5lLl90aW1lID49IHRpbWVsaW5lLl9kdXIgJiYgdGltZWxpbmUuX3RzKSB7XG4gICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3JzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZC4uLlxuICAgIGlmICh0aW1lbGluZS5fZHVyIDwgdGltZWxpbmUuZHVyYXRpb24oKSkge1xuICAgICAgdCA9IHRpbWVsaW5lO1xuXG4gICAgICB3aGlsZSAodC5fZHApIHtcbiAgICAgICAgdC5yYXdUaW1lKCkgPj0gMCAmJiB0LnRvdGFsVGltZSh0Ll90VGltZSk7IC8vbW92ZXMgdGhlIHRpbWVsaW5lIChzaGlmdHMgaXRzIHN0YXJ0VGltZSkgaWYgbmVjZXNzYXJ5LCBhbmQgYWxzbyBlbmFibGVzIGl0LiBJZiBpdCdzIGN1cnJlbnRseSB6ZXJvLCB0aG91Z2gsIGl0IG1heSBub3QgYmUgc2NoZWR1bGVkIHRvIHJlbmRlciB1bnRpbCBsYXRlciBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgaXQgdG8gYWxpZ24gd2l0aCB0aGUgY3VycmVudCBwbGF5aGVhZCBwb3NpdGlvbi4gT25seSBtb3ZlIHRvIGNhdGNoIHVwIHdpdGggdGhlIHBsYXloZWFkLlxuXG4gICAgICAgIHQgPSB0Ll9kcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lbGluZS5felRpbWUgPSAtX3RpbnlOdW07IC8vIGhlbHBzIGVuc3VyZSB0aGF0IHRoZSBuZXh0IHJlbmRlcigpIHdpbGwgYmUgZm9yY2VkIChjcm9zc2luZ1N0YXJ0ID0gdHJ1ZSBpbiByZW5kZXIoKSksIGV2ZW4gaWYgdGhlIGR1cmF0aW9uIGhhc24ndCBjaGFuZ2VkICh3ZSdyZSBhZGRpbmcgYSBjaGlsZCB3aGljaCB3b3VsZCBuZWVkIHRvIGdldCByZW5kZXJlZCkuIERlZmluaXRlbHkgYW4gZWRnZSBjYXNlLiBOb3RlOiB3ZSBNVVNUIGRvIHRoaXMgQUZURVIgdGhlIGxvb3AgYWJvdmUgd2hlcmUgdGhlIHRvdGFsVGltZSgpIG1pZ2h0IHRyaWdnZXIgYSByZW5kZXIoKSBiZWNhdXNlIHRoaXMgX2FkZFRvVGltZWxpbmUoKSBtZXRob2QgZ2V0cyBjYWxsZWQgZnJvbSB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBCRUZPUkUgdHdlZW5zIGV2ZW4gcmVjb3JkIHRoZWlyIHRhcmdldHMsIGV0Yy4gc28gd2Ugd291bGRuJ3Qgd2FudCB0aGluZ3MgdG8gZ2V0IHRyaWdnZXJlZCBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gIH1cbn0sXG4gICAgX2FkZFRvVGltZWxpbmUgPSBmdW5jdGlvbiBfYWRkVG9UaW1lbGluZSh0aW1lbGluZSwgY2hpbGQsIHBvc2l0aW9uLCBza2lwQ2hlY2tzKSB7XG4gIGNoaWxkLnBhcmVudCAmJiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gIGNoaWxkLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoKF9pc051bWJlcihwb3NpdGlvbikgPyBwb3NpdGlvbiA6IHBvc2l0aW9uIHx8IHRpbWVsaW5lICE9PSBfZ2xvYmFsVGltZWxpbmUgPyBfcGFyc2VQb3NpdGlvbih0aW1lbGluZSwgcG9zaXRpb24sIGNoaWxkKSA6IHRpbWVsaW5lLl90aW1lKSArIGNoaWxkLl9kZWxheSk7XG4gIGNoaWxkLl9lbmQgPSBfcm91bmRQcmVjaXNlKGNoaWxkLl9zdGFydCArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBNYXRoLmFicyhjaGlsZC50aW1lU2NhbGUoKSkgfHwgMCkpO1xuXG4gIF9hZGRMaW5rZWRMaXN0SXRlbSh0aW1lbGluZSwgY2hpbGQsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGltZWxpbmUuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG5cbiAgX2lzRnJvbU9yRnJvbVN0YXJ0KGNoaWxkKSB8fCAodGltZWxpbmUuX3JlY2VudCA9IGNoaWxkKTtcbiAgc2tpcENoZWNrcyB8fCBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpO1xuICB0aW1lbGluZS5fdHMgPCAwICYmIF9hbGlnblBsYXloZWFkKHRpbWVsaW5lLCB0aW1lbGluZS5fdFRpbWUpOyAvLyBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBuZXcgY2hpbGQgbWFrZXMgaXQgbG9uZ2VyLCB3ZSBtYXkgbmVlZCB0byBhZGp1c3QgdGhlIHBhcmVudCdzIF9zdGFydCAocHVzaCBpdCBiYWNrKVxuXG4gIHJldHVybiB0aW1lbGluZTtcbn0sXG4gICAgX3Njcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2Nyb2xsVHJpZ2dlcihhbmltYXRpb24sIHRyaWdnZXIpIHtcbiAgcmV0dXJuIChfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyIHx8IF9taXNzaW5nUGx1Z2luKFwic2Nyb2xsVHJpZ2dlclwiLCB0cmlnZ2VyKSkgJiYgX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlci5jcmVhdGUodHJpZ2dlciwgYW5pbWF0aW9uKTtcbn0sXG4gICAgX2F0dGVtcHRJbml0VHdlZW4gPSBmdW5jdGlvbiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkge1xuICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCB0VGltZSk7XG5cbiAgaWYgKCF0d2Vlbi5faW5pdHRlZCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKCFmb3JjZSAmJiB0d2Vlbi5fcHQgJiYgIV9yZXZlcnRpbmcgJiYgKHR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5ICE9PSBmYWxzZSB8fCAhdHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkpICYmIF9sYXN0UmVuZGVyZWRGcmFtZSAhPT0gX3RpY2tlci5mcmFtZSkge1xuICAgIF9sYXp5VHdlZW5zLnB1c2godHdlZW4pO1xuXG4gICAgdHdlZW4uX2xhenkgPSBbdFRpbWUsIHN1cHByZXNzRXZlbnRzXTtcbiAgICByZXR1cm4gMTtcbiAgfVxufSxcbiAgICBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0ID0gZnVuY3Rpb24gX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChfcmVmKSB7XG4gIHZhciBwYXJlbnQgPSBfcmVmLnBhcmVudDtcbiAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQuX3RzICYmIHBhcmVudC5faW5pdHRlZCAmJiAhcGFyZW50Ll9sb2NrICYmIChwYXJlbnQucmF3VGltZSgpIDwgMCB8fCBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHBhcmVudCkpO1xufSxcbiAgICAvLyBjaGVjayBwYXJlbnQncyBfbG9jayBiZWNhdXNlIHdoZW4gYSB0aW1lbGluZSByZXBlYXRzL3lveW9zIGFuZCBkb2VzIGl0cyBhcnRpZmljaWFsIHdyYXBwaW5nLCB3ZSBzaG91bGRuJ3QgZm9yY2UgdGhlIHJhdGlvIGJhY2sgdG8gMFxuX2lzRnJvbU9yRnJvbVN0YXJ0ID0gZnVuY3Rpb24gX2lzRnJvbU9yRnJvbVN0YXJ0KF9yZWYyKSB7XG4gIHZhciBkYXRhID0gX3JlZjIuZGF0YTtcbiAgcmV0dXJuIGRhdGEgPT09IFwiaXNGcm9tU3RhcnRcIiB8fCBkYXRhID09PSBcImlzU3RhcnRcIjtcbn0sXG4gICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuID0gZnVuY3Rpb24gX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICB2YXIgcHJldlJhdGlvID0gdHdlZW4ucmF0aW8sXG4gICAgICByYXRpbyA9IHRvdGFsVGltZSA8IDAgfHwgIXRvdGFsVGltZSAmJiAoIXR3ZWVuLl9zdGFydCAmJiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHR3ZWVuKSAmJiAhKCF0d2Vlbi5faW5pdHRlZCAmJiBfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSB8fCAodHdlZW4uX3RzIDwgMCB8fCB0d2Vlbi5fZHAuX3RzIDwgMCkgJiYgIV9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpID8gMCA6IDEsXG4gICAgICAvLyBpZiB0aGUgdHdlZW4gb3IgaXRzIHBhcmVudCBpcyByZXZlcnNlZCBhbmQgdGhlIHRvdGFsVGltZSBpcyAwLCB3ZSBzaG91bGQgZ28gdG8gYSByYXRpbyBvZiAwLiBFZGdlIGNhc2U6IGlmIGEgZnJvbSgpIG9yIGZyb21UbygpIHN0YWdnZXIgdHdlZW4gaXMgcGxhY2VkIGxhdGVyIGluIGEgdGltZWxpbmUsIHRoZSBcInN0YXJ0QXRcIiB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGNvdWxkIGluaXRpYWxseSByZW5kZXIgYXQgYSB0aW1lIHdoZW4gdGhlIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGlzIHRlY2huaWNhbGx5IEJFRk9SRSB3aGVyZSB0aGlzIHR3ZWVuIGlzLCBzbyBtYWtlIHN1cmUgdGhhdCBhbnkgXCJmcm9tXCIgYW5kIFwiZnJvbVRvXCIgc3RhcnRBdCB0d2VlbnMgYXJlIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lIGF0IGEgcmF0aW8gb2YgMS5cbiAgcmVwZWF0RGVsYXkgPSB0d2Vlbi5fckRlbGF5LFxuICAgICAgdFRpbWUgPSAwLFxuICAgICAgcHQsXG4gICAgICBpdGVyYXRpb24sXG4gICAgICBwcmV2SXRlcmF0aW9uO1xuXG4gIGlmIChyZXBlYXREZWxheSAmJiB0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy8gaW4gY2FzZSB0aGVyZSdzIGEgemVyby1kdXJhdGlvbiB0d2VlbiB0aGF0IGhhcyBhIHJlcGVhdCB3aXRoIGEgcmVwZWF0RGVsYXlcbiAgICB0VGltZSA9IF9jbGFtcCgwLCB0d2Vlbi5fdER1ciwgdG90YWxUaW1lKTtcbiAgICBpdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICB0d2Vlbi5feW95byAmJiBpdGVyYXRpb24gJiAxICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG5cbiAgICBpZiAoaXRlcmF0aW9uICE9PSBfYW5pbWF0aW9uQ3ljbGUodHdlZW4uX3RUaW1lLCByZXBlYXREZWxheSkpIHtcbiAgICAgIC8vIGlmIGl0ZXJhdGlvbiBjaGFuZ2VkXG4gICAgICBwcmV2UmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB0d2Vlbi52YXJzLnJlcGVhdFJlZnJlc2ggJiYgdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyYXRpbyAhPT0gcHJldlJhdGlvIHx8IF9yZXZlcnRpbmcgfHwgZm9yY2UgfHwgdHdlZW4uX3pUaW1lID09PSBfdGlueU51bSB8fCAhdG90YWxUaW1lICYmIHR3ZWVuLl96VGltZSkge1xuICAgIGlmICghdHdlZW4uX2luaXR0ZWQgJiYgX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgIC8vIGlmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcmV2SXRlcmF0aW9uID0gdHdlZW4uX3pUaW1lO1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZSB8fCAoc3VwcHJlc3NFdmVudHMgPyBfdGlueU51bSA6IDApOyAvLyB3aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgIHN1cHByZXNzRXZlbnRzIHx8IChzdXBwcmVzc0V2ZW50cyA9IHRvdGFsVGltZSAmJiAhcHJldkl0ZXJhdGlvbik7IC8vIGlmIGl0IHdhcyByZW5kZXJlZCBwcmV2aW91c2x5IGF0IGV4YWN0bHkgMCAoX3pUaW1lKSBhbmQgbm93IHRoZSBwbGF5aGVhZCBpcyBtb3ZpbmcgYXdheSwgRE9OJ1QgZmlyZSBjYWxsYmFja3Mgb3RoZXJ3aXNlIHRoZXknbGwgc2VlbSBsaWtlIGR1cGxpY2F0ZXMuXG5cbiAgICB0d2Vlbi5yYXRpbyA9IHJhdGlvO1xuICAgIHR3ZWVuLl9mcm9tICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG4gICAgdHdlZW4uX3RpbWUgPSAwO1xuICAgIHR3ZWVuLl90VGltZSA9IHRUaW1lO1xuICAgIHB0ID0gdHdlZW4uX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgdG90YWxUaW1lIDwgMCAmJiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgdHJ1ZSk7XG4gICAgdHdlZW4uX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25VcGRhdGVcIik7XG4gICAgdFRpbWUgJiYgdHdlZW4uX3JlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdHdlZW4ucGFyZW50ICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblJlcGVhdFwiKTtcblxuICAgIGlmICgodG90YWxUaW1lID49IHR3ZWVuLl90RHVyIHx8IHRvdGFsVGltZSA8IDApICYmIHR3ZWVuLnJhdGlvID09PSByYXRpbykge1xuICAgICAgcmF0aW8gJiYgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4sIDEpO1xuXG4gICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICFfcmV2ZXJ0aW5nKSB7XG4gICAgICAgIF9jYWxsYmFjayh0d2VlbiwgcmF0aW8gPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgdHdlZW4uX3Byb20gJiYgdHdlZW4uX3Byb20oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIXR3ZWVuLl96VGltZSkge1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZTtcbiAgfVxufSxcbiAgICBfZmluZE5leHRQYXVzZVR3ZWVuID0gZnVuY3Rpb24gX2ZpbmROZXh0UGF1c2VUd2VlbihhbmltYXRpb24sIHByZXZUaW1lLCB0aW1lKSB7XG4gIHZhciBjaGlsZDtcblxuICBpZiAodGltZSA+IHByZXZUaW1lKSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA8PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0ID4gcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fbGFzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPj0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA8IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fcHJldjtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3NldER1cmF0aW9uID0gZnVuY3Rpb24gX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgZHVyYXRpb24sIHNraXBVbmNhY2hlLCBsZWF2ZVBsYXloZWFkKSB7XG4gIHZhciByZXBlYXQgPSBhbmltYXRpb24uX3JlcGVhdCxcbiAgICAgIGR1ciA9IF9yb3VuZFByZWNpc2UoZHVyYXRpb24pIHx8IDAsXG4gICAgICB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uLl90VGltZSAvIGFuaW1hdGlvbi5fdER1cjtcbiAgdG90YWxQcm9ncmVzcyAmJiAhbGVhdmVQbGF5aGVhZCAmJiAoYW5pbWF0aW9uLl90aW1lICo9IGR1ciAvIGFuaW1hdGlvbi5fZHVyKTtcbiAgYW5pbWF0aW9uLl9kdXIgPSBkdXI7XG4gIGFuaW1hdGlvbi5fdER1ciA9ICFyZXBlYXQgPyBkdXIgOiByZXBlYXQgPCAwID8gMWUxMCA6IF9yb3VuZFByZWNpc2UoZHVyICogKHJlcGVhdCArIDEpICsgYW5pbWF0aW9uLl9yRGVsYXkgKiByZXBlYXQpO1xuICB0b3RhbFByb2dyZXNzID4gMCAmJiAhbGVhdmVQbGF5aGVhZCAmJiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKTtcbiAgYW5pbWF0aW9uLnBhcmVudCAmJiBfc2V0RW5kKGFuaW1hdGlvbik7XG4gIHNraXBVbmNhY2hlIHx8IF91bmNhY2hlKGFuaW1hdGlvbi5wYXJlbnQsIGFuaW1hdGlvbik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uIGluc3RhbmNlb2YgVGltZWxpbmUgPyBfdW5jYWNoZShhbmltYXRpb24pIDogX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl9kdXIpO1xufSxcbiAgICBfemVyb1Bvc2l0aW9uID0ge1xuICBfc3RhcnQ6IDAsXG4gIGVuZFRpbWU6IF9lbXB0eUZ1bmMsXG4gIHRvdGFsRHVyYXRpb246IF9lbXB0eUZ1bmNcbn0sXG4gICAgX3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbiBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLCBwZXJjZW50QW5pbWF0aW9uKSB7XG4gIHZhciBsYWJlbHMgPSBhbmltYXRpb24ubGFiZWxzLFxuICAgICAgcmVjZW50ID0gYW5pbWF0aW9uLl9yZWNlbnQgfHwgX3plcm9Qb3NpdGlvbixcbiAgICAgIGNsaXBwZWREdXJhdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpID49IF9iaWdOdW0gPyByZWNlbnQuZW5kVGltZShmYWxzZSkgOiBhbmltYXRpb24uX2R1cixcbiAgICAgIC8vaW4gY2FzZSB0aGVyZSdzIGEgY2hpbGQgdGhhdCBpbmZpbml0ZWx5IHJlcGVhdHMsIHVzZXJzIGFsbW9zdCBuZXZlciBpbnRlbmQgZm9yIHRoZSBpbnNlcnRpb24gcG9pbnQgb2YgYSBuZXcgY2hpbGQgdG8gYmUgYmFzZWQgb24gYSBTVVBFUiBsb25nIHZhbHVlIGxpa2UgdGhhdCBzbyB3ZSBjbGlwIGl0IGFuZCBhc3N1bWUgdGhlIG1vc3QgcmVjZW50bHktYWRkZWQgY2hpbGQncyBlbmRUaW1lIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gIGksXG4gICAgICBvZmZzZXQsXG4gICAgICBpc1BlcmNlbnQ7XG5cbiAgaWYgKF9pc1N0cmluZyhwb3NpdGlvbikgJiYgKGlzTmFOKHBvc2l0aW9uKSB8fCBwb3NpdGlvbiBpbiBsYWJlbHMpKSB7XG4gICAgLy9pZiB0aGUgc3RyaW5nIGlzIGEgbnVtYmVyIGxpa2UgXCIxXCIsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgbGFiZWwgd2l0aCB0aGF0IG5hbWUsIG90aGVyd2lzZSBpbnRlcnByZXQgaXQgYXMgYSBudW1iZXIgKGFic29sdXRlIHZhbHVlKS5cbiAgICBvZmZzZXQgPSBwb3NpdGlvbi5jaGFyQXQoMCk7XG4gICAgaXNQZXJjZW50ID0gcG9zaXRpb24uc3Vic3RyKC0xKSA9PT0gXCIlXCI7XG4gICAgaSA9IHBvc2l0aW9uLmluZGV4T2YoXCI9XCIpO1xuXG4gICAgaWYgKG9mZnNldCA9PT0gXCI8XCIgfHwgb2Zmc2V0ID09PSBcIj5cIikge1xuICAgICAgaSA+PSAwICYmIChwb3NpdGlvbiA9IHBvc2l0aW9uLnJlcGxhY2UoLz0vLCBcIlwiKSk7XG4gICAgICByZXR1cm4gKG9mZnNldCA9PT0gXCI8XCIgPyByZWNlbnQuX3N0YXJ0IDogcmVjZW50LmVuZFRpbWUocmVjZW50Ll9yZXBlYXQgPj0gMCkpICsgKHBhcnNlRmxvYXQocG9zaXRpb24uc3Vic3RyKDEpKSB8fCAwKSAqIChpc1BlcmNlbnQgPyAoaSA8IDAgPyByZWNlbnQgOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCkgLyAxMDAgOiAxKTtcbiAgICB9XG5cbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHBvc2l0aW9uIGluIGxhYmVscyB8fCAobGFiZWxzW3Bvc2l0aW9uXSA9IGNsaXBwZWREdXJhdGlvbik7XG4gICAgICByZXR1cm4gbGFiZWxzW3Bvc2l0aW9uXTtcbiAgICB9XG5cbiAgICBvZmZzZXQgPSBwYXJzZUZsb2F0KHBvc2l0aW9uLmNoYXJBdChpIC0gMSkgKyBwb3NpdGlvbi5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChpc1BlcmNlbnQgJiYgcGVyY2VudEFuaW1hdGlvbikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IC8gMTAwICogKF9pc0FycmF5KHBlcmNlbnRBbmltYXRpb24pID8gcGVyY2VudEFuaW1hdGlvblswXSA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaSA+IDEgPyBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLnN1YnN0cigwLCBpIC0gMSksIHBlcmNlbnRBbmltYXRpb24pICsgb2Zmc2V0IDogY2xpcHBlZER1cmF0aW9uICsgb2Zmc2V0O1xuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uID09IG51bGwgPyBjbGlwcGVkRHVyYXRpb24gOiArcG9zaXRpb247XG59LFxuICAgIF9jcmVhdGVUd2VlblR5cGUgPSBmdW5jdGlvbiBfY3JlYXRlVHdlZW5UeXBlKHR5cGUsIHBhcmFtcywgdGltZWxpbmUpIHtcbiAgdmFyIGlzTGVnYWN5ID0gX2lzTnVtYmVyKHBhcmFtc1sxXSksXG4gICAgICB2YXJzSW5kZXggPSAoaXNMZWdhY3kgPyAyIDogMSkgKyAodHlwZSA8IDIgPyAwIDogMSksXG4gICAgICB2YXJzID0gcGFyYW1zW3ZhcnNJbmRleF0sXG4gICAgICBpclZhcnMsXG4gICAgICBwYXJlbnQ7XG5cbiAgaXNMZWdhY3kgJiYgKHZhcnMuZHVyYXRpb24gPSBwYXJhbXNbMV0pO1xuICB2YXJzLnBhcmVudCA9IHRpbWVsaW5lO1xuXG4gIGlmICh0eXBlKSB7XG4gICAgaXJWYXJzID0gdmFycztcbiAgICBwYXJlbnQgPSB0aW1lbGluZTtcblxuICAgIHdoaWxlIChwYXJlbnQgJiYgIShcImltbWVkaWF0ZVJlbmRlclwiIGluIGlyVmFycykpIHtcbiAgICAgIC8vIGluaGVyaXRhbmNlIGhhc24ndCBoYXBwZW5lZCB5ZXQsIGJ1dCBzb21lb25lIG1heSBoYXZlIHNldCBhIGRlZmF1bHQgaW4gYW4gYW5jZXN0b3IgdGltZWxpbmUuIFdlIGNvdWxkIGRvIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIpIGJ1dCB0aGF0J2QgZXhhY3QgYSBzbGlnaHQgcGVyZm9ybWFuY2UgcGVuYWx0eSBiZWNhdXNlIF9pbmhlcml0RGVmYXVsdHMoKSBhbHNvIHJ1bnMgaW4gdGhlIFR3ZWVuIGNvbnN0cnVjdG9yLiBXZSdyZSBwYXlpbmcgYSBzbWFsbCBrYiBwcmljZSBoZXJlIHRvIGdhaW4gc3BlZWQuXG4gICAgICBpclZhcnMgPSBwYXJlbnQudmFycy5kZWZhdWx0cyB8fCB7fTtcbiAgICAgIHBhcmVudCA9IF9pc05vdEZhbHNlKHBhcmVudC52YXJzLmluaGVyaXQpICYmIHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShpclZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICB0eXBlIDwgMiA/IHZhcnMucnVuQmFja3dhcmRzID0gMSA6IHZhcnMuc3RhcnRBdCA9IHBhcmFtc1t2YXJzSW5kZXggLSAxXTsgLy8gXCJmcm9tXCIgdmFyc1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUd2VlbihwYXJhbXNbMF0sIHZhcnMsIHBhcmFtc1t2YXJzSW5kZXggKyAxXSk7XG59LFxuICAgIF9jb25kaXRpb25hbFJldHVybiA9IGZ1bmN0aW9uIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuYykge1xuICByZXR1cm4gdmFsdWUgfHwgdmFsdWUgPT09IDAgPyBmdW5jKHZhbHVlKSA6IGZ1bmM7XG59LFxuICAgIF9jbGFtcCA9IGZ1bmN0aW9uIF9jbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDwgbWluID8gbWluIDogdmFsdWUgPiBtYXggPyBtYXggOiB2YWx1ZTtcbn0sXG4gICAgZ2V0VW5pdCA9IGZ1bmN0aW9uIGdldFVuaXQodmFsdWUsIHYpIHtcbiAgcmV0dXJuICFfaXNTdHJpbmcodmFsdWUpIHx8ICEodiA9IF91bml0RXhwLmV4ZWModmFsdWUpKSA/IFwiXCIgOiB2WzFdO1xufSxcbiAgICAvLyBub3RlOiBwcm90ZWN0IGFnYWluc3QgcGFkZGVkIG51bWJlcnMgYXMgc3RyaW5ncywgbGlrZSBcIjEwMC4xMDBcIi4gVGhhdCBzaG91bGRuJ3QgcmV0dXJuIFwiMDBcIiBhcyB0aGUgdW5pdC4gSWYgaXQncyBudW1lcmljLCByZXR1cm4gbm8gdW5pdC5cbmNsYW1wID0gZnVuY3Rpb24gY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIF9jbGFtcChtaW4sIG1heCwgdik7XG4gIH0pO1xufSxcbiAgICBfc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfaXNBcnJheUxpa2UgPSBmdW5jdGlvbiBfaXNBcnJheUxpa2UodmFsdWUsIG5vbkVtcHR5KSB7XG4gIHJldHVybiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWUpICYmIFwibGVuZ3RoXCIgaW4gdmFsdWUgJiYgKCFub25FbXB0eSAmJiAhdmFsdWUubGVuZ3RoIHx8IHZhbHVlLmxlbmd0aCAtIDEgaW4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlWzBdKSkgJiYgIXZhbHVlLm5vZGVUeXBlICYmIHZhbHVlICE9PSBfd2luO1xufSxcbiAgICBfZmxhdHRlbiA9IGZ1bmN0aW9uIF9mbGF0dGVuKGFyLCBsZWF2ZVN0cmluZ3MsIGFjY3VtdWxhdG9yKSB7XG4gIGlmIChhY2N1bXVsYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBfYWNjdW11bGF0b3I7XG5cbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzIHx8IF9pc0FycmF5TGlrZSh2YWx1ZSwgMSkgPyAoX2FjY3VtdWxhdG9yID0gYWNjdW11bGF0b3IpLnB1c2guYXBwbHkoX2FjY3VtdWxhdG9yLCB0b0FycmF5KHZhbHVlKSkgOiBhY2N1bXVsYXRvci5wdXNoKHZhbHVlKTtcbiAgfSkgfHwgYWNjdW11bGF0b3I7XG59LFxuICAgIC8vdGFrZXMgYW55IHZhbHVlIGFuZCByZXR1cm5zIGFuIGFycmF5LiBJZiBpdCdzIGEgc3RyaW5nIChhbmQgbGVhdmVTdHJpbmdzIGlzbid0IHRydWUpLCBpdCdsbCB1c2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpIGFuZCBjb252ZXJ0IHRoYXQgdG8gYW4gYXJyYXkuIEl0J2xsIGFsc28gYWNjZXB0IGl0ZXJhYmxlcyBsaWtlIGpRdWVyeSBvYmplY3RzLlxudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUsIHNjb3BlLCBsZWF2ZVN0cmluZ3MpIHtcbiAgcmV0dXJuIF9jb250ZXh0ICYmICFzY29wZSAmJiBfY29udGV4dC5zZWxlY3RvciA/IF9jb250ZXh0LnNlbGVjdG9yKHZhbHVlKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyAmJiAoX2NvcmVJbml0dGVkIHx8ICFfd2FrZSgpKSA/IF9zbGljZS5jYWxsKChzY29wZSB8fCBfZG9jKS5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSwgMCkgOiBfaXNBcnJheSh2YWx1ZSkgPyBfZmxhdHRlbih2YWx1ZSwgbGVhdmVTdHJpbmdzKSA6IF9pc0FycmF5TGlrZSh2YWx1ZSkgPyBfc2xpY2UuY2FsbCh2YWx1ZSwgMCkgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXTtcbn0sXG4gICAgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3Rvcih2YWx1ZSkge1xuICB2YWx1ZSA9IHRvQXJyYXkodmFsdWUpWzBdIHx8IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGVsID0gdmFsdWUuY3VycmVudCB8fCB2YWx1ZS5uYXRpdmVFbGVtZW50IHx8IHZhbHVlO1xuICAgIHJldHVybiB0b0FycmF5KHYsIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgPyBlbCA6IGVsID09PSB2YWx1ZSA/IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgOiB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHNodWZmbGUgPSBmdW5jdGlvbiBzaHVmZmxlKGEpIHtcbiAgcmV0dXJuIGEuc29ydChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIC41IC0gTWF0aC5yYW5kb20oKTtcbiAgfSk7XG59LFxuICAgIC8vIGFsdGVybmF0aXZlIHRoYXQncyBhIGJpdCBmYXN0ZXIgYW5kIG1vcmUgcmVsaWFibHkgZGl2ZXJzZSBidXQgYmlnZ2VyOiAgIGZvciAobGV0IGosIHYsIGkgPSBhLmxlbmd0aDsgaTsgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGkpLCB2ID0gYVstLWldLCBhW2ldID0gYVtqXSwgYVtqXSA9IHYpOyByZXR1cm4gYTtcbi8vZm9yIGRpc3RyaWJ1dGluZyB2YWx1ZXMgYWNyb3NzIGFuIGFycmF5LiBDYW4gYWNjZXB0IGEgbnVtYmVyLCBhIGZ1bmN0aW9uIG9yIChtb3N0IGNvbW1vbmx5KSBhIGZ1bmN0aW9uIHdoaWNoIGNhbiBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczoge2Jhc2UsIGFtb3VudCwgZnJvbSwgZWFzZSwgZ3JpZCwgYXhpcywgbGVuZ3RoLCBlYWNofS4gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZXhwZWN0cyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6IGluZGV4LCB0YXJnZXQsIGFycmF5LiBSZWNvZ25pemVzIHRoZSBmb2xsb3dpbmdcbmRpc3RyaWJ1dGUgPSBmdW5jdGlvbiBkaXN0cmlidXRlKHYpIHtcbiAgaWYgKF9pc0Z1bmN0aW9uKHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICB2YXIgdmFycyA9IF9pc09iamVjdCh2KSA/IHYgOiB7XG4gICAgZWFjaDogdlxuICB9LFxuICAgICAgLy9uOjEgaXMganVzdCB0byBpbmRpY2F0ZSB2IHdhcyBhIG51bWJlcjsgd2UgbGV2ZXJhZ2UgdGhhdCBsYXRlciB0byBzZXQgdiBhY2NvcmRpbmcgdG8gdGhlIGxlbmd0aCB3ZSBnZXQuIElmIGEgbnVtYmVyIGlzIHBhc3NlZCBpbiwgd2UgdHJlYXQgaXQgbGlrZSB0aGUgb2xkIHN0YWdnZXIgdmFsdWUgd2hlcmUgMC4xLCBmb3IgZXhhbXBsZSwgd291bGQgbWVhbiB0aGF0IHRoaW5ncyB3b3VsZCBiZSBkaXN0cmlidXRlZCB3aXRoIDAuMSBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgcmF0aGVyIHRoYW4gYSB0b3RhbCBcImFtb3VudFwiIHRoYXQncyBjaHVua2VkIG91dCBhbW9uZyB0aGVtIGFsbC5cbiAgZWFzZSA9IF9wYXJzZUVhc2UodmFycy5lYXNlKSxcbiAgICAgIGZyb20gPSB2YXJzLmZyb20gfHwgMCxcbiAgICAgIGJhc2UgPSBwYXJzZUZsb2F0KHZhcnMuYmFzZSkgfHwgMCxcbiAgICAgIGNhY2hlID0ge30sXG4gICAgICBpc0RlY2ltYWwgPSBmcm9tID4gMCAmJiBmcm9tIDwgMSxcbiAgICAgIHJhdGlvcyA9IGlzTmFOKGZyb20pIHx8IGlzRGVjaW1hbCxcbiAgICAgIGF4aXMgPSB2YXJzLmF4aXMsXG4gICAgICByYXRpb1ggPSBmcm9tLFxuICAgICAgcmF0aW9ZID0gZnJvbTtcblxuICBpZiAoX2lzU3RyaW5nKGZyb20pKSB7XG4gICAgcmF0aW9YID0gcmF0aW9ZID0ge1xuICAgICAgY2VudGVyOiAuNSxcbiAgICAgIGVkZ2VzOiAuNSxcbiAgICAgIGVuZDogMVxuICAgIH1bZnJvbV0gfHwgMDtcbiAgfSBlbHNlIGlmICghaXNEZWNpbWFsICYmIHJhdGlvcykge1xuICAgIHJhdGlvWCA9IGZyb21bMF07XG4gICAgcmF0aW9ZID0gZnJvbVsxXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaSwgdGFyZ2V0LCBhKSB7XG4gICAgdmFyIGwgPSAoYSB8fCB2YXJzKS5sZW5ndGgsXG4gICAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdLFxuICAgICAgICBvcmlnaW5YLFxuICAgICAgICBvcmlnaW5ZLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBkLFxuICAgICAgICBqLFxuICAgICAgICBtYXgsXG4gICAgICAgIG1pbixcbiAgICAgICAgd3JhcEF0O1xuXG4gICAgaWYgKCFkaXN0YW5jZXMpIHtcbiAgICAgIHdyYXBBdCA9IHZhcnMuZ3JpZCA9PT0gXCJhdXRvXCIgPyAwIDogKHZhcnMuZ3JpZCB8fCBbMSwgX2JpZ051bV0pWzFdO1xuXG4gICAgICBpZiAoIXdyYXBBdCkge1xuICAgICAgICBtYXggPSAtX2JpZ051bTtcblxuICAgICAgICB3aGlsZSAobWF4IDwgKG1heCA9IGFbd3JhcEF0KytdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpICYmIHdyYXBBdCA8IGwpIHt9XG5cbiAgICAgICAgd3JhcEF0LS07XG4gICAgICB9XG5cbiAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdID0gW107XG4gICAgICBvcmlnaW5YID0gcmF0aW9zID8gTWF0aC5taW4od3JhcEF0LCBsKSAqIHJhdGlvWCAtIC41IDogZnJvbSAlIHdyYXBBdDtcbiAgICAgIG9yaWdpblkgPSB3cmFwQXQgPT09IF9iaWdOdW0gPyAwIDogcmF0aW9zID8gbCAqIHJhdGlvWSAvIHdyYXBBdCAtIC41IDogZnJvbSAvIHdyYXBBdCB8IDA7XG4gICAgICBtYXggPSAwO1xuICAgICAgbWluID0gX2JpZ051bTtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuICAgICAgICB4ID0gaiAlIHdyYXBBdCAtIG9yaWdpblg7XG4gICAgICAgIHkgPSBvcmlnaW5ZIC0gKGogLyB3cmFwQXQgfCAwKTtcbiAgICAgICAgZGlzdGFuY2VzW2pdID0gZCA9ICFheGlzID8gX3NxcnQoeCAqIHggKyB5ICogeSkgOiBNYXRoLmFicyhheGlzID09PSBcInlcIiA/IHkgOiB4KTtcbiAgICAgICAgZCA+IG1heCAmJiAobWF4ID0gZCk7XG4gICAgICAgIGQgPCBtaW4gJiYgKG1pbiA9IGQpO1xuICAgICAgfVxuXG4gICAgICBmcm9tID09PSBcInJhbmRvbVwiICYmIHNodWZmbGUoZGlzdGFuY2VzKTtcbiAgICAgIGRpc3RhbmNlcy5tYXggPSBtYXggLSBtaW47XG4gICAgICBkaXN0YW5jZXMubWluID0gbWluO1xuICAgICAgZGlzdGFuY2VzLnYgPSBsID0gKHBhcnNlRmxvYXQodmFycy5hbW91bnQpIHx8IHBhcnNlRmxvYXQodmFycy5lYWNoKSAqICh3cmFwQXQgPiBsID8gbCAtIDEgOiAhYXhpcyA/IE1hdGgubWF4KHdyYXBBdCwgbCAvIHdyYXBBdCkgOiBheGlzID09PSBcInlcIiA/IGwgLyB3cmFwQXQgOiB3cmFwQXQpIHx8IDApICogKGZyb20gPT09IFwiZWRnZXNcIiA/IC0xIDogMSk7XG4gICAgICBkaXN0YW5jZXMuYiA9IGwgPCAwID8gYmFzZSAtIGwgOiBiYXNlO1xuICAgICAgZGlzdGFuY2VzLnUgPSBnZXRVbml0KHZhcnMuYW1vdW50IHx8IHZhcnMuZWFjaCkgfHwgMDsgLy91bml0XG5cbiAgICAgIGVhc2UgPSBlYXNlICYmIGwgPCAwID8gX2ludmVydEVhc2UoZWFzZSkgOiBlYXNlO1xuICAgIH1cblxuICAgIGwgPSAoZGlzdGFuY2VzW2ldIC0gZGlzdGFuY2VzLm1pbikgLyBkaXN0YW5jZXMubWF4IHx8IDA7XG4gICAgcmV0dXJuIF9yb3VuZFByZWNpc2UoZGlzdGFuY2VzLmIgKyAoZWFzZSA/IGVhc2UobCkgOiBsKSAqIGRpc3RhbmNlcy52KSArIGRpc3RhbmNlcy51OyAvL3JvdW5kIGluIG9yZGVyIHRvIHdvcmsgYXJvdW5kIGZsb2F0aW5nIHBvaW50IGVycm9yc1xuICB9O1xufSxcbiAgICBfcm91bmRNb2RpZmllciA9IGZ1bmN0aW9uIF9yb3VuZE1vZGlmaWVyKHYpIHtcbiAgLy9wYXNzIGluIDAuMSBnZXQgYSBmdW5jdGlvbiB0aGF0J2xsIHJvdW5kIHRvIHRoZSBuZWFyZXN0IHRlbnRoLCBvciA1IHRvIHJvdW5kIHRvIHRoZSBjbG9zZXN0IDUsIG9yIDAuMDAxIHRvIHRoZSBjbG9zZXN0IDEwMDB0aCwgZXRjLlxuICB2YXIgcCA9IE1hdGgucG93KDEwLCAoKHYgKyBcIlwiKS5zcGxpdChcIi5cIilbMV0gfHwgXCJcIikubGVuZ3RoKTsgLy90byBhdm9pZCBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAobGlrZSAyNCAqIDAuMSA9PSAyLjQwMDAwMDAwMDAwMDAwMDQpLCB3ZSBjaG9wIG9mZiBhdCBhIHNwZWNpZmljIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyAobXVjaCBmYXN0ZXIgdGhhbiB0b0ZpeGVkKCkpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgbiA9IF9yb3VuZFByZWNpc2UoTWF0aC5yb3VuZChwYXJzZUZsb2F0KHJhdykgLyB2KSAqIHYgKiBwKTtcblxuICAgIHJldHVybiAobiAtIG4gJSAxKSAvIHAgKyAoX2lzTnVtYmVyKHJhdykgPyAwIDogZ2V0VW5pdChyYXcpKTsgLy8gbiAtIG4gJSAxIHJlcGxhY2VzIE1hdGguZmxvb3IoKSBpbiBvcmRlciB0byBoYW5kbGUgbmVnYXRpdmUgdmFsdWVzIHByb3Blcmx5LiBGb3IgZXhhbXBsZSwgTWF0aC5mbG9vcigtMTUwLjAwMDAwMDAwMDAwMDAzKSBpcyAxNTEhXG4gIH07XG59LFxuICAgIHNuYXAgPSBmdW5jdGlvbiBzbmFwKHNuYXBUbywgdmFsdWUpIHtcbiAgdmFyIGlzQXJyYXkgPSBfaXNBcnJheShzbmFwVG8pLFxuICAgICAgcmFkaXVzLFxuICAgICAgaXMyRDtcblxuICBpZiAoIWlzQXJyYXkgJiYgX2lzT2JqZWN0KHNuYXBUbykpIHtcbiAgICByYWRpdXMgPSBpc0FycmF5ID0gc25hcFRvLnJhZGl1cyB8fCBfYmlnTnVtO1xuXG4gICAgaWYgKHNuYXBUby52YWx1ZXMpIHtcbiAgICAgIHNuYXBUbyA9IHRvQXJyYXkoc25hcFRvLnZhbHVlcyk7XG5cbiAgICAgIGlmIChpczJEID0gIV9pc051bWJlcihzbmFwVG9bMF0pKSB7XG4gICAgICAgIHJhZGl1cyAqPSByYWRpdXM7IC8vcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHdlIGRvbid0IGhhdmUgdG8gTWF0aC5zcXJ0KCkgaW4gdGhlIGxvb3AuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNuYXBUbyA9IF9yb3VuZE1vZGlmaWVyKHNuYXBUby5pbmNyZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsICFpc0FycmF5ID8gX3JvdW5kTW9kaWZpZXIoc25hcFRvKSA6IF9pc0Z1bmN0aW9uKHNuYXBUbykgPyBmdW5jdGlvbiAocmF3KSB7XG4gICAgaXMyRCA9IHNuYXBUbyhyYXcpO1xuICAgIHJldHVybiBNYXRoLmFicyhpczJEIC0gcmF3KSA8PSByYWRpdXMgPyBpczJEIDogcmF3O1xuICB9IDogZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciB4ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnggOiByYXcpLFxuICAgICAgICB5ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnkgOiAwKSxcbiAgICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgICAgY2xvc2VzdCA9IDAsXG4gICAgICAgIGkgPSBzbmFwVG8ubGVuZ3RoLFxuICAgICAgICBkeCxcbiAgICAgICAgZHk7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoaXMyRCkge1xuICAgICAgICBkeCA9IHNuYXBUb1tpXS54IC0geDtcbiAgICAgICAgZHkgPSBzbmFwVG9baV0ueSAtIHk7XG4gICAgICAgIGR4ID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkeCA9IE1hdGguYWJzKHNuYXBUb1tpXSAtIHgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZHggPCBtaW4pIHtcbiAgICAgICAgbWluID0gZHg7XG4gICAgICAgIGNsb3Nlc3QgPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNsb3Nlc3QgPSAhcmFkaXVzIHx8IG1pbiA8PSByYWRpdXMgPyBzbmFwVG9bY2xvc2VzdF0gOiByYXc7XG4gICAgcmV0dXJuIGlzMkQgfHwgY2xvc2VzdCA9PT0gcmF3IHx8IF9pc051bWJlcihyYXcpID8gY2xvc2VzdCA6IGNsb3Nlc3QgKyBnZXRVbml0KHJhdyk7XG4gIH0pO1xufSxcbiAgICByYW5kb20gPSBmdW5jdGlvbiByYW5kb20obWluLCBtYXgsIHJvdW5kaW5nSW5jcmVtZW50LCByZXR1cm5GdW5jdGlvbikge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKF9pc0FycmF5KG1pbikgPyAhbWF4IDogcm91bmRpbmdJbmNyZW1lbnQgPT09IHRydWUgPyAhIShyb3VuZGluZ0luY3JlbWVudCA9IDApIDogIXJldHVybkZ1bmN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBtaW5bfn4oTWF0aC5yYW5kb20oKSAqIG1pbi5sZW5ndGgpXSA6IChyb3VuZGluZ0luY3JlbWVudCA9IHJvdW5kaW5nSW5jcmVtZW50IHx8IDFlLTUpICYmIChyZXR1cm5GdW5jdGlvbiA9IHJvdW5kaW5nSW5jcmVtZW50IDwgMSA/IE1hdGgucG93KDEwLCAocm91bmRpbmdJbmNyZW1lbnQgKyBcIlwiKS5sZW5ndGggLSAyKSA6IDEpICYmIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgobWluIC0gcm91bmRpbmdJbmNyZW1lbnQgLyAyICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyByb3VuZGluZ0luY3JlbWVudCAqIC45OSkpIC8gcm91bmRpbmdJbmNyZW1lbnQpICogcm91bmRpbmdJbmNyZW1lbnQgKiByZXR1cm5GdW5jdGlvbikgLyByZXR1cm5GdW5jdGlvbjtcbiAgfSk7XG59LFxuICAgIHBpcGUgPSBmdW5jdGlvbiBwaXBlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3Rpb25zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmN0aW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAodiwgZikge1xuICAgICAgcmV0dXJuIGYodik7XG4gICAgfSwgdmFsdWUpO1xuICB9O1xufSxcbiAgICB1bml0aXplID0gZnVuY3Rpb24gdW5pdGl6ZShmdW5jLCB1bml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyhwYXJzZUZsb2F0KHZhbHVlKSkgKyAodW5pdCB8fCBnZXRVbml0KHZhbHVlKSk7XG4gIH07XG59LFxuICAgIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZShtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIG1hcFJhbmdlKG1pbiwgbWF4LCAwLCAxLCB2YWx1ZSk7XG59LFxuICAgIF93cmFwQXJyYXkgPSBmdW5jdGlvbiBfd3JhcEFycmF5KGEsIHdyYXBwZXIsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiBhW35+d3JhcHBlcihpbmRleCldO1xuICB9KTtcbn0sXG4gICAgd3JhcCA9IGZ1bmN0aW9uIHdyYXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIC8vIE5PVEU6IHdyYXAoKSBDQU5OT1QgYmUgYW4gYXJyb3cgZnVuY3Rpb24hIEEgdmVyeSBvZGQgY29tcGlsaW5nIGJ1ZyBjYXVzZXMgcHJvYmxlbXMgKHVucmVsYXRlZCB0byBHU0FQKS5cbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwKDAsIG1pbi5sZW5ndGgpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gKHJhbmdlICsgKHZhbHVlIC0gbWluKSAlIHJhbmdlKSAlIHJhbmdlICsgbWluO1xuICB9KTtcbn0sXG4gICAgd3JhcFlveW8gPSBmdW5jdGlvbiB3cmFwWW95byhtaW4sIG1heCwgdmFsdWUpIHtcbiAgdmFyIHJhbmdlID0gbWF4IC0gbWluLFxuICAgICAgdG90YWwgPSByYW5nZSAqIDI7XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXBZb3lvKDAsIG1pbi5sZW5ndGggLSAxKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFsdWUgPSAodG90YWwgKyAodmFsdWUgLSBtaW4pICUgdG90YWwpICUgdG90YWwgfHwgMDtcbiAgICByZXR1cm4gbWluICsgKHZhbHVlID4gcmFuZ2UgPyB0b3RhbCAtIHZhbHVlIDogdmFsdWUpO1xuICB9KTtcbn0sXG4gICAgX3JlcGxhY2VSYW5kb20gPSBmdW5jdGlvbiBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkge1xuICAvL3JlcGxhY2VzIGFsbCBvY2N1cnJlbmNlcyBvZiByYW5kb20oLi4uKSBpbiBhIHN0cmluZyB3aXRoIHRoZSBjYWxjdWxhdGVkIHJhbmRvbSB2YWx1ZS4gY2FuIGJlIGEgcmFuZ2UgbGlrZSByYW5kb20oLTEwMCwgMTAwLCA1KSBvciBhbiBhcnJheSBsaWtlIHJhbmRvbShbMCwgMTAwLCA1MDBdKVxuICB2YXIgcHJldiA9IDAsXG4gICAgICBzID0gXCJcIixcbiAgICAgIGksXG4gICAgICBudW1zLFxuICAgICAgZW5kLFxuICAgICAgaXNBcnJheTtcblxuICB3aGlsZSAofihpID0gdmFsdWUuaW5kZXhPZihcInJhbmRvbShcIiwgcHJldikpKSB7XG4gICAgZW5kID0gdmFsdWUuaW5kZXhPZihcIilcIiwgaSk7XG4gICAgaXNBcnJheSA9IHZhbHVlLmNoYXJBdChpICsgNykgPT09IFwiW1wiO1xuICAgIG51bXMgPSB2YWx1ZS5zdWJzdHIoaSArIDcsIGVuZCAtIGkgLSA3KS5tYXRjaChpc0FycmF5ID8gX2RlbGltaXRlZFZhbHVlRXhwIDogX3N0cmljdE51bUV4cCk7XG4gICAgcyArPSB2YWx1ZS5zdWJzdHIocHJldiwgaSAtIHByZXYpICsgcmFuZG9tKGlzQXJyYXkgPyBudW1zIDogK251bXNbMF0sIGlzQXJyYXkgPyAwIDogK251bXNbMV0sICtudW1zWzJdIHx8IDFlLTUpO1xuICAgIHByZXYgPSBlbmQgKyAxO1xuICB9XG5cbiAgcmV0dXJuIHMgKyB2YWx1ZS5zdWJzdHIocHJldiwgdmFsdWUubGVuZ3RoIC0gcHJldik7XG59LFxuICAgIG1hcFJhbmdlID0gZnVuY3Rpb24gbWFwUmFuZ2UoaW5NaW4sIGluTWF4LCBvdXRNaW4sIG91dE1heCwgdmFsdWUpIHtcbiAgdmFyIGluUmFuZ2UgPSBpbk1heCAtIGluTWluLFxuICAgICAgb3V0UmFuZ2UgPSBvdXRNYXggLSBvdXRNaW47XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBvdXRNaW4gKyAoKHZhbHVlIC0gaW5NaW4pIC8gaW5SYW5nZSAqIG91dFJhbmdlIHx8IDApO1xuICB9KTtcbn0sXG4gICAgaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdGFydCwgZW5kLCBwcm9ncmVzcywgbXV0YXRlKSB7XG4gIHZhciBmdW5jID0gaXNOYU4oc3RhcnQgKyBlbmQpID8gMCA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuICgxIC0gcCkgKiBzdGFydCArIHAgKiBlbmQ7XG4gIH07XG5cbiAgaWYgKCFmdW5jKSB7XG4gICAgdmFyIGlzU3RyaW5nID0gX2lzU3RyaW5nKHN0YXJ0KSxcbiAgICAgICAgbWFzdGVyID0ge30sXG4gICAgICAgIHAsXG4gICAgICAgIGksXG4gICAgICAgIGludGVycG9sYXRvcnMsXG4gICAgICAgIGwsXG4gICAgICAgIGlsO1xuXG4gICAgcHJvZ3Jlc3MgPT09IHRydWUgJiYgKG11dGF0ZSA9IDEpICYmIChwcm9ncmVzcyA9IG51bGwpO1xuXG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICBzdGFydCA9IHtcbiAgICAgICAgcDogc3RhcnRcbiAgICAgIH07XG4gICAgICBlbmQgPSB7XG4gICAgICAgIHA6IGVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKF9pc0FycmF5KHN0YXJ0KSAmJiAhX2lzQXJyYXkoZW5kKSkge1xuICAgICAgaW50ZXJwb2xhdG9ycyA9IFtdO1xuICAgICAgbCA9IHN0YXJ0Lmxlbmd0aDtcbiAgICAgIGlsID0gbCAtIDI7XG5cbiAgICAgIGZvciAoaSA9IDE7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW50ZXJwb2xhdG9ycy5wdXNoKGludGVycG9sYXRlKHN0YXJ0W2kgLSAxXSwgc3RhcnRbaV0pKTsgLy9idWlsZCB0aGUgaW50ZXJwb2xhdG9ycyB1cCBmcm9udCBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB0aGF0IHdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBtYW55IHRpbWVzLCBpdCBjYW4ganVzdCByZXVzZSB0aGVtLlxuICAgICAgfVxuXG4gICAgICBsLS07XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcCAqPSBsO1xuICAgICAgICB2YXIgaSA9IE1hdGgubWluKGlsLCB+fnApO1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tpXShwIC0gaSk7XG4gICAgICB9O1xuXG4gICAgICBwcm9ncmVzcyA9IGVuZDtcbiAgICB9IGVsc2UgaWYgKCFtdXRhdGUpIHtcbiAgICAgIHN0YXJ0ID0gX21lcmdlKF9pc0FycmF5KHN0YXJ0KSA/IFtdIDoge30sIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAoIWludGVycG9sYXRvcnMpIHtcbiAgICAgIGZvciAocCBpbiBlbmQpIHtcbiAgICAgICAgX2FkZFByb3BUd2Vlbi5jYWxsKG1hc3Rlciwgc3RhcnQsIHAsIFwiZ2V0XCIsIGVuZFtwXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgcmV0dXJuIF9yZW5kZXJQcm9wVHdlZW5zKHAsIG1hc3RlcikgfHwgKGlzU3RyaW5nID8gc3RhcnQucCA6IHN0YXJ0KTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihwcm9ncmVzcywgZnVuYyk7XG59LFxuICAgIF9nZXRMYWJlbEluRGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsSW5EaXJlY3Rpb24odGltZWxpbmUsIGZyb21UaW1lLCBiYWNrd2FyZCkge1xuICAvL3VzZWQgZm9yIG5leHRMYWJlbCgpIGFuZCBwcmV2aW91c0xhYmVsKClcbiAgdmFyIGxhYmVscyA9IHRpbWVsaW5lLmxhYmVscyxcbiAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICBwLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICBsYWJlbDtcblxuICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgZGlzdGFuY2UgPSBsYWJlbHNbcF0gLSBmcm9tVGltZTtcblxuICAgIGlmIChkaXN0YW5jZSA8IDAgPT09ICEhYmFja3dhcmQgJiYgZGlzdGFuY2UgJiYgbWluID4gKGRpc3RhbmNlID0gTWF0aC5hYnMoZGlzdGFuY2UpKSkge1xuICAgICAgbGFiZWwgPSBwO1xuICAgICAgbWluID0gZGlzdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufSxcbiAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soYW5pbWF0aW9uLCB0eXBlLCBleGVjdXRlTGF6eUZpcnN0KSB7XG4gIHZhciB2ID0gYW5pbWF0aW9uLnZhcnMsXG4gICAgICBjYWxsYmFjayA9IHZbdHlwZV0sXG4gICAgICBwcmV2Q29udGV4dCA9IF9jb250ZXh0LFxuICAgICAgY29udGV4dCA9IGFuaW1hdGlvbi5fY3R4LFxuICAgICAgcGFyYW1zLFxuICAgICAgc2NvcGUsXG4gICAgICByZXN1bHQ7XG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBhcmFtcyA9IHZbdHlwZSArIFwiUGFyYW1zXCJdO1xuICBzY29wZSA9IHYuY2FsbGJhY2tTY29wZSB8fCBhbmltYXRpb247XG4gIGV4ZWN1dGVMYXp5Rmlyc3QgJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBhIHRpbWVsaW5lIGZpbmlzaGVzLCB1c2VycyBleHBlY3QgdGhpbmdzIHRvIGhhdmUgcmVuZGVyZWQgZnVsbHkuIEltYWdpbmUgYW4gb25VcGRhdGUgb24gYSB0aW1lbGluZSB0aGF0IHJlcG9ydHMvY2hlY2tzIHR3ZWVuZWQgdmFsdWVzLlxuXG4gIGNvbnRleHQgJiYgKF9jb250ZXh0ID0gY29udGV4dCk7XG4gIHJlc3VsdCA9IHBhcmFtcyA/IGNhbGxiYWNrLmFwcGx5KHNjb3BlLCBwYXJhbXMpIDogY2FsbGJhY2suY2FsbChzY29wZSk7XG4gIF9jb250ZXh0ID0gcHJldkNvbnRleHQ7XG4gIHJldHVybiByZXN1bHQ7XG59LFxuICAgIF9pbnRlcnJ1cHQgPSBmdW5jdGlvbiBfaW50ZXJydXB0KGFuaW1hdGlvbikge1xuICBfcmVtb3ZlRnJvbVBhcmVudChhbmltYXRpb24pO1xuXG4gIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyICYmIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLmtpbGwoISFfcmV2ZXJ0aW5nKTtcbiAgYW5pbWF0aW9uLnByb2dyZXNzKCkgPCAxICYmIF9jYWxsYmFjayhhbmltYXRpb24sIFwib25JbnRlcnJ1cHRcIik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9xdWlja1R3ZWVuLFxuICAgIF9jcmVhdGVQbHVnaW4gPSBmdW5jdGlvbiBfY3JlYXRlUGx1Z2luKGNvbmZpZykge1xuICBjb25maWcgPSAhY29uZmlnLm5hbWUgJiYgY29uZmlnW1wiZGVmYXVsdFwiXSB8fCBjb25maWc7IC8vVU1EIHBhY2thZ2luZyB3cmFwcyB0aGluZ3Mgb2RkbHksIHNvIGZvciBleGFtcGxlIE1vdGlvblBhdGhIZWxwZXIgYmVjb21lcyB7TW90aW9uUGF0aEhlbHBlcjpNb3Rpb25QYXRoSGVscGVyLCBkZWZhdWx0Ok1vdGlvblBhdGhIZWxwZXJ9LlxuXG4gIHZhciBuYW1lID0gY29uZmlnLm5hbWUsXG4gICAgICBpc0Z1bmMgPSBfaXNGdW5jdGlvbihjb25maWcpLFxuICAgICAgUGx1Z2luID0gbmFtZSAmJiAhaXNGdW5jICYmIGNvbmZpZy5pbml0ID8gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Byb3BzID0gW107XG4gIH0gOiBjb25maWcsXG4gICAgICAvL2luIGNhc2Ugc29tZW9uZSBwYXNzZXMgaW4gYW4gb2JqZWN0IHRoYXQncyBub3QgYSBwbHVnaW4sIGxpa2UgQ3VzdG9tRWFzZVxuICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgIGluaXQ6IF9lbXB0eUZ1bmMsXG4gICAgcmVuZGVyOiBfcmVuZGVyUHJvcFR3ZWVucyxcbiAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAga2lsbDogX2tpbGxQcm9wVHdlZW5zT2YsXG4gICAgbW9kaWZpZXI6IF9hZGRQbHVnaW5Nb2RpZmllcixcbiAgICByYXdWYXJzOiAwXG4gIH0sXG4gICAgICBzdGF0aWNzID0ge1xuICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgZ2V0OiAwLFxuICAgIGdldFNldHRlcjogX2dldFNldHRlcixcbiAgICBhbGlhc2VzOiB7fSxcbiAgICByZWdpc3RlcjogMFxuICB9O1xuXG4gIF93YWtlKCk7XG5cbiAgaWYgKGNvbmZpZyAhPT0gUGx1Z2luKSB7XG4gICAgaWYgKF9wbHVnaW5zW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3NldERlZmF1bHRzKFBsdWdpbiwgX3NldERlZmF1bHRzKF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgaW5zdGFuY2VEZWZhdWx0cyksIHN0YXRpY3MpKTsgLy9zdGF0aWMgbWV0aG9kc1xuXG5cbiAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTsgLy9pbnN0YW5jZSBtZXRob2RzXG5cblxuICAgIF9wbHVnaW5zW1BsdWdpbi5wcm9wID0gbmFtZV0gPSBQbHVnaW47XG5cbiAgICBpZiAoY29uZmlnLnRhcmdldFRlc3QpIHtcbiAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbiAgICB9XG5cbiAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7IC8vZm9yIHRoZSBnbG9iYWwgbmFtZS4gXCJtb3Rpb25QYXRoXCIgc2hvdWxkIGJlY29tZSBNb3Rpb25QYXRoUGx1Z2luXG4gIH1cblxuICBfYWRkR2xvYmFsKG5hbWUsIFBsdWdpbik7XG5cbiAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENPTE9SU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXzI1NSA9IDI1NSxcbiAgICBfY29sb3JMb29rdXAgPSB7XG4gIGFxdWE6IFswLCBfMjU1LCBfMjU1XSxcbiAgbGltZTogWzAsIF8yNTUsIDBdLFxuICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgYmxhY2s6IFswLCAwLCAwXSxcbiAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgdGVhbDogWzAsIDEyOCwgMTI4XSxcbiAgYmx1ZTogWzAsIDAsIF8yNTVdLFxuICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgd2hpdGU6IFtfMjU1LCBfMjU1LCBfMjU1XSxcbiAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gIHllbGxvdzogW18yNTUsIF8yNTUsIDBdLFxuICBvcmFuZ2U6IFtfMjU1LCAxNjUsIDBdLFxuICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICByZWQ6IFtfMjU1LCAwLCAwXSxcbiAgcGluazogW18yNTUsIDE5MiwgMjAzXSxcbiAgY3lhbjogWzAsIF8yNTUsIF8yNTVdLFxuICB0cmFuc3BhcmVudDogW18yNTUsIF8yNTUsIF8yNTUsIDBdXG59LFxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBpZGVhIHRvIHJlcGxhY2UgdGhlIGhhcmQtY29kZWQgY29sb3IgbmFtZSB2YWx1ZXMgLSBwdXQgdGhpcyBpbiB0aGUgdGlja2VyLndha2UoKSB3aGVyZSB3ZSBzZXQgdGhlIF9kb2M6XG4vLyBsZXQgY3R4ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKTtcbi8vIF9mb3JFYWNoTmFtZShcImFxdWEsbGltZSxzaWx2ZXIsYmxhY2ssbWFyb29uLHRlYWwsYmx1ZSxuYXZ5LHdoaXRlLG9saXZlLHllbGxvdyxvcmFuZ2UsZ3JheSxwdXJwbGUsZ3JlZW4scmVkLHBpbmssY3lhblwiLCBjb2xvciA9PiB7Y3R4LmZpbGxTdHlsZSA9IGNvbG9yOyBfY29sb3JMb29rdXBbY29sb3JdID0gc3BsaXRDb2xvcihjdHguZmlsbFN0eWxlKX0pO1xuX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gIGggKz0gaCA8IDAgPyAxIDogaCA+IDEgPyAtMSA6IDA7XG4gIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xufSxcbiAgICBzcGxpdENvbG9yID0gZnVuY3Rpb24gc3BsaXRDb2xvcih2LCB0b0hTTCwgZm9yY2VBbHBoYSkge1xuICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICByLFxuICAgICAgZyxcbiAgICAgIGIsXG4gICAgICBoLFxuICAgICAgcyxcbiAgICAgIGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBkLFxuICAgICAgd2FzSFNMO1xuXG4gIGlmICghYSkge1xuICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuICAgICAgdiA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgYSA9IF9jb2xvckxvb2t1cFt2XTtcbiAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwIG9yICM5RjBGIChjb3VsZCBoYXZlIGFscGhhKVxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGIgKyAodi5sZW5ndGggPT09IDUgPyB2LmNoYXJBdCg0KSArIHYuY2hhckF0KDQpIDogXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAvLyBoZXggd2l0aCBhbHBoYSwgbGlrZSAjZmQ1ZTUzZmZcbiAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgfVxuXG4gICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgIH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcbiAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgIGggPSArYVswXSAlIDM2MCAvIDM2MDtcbiAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgIGcgPSBsIDw9IC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7IC8vY2FzdCBhcyBudW1iZXJcblxuICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgYVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcbiAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG4gICAgICAgIGEgPSB2Lm1hdGNoKF9udW1FeHApO1xuICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICB9XG5cbiAgaWYgKHRvSFNMICYmICF3YXNIU0wpIHtcbiAgICByID0gYVswXSAvIF8yNTU7XG4gICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgIGIgPSBhWzJdIC8gXzI1NTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBoID0gbWF4ID09PSByID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiBtYXggPT09IGcgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH1cblxuICAgIGFbMF0gPSB+fihoICsgLjUpO1xuICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICB9XG5cbiAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgcmV0dXJuIGE7XG59LFxuICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gIC8vIHN0cmlwcyBvdXQgdGhlIGNvbG9ycyBmcm9tIHRoZSBzdHJpbmcsIGZpbmRzIGFsbCB0aGUgbnVtZXJpYyBzbG90cyAod2l0aCB1bml0cykgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhvc2UuIFRoZSBBcnJheSBhbHNvIGhhcyBhIFwiY1wiIHByb3BlcnR5IHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBpbmRleCB2YWx1ZXMgd2hlcmUgdGhlIGNvbG9ycyBiZWxvbmcuIFRoaXMgaXMgdG8gaGVscCB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlcmUgdGhlcmUncyBhIG1pcy1tYXRjaGVkIG9yZGVyIG9mIGNvbG9yL251bWVyaWMgZGF0YSBsaWtlIGRyb3Atc2hhZG93KCNmMDAgMHB4IDFweCAycHgpIGFuZCBkcm9wLXNoYWRvdygweCAxcHggMnB4ICNmMDApLiBUaGlzIGlzIGJhc2ljYWxseSBhIGhlbHBlciBmdW5jdGlvbiB1c2VkIGluIF9mb3JtYXRDb2xvcnMoKVxuICB2YXIgdmFsdWVzID0gW10sXG4gICAgICBjID0gW10sXG4gICAgICBpID0gLTE7XG4gIHYuc3BsaXQoX2NvbG9yRXhwKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICBjLnB1c2goaSArPSBhLmxlbmd0aCArIDEpO1xuICB9KTtcbiAgdmFsdWVzLmMgPSBjO1xuICByZXR1cm4gdmFsdWVzO1xufSxcbiAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgIGkgPSAwLFxuICAgICAgYyxcbiAgICAgIHNoZWxsLFxuICAgICAgZCxcbiAgICAgIGw7XG5cbiAgaWYgKCFjb2xvcnMpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIChjb2xvciA9IHNwbGl0Q29sb3IoY29sb3IsIHRvSFNMLCAxKSkgJiYgdHlwZSArICh0b0hTTCA/IGNvbG9yWzBdICsgXCIsXCIgKyBjb2xvclsxXSArIFwiJSxcIiArIGNvbG9yWzJdICsgXCIlLFwiICsgY29sb3JbM10gOiBjb2xvci5qb2luKFwiLFwiKSkgKyBcIilcIjtcbiAgfSk7XG5cbiAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgZCA9IF9jb2xvck9yZGVyRGF0YShzKTtcbiAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgc2hlbGwgPSBzLnJlcGxhY2UoX2NvbG9yRXhwLCBcIjFcIikuc3BsaXQoX251bVdpdGhVbml0RXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyAofmMuaW5kZXhPZihpKSA/IGNvbG9ycy5zaGlmdCgpIHx8IHR5cGUgKyBcIjAsMCwwLDApXCIgOiAoZC5sZW5ndGggPyBkIDogY29sb3JzLmxlbmd0aCA/IGNvbG9ycyA6IG9yZGVyTWF0Y2hEYXRhKS5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNoZWxsKSB7XG4gICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbn0sXG4gICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICBlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCAmJiAoX3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnKTtcbiAgICBfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuICAgIHRpbWUgPSBfbGFzdFVwZGF0ZSAtIF9zdGFydFRpbWU7XG4gICAgb3ZlcmxhcCA9IHRpbWUgLSBfbmV4dFRpbWU7XG5cbiAgICBpZiAob3ZlcmxhcCA+IDAgfHwgbWFudWFsKSB7XG4gICAgICBmcmFtZSA9ICsrX3NlbGYuZnJhbWU7XG4gICAgICBfZGVsdGEgPSB0aW1lIC0gX3NlbGYudGltZSAqIDEwMDA7XG4gICAgICBfc2VsZi50aW1lID0gdGltZSA9IHRpbWUgLyAxMDAwO1xuICAgICAgX25leHRUaW1lICs9IG92ZXJsYXAgKyAob3ZlcmxhcCA+PSBfZ2FwID8gNCA6IF9nYXAgLSBvdmVybGFwKTtcbiAgICAgIGRpc3BhdGNoID0gMTtcbiAgICB9XG5cbiAgICBtYW51YWwgfHwgKF9pZCA9IF9yZXEoX3RpY2spKTsgLy9tYWtlIHN1cmUgdGhlIHJlcXVlc3QgaXMgbWFkZSBiZWZvcmUgd2UgZGlzcGF0Y2ggdGhlIFwidGlja1wiIGV2ZW50IHNvIHRoYXQgdGltaW5nIGlzIG1haW50YWluZWQuIE90aGVyd2lzZSwgaWYgcHJvY2Vzc2luZyB0aGUgXCJ0aWNrXCIgcmVxdWlyZXMgYSBidW5jaCBvZiB0aW1lIChsaWtlIDE1bXMpIGFuZCB3ZSdyZSB1c2luZyBhIHNldFRpbWVvdXQoKSB0aGF0J3MgYmFzZWQgb24gMTYuN21zLCBpdCdkIHRlY2huaWNhbGx5IHRha2UgMzEuN21zIGJldHdlZW4gZnJhbWVzIG90aGVyd2lzZS5cblxuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2xpc3RlbmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgLy8gdXNlIF9pIGFuZCBjaGVjayBfbGlzdGVuZXJzLmxlbmd0aCBpbnN0ZWFkIG9mIGEgdmFyaWFibGUgYmVjYXVzZSBhIGxpc3RlbmVyIGNvdWxkIGdldCByZW1vdmVkIGR1cmluZyB0aGUgbG9vcCwgYW5kIGlmIHRoYXQgaGFwcGVucyB0byBhbiBlbGVtZW50IGxlc3MgdGhhbiB0aGUgY3VycmVudCBpbmRleCwgaXQnZCB0aHJvdyB0aGluZ3Mgb2ZmIGluIHRoZSBsb29wLlxuICAgICAgICBfbGlzdGVuZXJzW19pXSh0aW1lLCBfZGVsdGEsIGZyYW1lLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3NlbGYgPSB7XG4gICAgdGltZTogMCxcbiAgICBmcmFtZTogMCxcbiAgICB0aWNrOiBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgX3RpY2sodHJ1ZSk7XG4gICAgfSxcbiAgICBkZWx0YVJhdGlvOiBmdW5jdGlvbiBkZWx0YVJhdGlvKGZwcykge1xuICAgICAgcmV0dXJuIF9kZWx0YSAvICgxMDAwIC8gKGZwcyB8fCA2MCkpO1xuICAgIH0sXG4gICAgd2FrZTogZnVuY3Rpb24gd2FrZSgpIHtcbiAgICAgIGlmIChfY29yZVJlYWR5KSB7XG4gICAgICAgIGlmICghX2NvcmVJbml0dGVkICYmIF93aW5kb3dFeGlzdHMoKSkge1xuICAgICAgICAgIF93aW4gPSBfY29yZUluaXR0ZWQgPSB3aW5kb3c7XG4gICAgICAgICAgX2RvYyA9IF93aW4uZG9jdW1lbnQgfHwge307XG4gICAgICAgICAgX2dsb2JhbHMuZ3NhcCA9IGdzYXA7XG4gICAgICAgICAgKF93aW4uZ3NhcFZlcnNpb25zIHx8IChfd2luLmdzYXBWZXJzaW9ucyA9IFtdKSkucHVzaChnc2FwLnZlcnNpb24pO1xuXG4gICAgICAgICAgX2luc3RhbGwoX2luc3RhbGxTY29wZSB8fCBfd2luLkdyZWVuU29ja0dsb2JhbHMgfHwgIV93aW4uZ3NhcCAmJiBfd2luIHx8IHt9KTtcblxuICAgICAgICAgIF9yYWYgPSBfd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9pZCAmJiBfc2VsZi5zbGVlcCgpO1xuXG4gICAgICAgIF9yZXEgPSBfcmFmIHx8IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgX25leHRUaW1lIC0gX3NlbGYudGltZSAqIDEwMDAgKyAxIHwgMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RpY2tlckFjdGl2ZSA9IDE7XG5cbiAgICAgICAgX3RpY2soMik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGVlcDogZnVuY3Rpb24gc2xlZXAoKSB7XG4gICAgICAoX3JhZiA/IF93aW4uY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxIC8gX3RpbnlOdW07IC8vemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZywgX2xhZ1RocmVzaG9sZCwgMCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaywgb25jZSwgcHJpb3JpdGl6ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBvbmNlID8gZnVuY3Rpb24gKHQsIGQsIGYsIHYpIHtcbiAgICAgICAgY2FsbGJhY2sodCwgZCwgZiwgdik7XG5cbiAgICAgICAgX3NlbGYucmVtb3ZlKGZ1bmMpO1xuICAgICAgfSA6IGNhbGxiYWNrO1xuXG4gICAgICBfc2VsZi5yZW1vdmUoY2FsbGJhY2spO1xuXG4gICAgICBfbGlzdGVuZXJzW3ByaW9yaXRpemUgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShmdW5jKTtcblxuICAgICAgX3dha2UoKTtcblxuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjYWxsYmFjaywgaSkge1xuICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgIH0sXG4gICAgX2xpc3RlbmVyczogX2xpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gX3NlbGY7XG59KCksXG4gICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xufSxcbiAgICAvL2Fsc28gZW5zdXJlcyB0aGUgY29yZSBjbGFzc2VzIGFyZSBpbml0aWFsaXplZC5cblxuLypcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBFQVNJTkdcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbl9lYXNlTWFwID0ge30sXG4gICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgX3BhcnNlT2JqZWN0SW5TdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh2YWx1ZSkge1xuICAvL3Rha2VzIGEgc3RyaW5nIGxpa2UgXCJ7d2lnZ2xlczoxMCwgdHlwZTphbnRpY2lwYXRlfSlcIiBhbmQgdHVybnMgaXQgaW50byBhIHJlYWwgb2JqZWN0LiBOb3RpY2UgaXQgZW5kcyBpbiBcIilcIiBhbmQgaW5jbHVkZXMgdGhlIHt9IHdyYXBwZXJzLiBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3IgcGFyc2luZyBlYXNlIGNvbmZpZ3MgYW5kIHByaW9yaXRpemVkIG9wdGltaXphdGlvbiByYXRoZXIgdGhhbiByZXVzYWJpbGl0eS5cbiAgdmFyIG9iaiA9IHt9LFxuICAgICAgc3BsaXQgPSB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMykuc3BsaXQoXCI6XCIpLFxuICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICBpID0gMSxcbiAgICAgIGwgPSBzcGxpdC5sZW5ndGgsXG4gICAgICBpbmRleCxcbiAgICAgIHZhbCxcbiAgICAgIHBhcnNlZFZhbDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgIGluZGV4ID0gaSAhPT0gbCAtIDEgPyB2YWwubGFzdEluZGV4T2YoXCIsXCIpIDogdmFsLmxlbmd0aDtcbiAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgIGtleSA9IHZhbC5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgIGNsb3NlID0gdmFsdWUuaW5kZXhPZihcIilcIiksXG4gICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbn0sXG4gICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgLy9uYW1lIGNhbiBiZSBhIHN0cmluZyBsaWtlIFwiZWxhc3RpYy5vdXQoMSwwLjUpXCIsIGFuZCBwYXNzIGluIF9lYXNlTWFwIGFzIG9iaiBhbmQgaXQnbGwgcGFyc2UgaXQgb3V0IGFuZCBjYWxsIHRoZSBhY3R1YWwgZnVuY3Rpb24gbGlrZSBfZWFzZU1hcC5FbGFzdGljLmVhc2VPdXQuY29uZmlnKDEsMC41KS4gSXQgd2lsbCBhbHNvIHBhcnNlIGN1c3RvbSBlYXNlIHN0cmluZ3MgYXMgbG9uZyBhcyBDdXN0b21FYXNlIGlzIGxvYWRlZCBhbmQgcmVnaXN0ZXJlZCAoaW50ZXJuYWxseSBhcyBfZWFzZU1hcC5fQ0UpLlxuICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gIHJldHVybiBlYXNlICYmIHNwbGl0Lmxlbmd0aCA+IDEgJiYgZWFzZS5jb25maWcgPyBlYXNlLmNvbmZpZy5hcHBseShudWxsLCB+bmFtZS5pbmRleE9mKFwie1wiKSA/IFtfcGFyc2VPYmplY3RJblN0cmluZyhzcGxpdFsxXSldIDogX3ZhbHVlSW5QYXJlbnRoZXNlcyhuYW1lKS5zcGxpdChcIixcIikubWFwKF9udW1lcmljSWZQb3NzaWJsZSkpIDogX2Vhc2VNYXAuX0NFICYmIF9jdXN0b21FYXNlRXhwLnRlc3QobmFtZSkgPyBfZWFzZU1hcC5fQ0UoXCJcIiwgbmFtZSkgOiBlYXNlO1xufSxcbiAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgfTtcbn0sXG4gICAgLy8gYWxsb3cgeW95b0Vhc2UgdG8gYmUgc2V0IGluIGNoaWxkcmVuIGFuZCBoYXZlIHRob3NlIGFmZmVjdGVkIHdoZW4gdGhlIHBhcmVudC9hbmNlc3RvciB0aW1lbGluZSB5b3lvcy5cbl9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gIHZhciBjaGlsZCA9IHRpbWVsaW5lLl9maXJzdCxcbiAgICAgIGVhc2U7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgaWYgKGNoaWxkLnRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhc2UgPSBjaGlsZC5fZWFzZTtcbiAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgIGNoaWxkLl95b3lvID0gaXNZb3lvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gIH1cbn0sXG4gICAgX3BhcnNlRWFzZSA9IGZ1bmN0aW9uIF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbn0sXG4gICAgX2luc2VydEVhc2UgPSBmdW5jdGlvbiBfaW5zZXJ0RWFzZShuYW1lcywgZWFzZUluLCBlYXNlT3V0LCBlYXNlSW5PdXQpIHtcbiAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZUluKDEgLSBwKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVhc2VJbk91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVhc2UgPSB7XG4gICAgZWFzZUluOiBlYXNlSW4sXG4gICAgZWFzZU91dDogZWFzZU91dCxcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICB9LFxuICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfZ2xvYmFsc1tuYW1lXSA9IGVhc2U7XG4gICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lICsgKHAgPT09IFwiZWFzZUluXCIgPyBcIi5pblwiIDogcCA9PT0gXCJlYXNlT3V0XCIgPyBcIi5vdXRcIiA6IFwiLmluT3V0XCIpXSA9IF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHBdID0gZWFzZVtwXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gIH07XG59LFxuICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cbiAgcDIgPSAocGVyaW9kIHx8ICh0eXBlID8gLjMgOiAuNDUpKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSksXG4gICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiBwMSAqIE1hdGgucG93KDIsIC0xMCAqIHApICogX3NpbigocCAtIHAzKSAqIHAyKSArIDE7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBwMiA9IF8yUEkgLyBwMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gIGlmIChvdmVyc2hvb3QgPT09IHZvaWQgMCkge1xuICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gIH1cblxuICB2YXIgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAob3ZlcnNob290KSB7XG4gICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59OyAvLyBhIGNoZWFwZXIgKGtiIGFuZCBjcHUpIGJ1dCBtb3JlIG1pbGQgd2F5IHRvIGdldCBhIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSBieSBmZWVkaW5nIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlID0gcmF0aW8gPT4ge1xuLy8gXHRsZXQgeSA9IDAuNSArIHJhdGlvIC8gMjtcbi8vIFx0cmV0dXJuIHAgPT4gKDIgKiAoMSAtIHApICogcCAqIHkgKyBwICogcCk7XG4vLyB9LFxuLy8gYSBzdHJvbmdlciAoYnV0IG1vcmUgZXhwZW5zaXZlIGtiL2NwdSkgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIHRoYXQgbGV0cyB5b3UgZmVlZCBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZVN0cm9uZyA9IHJhdGlvID0+IHtcbi8vIFx0cmF0aW8gPSAuNSArIHJhdGlvIC8gMjtcbi8vIFx0bGV0IG8gPSAxIC8gMyAqIChyYXRpbyA8IC41ID8gcmF0aW8gOiAxIC0gcmF0aW8pLFxuLy8gXHRcdGIgPSByYXRpbyAtIG8sXG4vLyBcdFx0YyA9IHJhdGlvICsgbztcbi8vIFx0cmV0dXJuIHAgPT4gcCA9PT0gMSA/IHAgOiAzICogYiAqICgxIC0gcCkgKiAoMSAtIHApICogcCArIDMgKiBjICogKDEgLSBwKSAqIHAgKiBwICsgcCAqIHAgKiBwO1xuLy8gfTtcblxuXG5fZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgdmFyIHBvd2VyID0gaSA8IDUgPyBpICsgMSA6IGk7XG5cbiAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgfSA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gcCwgcG93ZXIpO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgfSk7XG59KTtcblxuX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbl9pbnNlcnRFYXNlKFwiRWxhc3RpY1wiLCBfY29uZmlnRWxhc3RpYyhcImluXCIpLCBfY29uZmlnRWxhc3RpYyhcIm91dFwiKSwgX2NvbmZpZ0VsYXN0aWMoKSk7XG5cbihmdW5jdGlvbiAobiwgYykge1xuICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgIG4yID0gMiAqIG4xLFxuICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA8IG4xID8gbiAqIHAgKiBwIDogcCA8IG4yID8gbiAqIE1hdGgucG93KHAgLSAxLjUgLyBjLCAyKSArIC43NSA6IHAgPCBuMyA/IG4gKiAocCAtPSAyLjI1IC8gYykgKiBwICsgLjkzNzUgOiBuICogTWF0aC5wb3cocCAtIDIuNjI1IC8gYywgMikgKyAuOTg0Mzc1O1xuICB9O1xuXG4gIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSwgZWFzZU91dCk7XG59KSg3LjU2MjUsIDIuNzUpO1xuXG5faW5zZXJ0RWFzZShcIkV4cG9cIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPyBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpIDogMDtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkNpcmNcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiU2luZVwiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkJhY2tcIiwgX2NvbmZpZ0JhY2soXCJpblwiKSwgX2NvbmZpZ0JhY2soXCJvdXRcIiksIF9jb25maWdCYWNrKCkpO1xuXG5fZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGVwcyA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHAxID0gMSAvIHN0ZXBzLFxuICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgIG1heCA9IDEgLSBfdGlueU51bTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgIH07XG4gIH1cbn07XG5fZGVmYXVsdHMuZWFzZSA9IF9lYXNlTWFwW1wicXVhZC5vdXRcIl07XG5cbl9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENBQ0hFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgdGhpcy5pZCA9IF9nc0lEKys7XG4gIHRhcmdldC5fZ3NhcCA9IHRoaXM7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICB0aGlzLmdldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldCA6IF9nZXRQcm9wZXJ0eTtcbiAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xufTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQU5JTUFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCB2YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKHZhcnMpIHtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCA9PT0gSW5maW5pdHkgPyAtMiA6IHZhcnMucmVwZWF0IHx8IDApIHtcbiAgICAgIC8vIFRPRE86IHJlcGVhdDogSW5maW5pdHkgb24gYSB0aW1lbGluZSdzIGNoaWxkcmVuIG11c3QgZmxhZyB0aGF0IHRpbWVsaW5lIGludGVybmFsbHkgYW5kIGFmZmVjdCBpdHMgdG90YWxEdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHN0b3AgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiB3aGVuIHJlYWNoaW5nIHRoZSBzdGFydC5cbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgIHRoaXMuZGF0YSA9IHZhcnMuZGF0YTtcblxuICAgIGlmIChfY29udGV4dCkge1xuICAgICAgdGhpcy5fY3R4ID0gX2NvbnRleHQ7XG5cbiAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgICB9XG5cbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpO1xuXG4gICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7IC8vIGVkZ2UgY2FzZTogaWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgdGltZWxpbmUgdGhhdCBhbHJlYWR5IGNvbXBsZXRlZCwgZm9yIGV4YW1wbGUsIHdlIG11c3QgcmUtYWN0aXZhdGUgdGhlIHBhcmVudC5cbiAgICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydCBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhdGlvO1xuICB9O1xuXG4gIF9wcm90by5wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8uaXRlcmF0aW9uID0gZnVuY3Rpb24gaXRlcmF0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHZhciBjeWNsZUR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpICsgdGhpcy5fckRlbGF5O1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLl90aW1lICsgKHZhbHVlIC0gMSkgKiBjeWNsZUR1cmF0aW9uLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pICsgMSA6IDE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBhZGRpdGlvbjpcbiAgLy8gaXNQbGF5aW5nQmFja3dhcmRzKCkge1xuICAvLyBcdGxldCBhbmltYXRpb24gPSB0aGlzLFxuICAvLyBcdFx0b3JpZW50YXRpb24gPSAxOyAvLyAxID0gZm9yd2FyZCwgLTEgPSBiYWNrd2FyZFxuICAvLyBcdHdoaWxlIChhbmltYXRpb24pIHtcbiAgLy8gXHRcdG9yaWVudGF0aW9uICo9IGFuaW1hdGlvbi5yZXZlcnNlZCgpIHx8IChhbmltYXRpb24ucmVwZWF0KCkgJiYgIShhbmltYXRpb24uaXRlcmF0aW9uKCkgJiAxKSkgPyAtMSA6IDE7XG4gIC8vIFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24ucGFyZW50O1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gb3JpZW50YXRpb24gPCAwO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8udGltZVNjYWxlID0gZnVuY3Rpb24gdGltZVNjYWxlKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICB0aGlzLnRvdGFsVGltZShfY2xhbXAoLXRoaXMuX2RlbGF5LCB0aGlzLl90RHVyLCB0VGltZSksIHRydWUpO1xuXG4gICAgX3NldEVuZCh0aGlzKTsgLy8gaWYgcGFyZW50LnNtb290aENoaWxkVGltaW5nIHdhcyBmYWxzZSwgdGhlIGVuZCB0aW1lIGRpZG4ndCBnZXQgdXBkYXRlZCBpbiB0aGUgX2FsaWduUGxheWhlYWQoKSBtZXRob2QsIHNvIGRvIGl0IGhlcmUuXG5cblxuICAgIHJldHVybiBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7IC8vIGlmIHRoZSBwYXVzZSBvY2N1cnMgZHVyaW5nIHRoZSBkZWxheSBwaGFzZSwgbWFrZSBzdXJlIHRoYXQncyBmYWN0b3JlZCBpbiB3aGVuIHJlc3VtaW5nLlxuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSwgc28gYSBwYXVzZWQgdHdlZW4gd291bGQgZWZmZWN0aXZlbHkgaGF2ZSBhIHRpbWVTY2FsZSBvZiAwLiBXZSByZWNvcmQgdGhlIFwicmVhbFwiIHRpbWVTY2FsZSBhcyBfcnRzIChyZWNvcmRlZCB0aW1lIHNjYWxlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3dha2UoKTtcblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0czsgLy9vbmx5IGRlZmVyIHRvIF9wVGltZSAocGF1c2VUaW1lKSBpZiB0VGltZSBpcyB6ZXJvLiBSZW1lbWJlciwgc29tZW9uZSBjb3VsZCBwYXVzZSgpIGFuIGFuaW1hdGlvbiwgdGhlbiBzY3J1YiB0aGUgcGxheWhlYWQgYW5kIHJlc3VtZSgpLiBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBzbW9vdGhDaGlsZFRpbWluZywgd2UgcmVuZGVyIGF0IHRoZSByYXdUaW1lKCkgYmVjYXVzZSB0aGUgc3RhcnRUaW1lIHdvbid0IGdldCB1cGRhdGVkLlxuXG4gICAgICAgIHRoaXMudG90YWxUaW1lKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyA/IHRoaXMucmF3VGltZSgpIDogdGhpcy5fdFRpbWUgfHwgdGhpcy5fcFRpbWUsIHRoaXMucHJvZ3Jlc3MoKSA9PT0gMSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtICYmICh0aGlzLl90VGltZSAtPSBfdGlueU51bSkpOyAvLyBlZGdlIGNhc2U6IGFuaW1hdGlvbi5wcm9ncmVzcygxKS5wYXVzZSgpLnBsYXkoKSB3b3VsZG4ndCByZW5kZXIgYWdhaW4gYmVjYXVzZSB0aGUgcGxheWhlYWQgaXMgYWxyZWFkeSBhdCB0aGUgZW5kLCBidXQgdGhlIGNhbGwgdG8gdG90YWxUaW1lKCkgYmVsb3cgd2lsbCBhZGQgaXQgYmFjayB0byBpdHMgcGFyZW50Li4uYW5kIG5vdCByZW1vdmUgaXQgYWdhaW4gKHNpbmNlIHJlbW92aW5nIG9ubHkgaGFwcGVucyB1cG9uIHJlbmRlcmluZyBhdCBhIG5ldyB0aW1lKS4gT2Zmc2V0dGluZyB0aGUgX3RUaW1lIHNsaWdodGx5IGlzIGRvbmUgc2ltcGx5IHRvIGNhdXNlIHRoZSBmaW5hbCByZW5kZXIgaW4gdG90YWxUaW1lKCkgdGhhdCdsbCBwb3AgaXQgb2ZmIGl0cyB0aW1lbGluZSAoaWYgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUsIG9mIGNvdXJzZSkuIENoZWNrIHRvIG1ha2Ugc3VyZSBfelRpbWUgaXNuJ3QgLV90aW55TnVtIHRvIGF2b2lkIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgcHVzaGVkIHRvIHRoZSBlbmQgYnV0IElOU0lERSBhIHR3ZWVuL2NhbGxiYWNrLCB0aGUgdGltZWxpbmUgaXRzZWxmIGlzIHBhdXNlZCB0aHVzIGhhbHRpbmcgcmVuZGVyaW5nIGFuZCBsZWF2aW5nIGEgZmV3IHVucmVuZGVyZWQuIFdoZW4gcmVzdW1pbmcsIGl0IHdvdWxkbid0IHJlbmRlciB0aG9zZSBvdGhlcndpc2UuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHZhbHVlO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICB9O1xuXG4gIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7IC8vIF9kcCA9IGRldGFjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIGNvbmZpZyA9IF9yZXZlcnRDb25maWc7XG4gICAgfVxuXG4gICAgdmFyIHByZXZJc1JldmVydGluZyA9IF9yZXZlcnRpbmc7XG4gICAgX3JldmVydGluZyA9IGNvbmZpZztcblxuICAgIGlmICh0aGlzLl9pbml0dGVkIHx8IHRoaXMuX3N0YXJ0QXQpIHtcbiAgICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5yZXZlcnQoY29uZmlnKTtcbiAgICAgIHRoaXMudG90YWxUaW1lKC0wLjAxLCBjb25maWcuc3VwcHJlc3NFdmVudHMpO1xuICAgIH1cblxuICAgIHRoaXMuZGF0YSAhPT0gXCJuZXN0ZWRcIiAmJiBjb25maWcua2lsbCAhPT0gZmFsc2UgJiYgdGhpcy5raWxsKCk7XG4gICAgX3JldmVydGluZyA9IHByZXZJc1JldmVydGluZztcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ2xvYmFsVGltZSA9IGZ1bmN0aW9uIGdsb2JhbFRpbWUocmF3VGltZSkge1xuICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA/IHJhd1RpbWUgOiBhbmltYXRpb24ucmF3VGltZSgpO1xuXG4gICAgd2hpbGUgKGFuaW1hdGlvbikge1xuICAgICAgdGltZSA9IGFuaW1hdGlvbi5fc3RhcnQgKyB0aW1lIC8gKGFuaW1hdGlvbi5fdHMgfHwgMSk7XG4gICAgICBhbmltYXRpb24gPSBhbmltYXRpb24uX2RwO1xuICAgIH1cblxuICAgIHJldHVybiAhdGhpcy5wYXJlbnQgJiYgdGhpcy52YXJzLmltbWVkaWF0ZVJlbmRlciA/IC0xIDogdGltZTsgLy8gdGhlIF9zdGFydEF0IHR3ZWVucyBmb3IgLmZyb21UbygpIGFuZCAuZnJvbSgpIHRoYXQgaGF2ZSBpbW1lZGlhdGVSZW5kZXIgc2hvdWxkIGFsd2F5cyBiZSBGSVJTVCBpbiB0aGUgdGltZWxpbmUgKGltcG9ydGFudCBmb3IgUmVjb3JkaW5nLnJldmVydCgpKVxuICB9O1xuXG4gIF9wcm90by5yZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fcmVwZWF0ID0gdmFsdWUgPT09IEluZmluaXR5ID8gLTIgOiB2YWx1ZTtcbiAgICAgIHJldHVybiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZXBlYXQgPT09IC0yID8gSW5maW5pdHkgOiB0aGlzLl9yZXBlYXQ7XG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdERlbGF5ID0gZnVuY3Rpb24gcmVwZWF0RGVsYXkodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIHRpbWUgPSB0aGlzLl90aW1lO1xuICAgICAgdGhpcy5fckRlbGF5ID0gdmFsdWU7XG5cbiAgICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG5cbiAgICAgIHJldHVybiB0aW1lID8gdGhpcy50aW1lKHRpbWUpIDogdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fckRlbGF5O1xuICB9O1xuXG4gIF9wcm90by55b3lvID0gZnVuY3Rpb24geW95byh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl95b3lvID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5feW95bztcbiAgfTtcblxuICBfcHJvdG8uc2VlayA9IGZ1bmN0aW9uIHNlZWsocG9zaXRpb24sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdGFydCA9IGZ1bmN0aW9uIHJlc3RhcnQoaW5jbHVkZURlbGF5LCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnBsYXkoKS50b3RhbFRpbWUoaW5jbHVkZURlbGF5ID8gLXRoaXMuX2RlbGF5IDogMCwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgfTtcblxuICBfcHJvdG8ucGxheSA9IGZ1bmN0aW9uIHBsYXkoZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBmcm9tICE9IG51bGwgJiYgdGhpcy5zZWVrKGZyb20sIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5yZXZlcnNlZChmYWxzZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UoZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBmcm9tICE9IG51bGwgJiYgdGhpcy5zZWVrKGZyb20gfHwgdGhpcy50b3RhbER1cmF0aW9uKCksIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5yZXZlcnNlZCh0cnVlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBhdFRpbWUgIT0gbnVsbCAmJiB0aGlzLnNlZWsoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucGF1c2VkKHRydWUpO1xuICB9O1xuXG4gIF9wcm90by5yZXN1bWUgPSBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJzZWQgPSBmdW5jdGlvbiByZXZlcnNlZCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAhIXZhbHVlICE9PSB0aGlzLnJldmVyc2VkKCkgJiYgdGhpcy50aW1lU2NhbGUoLXRoaXMuX3J0cyB8fCAodmFsdWUgPyAtX3RpbnlOdW0gOiAwKSk7IC8vIGluIGNhc2UgdGltZVNjYWxlIGlzIHplcm8sIHJldmVyc2luZyB3b3VsZCBoYXZlIG5vIGVmZmVjdCBzbyB3ZSB1c2UgX3RpbnlOdW0uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9ydHMgPCAwO1xuICB9O1xuXG4gIF9wcm90by5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB0aGlzLl9pbml0dGVkID0gdGhpcy5fYWN0ID0gMDtcbiAgICB0aGlzLl96VGltZSA9IC1fdGlueU51bTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uaXNBY3RpdmUgPSBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHAsXG4gICAgICAgIHN0YXJ0ID0gdGhpcy5fc3RhcnQsXG4gICAgICAgIHJhd1RpbWU7XG4gICAgcmV0dXJuICEhKCFwYXJlbnQgfHwgdGhpcy5fdHMgJiYgdGhpcy5faW5pdHRlZCAmJiBwYXJlbnQuaXNBY3RpdmUoKSAmJiAocmF3VGltZSA9IHBhcmVudC5yYXdUaW1lKHRydWUpKSA+PSBzdGFydCAmJiByYXdUaW1lIDwgdGhpcy5lbmRUaW1lKHRydWUpIC0gX3RpbnlOdW0pO1xuICB9O1xuXG4gIF9wcm90by5ldmVudENhbGxiYWNrID0gZnVuY3Rpb24gZXZlbnRDYWxsYmFjayh0eXBlLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHZhcnMgPSB0aGlzLnZhcnM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgZGVsZXRlIHZhcnNbdHlwZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXJzW3R5cGVdID0gY2FsbGJhY2s7XG4gICAgICAgIHBhcmFtcyAmJiAodmFyc1t0eXBlICsgXCJQYXJhbXNcIl0gPSBwYXJhbXMpO1xuICAgICAgICB0eXBlID09PSBcIm9uVXBkYXRlXCIgJiYgKHRoaXMuX29uVXBkYXRlID0gY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdmFyc1t0eXBlXTtcbiAgfTtcblxuICBfcHJvdG8udGhlbiA9IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICB2YXIgZiA9IF9pc0Z1bmN0aW9uKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogX3Bhc3NUaHJvdWdoLFxuICAgICAgICAgIF9yZXNvbHZlID0gZnVuY3Rpb24gX3Jlc29sdmUoKSB7XG4gICAgICAgIHZhciBfdGhlbiA9IHNlbGYudGhlbjtcbiAgICAgICAgc2VsZi50aGVuID0gbnVsbDsgLy8gdGVtcG9yYXJpbHkgbnVsbCB0aGUgdGhlbigpIG1ldGhvZCB0byBhdm9pZCBhbiBpbmZpbml0ZSBsb29wIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zMjIpXG5cbiAgICAgICAgX2lzRnVuY3Rpb24oZikgJiYgKGYgPSBmKHNlbGYpKSAmJiAoZi50aGVuIHx8IGYgPT09IHNlbGYpICYmIChzZWxmLnRoZW4gPSBfdGhlbik7XG4gICAgICAgIHJlc29sdmUoZik7XG4gICAgICAgIHNlbGYudGhlbiA9IF90aGVuO1xuICAgICAgfTtcblxuICAgICAgaWYgKHNlbGYuX2luaXR0ZWQgJiYgc2VsZi50b3RhbFByb2dyZXNzKCkgPT09IDEgJiYgc2VsZi5fdHMgPj0gMCB8fCAhc2VsZi5fdFRpbWUgJiYgc2VsZi5fdHMgPCAwKSB7XG4gICAgICAgIF9yZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLl9wcm9tID0gX3Jlc29sdmU7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmtpbGwgPSBmdW5jdGlvbiBraWxsKCkge1xuICAgIF9pbnRlcnJ1cHQodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIEFuaW1hdGlvbjtcbn0oKTtcblxuX3NldERlZmF1bHRzKEFuaW1hdGlvbi5wcm90b3R5cGUsIHtcbiAgX3RpbWU6IDAsXG4gIF9zdGFydDogMCxcbiAgX2VuZDogMCxcbiAgX3RUaW1lOiAwLFxuICBfdER1cjogMCxcbiAgX2RpcnR5OiAwLFxuICBfcmVwZWF0OiAwLFxuICBfeW95bzogZmFsc2UsXG4gIHBhcmVudDogbnVsbCxcbiAgX2luaXR0ZWQ6IGZhbHNlLFxuICBfckRlbGF5OiAwLFxuICBfdHM6IDEsXG4gIF9kcDogMCxcbiAgcmF0aW86IDAsXG4gIF96VGltZTogLV90aW55TnVtLFxuICBfcHJvbTogMCxcbiAgX3BzOiBmYWxzZSxcbiAgX3J0czogMVxufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVElNRUxJTkVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVGltZWxpbmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24pIHtcbiAgX2luaGVyaXRzTG9vc2UoVGltZWxpbmUsIF9BbmltYXRpb24pO1xuXG4gIGZ1bmN0aW9uIFRpbWVsaW5lKHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IHt9O1xuICAgIH1cblxuICAgIF90aGlzID0gX0FuaW1hdGlvbi5jYWxsKHRoaXMsIHZhcnMpIHx8IHRoaXM7XG4gICAgX3RoaXMubGFiZWxzID0ge307XG4gICAgX3RoaXMuc21vb3RoQ2hpbGRUaW1pbmcgPSAhIXZhcnMuc21vb3RoQ2hpbGRUaW1pbmc7XG4gICAgX3RoaXMuYXV0b1JlbW92ZUNoaWxkcmVuID0gISF2YXJzLmF1dG9SZW1vdmVDaGlsZHJlbjtcbiAgICBfdGhpcy5fc29ydCA9IF9pc05vdEZhbHNlKHZhcnMuc29ydENoaWxkcmVuKTtcbiAgICBfZ2xvYmFsVGltZWxpbmUgJiYgX2FkZFRvVGltZWxpbmUodmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgcG9zaXRpb24pO1xuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIF90aGlzLnBhdXNlZCh0cnVlKTtcbiAgICB2YXJzLnNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHZhcnMuc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBUaW1lbGluZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi50byA9IGZ1bmN0aW9uIHRvKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgwLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnBhcmVudCA9IHRoaXM7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICEhdmFycy5pbW1lZGlhdGVSZW5kZXI7XG4gICAgbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgMSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5jYWxsID0gZnVuY3Rpb24gY2FsbChjYWxsYmFjaywgcGFyYW1zLCBwb3NpdGlvbikge1xuICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjaywgcGFyYW1zKSwgcG9zaXRpb24pO1xuICB9IC8vT05MWSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSEgTWF5YmUgZGVsZXRlP1xuICA7XG5cbiAgX3Byb3RvMi5zdGFnZ2VyVG8gPSBmdW5jdGlvbiBzdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIHZhcnMuc3RhZ2dlciA9IHZhcnMuc3RhZ2dlciB8fCBzdGFnZ2VyO1xuICAgIHZhcnMub25Db21wbGV0ZSA9IG9uQ29tcGxldGVBbGw7XG4gICAgdmFycy5vbkNvbXBsZXRlUGFyYW1zID0gb25Db21wbGV0ZUFsbFBhcmFtcztcbiAgICB2YXJzLnBhcmVudCA9IHRoaXM7XG4gICAgbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbSA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMucnVuQmFja3dhcmRzID0gMTtcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKHZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tVG8gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbVRvKHRhcmdldHMsIGR1cmF0aW9uLCBmcm9tVmFycywgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHRvVmFycy5zdGFydEF0ID0gZnJvbVZhcnM7XG4gICAgX2luaGVyaXREZWZhdWx0cyh0b1ZhcnMpLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKHRvVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICB0RHVyID0gdGhpcy5fZGlydHkgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgdFRpbWUgPSB0b3RhbFRpbWUgPD0gMCA/IDAgOiBfcm91bmRQcmVjaXNlKHRvdGFsVGltZSksXG4gICAgICAgIC8vIGlmIGEgcGF1c2VkIHRpbWVsaW5lIGlzIHJlc3VtZWQgKG9yIGl0cyBfc3RhcnQgaXMgdXBkYXRlZCBmb3IgYW5vdGhlciByZWFzb24uLi53aGljaCByb3VuZHMgaXQpLCB0aGF0IGNvdWxkIHJlc3VsdCBpbiB0aGUgcGxheWhlYWQgc2hpZnRpbmcgYSAqKnRpbnkqKiBhbW91bnQgYW5kIGEgemVyby1kdXJhdGlvbiBjaGlsZCBhdCB0aGF0IHNwb3QgbWF5IGdldCByZW5kZXJlZCBhdCBhIGRpZmZlcmVudCByYXRpbywgbGlrZSBpdHMgdG90YWxUaW1lIGluIHJlbmRlcigpIG1heSBiZSAxZS0xNyBpbnN0ZWFkIG9mIDAsIGZvciBleGFtcGxlLlxuICAgIGNyb3NzaW5nU3RhcnQgPSB0aGlzLl96VGltZSA8IDAgIT09IHRvdGFsVGltZSA8IDAgJiYgKHRoaXMuX2luaXR0ZWQgfHwgIWR1ciksXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZQYXVzZWQsXG4gICAgICAgIHBhdXNlVHdlZW4sXG4gICAgICAgIHRpbWVTY2FsZSxcbiAgICAgICAgcHJldlN0YXJ0LFxuICAgICAgICBwcmV2SXRlcmF0aW9uLFxuICAgICAgICB5b3lvLFxuICAgICAgICBpc1lveW87XG4gICAgdGhpcyAhPT0gX2dsb2JhbFRpbWVsaW5lICYmIHRUaW1lID4gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCAmJiAodFRpbWUgPSB0RHVyKTtcblxuICAgIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgZm9yY2UgfHwgY3Jvc3NpbmdTdGFydCkge1xuICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lICYmIGR1cikge1xuICAgICAgICAvL2lmIHRvdGFsRHVyYXRpb24oKSBmaW5kcyBhIGNoaWxkIHdpdGggYSBuZWdhdGl2ZSBzdGFydFRpbWUgYW5kIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUsIHRoaW5ncyBnZXQgc2hpZnRlZCBhcm91bmQgaW50ZXJuYWxseSBzbyB3ZSBuZWVkIHRvIGFkanVzdCB0aGUgdGltZSBhY2NvcmRpbmdseS4gRm9yIGV4YW1wbGUsIGlmIGEgdHdlZW4gc3RhcnRzIGF0IC0zMCB3ZSBtdXN0IHNoaWZ0IEVWRVJZVEhJTkcgZm9yd2FyZCAzMCBzZWNvbmRzIGFuZCBtb3ZlIHRoaXMgdGltZWxpbmUncyBzdGFydFRpbWUgYmFja3dhcmQgYnkgMzAgc2Vjb25kcyBzbyB0aGF0IHRoaW5ncyBhbGlnbiB3aXRoIHRoZSBwbGF5aGVhZCAobm8ganVtcCkuXG4gICAgICAgIHRUaW1lICs9IHRoaXMuX3RpbWUgLSBwcmV2VGltZTtcbiAgICAgICAgdG90YWxUaW1lICs9IHRoaXMuX3RpbWUgLSBwcmV2VGltZTtcbiAgICAgIH1cblxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgcHJldlN0YXJ0ID0gdGhpcy5fc3RhcnQ7XG4gICAgICB0aW1lU2NhbGUgPSB0aGlzLl90cztcbiAgICAgIHByZXZQYXVzZWQgPSAhdGltZVNjYWxlO1xuXG4gICAgICBpZiAoY3Jvc3NpbmdTdGFydCkge1xuICAgICAgICBkdXIgfHwgKHByZXZUaW1lID0gdGhpcy5felRpbWUpOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHRpbWVsaW5lLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LlxuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIXN1cHByZXNzRXZlbnRzKSAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICB5b3lvID0gdGhpcy5feW95bztcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgdG90YWxUaW1lIDwgMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gdFRpbWUgLyBjeWNsZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcbiAgICAgICAgIXByZXZUaW1lICYmIHRoaXMuX3RUaW1lICYmIHByZXZJdGVyYXRpb24gIT09IGl0ZXJhdGlvbiAmJiAocHJldkl0ZXJhdGlvbiA9IGl0ZXJhdGlvbik7IC8vIGVkZ2UgY2FzZSAtIGlmIHNvbWVvbmUgZG9lcyBhZGRQYXVzZSgpIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiBhIHJlcGVhdGluZyB0aW1lbGluZSwgdGhhdCBwYXVzZSBpcyB0ZWNobmljYWxseSBhdCB0aGUgc2FtZSBzcG90IGFzIHRoZSBlbmQgd2hpY2ggY2F1c2VzIHRoaXMuX3RpbWUgdG8gZ2V0IHNldCB0byAwIHdoZW4gdGhlIHRvdGFsVGltZSB3b3VsZCBub3JtYWxseSBwbGFjZSB0aGUgcGxheWhlYWQgYXQgdGhlIGVuZC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjM4MjMtY2xvc2luZy1uYXYtYW5pbWF0aW9uLW5vdC13b3JraW5nLW9uLWllLWFuZC1pcGhvbmUtNi1tYXliZS1vdGhlci1vbGRlci1icm93c2VyLz90YWI9Y29tbWVudHMjY29tbWVudC0xMTMwMDVcblxuICAgICAgICBpZiAoeW95byAmJiBpdGVyYXRpb24gJiAxKSB7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgICAgaXNZb3lvID0gMTtcbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICBtYWtlIHN1cmUgY2hpbGRyZW4gYXQgdGhlIGVuZC9iZWdpbm5pbmcgb2YgdGhlIHRpbWVsaW5lIGFyZSByZW5kZXJlZCBwcm9wZXJseS4gSWYsIGZvciBleGFtcGxlLFxuICAgICAgICBhIDMtc2Vjb25kIGxvbmcgdGltZWxpbmUgcmVuZGVyZWQgYXQgMi45IHNlY29uZHMgcHJldmlvdXNseSwgYW5kIG5vdyByZW5kZXJzIGF0IDMuMiBzZWNvbmRzICh3aGljaFxuICAgICAgICB3b3VsZCBnZXQgdHJhbnNsYXRlZCB0byAyLjggc2Vjb25kcyBpZiB0aGUgdGltZWxpbmUgeW95b3Mgb3IgMC4yIHNlY29uZHMgaWYgaXQganVzdCByZXBlYXRzKSwgdGhlcmVcbiAgICAgICAgY291bGQgYmUgYSBjYWxsYmFjayBvciBhIHNob3J0IHR3ZWVuIHRoYXQncyBhdCAyLjk1IG9yIDMgc2Vjb25kcyBpbiB3aGljaCB3b3VsZG4ndCByZW5kZXIuIFNvXG4gICAgICAgIHdlIG5lZWQgdG8gcHVzaCB0aGUgdGltZWxpbmUgdG8gdGhlIGVuZCAoYW5kL29yIGJlZ2lubmluZyBkZXBlbmRpbmcgb24gaXRzIHlveW8gdmFsdWUpLiBBbHNvIHdlIG11c3RcbiAgICAgICAgZW5zdXJlIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9yIGVuZCBvZiB0aGUgVGltZWxpbmUgd29yay5cbiAgICAgICAgKi9cblxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICB2YXIgcmV3aW5kaW5nID0geW95byAmJiBwcmV2SXRlcmF0aW9uICYgMSxcbiAgICAgICAgICAgICAgZG9lc1dyYXAgPSByZXdpbmRpbmcgPT09ICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpO1xuICAgICAgICAgIGl0ZXJhdGlvbiA8IHByZXZJdGVyYXRpb24gJiYgKHJld2luZGluZyA9ICFyZXdpbmRpbmcpO1xuICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gMCA6IGR1cjtcbiAgICAgICAgICB0aGlzLl9sb2NrID0gMTtcbiAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSB8fCAoaXNZb3lvID8gMCA6IF9yb3VuZFByZWNpc2UoaXRlcmF0aW9uICogY3ljbGVEdXJhdGlvbikpLCBzdXBwcmVzc0V2ZW50cywgIWR1cikuX2xvY2sgPSAwO1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7IC8vIGlmIGEgdXNlciBnZXRzIHRoZSBpdGVyYXRpb24oKSBpbnNpZGUgdGhlIG9uUmVwZWF0LCBmb3IgZXhhbXBsZSwgaXQgc2hvdWxkIGJlIGFjY3VyYXRlLlxuXG4gICAgICAgICAgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgKHRoaXMuaW52YWxpZGF0ZSgpLl9sb2NrID0gMSk7XG5cbiAgICAgICAgICBpZiAocHJldlRpbWUgJiYgcHJldlRpbWUgIT09IHRoaXMuX3RpbWUgfHwgcHJldlBhdXNlZCAhPT0gIXRoaXMuX3RzIHx8IHRoaXMudmFycy5vblJlcGVhdCAmJiAhdGhpcy5wYXJlbnQgJiYgIXRoaXMuX2FjdCkge1xuICAgICAgICAgICAgLy8gaWYgcHJldlRpbWUgaXMgMCBhbmQgd2UgcmVuZGVyIGF0IHRoZSB2ZXJ5IGVuZCwgX3RpbWUgd2lsbCBiZSB0aGUgZW5kLCB0aHVzIHdvbid0IG1hdGNoLiBTbyBpbiB0aGlzIGVkZ2UgY2FzZSwgcHJldlRpbWUgd29uJ3QgbWF0Y2ggX3RpbWUgYnV0IHRoYXQncyBva2F5LiBJZiBpdCBnZXRzIGtpbGxlZCBpbiB0aGUgb25SZXBlYXQsIGVqZWN0IGFzIHdlbGwuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkdXIgPSB0aGlzLl9kdXI7IC8vIGluIGNhc2UgdGhlIGR1cmF0aW9uIGNoYW5nZWQgaW4gdGhlIG9uUmVwZWF0XG5cbiAgICAgICAgICB0RHVyID0gdGhpcy5fdER1cjtcblxuICAgICAgICAgIGlmIChkb2VzV3JhcCkge1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IDI7XG4gICAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IGR1ciA6IC0wLjAwMDE7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSAvL2luIG9yZGVyIGZvciB5b3lvRWFzZSB0byB3b3JrIHByb3Blcmx5IHdoZW4gdGhlcmUncyBhIHN0YWdnZXIsIHdlIG11c3Qgc3dhcCBvdXQgdGhlIGVhc2UgaW4gZWFjaCBzdWItdHdlZW4uXG5cblxuICAgICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZSh0aGlzLCBpc1lveW8pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9oYXNQYXVzZSAmJiAhdGhpcy5fZm9yY2luZyAmJiB0aGlzLl9sb2NrIDwgMikge1xuICAgICAgICBwYXVzZVR3ZWVuID0gX2ZpbmROZXh0UGF1c2VUd2Vlbih0aGlzLCBfcm91bmRQcmVjaXNlKHByZXZUaW1lKSwgX3JvdW5kUHJlY2lzZSh0aW1lKSk7XG5cbiAgICAgICAgaWYgKHBhdXNlVHdlZW4pIHtcbiAgICAgICAgICB0VGltZSAtPSB0aW1lIC0gKHRpbWUgPSBwYXVzZVR3ZWVuLl9zdGFydCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgICAgdGhpcy5fYWN0ID0gIXRpbWVTY2FsZTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICB0aGlzLl9vblVwZGF0ZSA9IHRoaXMudmFycy5vblVwZGF0ZTtcbiAgICAgICAgdGhpcy5faW5pdHRlZCA9IDE7XG4gICAgICAgIHRoaXMuX3pUaW1lID0gdG90YWxUaW1lO1xuICAgICAgICBwcmV2VGltZSA9IDA7IC8vIHVwb24gaW5pdCwgdGhlIHBsYXloZWFkIHNob3VsZCBhbHdheXMgZ28gZm9yd2FyZDsgc29tZW9uZSBjb3VsZCBpbnZhbGlkYXRlKCkgYSBjb21wbGV0ZWQgdGltZWxpbmUgYW5kIHRoZW4gaWYgdGhleSByZXN0YXJ0KCksIHRoYXQgd291bGQgbWFrZSBjaGlsZCB0d2VlbnMgcmVuZGVyIGluIHJldmVyc2Ugb3JkZXIgd2hpY2ggY291bGQgbG9jayBpbiB0aGUgd3Jvbmcgc3RhcnRpbmcgdmFsdWVzIGlmIHRoZXkgYnVpbGQgb24gZWFjaCBvdGhlciwgbGlrZSB0bC50byhvYmosIHt4OiAxMDB9KS50byhvYmosIHt4OiAwfSkuXG4gICAgICB9XG5cbiAgICAgIGlmICghcHJldlRpbWUgJiYgdGltZSAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGltZSA+PSBwcmV2VGltZSAmJiB0b3RhbFRpbWUgPj0gMCkge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCB0aW1lID49IGNoaWxkLl9zdGFydCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXG4gICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSAtX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gZmxhZyB6VGltZSBhcyBuZWdhdGl2ZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fbGFzdDtcbiAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lOyAvL3doZW4gdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydCBvZiB0aGlzIHRpbWVsaW5lLCB3ZSBtdXN0IHBhc3MgdGhhdCBpbmZvcm1hdGlvbiBkb3duIHRvIHRoZSBjaGlsZCBhbmltYXRpb25zIHNvIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMga25vdyB3aGV0aGVyIHRvIHJlbmRlciB0aGVpciBzdGFydGluZyBvciBlbmRpbmcgdmFsdWVzLlxuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fcHJldjtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCBhZGp1c3RlZFRpbWUgPD0gY2hpbGQuX2VuZCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgKGNoaWxkLl9pbml0dGVkIHx8IGNoaWxkLl9zdGFydEF0KSk7IC8vIGlmIHJldmVydGluZywgd2Ugc2hvdWxkIGFsd2F5cyBmb3JjZSByZW5kZXJzIG9mIGluaXR0ZWQgdHdlZW5zIChidXQgcmVtZW1iZXIgdGhhdCAuZnJvbVRvKCkgb3IgLmZyb20oKSBtYXkgaGF2ZSBhIF9zdGFydEF0IGJ1dCBub3QgX2luaXR0ZWQgeWV0KS4gSWYsIGZvciBleGFtcGxlLCBhIC5mcm9tVG8oKSB0d2VlbiB3aXRoIGEgc3RhZ2dlciAod2hpY2ggY3JlYXRlcyBhbiBpbnRlcm5hbCB0aW1lbGluZSkgZ2V0cyByZXZlcnRlZCBCRUZPUkUgc29tZSBvZiBpdHMgY2hpbGQgdHdlZW5zIHJlbmRlciBmb3IgdGhlIGZpcnN0IHRpbWUsIGl0IG1heSBub3QgcHJvcGVybHkgdHJpZ2dlciB0aGVtIHRvIHJldmVydC5cblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gYWRqdXN0ZWRUaW1lID8gLV90aW55TnVtIDogX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gYWRqdXN0IHpUaW1lIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGF1c2VUd2VlbiAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICBwYXVzZVR3ZWVuLnJlbmRlcih0aW1lID49IHByZXZUaW1lID8gMCA6IC1fdGlueU51bSkuX3pUaW1lID0gdGltZSA+PSBwcmV2VGltZSA/IDEgOiAtMTtcblxuICAgICAgICBpZiAodGhpcy5fdHMpIHtcbiAgICAgICAgICAvL3RoZSBjYWxsYmFjayByZXN1bWVkIHBsYXliYWNrISBTbyBzaW5jZSB3ZSBtYXkgaGF2ZSBoZWxkIGJhY2sgdGhlIHBsYXloZWFkIGR1ZSB0byB3aGVyZSB0aGUgcGF1c2UgaXMgcG9zaXRpb25lZCwgZ28gYWhlYWQgYW5kIGp1bXAgdG8gd2hlcmUgaXQncyBTVVBQT1NFRCB0byBiZSAoaWYgbm8gcGF1c2UgaGFwcGVuZWQpLlxuICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gcHJldlN0YXJ0OyAvL2lmIHRoZSBwYXVzZSB3YXMgYXQgYW4gZWFybGllciB0aW1lIGFuZCB0aGUgdXNlciByZXN1bWVkIGluIHRoZSBjYWxsYmFjaywgaXQgY291bGQgcmVwb3NpdGlvbiB0aGUgdGltZWxpbmUgKGNoYW5naW5nIGl0cyBzdGFydFRpbWUpLCB0aHJvd2luZyB0aGluZ3Mgb2ZmIHNsaWdodGx5LCBzbyB3ZSBtYWtlIHN1cmUgdGhlIF9zdGFydCBkb2Vzbid0IHNoaWZ0LlxuXG4gICAgICAgICAgX3NldEVuZCh0aGlzKTtcblxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIsIHRydWUpO1xuICAgICAgaWYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RUaW1lID49IHRoaXMudG90YWxEdXJhdGlvbigpIHx8ICF0VGltZSAmJiBwcmV2VGltZSkgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnQgfHwgTWF0aC5hYnModGltZVNjYWxlKSAhPT0gTWF0aC5hYnModGhpcy5fdHMpKSBpZiAoIXRoaXMuX2xvY2spIHtcbiAgICAgICAgLy8gcmVtZW1iZXIsIGEgY2hpbGQncyBjYWxsYmFjayBtYXkgYWx0ZXIgdGhpcyB0aW1lbGluZSdzIHBsYXloZWFkIG9yIHRpbWVTY2FsZSB3aGljaCBpcyB3aHkgd2UgbmVlZCB0byBhZGQgc29tZSBvZiB0aGVzZSBjaGVja3MuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgIXREdXIpKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyICYmIHRvdGFsVGltZSA+PSAwID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfaXNOdW1iZXIocG9zaXRpb24pIHx8IChwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uLCBjaGlsZCkpO1xuXG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG4gICAgICBpZiAoX2lzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuYWRkKG9iaiwgcG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZExhYmVsKGNoaWxkLCBwb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcyAhPT0gY2hpbGQgPyBfYWRkVG9UaW1lbGluZSh0aGlzLCBjaGlsZCwgcG9zaXRpb24pIDogdGhpczsgLy9kb24ndCBhbGxvdyBhIHRpbWVsaW5lIHRvIGJlIGFkZGVkIHRvIGl0c2VsZiBhcyBhIGNoaWxkIVxuICB9O1xuXG4gIF9wcm90bzIuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0d2VlbnMgPT09IHZvaWQgMCkge1xuICAgICAgdHdlZW5zID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGltZWxpbmVzID09PSB2b2lkIDApIHtcbiAgICAgIHRpbWVsaW5lcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IC1fYmlnTnVtO1xuICAgIH1cblxuICAgIHZhciBhID0gW10sXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICAgIHR3ZWVucyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVsaW5lcyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIG5lc3RlZCAmJiBhLnB1c2guYXBwbHkoYSwgY2hpbGQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHdlZW5zLCB0aW1lbGluZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuZ2V0Q2hpbGRyZW4oMSwgMSwgMSksXG4gICAgICAgIGkgPSBhbmltYXRpb25zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChhbmltYXRpb25zW2ldLnZhcnMuaWQgPT09IGlkKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShjaGlsZCkge1xuICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMYWJlbChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMua2lsbFR3ZWVuc09mKGNoaWxkKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgY2hpbGQpO1xuXG4gICAgaWYgKGNoaWxkID09PSB0aGlzLl9yZWNlbnQpIHtcbiAgICAgIHRoaXMuX3JlY2VudCA9IHRoaXMuX2xhc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAxO1xuXG4gICAgaWYgKCF0aGlzLl9kcCAmJiB0aGlzLl90cykge1xuICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIHRoZSBnbG9iYWwgdGltZWxpbmUgKG9yIGFueSBvdGhlciB0aGF0IGhhcyBubyBwYXJlbnQgb3IgZGV0YWNoZWQgcGFyZW50KS5cbiAgICAgIHRoaXMuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShfdGlja2VyLnRpbWUgLSAodGhpcy5fdHMgPiAwID8gX3RvdGFsVGltZTIgLyB0aGlzLl90cyA6ICh0aGlzLnRvdGFsRHVyYXRpb24oKSAtIF90b3RhbFRpbWUyKSAvIC10aGlzLl90cykpO1xuICAgIH1cblxuICAgIF9BbmltYXRpb24ucHJvdG90eXBlLnRvdGFsVGltZS5jYWxsKHRoaXMsIF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cyk7XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZExhYmVsID0gZnVuY3Rpb24gYWRkTGFiZWwobGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbHNbbGFiZWxdID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChsYWJlbCkge1xuICAgIGRlbGV0ZSB0aGlzLmxhYmVsc1tsYWJlbF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRQYXVzZSA9IGZ1bmN0aW9uIGFkZFBhdXNlKHBvc2l0aW9uLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjayB8fCBfZW1wdHlGdW5jLCBwYXJhbXMpO1xuICAgIHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuICAgIHRoaXMuX2hhc1BhdXNlID0gMTtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgdCwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZVBhdXNlID0gZnVuY3Rpb24gcmVtb3ZlUGF1c2UocG9zaXRpb24pIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICBwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA9PT0gcG9zaXRpb24gJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIpIHtcbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpLFxuICAgICAgICBpID0gdHdlZW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuICE9PSB0d2VlbnNbaV0gJiYgdHdlZW5zW2ldLmtpbGwodGFyZ2V0cywgcHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0VHdlZW5zT2YgPSBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGlzR2xvYmFsVGltZSA9IF9pc051bWJlcihvbmx5QWN0aXZlKSxcbiAgICAgICAgLy8gYSBudW1iZXIgaXMgaW50ZXJwcmV0ZWQgYXMgYSBnbG9iYWwgdGltZS4gSWYgdGhlIGFuaW1hdGlvbiBzcGFuc1xuICAgIGNoaWxkcmVuO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICBpZiAoX2FycmF5Q29udGFpbnNBbnkoY2hpbGQuX3RhcmdldHMsIHBhcnNlZFRhcmdldHMpICYmIChpc0dsb2JhbFRpbWUgPyAoIV9vdmVyd3JpdGluZ1R3ZWVuIHx8IGNoaWxkLl9pbml0dGVkICYmIGNoaWxkLl90cykgJiYgY2hpbGQuZ2xvYmFsVGltZSgwKSA8PSBvbmx5QWN0aXZlICYmIGNoaWxkLmdsb2JhbFRpbWUoY2hpbGQudG90YWxEdXJhdGlvbigpKSA+IG9ubHlBY3RpdmUgOiAhb25seUFjdGl2ZSB8fCBjaGlsZC5pc0FjdGl2ZSgpKSkge1xuICAgICAgICAgIC8vIG5vdGU6IGlmIHRoaXMgaXMgZm9yIG92ZXJ3cml0aW5nLCBpdCBzaG91bGQgb25seSBiZSBmb3IgdHdlZW5zIHRoYXQgYXJlbid0IHBhdXNlZCBhbmQgYXJlIGluaXR0ZWQuXG4gICAgICAgICAgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoY2hpbGRyZW4gPSBjaGlsZC5nZXRUd2VlbnNPZihwYXJzZWRUYXJnZXRzLCBvbmx5QWN0aXZlKSkubGVuZ3RoKSB7XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlIC0gdGFyZ2V0cygpIG9uIHRpbWVsaW5lc1xuICAvLyB0YXJnZXRzKCkge1xuICAvLyBcdGxldCByZXN1bHQgPSBbXTtcbiAgLy8gXHR0aGlzLmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKHQgPT4gcmVzdWx0LnB1c2goLi4udC50YXJnZXRzKCkpKTtcbiAgLy8gXHRyZXR1cm4gcmVzdWx0LmZpbHRlcigodiwgaSkgPT4gcmVzdWx0LmluZGV4T2YodikgPT09IGkpO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8yLnR3ZWVuVG8gPSBmdW5jdGlvbiB0d2VlblRvKHBvc2l0aW9uLCB2YXJzKSB7XG4gICAgdmFycyA9IHZhcnMgfHwge307XG5cbiAgICB2YXIgdGwgPSB0aGlzLFxuICAgICAgICBlbmRUaW1lID0gX3BhcnNlUG9zaXRpb24odGwsIHBvc2l0aW9uKSxcbiAgICAgICAgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBzdGFydEF0ID0gX3ZhcnMuc3RhcnRBdCxcbiAgICAgICAgX29uU3RhcnQgPSBfdmFycy5vblN0YXJ0LFxuICAgICAgICBvblN0YXJ0UGFyYW1zID0gX3ZhcnMub25TdGFydFBhcmFtcyxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3ZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBpbml0dGVkLFxuICAgICAgICB0d2VlbiA9IFR3ZWVuLnRvKHRsLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgZWFzZTogdmFycy5lYXNlIHx8IFwibm9uZVwiLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgdGltZTogZW5kVGltZSxcbiAgICAgIG92ZXJ3cml0ZTogXCJhdXRvXCIsXG4gICAgICBkdXJhdGlvbjogdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpIHx8IF90aW55TnVtLFxuICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGwucGF1c2UoKTtcblxuICAgICAgICBpZiAoIWluaXR0ZWQpIHtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSk7XG4gICAgICAgICAgdHdlZW4uX2R1ciAhPT0gZHVyYXRpb24gJiYgX3NldER1cmF0aW9uKHR3ZWVuLCBkdXJhdGlvbiwgMCwgMSkucmVuZGVyKHR3ZWVuLl90aW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9vblN0YXJ0ICYmIF9vblN0YXJ0LmFwcGx5KHR3ZWVuLCBvblN0YXJ0UGFyYW1zIHx8IFtdKTsgLy9pbiBjYXNlIHRoZSB1c2VyIGhhZCBhbiBvblN0YXJ0IGluIHRoZSB2YXJzIC0gd2UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgaXQuXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuXG4gICAgcmV0dXJuIGltbWVkaWF0ZVJlbmRlciA/IHR3ZWVuLnJlbmRlcigwKSA6IHR3ZWVuO1xuICB9O1xuXG4gIF9wcm90bzIudHdlZW5Gcm9tVG8gPSBmdW5jdGlvbiB0d2VlbkZyb21Ubyhmcm9tUG9zaXRpb24sIHRvUG9zaXRpb24sIHZhcnMpIHtcbiAgICByZXR1cm4gdGhpcy50d2VlblRvKHRvUG9zaXRpb24sIF9zZXREZWZhdWx0cyh7XG4gICAgICBzdGFydEF0OiB7XG4gICAgICAgIHRpbWU6IF9wYXJzZVBvc2l0aW9uKHRoaXMsIGZyb21Qb3NpdGlvbilcbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZWNlbnQgPSBmdW5jdGlvbiByZWNlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY2VudDtcbiAgfTtcblxuICBfcHJvdG8yLm5leHRMYWJlbCA9IGZ1bmN0aW9uIG5leHRMYWJlbChhZnRlclRpbWUpIHtcbiAgICBpZiAoYWZ0ZXJUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGFmdGVyVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGFmdGVyVGltZSkpO1xuICB9O1xuXG4gIF9wcm90bzIucHJldmlvdXNMYWJlbCA9IGZ1bmN0aW9uIHByZXZpb3VzTGFiZWwoYmVmb3JlVGltZSkge1xuICAgIGlmIChiZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGJlZm9yZVRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBiZWZvcmVUaW1lKSwgMSk7XG4gIH07XG5cbiAgX3Byb3RvMi5jdXJyZW50TGFiZWwgPSBmdW5jdGlvbiBjdXJyZW50TGFiZWwodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzTGFiZWwodGhpcy5fdGltZSArIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8yLnNoaWZ0Q2hpbGRyZW4gPSBmdW5jdGlvbiBzaGlmdENoaWxkcmVuKGFtb3VudCwgYWRqdXN0TGFiZWxzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGxhYmVscyA9IHRoaXMubGFiZWxzLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgY2hpbGQuX3N0YXJ0ICs9IGFtb3VudDtcbiAgICAgICAgY2hpbGQuX2VuZCArPSBhbW91bnQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKGFkanVzdExhYmVscykge1xuICAgICAgZm9yIChwIGluIGxhYmVscykge1xuICAgICAgICBpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgICBsYWJlbHNbcF0gKz0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBjaGlsZC5pbnZhbGlkYXRlKHNvZnQpO1xuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gX0FuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICB9O1xuXG4gIF9wcm90bzIuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihpbmNsdWRlTGFiZWxzKSB7XG4gICAgaWYgKGluY2x1ZGVMYWJlbHMgPT09IHZvaWQgMCkge1xuICAgICAgaW5jbHVkZUxhYmVscyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIG5leHQ7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIHRoaXMucmVtb3ZlKGNoaWxkKTtcbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl9kcCAmJiAodGhpcy5fdGltZSA9IHRoaXMuX3RUaW1lID0gdGhpcy5fcFRpbWUgPSAwKTtcbiAgICBpbmNsdWRlTGFiZWxzICYmICh0aGlzLmxhYmVscyA9IHt9KTtcbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIHZhciBtYXggPSAwLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgY2hpbGQgPSBzZWxmLl9sYXN0LFxuICAgICAgICBwcmV2U3RhcnQgPSBfYmlnTnVtLFxuICAgICAgICBwcmV2LFxuICAgICAgICBzdGFydCxcbiAgICAgICAgcGFyZW50O1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBzZWxmLnRpbWVTY2FsZSgoc2VsZi5fcmVwZWF0IDwgMCA/IHNlbGYuZHVyYXRpb24oKSA6IHNlbGYudG90YWxEdXJhdGlvbigpKSAvIChzZWxmLnJldmVyc2VkKCkgPyAtdmFsdWUgOiB2YWx1ZSkpO1xuICAgIH1cblxuICAgIGlmIChzZWxmLl9kaXJ0eSkge1xuICAgICAgcGFyZW50ID0gc2VsZi5wYXJlbnQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBwcmV2ID0gY2hpbGQuX3ByZXY7IC8vcmVjb3JkIGl0IGhlcmUgaW4gY2FzZSB0aGUgdHdlZW4gY2hhbmdlcyBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2UuLi5cblxuICAgICAgICBjaGlsZC5fZGlydHkgJiYgY2hpbGQudG90YWxEdXJhdGlvbigpOyAvL2NvdWxkIGNoYW5nZSB0aGUgdHdlZW4uX3N0YXJ0VGltZSwgc28gbWFrZSBzdXJlIHRoZSBhbmltYXRpb24ncyBjYWNoZSBpcyBjbGVhbiBiZWZvcmUgYW5hbHl6aW5nIGl0LlxuXG4gICAgICAgIHN0YXJ0ID0gY2hpbGQuX3N0YXJ0O1xuXG4gICAgICAgIGlmIChzdGFydCA+IHByZXZTdGFydCAmJiBzZWxmLl9zb3J0ICYmIGNoaWxkLl90cyAmJiAhc2VsZi5fbG9jaykge1xuICAgICAgICAgIC8vaW4gY2FzZSBvbmUgb2YgdGhlIHR3ZWVucyBzaGlmdGVkIG91dCBvZiBvcmRlciwgaXQgbmVlZHMgdG8gYmUgcmUtaW5zZXJ0ZWQgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2VcbiAgICAgICAgICBzZWxmLl9sb2NrID0gMTsgLy9wcmV2ZW50IGVuZGxlc3MgcmVjdXJzaXZlIGNhbGxzIC0gdGhlcmUgYXJlIG1ldGhvZHMgdGhhdCBnZXQgdHJpZ2dlcmVkIHRoYXQgY2hlY2sgZHVyYXRpb24vdG90YWxEdXJhdGlvbiB3aGVuIHdlIGFkZCgpLlxuXG4gICAgICAgICAgX2FkZFRvVGltZWxpbmUoc2VsZiwgY2hpbGQsIHN0YXJ0IC0gY2hpbGQuX2RlbGF5LCAxKS5fbG9jayA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnQgPCAwICYmIGNoaWxkLl90cykge1xuICAgICAgICAgIC8vY2hpbGRyZW4gYXJlbid0IGFsbG93ZWQgdG8gaGF2ZSBuZWdhdGl2ZSBzdGFydFRpbWVzIHVubGVzcyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCBzbyBhZGp1c3QgaGVyZSBpZiBvbmUgaXMgZm91bmQuXG4gICAgICAgICAgbWF4IC09IHN0YXJ0O1xuXG4gICAgICAgICAgaWYgKCFwYXJlbnQgJiYgIXNlbGYuX2RwIHx8IHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0YXJ0ICs9IHN0YXJ0IC8gc2VsZi5fdHM7XG4gICAgICAgICAgICBzZWxmLl90aW1lIC09IHN0YXJ0O1xuICAgICAgICAgICAgc2VsZi5fdFRpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5zaGlmdENoaWxkcmVuKC1zdGFydCwgZmFsc2UsIC0xZTk5OSk7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkLl9lbmQgPiBtYXggJiYgY2hpbGQuX3RzICYmIChtYXggPSBjaGlsZC5fZW5kKTtcbiAgICAgICAgY2hpbGQgPSBwcmV2O1xuICAgICAgfVxuXG4gICAgICBfc2V0RHVyYXRpb24oc2VsZiwgc2VsZiA9PT0gX2dsb2JhbFRpbWVsaW5lICYmIHNlbGYuX3RpbWUgPiBtYXggPyBzZWxmLl90aW1lIDogbWF4LCAxLCAxKTtcblxuICAgICAgc2VsZi5fZGlydHkgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLl90RHVyO1xuICB9O1xuXG4gIFRpbWVsaW5lLnVwZGF0ZVJvb3QgPSBmdW5jdGlvbiB1cGRhdGVSb290KHRpbWUpIHtcbiAgICBpZiAoX2dsb2JhbFRpbWVsaW5lLl90cykge1xuICAgICAgX2xhenlTYWZlUmVuZGVyKF9nbG9iYWxUaW1lbGluZSwgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZSwgX2dsb2JhbFRpbWVsaW5lKSk7XG5cbiAgICAgIF9sYXN0UmVuZGVyZWRGcmFtZSA9IF90aWNrZXIuZnJhbWU7XG4gICAgfVxuXG4gICAgaWYgKF90aWNrZXIuZnJhbWUgPj0gX25leHRHQ0ZyYW1lKSB7XG4gICAgICBfbmV4dEdDRnJhbWUgKz0gX2NvbmZpZy5hdXRvU2xlZXAgfHwgMTIwO1xuICAgICAgdmFyIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcbiAgICAgIGlmICghY2hpbGQgfHwgIWNoaWxkLl90cykgaWYgKF9jb25maWcuYXV0b1NsZWVwICYmIF90aWNrZXIuX2xpc3RlbmVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHdoaWxlIChjaGlsZCAmJiAhY2hpbGQuX3RzKSB7XG4gICAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkIHx8IF90aWNrZXIuc2xlZXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVsaW5lO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVGltZWxpbmUucHJvdG90eXBlLCB7XG4gIF9sb2NrOiAwLFxuICBfaGFzUGF1c2U6IDAsXG4gIF9mb3JjaW5nOiAwXG59KTtcblxudmFyIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKSB7XG4gIC8vbm90ZTogd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZywgbnVsbCwgc2V0dGVyKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnROdW1zLFxuICAgICAgY29sb3IsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgaGFzUmFuZG9tLFxuICAgICAgYTtcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvL2Vuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoaGFzUmFuZG9tID0gfmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gIH1cblxuICBpZiAoc3RyaW5nRmlsdGVyKSB7XG4gICAgYSA9IFtzdGFydCwgZW5kXTtcbiAgICBzdHJpbmdGaWx0ZXIoYSwgdGFyZ2V0LCBwcm9wKTsgLy9wYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLlxuXG4gICAgc3RhcnQgPSBhWzBdO1xuICAgIGVuZCA9IGFbMV07XG4gIH1cblxuICBzdGFydE51bXMgPSBzdGFydC5tYXRjaChfY29tcGxleFN0cmluZ051bUV4cCkgfHwgW107XG5cbiAgd2hpbGUgKHJlc3VsdCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmV4ZWMoZW5kKSkge1xuICAgIGVuZE51bSA9IHJlc3VsdFswXTtcbiAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiKSB7XG4gICAgICBjb2xvciA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGVuZE51bSAhPT0gc3RhcnROdW1zW21hdGNoSW5kZXgrK10pIHtcbiAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydE51bXNbbWF0Y2hJbmRleCAtIDFdKSB8fCAwOyAvL3RoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cbiAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgYzogZW5kTnVtLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgZW5kTnVtKSAtIHN0YXJ0TnVtIDogcGFyc2VGbG9hdChlbmROdW0pIC0gc3RhcnROdW0sXG4gICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCA/IE1hdGgucm91bmQgOiAwXG4gICAgICB9O1xuICAgICAgaW5kZXggPSBfY29tcGxleFN0cmluZ051bUV4cC5sYXN0SW5kZXg7XG4gICAgfVxuICB9XG5cbiAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuXG4gIHB0LmZwID0gZnVuY1BhcmFtO1xuXG4gIGlmIChfcmVsRXhwLnRlc3QoZW5kKSB8fCBoYXNSYW5kb20pIHtcbiAgICBwdC5lID0gMDsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuICB9XG5cbiAgdGhpcy5fcHQgPSBwdDsgLy9zdGFydCB0aGUgbGlua2VkIGxpc3Qgd2l0aCB0aGlzIG5ldyBQcm9wVHdlZW4uIFJlbWVtYmVyLCB3ZSBjYWxsIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodHdlZW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2FkZFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBpbmRleCwgdGFyZ2V0cywgbW9kaWZpZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtLCBvcHRpb25hbCkge1xuICBfaXNGdW5jdGlvbihlbmQpICYmIChlbmQgPSBlbmQoaW5kZXggfHwgMCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG4gIHZhciBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcF0sXG4gICAgICBwYXJzZWRTdGFydCA9IHN0YXJ0ICE9PSBcImdldFwiID8gc3RhcnQgOiAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IGN1cnJlbnRWYWx1ZSA6IGZ1bmNQYXJhbSA/IHRhcmdldFtwcm9wLmluZGV4T2YoXCJzZXRcIikgfHwgIV9pc0Z1bmN0aW9uKHRhcmdldFtcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKSA/IHByb3AgOiBcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKGZ1bmNQYXJhbSkgOiB0YXJnZXRbcHJvcF0oKSxcbiAgICAgIHNldHRlciA9ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gX3NldHRlclBsYWluIDogZnVuY1BhcmFtID8gX3NldHRlckZ1bmNXaXRoUGFyYW0gOiBfc2V0dGVyRnVuYyxcbiAgICAgIHB0O1xuXG4gIGlmIChfaXNTdHJpbmcoZW5kKSkge1xuICAgIGlmICh+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICAgIH1cblxuICAgIGlmIChlbmQuY2hhckF0KDEpID09PSBcIj1cIikge1xuICAgICAgcHQgPSBfcGFyc2VSZWxhdGl2ZShwYXJzZWRTdGFydCwgZW5kKSArIChnZXRVbml0KHBhcnNlZFN0YXJ0KSB8fCAwKTtcblxuICAgICAgaWYgKHB0IHx8IHB0ID09PSAwKSB7XG4gICAgICAgIC8vIHRvIGF2b2lkIGlzTmFOLCBsaWtlIGlmIHNvbWVvbmUgcGFzc2VzIGluIGEgdmFsdWUgbGlrZSBcIiE9IHdoYXRldmVyXCJcbiAgICAgICAgZW5kID0gcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFvcHRpb25hbCB8fCBwYXJzZWRTdGFydCAhPT0gZW5kIHx8IF9mb3JjZUFsbFByb3BUd2VlbnMpIHtcbiAgICBpZiAoIWlzTmFOKHBhcnNlZFN0YXJ0ICogZW5kKSAmJiBlbmQgIT09IFwiXCIpIHtcbiAgICAgIC8vIGZ1biBmYWN0OiBhbnkgbnVtYmVyIG11bHRpcGxpZWQgYnkgXCJcIiBpcyBldmFsdWF0ZWQgYXMgdGhlIG51bWJlciAwIVxuICAgICAgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIHByb3AsICtwYXJzZWRTdGFydCB8fCAwLCBlbmQgLSAocGFyc2VkU3RhcnQgfHwgMCksIHR5cGVvZiBjdXJyZW50VmFsdWUgPT09IFwiYm9vbGVhblwiID8gX3JlbmRlckJvb2xlYW4gOiBfcmVuZGVyUGxhaW4sIDAsIHNldHRlcik7XG4gICAgICBmdW5jUGFyYW0gJiYgKHB0LmZwID0gZnVuY1BhcmFtKTtcbiAgICAgIG1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0aGlzLCB0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRoaXMuX3B0ID0gcHQ7XG4gICAgfVxuXG4gICAgIWN1cnJlbnRWYWx1ZSAmJiAhKHByb3AgaW4gdGFyZ2V0KSAmJiBfbWlzc2luZ1BsdWdpbihwcm9wLCBlbmQpO1xuICAgIHJldHVybiBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHRoaXMsIHRhcmdldCwgcHJvcCwgcGFyc2VkU3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIgfHwgX2NvbmZpZy5zdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSk7XG4gIH1cbn0sXG4gICAgLy9jcmVhdGVzIGEgY29weSBvZiB0aGUgdmFycyBvYmplY3QgYW5kIHByb2Nlc3NlcyBhbnkgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIChwdXR0aW5nIHRoZSByZXN1bHRpbmcgdmFsdWVzIGRpcmVjdGx5IGludG8gdGhlIGNvcHkpIGFzIHdlbGwgYXMgc3RyaW5ncyB3aXRoIFwicmFuZG9tKClcIiBpbiB0aGVtLiBJdCBkb2VzIE5PVCBwcm9jZXNzIHJlbGF0aXZlIHZhbHVlcy5cbl9wcm9jZXNzVmFycyA9IGZ1bmN0aW9uIF9wcm9jZXNzVmFycyh2YXJzLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2Vlbikge1xuICBfaXNGdW5jdGlvbih2YXJzKSAmJiAodmFycyA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpO1xuXG4gIGlmICghX2lzT2JqZWN0KHZhcnMpIHx8IHZhcnMuc3R5bGUgJiYgdmFycy5ub2RlVHlwZSB8fCBfaXNBcnJheSh2YXJzKSB8fCBfaXNUeXBlZEFycmF5KHZhcnMpKSB7XG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YXJzKSA/IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykgOiB2YXJzO1xuICB9XG5cbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICBjb3B5W3BdID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnNbcF0sIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfY2hlY2tQbHVnaW4gPSBmdW5jdGlvbiBfY2hlY2tQbHVnaW4ocHJvcGVydHksIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHZhciBwbHVnaW4sIHB0LCBwdExvb2t1cCwgaTtcblxuICBpZiAoX3BsdWdpbnNbcHJvcGVydHldICYmIChwbHVnaW4gPSBuZXcgX3BsdWdpbnNbcHJvcGVydHldKCkpLmluaXQodGFyZ2V0LCBwbHVnaW4ucmF3VmFycyA/IHZhcnNbcHJvcGVydHldIDogX3Byb2Nlc3NWYXJzKHZhcnNbcHJvcGVydHldLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2VlbiksIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgaWYgKHR3ZWVuICE9PSBfcXVpY2tUd2Vlbikge1xuICAgICAgcHRMb29rdXAgPSB0d2Vlbi5fcHRMb29rdXBbdHdlZW4uX3RhcmdldHMuaW5kZXhPZih0YXJnZXQpXTsgLy9ub3RlOiB3ZSBjYW4ndCB1c2UgdHdlZW4uX3B0TG9va3VwW2luZGV4XSBiZWNhdXNlIGZvciBzdGFnZ2VyZWQgdHdlZW5zLCB0aGUgaW5kZXggZnJvbSB0aGUgZnVsbFRhcmdldHMgYXJyYXkgd29uJ3QgbWF0Y2ggd2hhdCBpdCBpcyBpbiBlYWNoIGluZGl2aWR1YWwgdHdlZW4gdGhhdCBzcGF3bnMgZnJvbSB0aGUgc3RhZ2dlci5cblxuICAgICAgaSA9IHBsdWdpbi5fcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHB0TG9va3VwW3BsdWdpbi5fcHJvcHNbaV1dID0gcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBsdWdpbjtcbn0sXG4gICAgX292ZXJ3cml0aW5nVHdlZW4sXG4gICAgLy9zdG9yZSBhIHJlZmVyZW5jZSB0ZW1wb3JhcmlseSBzbyB3ZSBjYW4gYXZvaWQgb3ZlcndyaXRpbmcgaXRzZWxmLlxuX2ZvcmNlQWxsUHJvcFR3ZWVucyxcbiAgICBfaW5pdFR3ZWVuID0gZnVuY3Rpb24gX2luaXRUd2Vlbih0d2VlbiwgdGltZSwgdFRpbWUpIHtcbiAgdmFyIHZhcnMgPSB0d2Vlbi52YXJzLFxuICAgICAgZWFzZSA9IHZhcnMuZWFzZSxcbiAgICAgIHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG4gICAgICBpbW1lZGlhdGVSZW5kZXIgPSB2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgIGxhenkgPSB2YXJzLmxhenksXG4gICAgICBvblVwZGF0ZSA9IHZhcnMub25VcGRhdGUsXG4gICAgICBvblVwZGF0ZVBhcmFtcyA9IHZhcnMub25VcGRhdGVQYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlID0gdmFycy5jYWxsYmFja1Njb3BlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICBwcmV2U3RhcnRBdC5felRpbWUgPCAwICYmIHByZXZTdGFydEF0LnByb2dyZXNzKDEpOyAvLyBpbiBjYXNlIGl0J3MgYSBsYXp5IHN0YXJ0QXQgdGhhdCBoYXNuJ3QgcmVuZGVyZWQgeWV0LlxuXG4gICAgICB0aW1lIDwgMCAmJiBydW5CYWNrd2FyZHMgJiYgaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0ID8gcHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSA6IHByZXZTdGFydEF0LnJldmVydChydW5CYWNrd2FyZHMgJiYgZHVyID8gX3JldmVydENvbmZpZ05vS2lsbCA6IF9zdGFydEF0UmV2ZXJ0Q29uZmlnKTsgLy8gaWYgaXQncyBhIFwic3RhcnRBdFwiIChub3QgXCJmcm9tKClcIiBvciBydW5CYWNrd2FyZHM6IHRydWUpLCB3ZSBvbmx5IG5lZWQgdG8gZG8gYSBzaGFsbG93IHJldmVydCAoa2VlcCB0cmFuc2Zvcm1zIGNhY2hlZCBpbiBDU1NQbHVnaW4pXG4gICAgICAvLyBkb24ndCBqdXN0IF9yZW1vdmVGcm9tUGFyZW50KHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpIGJlY2F1c2UgdGhhdCdsbCBsZWF2ZSBpbmxpbmUgc3R5bGVzLiBXZSdyZSBjcmVhdGluZyBhIG5ldyBfc3RhcnRBdCBmb3IgXCJzdGFydEF0XCIgdHdlZW5zIHRoYXQgcmUtY2FwdHVyZSB0aGluZ3MgdG8gZW5zdXJlIHRoYXQgaWYgdGhlIHByZS10d2VlbiB2YWx1ZXMgY2hhbmdlZCBzaW5jZSB0aGUgdHdlZW4gd2FzIGNyZWF0ZWQsIHRoZXkncmUgcmVjb3JkZWQuXG5cbiAgICAgIHByZXZTdGFydEF0Ll9sYXp5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRBdCkge1xuICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGxhenk6IF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICBzdGFydEF0OiBudWxsLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgb25VcGRhdGU6IG9uVXBkYXRlLFxuICAgICAgICBvblVwZGF0ZVBhcmFtczogb25VcGRhdGVQYXJhbXMsXG4gICAgICAgIGNhbGxiYWNrU2NvcGU6IGNhbGxiYWNrU2NvcGUsXG4gICAgICAgIHN0YWdnZXI6IDBcbiAgICAgIH0sIHN0YXJ0QXQpKSk7IC8vY29weSB0aGUgcHJvcGVydGllcy92YWx1ZXMgaW50byBhIG5ldyBvYmplY3QgdG8gYXZvaWQgY29sbGlzaW9ucywgbGlrZSB2YXIgdG8gPSB7eDowfSwgZnJvbSA9IHt4OjUwMH07IHRpbWVsaW5lLmZyb21UbyhlLCBmcm9tLCB0bykuZnJvbVRvKGUsIHRvLCBmcm9tKTtcblxuXG4gICAgICB0d2Vlbi5fc3RhcnRBdC5fZHAgPSAwOyAvLyBkb24ndCBhbGxvdyBpdCB0byBnZXQgcHV0IGJhY2sgaW50byByb290IHRpbWVsaW5lISBMaWtlIHdoZW4gcmV2ZXJ0KCkgaXMgY2FsbGVkIGFuZCB0b3RhbFRpbWUoKSBnZXRzIHNldC5cblxuICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgfHwgIWltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCkgJiYgdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpOyAvLyByYXJlIGVkZ2UgY2FzZSwgbGlrZSBpZiBhIHJlbmRlciBpcyBmb3JjZWQgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiBvZiBhIG5vbi1pbml0dGVkIHR3ZWVuLlxuXG4gICAgICBpZiAoaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgIGlmIChkdXIgJiYgdGltZSA8PSAwICYmIHRUaW1lIDw9IDApIHtcbiAgICAgICAgICAvLyBjaGVjayB0VGltZSBoZXJlIGJlY2F1c2UgaW4gdGhlIGNhc2Ugb2YgYSB5b3lvIHR3ZWVuIHdob3NlIHBsYXloZWFkIGdldHMgcHVzaGVkIHRvIHRoZSBlbmQgbGlrZSB0d2Vlbi5wcm9ncmVzcygxKSwgd2Ugc2hvdWxkIGFsbG93IGl0IHRocm91Z2ggc28gdGhhdCB0aGUgb25Db21wbGV0ZSBnZXRzIGZpcmVkIHByb3Blcmx5LlxuICAgICAgICAgIHRpbWUgJiYgKHR3ZWVuLl96VGltZSA9IHRpbWUpO1xuICAgICAgICAgIHJldHVybjsgLy93ZSBza2lwIGluaXRpYWxpemF0aW9uIGhlcmUgc28gdGhhdCBvdmVyd3JpdGluZyBkb2Vzbid0IG9jY3VyIHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMuIE90aGVyd2lzZSwgaWYgeW91IGNyZWF0ZSBzZXZlcmFsIGltbWVkaWF0ZVJlbmRlcjp0cnVlIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQvcHJvcGVydGllcyB0byBkcm9wIGludG8gYSBUaW1lbGluZSwgdGhlIGxhc3Qgb25lIGNyZWF0ZWQgd291bGQgb3ZlcndyaXRlIHRoZSBmaXJzdCBvbmVzIGJlY2F1c2UgdGhleSBkaWRuJ3QgZ2V0IHBsYWNlZCBpbnRvIHRoZSB0aW1lbGluZSB5ZXQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXIgb2NjdXJzIGFuZCBraWNrcyBpbiBvdmVyd3JpdGluZy5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocnVuQmFja3dhcmRzICYmIGR1cikge1xuICAgICAgLy9mcm9tKCkgdHdlZW5zIG11c3QgYmUgaGFuZGxlZCB1bmlxdWVseTogdGhlaXIgYmVnaW5uaW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkIGJ1dCB3ZSBkb24ndCB3YW50IG92ZXJ3cml0aW5nIHRvIG9jY3VyIHlldCAod2hlbiB0aW1lIGlzIHN0aWxsIDApLiBXYWl0IHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMgYmVmb3JlIGRvaW5nIGFsbCB0aGUgcm91dGluZXMgbGlrZSBvdmVyd3JpdGluZy4gQXQgdGhhdCB0aW1lLCB3ZSBzaG91bGQgcmVuZGVyIGF0IHRoZSBFTkQgb2YgdGhlIHR3ZWVuIHRvIGVuc3VyZSB0aGF0IHRoaW5ncyBpbml0aWFsaXplIGNvcnJlY3RseSAocmVtZW1iZXIsIGZyb20oKSB0d2VlbnMgZ28gYmFja3dhcmRzKVxuICAgICAgaWYgKCFwcmV2U3RhcnRBdCkge1xuICAgICAgICB0aW1lICYmIChpbW1lZGlhdGVSZW5kZXIgPSBmYWxzZSk7IC8vaW4gcmFyZSBjYXNlcyAobGlrZSBpZiBhIGZyb20oKSB0d2VlbiBydW5zIGFuZCB0aGVuIGlzIGludmFsaWRhdGUoKS1lZCksIGltbWVkaWF0ZVJlbmRlciBjb3VsZCBiZSB0cnVlIGJ1dCB0aGUgaW5pdGlhbCBmb3JjZWQtcmVuZGVyIGdldHMgc2tpcHBlZCwgc28gdGhlcmUncyBubyBuZWVkIHRvIGZvcmNlIHRoZSByZW5kZXIgaW4gdGhpcyBjb250ZXh0IHdoZW4gdGhlIF90aW1lIGlzIGdyZWF0ZXIgdGhhbiAwXG5cbiAgICAgICAgcCA9IF9zZXREZWZhdWx0cyh7XG4gICAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgICBkYXRhOiBcImlzRnJvbVN0YXJ0XCIsXG4gICAgICAgICAgLy93ZSB0YWcgdGhlIHR3ZWVuIHdpdGggYXMgXCJpc0Zyb21TdGFydFwiIHNvIHRoYXQgaWYgW2luc2lkZSBhIHBsdWdpbl0gd2UgbmVlZCB0byBvbmx5IGRvIHNvbWV0aGluZyBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2Vlbiwgd2UgaGF2ZSBhIHdheSBvZiBpZGVudGlmeWluZyB0aGlzIHR3ZWVuIGFzIG1lcmVseSB0aGUgb25lIHRoYXQncyBzZXR0aW5nIHRoZSBiZWdpbm5pbmcgdmFsdWVzIGZvciBhIFwiZnJvbSgpXCIgdHdlZW4uIEZvciBleGFtcGxlLCBjbGVhclByb3BzIGluIENTU1BsdWdpbiBzaG91bGQgb25seSBnZXQgYXBwbGllZCBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2VlbiBhbmQgd2l0aG91dCB0aGlzIHRhZywgZnJvbSguLi57aGVpZ2h0OjEwMCwgY2xlYXJQcm9wczpcImhlaWdodFwiLCBkZWxheToxfSkgd291bGQgd2lwZSB0aGUgaGVpZ2h0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHR3ZWVuIGFuZCBhZnRlciAxIHNlY29uZCwgaXQnZCBraWNrIGJhY2sgaW4uXG4gICAgICAgICAgbGF6eTogaW1tZWRpYXRlUmVuZGVyICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICAgIC8vemVyby1kdXJhdGlvbiB0d2VlbnMgcmVuZGVyIGltbWVkaWF0ZWx5IGJ5IGRlZmF1bHQsIGJ1dCBpZiB3ZSdyZSBub3Qgc3BlY2lmaWNhbGx5IGluc3RydWN0ZWQgdG8gcmVuZGVyIHRoaXMgdHdlZW4gaW1tZWRpYXRlbHksIHdlIHNob3VsZCBza2lwIHRoaXMgYW5kIG1lcmVseSBfaW5pdCgpIHRvIHJlY29yZCB0aGUgc3RhcnRpbmcgdmFsdWVzIChyZW5kZXJpbmcgdGhlbSBpbW1lZGlhdGVseSB3b3VsZCBwdXNoIHRoZW0gdG8gY29tcGxldGlvbiB3aGljaCBpcyB3YXN0ZWZ1bCBpbiB0aGF0IGNhc2UgLSB3ZSdkIGhhdmUgdG8gcmVuZGVyKC0xKSBpbW1lZGlhdGVseSBhZnRlcilcbiAgICAgICAgICBzdGFnZ2VyOiAwLFxuICAgICAgICAgIHBhcmVudDogcGFyZW50IC8vZW5zdXJlcyB0aGF0IG5lc3RlZCB0d2VlbnMgdGhhdCBoYWQgYSBzdGFnZ2VyIGFyZSBoYW5kbGVkIHByb3Blcmx5LCBsaWtlIGdzYXAuZnJvbShcIi5jbGFzc1wiLCB7eTpnc2FwLnV0aWxzLndyYXAoWy0xMDAsMTAwXSl9KVxuXG4gICAgICAgIH0sIGNsZWFuVmFycyk7XG4gICAgICAgIGhhcm5lc3NWYXJzICYmIChwW2hhcm5lc3MucHJvcF0gPSBoYXJuZXNzVmFycyk7IC8vIGluIGNhc2Ugc29tZW9uZSBkb2VzIHNvbWV0aGluZyBsaWtlIC5mcm9tKC4uLiwge2Nzczp7fX0pXG5cbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgcCkpO1xuXG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhXG5cbiAgICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKTtcbiAgICAgICAgdHdlZW4uX3pUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoIWltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICAgIF9pbml0VHdlZW4odHdlZW4uX3N0YXJ0QXQsIF90aW55TnVtLCBfdGlueU51bSk7IC8vZW5zdXJlcyB0aGF0IHRoZSBpbml0aWFsIHZhbHVlcyBhcmUgcmVjb3JkZWRcblxuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHdlZW4uX3B0ID0gdHdlZW4uX3B0Q2FjaGUgPSAwO1xuICAgIGxhenkgPSBkdXIgJiYgX2lzTm90RmFsc2UobGF6eSkgfHwgbGF6eSAmJiAhZHVyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRhcmdldCA9IHRhcmdldHNbaV07XG4gICAgICBnc0RhdGEgPSB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModGFyZ2V0cylbaV0uX2dzYXA7XG4gICAgICB0d2Vlbi5fcHRMb29rdXBbaV0gPSBwdExvb2t1cCA9IHt9O1xuICAgICAgX2xhenlMb29rdXBbZ3NEYXRhLmlkXSAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pZiBvdGhlciB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0IGhhdmUgcmVjZW50bHkgaW5pdHRlZCBidXQgaGF2ZW4ndCByZW5kZXJlZCB5ZXQsIHdlJ3ZlIGdvdCB0byBmb3JjZSB0aGUgcmVuZGVyIHNvIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcmUgY29ycmVjdCAoaW1hZ2luZSBwb3B1bGF0aW5nIGEgdGltZWxpbmUgd2l0aCBhIGJ1bmNoIG9mIHNlcXVlbnRpYWwgdHdlZW5zIGFuZCB0aGVuIGp1bXBpbmcgdG8gdGhlIGVuZClcblxuICAgICAgaW5kZXggPSBmdWxsVGFyZ2V0cyA9PT0gdGFyZ2V0cyA/IGkgOiBmdWxsVGFyZ2V0cy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGlmIChoYXJuZXNzICYmIChwbHVnaW4gPSBuZXcgaGFybmVzcygpKS5pbml0KHRhcmdldCwgaGFybmVzc1ZhcnMgfHwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIGZ1bGxUYXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwbHVnaW4ubmFtZSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgICAgIHBsdWdpbi5fcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHB0TG9va3VwW25hbWVdID0gcHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXJuZXNzIHx8IGhhcm5lc3NWYXJzKSB7XG4gICAgICAgIGZvciAocCBpbiBjbGVhblZhcnMpIHtcbiAgICAgICAgICBpZiAoX3BsdWdpbnNbcF0gJiYgKHBsdWdpbiA9IF9jaGVja1BsdWdpbihwLCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCBmdWxsVGFyZ2V0cykpKSB7XG4gICAgICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB0TG9va3VwW3BdID0gcHQgPSBfYWRkUHJvcFR3ZWVuLmNhbGwodHdlZW4sIHRhcmdldCwgcCwgXCJnZXRcIiwgY2xlYW5WYXJzW3BdLCBpbmRleCwgZnVsbFRhcmdldHMsIDAsIHZhcnMuc3RyaW5nRmlsdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHdlZW4uX29wICYmIHR3ZWVuLl9vcFtpXSAmJiB0d2Vlbi5raWxsKHRhcmdldCwgdHdlZW4uX29wW2ldKTtcblxuICAgICAgaWYgKGF1dG9PdmVyd3JpdGUgJiYgdHdlZW4uX3B0KSB7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gdHdlZW47XG5cbiAgICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXQsIHB0TG9va3VwLCB0d2Vlbi5nbG9iYWxUaW1lKHRpbWUpKTsgLy8gbWFrZSBzdXJlIHRoZSBvdmVyd3JpdGluZyBkb2Vzbid0IG92ZXJ3cml0ZSBUSElTIHR3ZWVuISEhXG5cblxuICAgICAgICBvdmVyd3JpdHRlbiA9ICF0d2Vlbi5wYXJlbnQ7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICAgIH1cblxuICAgICAgdHdlZW4uX3B0ICYmIGxhenkgJiYgKF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gPSAxKTtcbiAgICB9XG5cbiAgICBoYXNQcmlvcml0eSAmJiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHR3ZWVuKTtcbiAgICB0d2Vlbi5fb25Jbml0ICYmIHR3ZWVuLl9vbkluaXQodHdlZW4pOyAvL3BsdWdpbnMgbGlrZSBSb3VuZFByb3BzIG11c3Qgd2FpdCB1bnRpbCBBTEwgb2YgdGhlIFByb3BUd2VlbnMgYXJlIGluc3RhbnRpYXRlZC4gSW4gdGhlIHBsdWdpbidzIGluaXQoKSBmdW5jdGlvbiwgaXQgc2V0cyB0aGUgX29uSW5pdCBvbiB0aGUgdHdlZW4gaW5zdGFuY2UuIE1heSBub3QgYmUgcHJldHR5L2ludHVpdGl2ZSwgYnV0IGl0J3MgZmFzdCBhbmQga2VlcHMgZmlsZSBzaXplIGRvd24uXG4gIH1cblxuICB0d2Vlbi5fb25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgdHdlZW4uX2luaXR0ZWQgPSAoIXR3ZWVuLl9vcCB8fCB0d2Vlbi5fcHQpICYmICFvdmVyd3JpdHRlbjsgLy8gaWYgb3ZlcndyaXR0ZW5Qcm9wcyByZXN1bHRlZCBpbiB0aGUgZW50aXJlIHR3ZWVuIGJlaW5nIGtpbGxlZCwgZG8gTk9UIGZsYWcgaXQgYXMgaW5pdHRlZCBvciBlbHNlIGl0IG1heSByZW5kZXIgZm9yIG9uZSB0aWNrLlxuXG4gIGtleWZyYW1lcyAmJiB0aW1lIDw9IDAgJiYgdGwucmVuZGVyKF9iaWdOdW0sIHRydWUsIHRydWUpOyAvLyBpZiB0aGVyZSdzIGEgMCUga2V5ZnJhbWUsIGl0J2xsIHJlbmRlciBpbiB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBmb3IgYW55IHN0YWdnZXJlZC9kZWxheWVkIGFuaW1hdGlvbnMgdGh1cyB3aGVuIHRoZSBmb2xsb3dpbmcgdHdlZW4gaW5pdGlhbGl6ZXMsIGl0J2xsIHVzZSB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBpbnN0ZWFkIG9mIHRoZSBcImFmdGVyXCIgc3RhdGUgYXMgdGhlIGluaXRpYWwgdmFsdWVzLlxufSxcbiAgICBfdXBkYXRlUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF91cGRhdGVQcm9wVHdlZW5zKHR3ZWVuLCBwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHJhdGlvLCB0aW1lKSB7XG4gIHZhciBwdENhY2hlID0gKHR3ZWVuLl9wdCAmJiB0d2Vlbi5fcHRDYWNoZSB8fCAodHdlZW4uX3B0Q2FjaGUgPSB7fSkpW3Byb3BlcnR5XSxcbiAgICAgIHB0LFxuICAgICAgcm9vdFBULFxuICAgICAgbG9va3VwLFxuICAgICAgaTtcblxuICBpZiAoIXB0Q2FjaGUpIHtcbiAgICBwdENhY2hlID0gdHdlZW4uX3B0Q2FjaGVbcHJvcGVydHldID0gW107XG4gICAgbG9va3VwID0gdHdlZW4uX3B0TG9va3VwO1xuICAgIGkgPSB0d2Vlbi5fdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IGxvb2t1cFtpXVtwcm9wZXJ0eV07XG5cbiAgICAgIGlmIChwdCAmJiBwdC5kICYmIHB0LmQuX3B0KSB7XG4gICAgICAgIC8vIGl0J3MgYSBwbHVnaW4sIHNvIGZpbmQgdGhlIG5lc3RlZCBQcm9wVHdlZW5cbiAgICAgICAgcHQgPSBwdC5kLl9wdDtcblxuICAgICAgICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcGVydHkgJiYgcHQuZnAgIT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgLy8gXCJmcFwiIGlzIGZ1bmN0aW9uUGFyYW0gZm9yIHRoaW5ncyBsaWtlIHNldHRpbmcgQ1NTIHZhcmlhYmxlcyB3aGljaCByZXF1aXJlIC5zZXRQcm9wZXJ0eShcIi0tdmFyLW5hbWVcIiwgdmFsdWUpXG4gICAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXB0KSB7XG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIFByb3BUd2VlbiBhc3NvY2lhdGVkIHdpdGggdGhhdCBwcm9wZXJ0eSwgc28gd2UgbXVzdCBGT1JDRSBvbmUgdG8gYmUgY3JlYXRlZCBhbmQgZGl0Y2ggb3V0IG9mIHRoaXNcbiAgICAgICAgLy8gaWYgdGhlIHR3ZWVuIGhhcyBvdGhlciBwcm9wZXJ0aWVzIHRoYXQgYWxyZWFkeSByZW5kZXJlZCBhdCBuZXcgcG9zaXRpb25zLCB3ZSdkIG5vcm1hbGx5IGhhdmUgdG8gcmV3aW5kIHRvIHB1dCB0aGVtIGJhY2sgbGlrZSB0d2Vlbi5yZW5kZXIoMCwgdHJ1ZSkgYmVmb3JlIGZvcmNpbmcgYW4gX2luaXRUd2VlbigpLCBidXQgdGhhdCBjYW4gY3JlYXRlIGFub3RoZXIgZWRnZSBjYXNlIGxpa2UgdHdlZW5pbmcgYSB0aW1lbGluZSdzIHByb2dyZXNzIHdvdWxkIHRyaWdnZXIgb25VcGRhdGVzIHRvIGZpcmUgd2hpY2ggY291bGQgbW92ZSBvdGhlciB0aGluZ3MgYXJvdW5kLiBJdCdzIGJldHRlciB0byBqdXN0IGluZm9ybSB1c2VycyB0aGF0IC5yZXNldFRvKCkgc2hvdWxkIE9OTFkgYmUgdXNlZCBmb3IgdHdlZW5zIHRoYXQgYWxyZWFkeSBoYXZlIHRoYXQgcHJvcGVydHkuIEZvciBleGFtcGxlLCB5b3UgY2FuJ3QgZ3NhcC50byguLi57IHk6IDAgfSkgYW5kIHRoZW4gdHdlZW4ucmVzdFRvKFwieFwiLCAyMDApIGZvciBleGFtcGxlLlxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMTsgLy8gb3RoZXJ3aXNlLCB3aGVuIHdlIF9hZGRQcm9wVHdlZW4oKSBhbmQgaXQgZmluZHMgbm8gY2hhbmdlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdmFsdWVzLCBpdCBza2lwcyBjcmVhdGluZyBhIFByb3BUd2VlbiAoZm9yIGVmZmljaWVuY3kuLi53aHkgdHdlZW4gd2hlbiB0aGVyZSdzIG5vIGRpZmZlcmVuY2U/KSBidXQgaW4gdGhpcyBjYXNlIHdlIE5FRUQgdGhhdCBQcm9wVHdlZW4gY3JlYXRlZCBzbyB3ZSBjYW4gZWRpdCBpdC5cblxuICAgICAgICB0d2Vlbi52YXJzW3Byb3BlcnR5XSA9IFwiKz0wXCI7XG5cbiAgICAgICAgX2luaXRUd2Vlbih0d2VlbiwgdGltZSk7XG5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDA7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICBwdENhY2hlLnB1c2gocHQpO1xuICAgIH1cbiAgfVxuXG4gIGkgPSBwdENhY2hlLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgcm9vdFBUID0gcHRDYWNoZVtpXTtcbiAgICBwdCA9IHJvb3RQVC5fcHQgfHwgcm9vdFBUOyAvLyBjb21wbGV4IHZhbHVlcyBtYXkgaGF2ZSBuZXN0ZWQgUHJvcFR3ZWVucy4gV2Ugb25seSBhY2NvbW1vZGF0ZSB0aGUgRklSU1QgdmFsdWUuXG5cbiAgICBwdC5zID0gKHN0YXJ0IHx8IHN0YXJ0ID09PSAwKSAmJiAhc3RhcnRJc1JlbGF0aXZlID8gc3RhcnQgOiBwdC5zICsgKHN0YXJ0IHx8IDApICsgcmF0aW8gKiBwdC5jO1xuICAgIHB0LmMgPSB2YWx1ZSAtIHB0LnM7XG4gICAgcm9vdFBULmUgJiYgKHJvb3RQVC5lID0gX3JvdW5kKHZhbHVlKSArIGdldFVuaXQocm9vdFBULmUpKTsgLy8gbWFpbmx5IGZvciBDU1NQbHVnaW4gKGVuZCB2YWx1ZSlcblxuICAgIHJvb3RQVC5iICYmIChyb290UFQuYiA9IHB0LnMgKyBnZXRVbml0KHJvb3RQVC5iKSk7IC8vIChiZWdpbm5pbmcgdmFsdWUpXG4gIH1cbn0sXG4gICAgX2FkZEFsaWFzZXNUb1ZhcnMgPSBmdW5jdGlvbiBfYWRkQWxpYXNlc1RvVmFycyh0YXJnZXRzLCB2YXJzKSB7XG4gIHZhciBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMCxcbiAgICAgIHByb3BlcnR5QWxpYXNlcyA9IGhhcm5lc3MgJiYgaGFybmVzcy5hbGlhc2VzLFxuICAgICAgY29weSxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgYWxpYXNlcztcblxuICBpZiAoIXByb3BlcnR5QWxpYXNlcykge1xuICAgIHJldHVybiB2YXJzO1xuICB9XG5cbiAgY29weSA9IF9tZXJnZSh7fSwgdmFycyk7XG5cbiAgZm9yIChwIGluIHByb3BlcnR5QWxpYXNlcykge1xuICAgIGlmIChwIGluIGNvcHkpIHtcbiAgICAgIGFsaWFzZXMgPSBwcm9wZXJ0eUFsaWFzZXNbcF0uc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IGFsaWFzZXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvcHlbYWxpYXNlc1tpXV0gPSBjb3B5W3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICAvLyBwYXJzZXMgbXVsdGlwbGUgZm9ybWF0cywgbGlrZSB7XCIwJVwiOiB7eDogMTAwfSwge1wiNTAlXCI6IHt4OiAtMjB9fSBhbmQgeyB4OiB7XCIwJVwiOiAxMDAsIFwiNTAlXCI6IC0yMH0gfSwgYW5kIGFuIFwiZWFzZVwiIGNhbiBiZSBzZXQgb24gYW55IG9iamVjdC4gV2UgcG9wdWxhdGUgYW4gXCJhbGxQcm9wc1wiIG9iamVjdCB3aXRoIGFuIEFycmF5IGZvciBlYWNoIHByb3BlcnR5LCBsaWtlIHt4OiBbe30sIHt9XSwgeTpbe30sIHt9XX0gd2l0aCBkYXRhIGZvciBlYWNoIHByb3BlcnR5IHR3ZWVuLiBUaGUgb2JqZWN0cyBoYXZlIGEgXCJ0XCIgKHRpbWUpLCBcInZcIiwgKHZhbHVlKSwgYW5kIFwiZVwiIChlYXNlKSBwcm9wZXJ0eS4gVGhpcyBhbGxvd3MgdXMgdG8gcGllY2UgdG9nZXRoZXIgYSB0aW1lbGluZSBsYXRlci5cbl9wYXJzZUtleWZyYW1lID0gZnVuY3Rpb24gX3BhcnNlS2V5ZnJhbWUocHJvcCwgb2JqLCBhbGxQcm9wcywgZWFzZUVhY2gpIHtcbiAgdmFyIGVhc2UgPSBvYmouZWFzZSB8fCBlYXNlRWFjaCB8fCBcInBvd2VyMS5pbk91dFwiLFxuICAgICAgcCxcbiAgICAgIGE7XG5cbiAgaWYgKF9pc0FycmF5KG9iaikpIHtcbiAgICBhID0gYWxsUHJvcHNbcHJvcF0gfHwgKGFsbFByb3BzW3Byb3BdID0gW10pOyAvLyB0ID0gdGltZSAob3V0IG9mIDEwMCksIHYgPSB2YWx1ZSwgZSA9IGVhc2VcblxuICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgcmV0dXJuIGEucHVzaCh7XG4gICAgICAgIHQ6IGkgLyAob2JqLmxlbmd0aCAtIDEpICogMTAwLFxuICAgICAgICB2OiB2YWx1ZSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChwIGluIG9iaikge1xuICAgICAgYSA9IGFsbFByb3BzW3BdIHx8IChhbGxQcm9wc1twXSA9IFtdKTtcbiAgICAgIHAgPT09IFwiZWFzZVwiIHx8IGEucHVzaCh7XG4gICAgICAgIHQ6IHBhcnNlRmxvYXQocHJvcCksXG4gICAgICAgIHY6IG9ialtwXSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9wYXJzZUZ1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZUZ1bmNPclN0cmluZyh2YWx1ZSwgdHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbCh0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgfnZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpID8gX3JlcGxhY2VSYW5kb20odmFsdWUpIDogdmFsdWU7XG59LFxuICAgIF9zdGFnZ2VyVHdlZW5Qcm9wcyA9IF9jYWxsYmFja05hbWVzICsgXCJyZXBlYXQscmVwZWF0RGVsYXkseW95byxyZXBlYXRSZWZyZXNoLHlveW9FYXNlLGF1dG9SZXZlcnRcIixcbiAgICBfc3RhZ2dlclByb3BzVG9Ta2lwID0ge307XG5cbl9mb3JFYWNoTmFtZShfc3RhZ2dlclR3ZWVuUHJvcHMgKyBcIixpZCxzdGFnZ2VyLGRlbGF5LGR1cmF0aW9uLHBhdXNlZCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfc3RhZ2dlclByb3BzVG9Ta2lwW25hbWVdID0gMTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24yKSB7XG4gIF9pbmhlcml0c0xvb3NlKFR3ZWVuLCBfQW5pbWF0aW9uMik7XG5cbiAgZnVuY3Rpb24gVHdlZW4odGFyZ2V0cywgdmFycywgcG9zaXRpb24sIHNraXBJbmhlcml0KSB7XG4gICAgdmFyIF90aGlzMztcblxuICAgIGlmICh0eXBlb2YgdmFycyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcG9zaXRpb24uZHVyYXRpb24gPSB2YXJzO1xuICAgICAgdmFycyA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIF90aGlzMyA9IF9BbmltYXRpb24yLmNhbGwodGhpcywgc2tpcEluaGVyaXQgPyB2YXJzIDogX2luaGVyaXREZWZhdWx0cyh2YXJzKSkgfHwgdGhpcztcbiAgICB2YXIgX3RoaXMzJHZhcnMgPSBfdGhpczMudmFycyxcbiAgICAgICAgZHVyYXRpb24gPSBfdGhpczMkdmFycy5kdXJhdGlvbixcbiAgICAgICAgZGVsYXkgPSBfdGhpczMkdmFycy5kZWxheSxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3RoaXMzJHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBzdGFnZ2VyID0gX3RoaXMzJHZhcnMuc3RhZ2dlcixcbiAgICAgICAgb3ZlcndyaXRlID0gX3RoaXMzJHZhcnMub3ZlcndyaXRlLFxuICAgICAgICBrZXlmcmFtZXMgPSBfdGhpczMkdmFycy5rZXlmcmFtZXMsXG4gICAgICAgIGRlZmF1bHRzID0gX3RoaXMzJHZhcnMuZGVmYXVsdHMsXG4gICAgICAgIHNjcm9sbFRyaWdnZXIgPSBfdGhpczMkdmFycy5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICB5b3lvRWFzZSA9IF90aGlzMyR2YXJzLnlveW9FYXNlLFxuICAgICAgICBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSAoX2lzQXJyYXkodGFyZ2V0cykgfHwgX2lzVHlwZWRBcnJheSh0YXJnZXRzKSA/IF9pc051bWJlcih0YXJnZXRzWzBdKSA6IFwibGVuZ3RoXCIgaW4gdmFycykgPyBbdGFyZ2V0c10gOiB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICB0bCxcbiAgICAgICAgaSxcbiAgICAgICAgY29weSxcbiAgICAgICAgbCxcbiAgICAgICAgcCxcbiAgICAgICAgY3VyVGFyZ2V0LFxuICAgICAgICBzdGFnZ2VyRnVuYyxcbiAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlO1xuICAgIF90aGlzMy5fdGFyZ2V0cyA9IHBhcnNlZFRhcmdldHMubGVuZ3RoID8gX2hhcm5lc3MocGFyc2VkVGFyZ2V0cykgOiBfd2FybihcIkdTQVAgdGFyZ2V0IFwiICsgdGFyZ2V0cyArIFwiIG5vdCBmb3VuZC4gaHR0cHM6Ly9ncmVlbnNvY2suY29tXCIsICFfY29uZmlnLm51bGxUYXJnZXRXYXJuKSB8fCBbXTtcbiAgICBfdGhpczMuX3B0TG9va3VwID0gW107IC8vUHJvcFR3ZWVuIGxvb2t1cC4gQW4gYXJyYXkgY29udGFpbmluZyBhbiBvYmplY3QgZm9yIGVhY2ggdGFyZ2V0LCBoYXZpbmcga2V5cyBmb3IgZWFjaCB0d2VlbmluZyBwcm9wZXJ0eVxuXG4gICAgX3RoaXMzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGU7XG5cbiAgICBpZiAoa2V5ZnJhbWVzIHx8IHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICB2YXJzID0gX3RoaXMzLnZhcnM7XG4gICAgICB0bCA9IF90aGlzMy50aW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gICAgICAgIGRhdGE6IFwibmVzdGVkXCIsXG4gICAgICAgIGRlZmF1bHRzOiBkZWZhdWx0cyB8fCB7fSxcbiAgICAgICAgdGFyZ2V0czogcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHBhcnNlZFRhcmdldHNcbiAgICAgIH0pOyAvLyB3ZSBuZWVkIHRvIHN0b3JlIHRoZSB0YXJnZXRzIGJlY2F1c2UgZm9yIHN0YWdnZXJzIGFuZCBrZXlmcmFtZXMsIHdlIGVuZCB1cCBjcmVhdGluZyBhbiBpbmRpdmlkdWFsIHR3ZWVuIGZvciBlYWNoIGJ1dCBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgbmVlZCB0byBrbm93IHRoZSBpbmRleCBhbmQgdGhlIHdob2xlIEFycmF5IG9mIHRhcmdldHMuXG5cbiAgICAgIHRsLmtpbGwoKTtcbiAgICAgIHRsLnBhcmVudCA9IHRsLl9kcCA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcbiAgICAgIHRsLl9zdGFydCA9IDA7XG5cbiAgICAgIGlmIChzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBsID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG4gICAgICAgIHN0YWdnZXJGdW5jID0gc3RhZ2dlciAmJiBkaXN0cmlidXRlKHN0YWdnZXIpO1xuXG4gICAgICAgIGlmIChfaXNPYmplY3Qoc3RhZ2dlcikpIHtcbiAgICAgICAgICAvL3VzZXJzIGNhbiBwYXNzIGluIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQvb25Db21wbGV0ZSBpbiB0aGUgc3RhZ2dlciBvYmplY3QuIFRoZXNlIHNob3VsZCBmaXJlIHdpdGggZWFjaCBpbmRpdmlkdWFsIHR3ZWVuLlxuICAgICAgICAgIGZvciAocCBpbiBzdGFnZ2VyKSB7XG4gICAgICAgICAgICBpZiAofl9zdGFnZ2VyVHdlZW5Qcm9wcy5pbmRleE9mKHApKSB7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSB8fCAoc3RhZ2dlclZhcnNUb01lcmdlID0ge30pO1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2VbcF0gPSBzdGFnZ2VyW3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBjb3B5ID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3N0YWdnZXJQcm9wc1RvU2tpcCk7XG4gICAgICAgICAgY29weS5zdGFnZ2VyID0gMDtcbiAgICAgICAgICB5b3lvRWFzZSAmJiAoY29weS55b3lvRWFzZSA9IHlveW9FYXNlKTtcbiAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgJiYgX21lcmdlKGNvcHksIHN0YWdnZXJWYXJzVG9NZXJnZSk7XG4gICAgICAgICAgY3VyVGFyZ2V0ID0gcGFyc2VkVGFyZ2V0c1tpXTsgLy9kb24ndCBqdXN0IGNvcHkgZHVyYXRpb24gb3IgZGVsYXkgYmVjYXVzZSBpZiB0aGV5J3JlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLCB3ZSdkIGVuZCB1cCBpbiBhbiBpbmZpbml0ZSBsb29wIGJlY2F1c2UgX2lzRnVuY09yU3RyaW5nKCkgd291bGQgZXZhbHVhdGUgYXMgdHJ1ZSBpbiB0aGUgY2hpbGQgdHdlZW5zLCBlbnRlcmluZyB0aGlzIGxvb3AsIGV0Yy4gU28gd2UgcGFyc2UgdGhlIHZhbHVlIHN0cmFpZ2h0IGZyb20gdmFycyBhbmQgZGVmYXVsdCB0byAwLlxuXG4gICAgICAgICAgY29weS5kdXJhdGlvbiA9ICtfcGFyc2VGdW5jT3JTdHJpbmcoZHVyYXRpb24sIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKTtcbiAgICAgICAgICBjb3B5LmRlbGF5ID0gKCtfcGFyc2VGdW5jT3JTdHJpbmcoZGVsYXksIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSB8fCAwKSAtIF90aGlzMy5fZGVsYXk7XG5cbiAgICAgICAgICBpZiAoIXN0YWdnZXIgJiYgbCA9PT0gMSAmJiBjb3B5LmRlbGF5KSB7XG4gICAgICAgICAgICAvLyBpZiBzb21lb25lIGRvZXMgZGVsYXk6XCJyYW5kb20oMSwgNSlcIiwgcmVwZWF0Oi0xLCBmb3IgZXhhbXBsZSwgdGhlIGRlbGF5IHNob3VsZG4ndCBiZSBpbnNpZGUgdGhlIHJlcGVhdC5cbiAgICAgICAgICAgIF90aGlzMy5fZGVsYXkgPSBkZWxheSA9IGNvcHkuZGVsYXk7XG4gICAgICAgICAgICBfdGhpczMuX3N0YXJ0ICs9IGRlbGF5O1xuICAgICAgICAgICAgY29weS5kZWxheSA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwudG8oY3VyVGFyZ2V0LCBjb3B5LCBzdGFnZ2VyRnVuYyA/IHN0YWdnZXJGdW5jKGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgOiAwKTtcbiAgICAgICAgICB0bC5fZWFzZSA9IF9lYXNlTWFwLm5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICB0bC5kdXJhdGlvbigpID8gZHVyYXRpb24gPSBkZWxheSA9IDAgOiBfdGhpczMudGltZWxpbmUgPSAwOyAvLyBpZiB0aGUgdGltZWxpbmUncyBkdXJhdGlvbiBpcyAwLCB3ZSBkb24ndCBuZWVkIGEgdGltZWxpbmUgaW50ZXJuYWxseSFcbiAgICAgIH0gZWxzZSBpZiAoa2V5ZnJhbWVzKSB7XG4gICAgICAgIF9pbmhlcml0RGVmYXVsdHMoX3NldERlZmF1bHRzKHRsLnZhcnMuZGVmYXVsdHMsIHtcbiAgICAgICAgICBlYXNlOiBcIm5vbmVcIlxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGwuX2Vhc2UgPSBfcGFyc2VFYXNlKGtleWZyYW1lcy5lYXNlIHx8IHZhcnMuZWFzZSB8fCBcIm5vbmVcIik7XG4gICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBrZixcbiAgICAgICAgICAgIHY7XG5cbiAgICAgICAgaWYgKF9pc0FycmF5KGtleWZyYW1lcykpIHtcbiAgICAgICAgICBrZXlmcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0bC50byhwYXJzZWRUYXJnZXRzLCBmcmFtZSwgXCI+XCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRsLmR1cmF0aW9uKCk7IC8vIHRvIGVuc3VyZSB0bC5fZHVyIGlzIGNhY2hlZCBiZWNhdXNlIHdlIHRhcCBpbnRvIGl0IGZvciBwZXJmb3JtYW5jZSBwdXJwb3NlcyBpbiB0aGUgcmVuZGVyKCkgbWV0aG9kLlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvcHkgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgICAgIHAgPT09IFwiZWFzZVwiIHx8IHAgPT09IFwiZWFzZUVhY2hcIiB8fCBfcGFyc2VLZXlmcmFtZShwLCBrZXlmcmFtZXNbcF0sIGNvcHksIGtleWZyYW1lcy5lYXNlRWFjaCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChwIGluIGNvcHkpIHtcbiAgICAgICAgICAgIGEgPSBjb3B5W3BdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGEudCAtIGIudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGltZSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGtmID0gYVtpXTtcbiAgICAgICAgICAgICAgdiA9IHtcbiAgICAgICAgICAgICAgICBlYXNlOiBrZi5lLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAoa2YudCAtIChpID8gYVtpIC0gMV0udCA6IDApKSAvIDEwMCAqIGR1cmF0aW9uXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHZbcF0gPSBrZi52O1xuICAgICAgICAgICAgICB0bC50byhwYXJzZWRUYXJnZXRzLCB2LCB0aW1lKTtcbiAgICAgICAgICAgICAgdGltZSArPSB2LmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLmR1cmF0aW9uKCkgPCBkdXJhdGlvbiAmJiB0bC50byh7fSwge1xuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uIC0gdGwuZHVyYXRpb24oKVxuICAgICAgICAgIH0pOyAvLyBpbiBjYXNlIGtleWZyYW1lcyBkaWRuJ3QgZ28gdG8gMTAwJVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGR1cmF0aW9uIHx8IF90aGlzMy5kdXJhdGlvbihkdXJhdGlvbiA9IHRsLmR1cmF0aW9uKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpczMudGltZWxpbmUgPSAwOyAvL3NwZWVkIG9wdGltaXphdGlvbiwgZmFzdGVyIGxvb2t1cHMgKG5vIGdvaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4pXG4gICAgfVxuXG4gICAgaWYgKG92ZXJ3cml0ZSA9PT0gdHJ1ZSAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcykge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG5cbiAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YocGFyc2VkVGFyZ2V0cyk7XG5cbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShwYXJlbnQsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgcG9zaXRpb24pO1xuXG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpczMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIF90aGlzMy5wYXVzZWQodHJ1ZSk7XG5cbiAgICBpZiAoaW1tZWRpYXRlUmVuZGVyIHx8ICFkdXJhdGlvbiAmJiAha2V5ZnJhbWVzICYmIF90aGlzMy5fc3RhcnQgPT09IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lKSAmJiBfaXNOb3RGYWxzZShpbW1lZGlhdGVSZW5kZXIpICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMykpICYmIHBhcmVudC5kYXRhICE9PSBcIm5lc3RlZFwiKSB7XG4gICAgICBfdGhpczMuX3RUaW1lID0gLV90aW55TnVtOyAvL2ZvcmNlcyBhIHJlbmRlciB3aXRob3V0IGhhdmluZyB0byBzZXQgdGhlIHJlbmRlcigpIFwiZm9yY2VcIiBwYXJhbWV0ZXIgdG8gdHJ1ZSBiZWNhdXNlIHdlIHdhbnQgdG8gYWxsb3cgbGF6eWluZyBieSBkZWZhdWx0ICh1c2luZyB0aGUgXCJmb3JjZVwiIHBhcmFtZXRlciBhbHdheXMgZm9yY2VzIGFuIGltbWVkaWF0ZSBmdWxsIHJlbmRlcilcblxuICAgICAgX3RoaXMzLnJlbmRlcihNYXRoLm1heCgwLCAtZGVsYXkpIHx8IDApOyAvL2luIGNhc2UgZGVsYXkgaXMgbmVnYXRpdmVcblxuICAgIH1cblxuICAgIHNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBzY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXMzO1xuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICB0RHVyID0gdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICBpc05lZ2F0aXZlID0gdG90YWxUaW1lIDwgMCxcbiAgICAgICAgdFRpbWUgPSB0b3RhbFRpbWUgPiB0RHVyIC0gX3RpbnlOdW0gJiYgIWlzTmVnYXRpdmUgPyB0RHVyIDogdG90YWxUaW1lIDwgX3RpbnlOdW0gPyAwIDogdG90YWxUaW1lLFxuICAgICAgICB0aW1lLFxuICAgICAgICBwdCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2SXRlcmF0aW9uLFxuICAgICAgICBpc1lveW8sXG4gICAgICAgIHJhdGlvLFxuICAgICAgICB0aW1lbGluZSxcbiAgICAgICAgeW95b0Vhc2U7XG5cbiAgICBpZiAoIWR1cikge1xuICAgICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICB9IGVsc2UgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCAhdG90YWxUaW1lIHx8IGZvcmNlIHx8ICF0aGlzLl9pbml0dGVkICYmIHRoaXMuX3RUaW1lIHx8IHRoaXMuX3N0YXJ0QXQgJiYgdGhpcy5felRpbWUgPCAwICE9PSBpc05lZ2F0aXZlKSB7XG4gICAgICAvL3RoaXMgc2Vuc2VzIGlmIHdlJ3JlIGNyb3NzaW5nIG92ZXIgdGhlIHN0YXJ0IHRpbWUsIGluIHdoaWNoIGNhc2Ugd2UgbXVzdCByZWNvcmQgX3pUaW1lIGFuZCBmb3JjZSB0aGUgcmVuZGVyLCBidXQgd2UgZG8gaXQgaW4gdGhpcyBsZW5ndGh5IGNvbmRpdGlvbmFsIHdheSBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyAodXN1YWxseSB3ZSBjYW4gc2tpcCB0aGUgY2FsY3VsYXRpb25zKTogdGhpcy5faW5pdHRlZCAmJiAodGhpcy5felRpbWUgPCAwKSAhPT0gKHRvdGFsVGltZSA8IDApXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICB0aW1lbGluZSA9IHRoaXMudGltZWxpbmU7XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIGlzTmVnYXRpdmUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNZb3lvID0gdGhpcy5feW95byAmJiBpdGVyYXRpb24gJiAxO1xuXG4gICAgICAgIGlmIChpc1lveW8pIHtcbiAgICAgICAgICB5b3lvRWFzZSA9IHRoaXMuX3lFYXNlO1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKHRpbWUgPT09IHByZXZUaW1lICYmICFmb3JjZSAmJiB0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgICAgLy9jb3VsZCBiZSBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IHBhcnQuIE5vIG5lZWQgdG8gcmVuZGVyIGFuZCBmaXJlIGNhbGxiYWNrcy5cbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgIHRpbWVsaW5lICYmIHRoaXMuX3lFYXNlICYmIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKTsgLy9yZXBlYXRSZWZyZXNoIGZ1bmN0aW9uYWxpdHlcblxuICAgICAgICAgIGlmICh0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gZm9yY2UgPSAxOyAvL2ZvcmNlLCBvdGhlcndpc2UgaWYgbGF6eSBpcyB0cnVlLCB0aGUgX2F0dGVtcHRJbml0VHdlZW4oKSB3aWxsIHJldHVybiBhbmQgd2UnbGwganVtcCBvdXQgYW5kIGdldCBjYXVnaHQgYm91bmNpbmcgb24gZWFjaCB0aWNrLlxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcihfcm91bmRQcmVjaXNlKGN5Y2xlRHVyYXRpb24gKiBpdGVyYXRpb24pLCB0cnVlKS5pbnZhbGlkYXRlKCkuX2xvY2sgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgaWYgKF9hdHRlbXB0SW5pdFR3ZWVuKHRoaXMsIGlzTmVnYXRpdmUgPyB0b3RhbFRpbWUgOiB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSkge1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gMDsgLy8gaW4gY29uc3RydWN0b3IgaWYgaW1tZWRpYXRlUmVuZGVyIGlzIHRydWUsIHdlIHNldCBfdFRpbWUgdG8gLV90aW55TnVtIHRvIGhhdmUgdGhlIHBsYXloZWFkIGNyb3NzIHRoZSBzdGFydGluZyBwb2ludCBidXQgd2UgY2FuJ3QgbGVhdmUgX3RUaW1lIGFzIGEgbmVnYXRpdmUgbnVtYmVyLlxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUpIHtcbiAgICAgICAgICAvLyByYXJlIGVkZ2UgY2FzZSAtIGR1cmluZyBpbml0aWFsaXphdGlvbiwgYW4gb25VcGRhdGUgaW4gdGhlIF9zdGFydEF0ICguZnJvbVRvKCkpIG1pZ2h0IGZvcmNlIHRoaXMgdHdlZW4gdG8gcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgZGl0Y2ggdGhpcyByZW5kZXIoKSBjYWxsIHNvIHRoYXQgaXQgZG9lc24ndCByZXZlcnQgdGhlIHZhbHVlcy5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgIC8vIHdoaWxlIGluaXR0aW5nLCBhIHBsdWdpbiBsaWtlIEluZXJ0aWFQbHVnaW4gbWlnaHQgYWx0ZXIgdGhlIGR1cmF0aW9uLCBzbyByZXJ1biBmcm9tIHRoZSBzdGFydCB0byBlbnN1cmUgZXZlcnl0aGluZyByZW5kZXJzIGFzIGl0IHNob3VsZC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgaWYgKCF0aGlzLl9hY3QgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgdGhpcy5fYWN0ID0gMTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZSAmJiAhcHJldlRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHQgPSB0aGlzLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuXG4gICAgICB0aW1lbGluZSAmJiB0aW1lbGluZS5yZW5kZXIodG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6ICF0aW1lICYmIGlzWW95byA/IC1fdGlueU51bSA6IHRpbWVsaW5lLl9kdXIgKiB0aW1lbGluZS5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB8fCB0aGlzLl9zdGFydEF0ICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG5cbiAgICAgIGlmICh0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7IC8vbm90ZTogZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIHR1Y2sgdGhpcyBjb25kaXRpb25hbCBsb2dpYyBpbnNpZGUgbGVzcyB0cmF2ZWxlZCBhcmVhcyAobW9zdCB0d2VlbnMgZG9uJ3QgaGF2ZSBhbiBvblVwZGF0ZSkuIFdlJ2QganVzdCBoYXZlIGl0IGF0IHRoZSBlbmQgYmVmb3JlIHRoZSBvbkNvbXBsZXRlLCBidXQgdGhlIHZhbHVlcyBzaG91bGQgYmUgdXBkYXRlZCBiZWZvcmUgYW55IG9uVXBkYXRlIGlzIGNhbGxlZCwgc28gd2UgQUxTTyBwdXQgaXQgaGVyZSBhbmQgdGhlbiBpZiBpdCdzIG5vdCBjYWxsZWQsIHdlIGRvIHNvIGxhdGVyIG5lYXIgdGhlIG9uQ29tcGxldGUuXG5cbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcGVhdCAmJiBpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgdGhpcy52YXJzLm9uUmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcblxuICAgICAgaWYgKCh0VGltZSA9PT0gdGhpcy5fdER1ciB8fCAhdFRpbWUpICYmIHRoaXMuX3RUaW1lID09PSB0VGltZSkge1xuICAgICAgICBpc05lZ2F0aXZlICYmICF0aGlzLl9vblVwZGF0ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdGhpcy5fdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB3ZSdyZSByZW5kZXJpbmcgYXQgZXhhY3RseSBhIHRpbWUgb2YgMCwgYXMgdGhlcmUgY291bGQgYmUgYXV0b1JldmVydCB2YWx1ZXMgdGhhdCBzaG91bGQgZ2V0IHNldCBvbiB0aGUgbmV4dCB0aWNrIChpZiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0VGltZSwgbmVnYXRpdmUgdG90YWxUaW1lKS4gRG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKGlzTmVnYXRpdmUgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgaXNZb3lvKSkge1xuICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGFuZCB0VGltZSBhcmUgemVybywgd2Ugc2hvdWxkbid0IGZpcmUgdGhlIG9uUmV2ZXJzZUNvbXBsZXRlLiBUaGlzIGNvdWxkIGhhcHBlbiBpZiB5b3UgZ3NhcC50byguLi4ge3BhdXNlZDp0cnVlfSkucGxheSgpO1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzMudGFyZ2V0cyA9IGZ1bmN0aW9uIHRhcmdldHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldHM7XG4gIH07XG5cbiAgX3Byb3RvMy5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZShzb2Z0KSB7XG4gICAgLy8gXCJzb2Z0XCIgZ2l2ZXMgdXMgYSB3YXkgdG8gY2xlYXIgb3V0IGV2ZXJ5dGhpbmcgRVhDRVBUIHRoZSByZWNvcmRlZCBwcmUtXCJmcm9tXCIgcG9ydGlvbiBvZiBmcm9tKCkgdHdlZW5zLiBPdGhlcndpc2UsIGZvciBleGFtcGxlLCBpZiB5b3UgdHdlZW4ucHJvZ3Jlc3MoMSkucmVuZGVyKDAsIHRydWUgdHJ1ZSkuaW52YWxpZGF0ZSgpLCB0aGUgXCJmcm9tXCIgdmFsdWVzIHdvdWxkIHBlcnNpc3QgYW5kIHRoZW4gb24gdGhlIG5leHQgcmVuZGVyLCB0aGUgZnJvbSgpIHR3ZWVucyB3b3VsZCBpbml0aWFsaXplIGFuZCB0aGUgY3VycmVudCB2YWx1ZSB3b3VsZCBtYXRjaCB0aGUgXCJmcm9tXCIgdmFsdWVzLCB0aHVzIGFuaW1hdGUgZnJvbSB0aGUgc2FtZSB2YWx1ZSB0byB0aGUgc2FtZSB2YWx1ZSAobm8gYW5pbWF0aW9uKS4gV2UgdGFwIGludG8gdGhpcyBpbiBTY3JvbGxUcmlnZ2VyJ3MgcmVmcmVzaCgpIHdoZXJlIHdlIG11c3QgcHVzaCBhIHR3ZWVuIHRvIGNvbXBsZXRpb24gYW5kIHRoZW4gYmFjayBhZ2FpbiBidXQgaG9ub3IgaXRzIGluaXQgc3RhdGUgaW4gY2FzZSB0aGUgdHdlZW4gaXMgZGVwZW5kZW50IG9uIGFub3RoZXIgdHdlZW4gZnVydGhlciB1cCBvbiB0aGUgcGFnZS5cbiAgICAoIXNvZnQgfHwgIXRoaXMudmFycy5ydW5CYWNrd2FyZHMpICYmICh0aGlzLl9zdGFydEF0ID0gMCk7XG4gICAgdGhpcy5fcHQgPSB0aGlzLl9vcCA9IHRoaXMuX29uVXBkYXRlID0gdGhpcy5fbGF6eSA9IHRoaXMucmF0aW8gPSAwO1xuICAgIHRoaXMuX3B0TG9va3VwID0gW107XG4gICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLmludmFsaWRhdGUoc29mdCk7XG4gICAgcmV0dXJuIF9BbmltYXRpb24yLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcywgc29mdCk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZXNldFRvID0gZnVuY3Rpb24gcmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpIHtcbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICAgIHRoaXMuX3RzIHx8IHRoaXMucGxheSgpO1xuICAgIHZhciB0aW1lID0gTWF0aC5taW4odGhpcy5fZHVyLCAodGhpcy5fZHAuX3RpbWUgLSB0aGlzLl9zdGFydCkgKiB0aGlzLl90cyksXG4gICAgICAgIHJhdGlvO1xuICAgIHRoaXMuX2luaXR0ZWQgfHwgX2luaXRUd2Vlbih0aGlzLCB0aW1lKTtcbiAgICByYXRpbyA9IHRoaXMuX2Vhc2UodGltZSAvIHRoaXMuX2R1cik7IC8vIGRvbid0IGp1c3QgZ2V0IHR3ZWVuLnJhdGlvIGJlY2F1c2UgaXQgbWF5IG5vdCBoYXZlIHJlbmRlcmVkIHlldC5cbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgYWRkaXRpb24gdG8gYWxsb3cgYW4gb2JqZWN0IHdpdGggbXVsdGlwbGUgdmFsdWVzIHRvIHVwZGF0ZSwgbGlrZSB0d2Vlbi5yZXNldFRvKHt4OiAxMDAsIHk6IDIwMH0pOyBBdCB0aGlzIHBvaW50LCBpdCBkb2Vzbid0IHNlZW0gd29ydGggdGhlIGFkZGVkIGtiIGdpdmVuIHRoZSBmYWN0IHRoYXQgbW9zdCB1c2VycyB3aWxsIGxpa2VseSBvcHQgZm9yIHRoZSBjb252ZW5pZW50IGdzYXAucXVpY2tUbygpIHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIHRoaXMgbWV0aG9kLlxuICAgIC8vIGlmIChfaXNPYmplY3QocHJvcGVydHkpKSB7IC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvblxuICAgIC8vIFx0Zm9yIChwIGluIHByb3BlcnR5KSB7XG4gICAgLy8gXHRcdGlmIChfdXBkYXRlUHJvcFR3ZWVucyh0aGlzLCBwLCBwcm9wZXJ0eVtwXSwgdmFsdWUgPyB2YWx1ZVtwXSA6IG51bGwsIHN0YXJ0LCByYXRpbywgdGltZSkpIHtcbiAgICAvLyBcdFx0XHRyZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIC8vIFx0XHR9XG4gICAgLy8gXHR9XG4gICAgLy8gfSBlbHNlIHtcblxuICAgIGlmIChfdXBkYXRlUHJvcFR3ZWVucyh0aGlzLCBwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHJhdGlvLCB0aW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICB9IC8vfVxuXG5cbiAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCAwKTtcblxuICAgIHRoaXMucGFyZW50IHx8IF9hZGRMaW5rZWRMaXN0SXRlbSh0aGlzLl9kcCwgdGhpcywgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aGlzLl9kcC5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXIoMCk7XG4gIH07XG5cbiAgX3Byb3RvMy5raWxsID0gZnVuY3Rpb24ga2lsbCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IFwiYWxsXCI7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXRzICYmICghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSkge1xuICAgICAgdGhpcy5fbGF6eSA9IHRoaXMuX3B0ID0gMDtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IF9pbnRlcnJ1cHQodGhpcykgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRpbWVsaW5lKSB7XG4gICAgICB2YXIgdER1ciA9IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpO1xuICAgICAgdGhpcy50aW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgdmFycywgX292ZXJ3cml0aW5nVHdlZW4gJiYgX292ZXJ3cml0aW5nVHdlZW4udmFycy5vdmVyd3JpdGUgIT09IHRydWUpLl9maXJzdCB8fCBfaW50ZXJydXB0KHRoaXMpOyAvLyBpZiBub3RoaW5nIGlzIGxlZnQgdHdlZW5pbmcsIGludGVycnVwdC5cblxuICAgICAgdGhpcy5wYXJlbnQgJiYgdER1ciAhPT0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCkgJiYgX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX2R1ciAqIHRoaXMudGltZWxpbmUuX3REdXIgLyB0RHVyLCAwLCAxKTsgLy8gaWYgYSBuZXN0ZWQgdHdlZW4gaXMga2lsbGVkIHRoYXQgY2hhbmdlcyB0aGUgZHVyYXRpb24sIGl0IHNob3VsZCBhZmZlY3QgdGhpcyB0d2VlbidzIGR1cmF0aW9uLiBXZSBtdXN0IHVzZSB0aGUgcmF0aW8sIHRob3VnaCwgYmVjYXVzZSBzb21ldGltZXMgdGhlIGludGVybmFsIHRpbWVsaW5lIGlzIHN0cmV0Y2hlZCBsaWtlIGZvciBrZXlmcmFtZXMgd2hlcmUgdGhleSBkb24ndCBhbGwgYWRkIHVwIHRvIHdoYXRldmVyIHRoZSBwYXJlbnQgdHdlZW4ncyBkdXJhdGlvbiB3YXMgc2V0IHRvLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VkVGFyZ2V0cyA9IHRoaXMuX3RhcmdldHMsXG4gICAgICAgIGtpbGxpbmdUYXJnZXRzID0gdGFyZ2V0cyA/IHRvQXJyYXkodGFyZ2V0cykgOiBwYXJzZWRUYXJnZXRzLFxuICAgICAgICBwcm9wVHdlZW5Mb29rdXAgPSB0aGlzLl9wdExvb2t1cCxcbiAgICAgICAgZmlyc3RQVCA9IHRoaXMuX3B0LFxuICAgICAgICBvdmVyd3JpdHRlblByb3BzLFxuICAgICAgICBjdXJMb29rdXAsXG4gICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzLFxuICAgICAgICBwcm9wcyxcbiAgICAgICAgcCxcbiAgICAgICAgcHQsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpICYmIF9hcnJheXNNYXRjaChwYXJzZWRUYXJnZXRzLCBraWxsaW5nVGFyZ2V0cykpIHtcbiAgICAgIHZhcnMgPT09IFwiYWxsXCIgJiYgKHRoaXMuX3B0ID0gMCk7XG4gICAgICByZXR1cm4gX2ludGVycnVwdCh0aGlzKTtcbiAgICB9XG5cbiAgICBvdmVyd3JpdHRlblByb3BzID0gdGhpcy5fb3AgPSB0aGlzLl9vcCB8fCBbXTtcblxuICAgIGlmICh2YXJzICE9PSBcImFsbFwiKSB7XG4gICAgICAvL3NvIHBlb3BsZSBjYW4gcGFzcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzXG4gICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgIHAgPSB7fTtcblxuICAgICAgICBfZm9yRWFjaE5hbWUodmFycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gcFtuYW1lXSA9IDE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhcnMgPSBwO1xuICAgICAgfVxuXG4gICAgICB2YXJzID0gX2FkZEFsaWFzZXNUb1ZhcnMocGFyc2VkVGFyZ2V0cywgdmFycyk7XG4gICAgfVxuXG4gICAgaSA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKH5raWxsaW5nVGFyZ2V0cy5pbmRleE9mKHBhcnNlZFRhcmdldHNbaV0pKSB7XG4gICAgICAgIGN1ckxvb2t1cCA9IHByb3BUd2Vlbkxvb2t1cFtpXTtcblxuICAgICAgICBpZiAodmFycyA9PT0gXCJhbGxcIikge1xuICAgICAgICAgIG92ZXJ3cml0dGVuUHJvcHNbaV0gPSB2YXJzO1xuICAgICAgICAgIHByb3BzID0gY3VyTG9va3VwO1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0ge307XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSBvdmVyd3JpdHRlblByb3BzW2ldID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSB8fCB7fTtcbiAgICAgICAgICBwcm9wcyA9IHZhcnM7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHAgaW4gcHJvcHMpIHtcbiAgICAgICAgICBwdCA9IGN1ckxvb2t1cCAmJiBjdXJMb29rdXBbcF07XG5cbiAgICAgICAgICBpZiAocHQpIHtcbiAgICAgICAgICAgIGlmICghKFwia2lsbFwiIGluIHB0LmQpIHx8IHB0LmQua2lsbChwKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgY3VyTG9va3VwW3BdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJPdmVyd3JpdGVQcm9wcyAhPT0gXCJhbGxcIikge1xuICAgICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHNbcF0gPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2luaXR0ZWQgJiYgIXRoaXMuX3B0ICYmIGZpcnN0UFQgJiYgX2ludGVycnVwdCh0aGlzKTsgLy9pZiBhbGwgdHdlZW5pbmcgcHJvcGVydGllcyBhcmUga2lsbGVkLCBraWxsIHRoZSB0d2Vlbi4gV2l0aG91dCB0aGlzIGxpbmUsIGlmIHRoZXJlJ3MgYSB0d2VlbiB3aXRoIG11bHRpcGxlIHRhcmdldHMgYW5kIHRoZW4geW91IGtpbGxUd2VlbnNPZigpIGVhY2ggdGFyZ2V0IGluZGl2aWR1YWxseSwgdGhlIHR3ZWVuIHdvdWxkIHRlY2huaWNhbGx5IHN0aWxsIHJlbWFpbiBhY3RpdmUgYW5kIGZpcmUgaXRzIG9uQ29tcGxldGUgZXZlbiB0aG91Z2ggdGhlcmUgYXJlbid0IGFueSBtb3JlIHByb3BlcnRpZXMgdHdlZW5pbmcuXG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBUd2Vlbi50byA9IGZ1bmN0aW9uIHRvKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIGFyZ3VtZW50c1syXSk7XG4gIH07XG5cbiAgVHdlZW4uZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uZGVsYXllZENhbGwgPSBmdW5jdGlvbiBkZWxheWVkQ2FsbChkZWxheSwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKGNhbGxiYWNrLCAwLCB7XG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgb25Db21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvblJldmVyc2VDb21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvbkNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBvblJldmVyc2VDb21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgY2FsbGJhY2tTY29wZTogc2NvcGVcbiAgICB9KTsgLy8gd2UgbXVzdCB1c2Ugb25SZXZlcnNlQ29tcGxldGUgdG9vIGZvciB0aGluZ3MgbGlrZSB0aW1lbGluZS5hZGQoKCkgPT4gey4uLn0pIHdoaWNoIHNob3VsZCBiZSB0cmlnZ2VyZWQgaW4gQk9USCBkaXJlY3Rpb25zIChmb3J3YXJkIGFuZCByZXZlcnNlKVxuICB9O1xuXG4gIFR3ZWVuLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycykge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzKTtcbiAgfTtcblxuICBUd2Vlbi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSk7XG4gIH07XG5cbiAgcmV0dXJuIFR3ZWVuO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVHdlZW4ucHJvdG90eXBlLCB7XG4gIF90YXJnZXRzOiBbXSxcbiAgX2xhenk6IDAsXG4gIF9zdGFydEF0OiAwLFxuICBfb3A6IDAsXG4gIF9vbkluaXQ6IDBcbn0pOyAvL2FkZCB0aGUgcGVydGluZW50IHRpbWVsaW5lIG1ldGhvZHMgdG8gVHdlZW4gaW5zdGFuY2VzIHNvIHRoYXQgdXNlcnMgY2FuIGNoYWluIGNvbnZlbmllbnRseSBhbmQgY3JlYXRlIGEgdGltZWxpbmUgYXV0b21hdGljYWxseS4gKHJlbW92ZWQgZHVlIHRvIGNvbmNlcm5zIHRoYXQgaXQnZCB1bHRpbWF0ZWx5IGFkZCB0byBtb3JlIGNvbmZ1c2lvbiBlc3BlY2lhbGx5IGZvciBiZWdpbm5lcnMpXG4vLyBfZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxzZXQsY2FsbCxhZGQsYWRkTGFiZWwsYWRkUGF1c2VcIiwgbmFtZSA9PiB7XG4vLyBcdFR3ZWVuLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuLy8gXHRcdGxldCB0bCA9IG5ldyBUaW1lbGluZSgpO1xuLy8gXHRcdHJldHVybiBfYWRkVG9UaW1lbGluZSh0bCwgdGhpcylbbmFtZV0uYXBwbHkodGwsIHRvQXJyYXkoYXJndW1lbnRzKSk7XG4vLyBcdH1cbi8vIH0pO1xuLy9mb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gTGV2ZXJhZ2UgdGhlIHRpbWVsaW5lIGNhbGxzLlxuXG5cbl9mb3JFYWNoTmFtZShcInN0YWdnZXJUbyxzdGFnZ2VyRnJvbSxzdGFnZ2VyRnJvbVRvXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIFR3ZWVuW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSgpLFxuICAgICAgICBwYXJhbXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcGFyYW1zLnNwbGljZShuYW1lID09PSBcInN0YWdnZXJGcm9tVG9cIiA/IDUgOiA0LCAwLCAwKTtcbiAgICByZXR1cm4gdGxbbmFtZV0uYXBwbHkodGwsIHBhcmFtcyk7XG4gIH07XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUFJPUFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9zZXR0ZXJQbGFpbiA9IGZ1bmN0aW9uIF9zZXR0ZXJQbGFpbih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyRnVuYyA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckZ1bmNXaXRoUGFyYW0gPSBmdW5jdGlvbiBfc2V0dGVyRnVuY1dpdGhQYXJhbSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XShkYXRhLmZwLCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJBdHRyaWJ1dGUgPSBmdW5jdGlvbiBfc2V0dGVyQXR0cmlidXRlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc2V0QXR0cmlidXRlKHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9nZXRTZXR0ZXIgPSBmdW5jdGlvbiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHRhcmdldFtwcm9wZXJ0eV0pID8gX3NldHRlckZ1bmMgOiBfaXNVbmRlZmluZWQodGFyZ2V0W3Byb3BlcnR5XSkgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZSA/IF9zZXR0ZXJBdHRyaWJ1dGUgOiBfc2V0dGVyUGxhaW47XG59LFxuICAgIF9yZW5kZXJQbGFpbiA9IGZ1bmN0aW9uIF9yZW5kZXJQbGFpbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwMDApIC8gMTAwMDAwMCwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJCb29sZWFuID0gZnVuY3Rpb24gX3JlbmRlckJvb2xlYW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCAhIShkYXRhLnMgKyBkYXRhLmMgKiByYXRpbyksIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQ29tcGxleFN0cmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDb21wbGV4U3RyaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0LFxuICAgICAgcyA9IFwiXCI7XG5cbiAgaWYgKCFyYXRpbyAmJiBkYXRhLmIpIHtcbiAgICAvL2IgPSBiZWdpbm5pbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuYjtcbiAgfSBlbHNlIGlmIChyYXRpbyA9PT0gMSAmJiBkYXRhLmUpIHtcbiAgICAvL2UgPSBlbmRpbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuZTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHMgPSBwdC5wICsgKHB0Lm0gPyBwdC5tKHB0LnMgKyBwdC5jICogcmF0aW8pIDogTWF0aC5yb3VuZCgocHQucyArIHB0LmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCkgKyBzOyAvL3dlIHVzZSB0aGUgXCJwXCIgcHJvcGVydHkgZm9yIHRoZSB0ZXh0IGluYmV0d2VlbiAobGlrZSBhIHN1ZmZpeCkuIEFuZCBpbiB0aGUgY29udGV4dCBvZiBhIGNvbXBsZXggc3RyaW5nLCB0aGUgbW9kaWZpZXIgKG0pIGlzIHR5cGljYWxseSBqdXN0IE1hdGgucm91bmQoKSwgbGlrZSBmb3IgUkdCIGNvbG9ycy5cblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICBzICs9IGRhdGEuYzsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIGNodW5rIG9mIG5vbi1udW1lcmljIHRleHQuXG4gIH1cblxuICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcywgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3JlbmRlclByb3BUd2VlbnMocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxufSxcbiAgICBfYWRkUGx1Z2luTW9kaWZpZXIgPSBmdW5jdGlvbiBfYWRkUGx1Z2luTW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQucCA9PT0gcHJvcGVydHkgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQpO1xuICAgIHB0ID0gbmV4dDtcbiAgfVxufSxcbiAgICBfa2lsbFByb3BUd2VlbnNPZiA9IGZ1bmN0aW9uIF9raWxsUHJvcFR3ZWVuc09mKHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nLFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG5cbiAgICBpZiAocHQucCA9PT0gcHJvcGVydHkgJiYgIXB0Lm9wIHx8IHB0Lm9wID09PSBwcm9wZXJ0eSkge1xuICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICB9IGVsc2UgaWYgKCFwdC5kZXApIHtcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyA9IDE7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuICFoYXNOb25EZXBlbmRlbnRSZW1haW5pbmc7XG59LFxuICAgIF9zZXR0ZXJXaXRoTW9kaWZpZXIgPSBmdW5jdGlvbiBfc2V0dGVyV2l0aE1vZGlmaWVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIGRhdGEubVNldCh0YXJnZXQsIHByb3BlcnR5LCBkYXRhLm0uY2FsbChkYXRhLnR3ZWVuLCB2YWx1ZSwgZGF0YS5tdCksIGRhdGEpO1xufSxcbiAgICBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5ID0gZnVuY3Rpb24gX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eShwYXJlbnQpIHtcbiAgdmFyIHB0ID0gcGFyZW50Ll9wdCxcbiAgICAgIG5leHQsXG4gICAgICBwdDIsXG4gICAgICBmaXJzdCxcbiAgICAgIGxhc3Q7IC8vc29ydHMgdGhlIFByb3BUd2VlbiBsaW5rZWQgbGlzdCBpbiBvcmRlciBvZiBwcmlvcml0eSBiZWNhdXNlIHNvbWUgcGx1Z2lucyBuZWVkIHRvIGRvIHRoZWlyIHdvcmsgYWZ0ZXIgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIHdlcmUgY3JlYXRlZCAobGlrZSBSb3VuZFByb3BzUGx1Z2luIGFuZCBNb2RpZmllcnNQbHVnaW4pXG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0MiA9IGZpcnN0O1xuXG4gICAgd2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuICAgICAgcHQyID0gcHQyLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChwdC5fcHJldiA9IHB0MiA/IHB0Mi5fcHJldiA6IGxhc3QpIHtcbiAgICAgIHB0Ll9wcmV2Ll9uZXh0ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpcnN0ID0gcHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9uZXh0ID0gcHQyKSB7XG4gICAgICBwdDIuX3ByZXYgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IHB0O1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHBhcmVudC5fcHQgPSBmaXJzdDtcbn07IC8vUHJvcFR3ZWVuIGtleTogdCA9IHRhcmdldCwgcCA9IHByb3AsIHIgPSByZW5kZXJlciwgZCA9IGRhdGEsIHMgPSBzdGFydCwgYyA9IGNoYW5nZSwgb3AgPSBvdmVyd3JpdGVQcm9wZXJ0eSAoT05MWSBwb3B1bGF0ZWQgd2hlbiBpdCdzIGRpZmZlcmVudCB0aGFuIHApLCBwciA9IHByaW9yaXR5LCBfbmV4dC9fcHJldiBmb3IgdGhlIGxpbmtlZCBsaXN0IHNpYmxpbmdzLCBzZXQgPSBzZXR0ZXIsIG0gPSBtb2RpZmllciwgbVNldCA9IG1vZGlmaWVyU2V0dGVyICh0aGUgb3JpZ2luYWwgc2V0dGVyLCBiZWZvcmUgYSBtb2RpZmllciB3YXMgYWRkZWQpXG5cblxuZXhwb3J0IHZhciBQcm9wVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcm9wVHdlZW4obmV4dCwgdGFyZ2V0LCBwcm9wLCBzdGFydCwgY2hhbmdlLCByZW5kZXJlciwgZGF0YSwgc2V0dGVyLCBwcmlvcml0eSkge1xuICAgIHRoaXMudCA9IHRhcmdldDtcbiAgICB0aGlzLnMgPSBzdGFydDtcbiAgICB0aGlzLmMgPSBjaGFuZ2U7XG4gICAgdGhpcy5wID0gcHJvcDtcbiAgICB0aGlzLnIgPSByZW5kZXJlciB8fCBfcmVuZGVyUGxhaW47XG4gICAgdGhpcy5kID0gZGF0YSB8fCB0aGlzO1xuICAgIHRoaXMuc2V0ID0gc2V0dGVyIHx8IF9zZXR0ZXJQbGFpbjtcbiAgICB0aGlzLnByID0gcHJpb3JpdHkgfHwgMDtcbiAgICB0aGlzLl9uZXh0ID0gbmV4dDtcblxuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0Ll9wcmV2ID0gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvNCA9IFByb3BUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNC5tb2RpZmllciA9IGZ1bmN0aW9uIG1vZGlmaWVyKGZ1bmMsIHR3ZWVuLCB0YXJnZXQpIHtcbiAgICB0aGlzLm1TZXQgPSB0aGlzLm1TZXQgfHwgdGhpcy5zZXQ7IC8vaW4gY2FzZSBpdCB3YXMgYWxyZWFkeSBzZXQgKGEgUHJvcFR3ZWVuIGNhbiBvbmx5IGhhdmUgb25lIG1vZGlmaWVyKVxuXG4gICAgdGhpcy5zZXQgPSBfc2V0dGVyV2l0aE1vZGlmaWVyO1xuICAgIHRoaXMubSA9IGZ1bmM7XG4gICAgdGhpcy5tdCA9IHRhcmdldDsgLy9tb2RpZmllciB0YXJnZXRcblxuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcbiAgfTtcblxuICByZXR1cm4gUHJvcFR3ZWVuO1xufSgpOyAvL0luaXRpYWxpemF0aW9uIHRhc2tzXG5cbl9mb3JFYWNoTmFtZShfY2FsbGJhY2tOYW1lcyArIFwicGFyZW50LGR1cmF0aW9uLGVhc2UsZGVsYXksb3ZlcndyaXRlLHJ1bkJhY2t3YXJkcyxzdGFydEF0LHlveW8saW1tZWRpYXRlUmVuZGVyLHJlcGVhdCxyZXBlYXREZWxheSxkYXRhLHBhdXNlZCxyZXZlcnNlZCxsYXp5LGNhbGxiYWNrU2NvcGUsc3RyaW5nRmlsdGVyLGlkLHlveW9FYXNlLHN0YWdnZXIsaW5oZXJpdCxyZXBlYXRSZWZyZXNoLGtleWZyYW1lcyxhdXRvUmV2ZXJ0LHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbn0pO1xuXG5fZ2xvYmFscy5Ud2Vlbk1heCA9IF9nbG9iYWxzLlR3ZWVuTGl0ZSA9IFR3ZWVuO1xuX2dsb2JhbHMuVGltZWxpbmVMaXRlID0gX2dsb2JhbHMuVGltZWxpbmVNYXggPSBUaW1lbGluZTtcbl9nbG9iYWxUaW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gIHNvcnRDaGlsZHJlbjogZmFsc2UsXG4gIGRlZmF1bHRzOiBfZGVmYXVsdHMsXG4gIGF1dG9SZW1vdmVDaGlsZHJlbjogdHJ1ZSxcbiAgaWQ6IFwicm9vdFwiLFxuICBzbW9vdGhDaGlsZFRpbWluZzogdHJ1ZVxufSk7XG5fY29uZmlnLnN0cmluZ0ZpbHRlciA9IF9jb2xvclN0cmluZ0ZpbHRlcjtcblxudmFyIF9tZWRpYSA9IFtdLFxuICAgIF9saXN0ZW5lcnMgPSB7fSxcbiAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgIF9sYXN0TWVkaWFUaW1lID0gMCxcbiAgICBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBfZGlzcGF0Y2godHlwZSkge1xuICByZXR1cm4gKF9saXN0ZW5lcnNbdHlwZV0gfHwgX2VtcHR5QXJyYXkpLm1hcChmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmKCk7XG4gIH0pO1xufSxcbiAgICBfb25NZWRpYUNoYW5nZSA9IGZ1bmN0aW9uIF9vbk1lZGlhQ2hhbmdlKCkge1xuICB2YXIgdGltZSA9IERhdGUubm93KCksXG4gICAgICBtYXRjaGVzID0gW107XG5cbiAgaWYgKHRpbWUgLSBfbGFzdE1lZGlhVGltZSA+IDIpIHtcbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhSW5pdFwiKTtcblxuICAgIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgcXVlcmllcyA9IGMucXVlcmllcyxcbiAgICAgICAgICBjb25kaXRpb25zID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgYW55TWF0Y2gsXG4gICAgICAgICAgdG9nZ2xlZDtcblxuICAgICAgZm9yIChwIGluIHF1ZXJpZXMpIHtcbiAgICAgICAgbWF0Y2ggPSBfd2luLm1hdGNoTWVkaWEocXVlcmllc1twXSkubWF0Y2hlczsgLy8gRmlyZWZveCBkb2Vzbid0IHVwZGF0ZSB0aGUgXCJtYXRjaGVzXCIgcHJvcGVydHkgb2YgdGhlIE1lZGlhUXVlcnlMaXN0IG9iamVjdCBjb3JyZWN0bHkgLSBpdCBvbmx5IGRvZXMgc28gYXMgaXQgY2FsbHMgaXRzIGNoYW5nZSBoYW5kbGVyIC0gc28gd2UgbXVzdCByZS1jcmVhdGUgYSBtZWRpYSBxdWVyeSBoZXJlIHRvIGVuc3VyZSBpdCdzIGFjY3VyYXRlLlxuXG4gICAgICAgIG1hdGNoICYmIChhbnlNYXRjaCA9IDEpO1xuXG4gICAgICAgIGlmIChtYXRjaCAhPT0gY29uZGl0aW9uc1twXSkge1xuICAgICAgICAgIGNvbmRpdGlvbnNbcF0gPSBtYXRjaDtcbiAgICAgICAgICB0b2dnbGVkID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodG9nZ2xlZCkge1xuICAgICAgICBjLnJldmVydCgpO1xuICAgICAgICBhbnlNYXRjaCAmJiBtYXRjaGVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhUmV2ZXJ0XCIpO1xuXG4gICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5vbk1hdGNoKGMpO1xuICAgIH0pO1xuICAgIF9sYXN0TWVkaWFUaW1lID0gdGltZTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFcIik7XG4gIH1cbn07XG5cbnZhciBDb250ZXh0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHRoaXMuc2VsZWN0b3IgPSBzY29wZSAmJiBzZWxlY3RvcihzY29wZSk7XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGhpcy5fciA9IFtdOyAvLyByZXR1cm5lZC9jbGVhbnVwIGZ1bmN0aW9uc1xuXG4gICAgdGhpcy5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgZnVuYyAmJiB0aGlzLmFkZChmdW5jKTtcbiAgfVxuXG4gIHZhciBfcHJvdG81ID0gQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNS5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZnVuYywgc2NvcGUpIHtcbiAgICBpZiAoX2lzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgIHNjb3BlID0gZnVuYztcbiAgICAgIGZ1bmMgPSBuYW1lO1xuICAgICAgbmFtZSA9IF9pc0Z1bmN0aW9uO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgZiA9IGZ1bmN0aW9uIGYoKSB7XG4gICAgICB2YXIgcHJldiA9IF9jb250ZXh0LFxuICAgICAgICAgIHByZXZTZWxlY3RvciA9IHNlbGYuc2VsZWN0b3IsXG4gICAgICAgICAgcmVzdWx0O1xuICAgICAgcHJldiAmJiBwcmV2ICE9PSBzZWxmICYmIHByZXYuZGF0YS5wdXNoKHNlbGYpO1xuICAgICAgc2NvcGUgJiYgKHNlbGYuc2VsZWN0b3IgPSBzZWxlY3RvcihzY29wZSkpO1xuICAgICAgX2NvbnRleHQgPSBzZWxmO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgX2lzRnVuY3Rpb24ocmVzdWx0KSAmJiBzZWxmLl9yLnB1c2gocmVzdWx0KTtcbiAgICAgIF9jb250ZXh0ID0gcHJldjtcbiAgICAgIHNlbGYuc2VsZWN0b3IgPSBwcmV2U2VsZWN0b3I7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHNlbGYubGFzdCA9IGY7XG4gICAgcmV0dXJuIG5hbWUgPT09IF9pc0Z1bmN0aW9uID8gZihzZWxmKSA6IG5hbWUgPyBzZWxmW25hbWVdID0gZiA6IGY7XG4gIH07XG5cbiAgX3Byb3RvNS5pZ25vcmUgPSBmdW5jdGlvbiBpZ25vcmUoZnVuYykge1xuICAgIHZhciBwcmV2ID0gX2NvbnRleHQ7XG4gICAgX2NvbnRleHQgPSBudWxsO1xuICAgIGZ1bmModGhpcyk7XG4gICAgX2NvbnRleHQgPSBwcmV2O1xuICB9O1xuXG4gIF9wcm90bzUuZ2V0VHdlZW5zID0gZnVuY3Rpb24gZ2V0VHdlZW5zKCkge1xuICAgIHZhciBhID0gW107XG4gICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgQ29udGV4dCA/IGEucHVzaC5hcHBseShhLCBlLmdldFR3ZWVucygpKSA6IGUgaW5zdGFuY2VvZiBUd2VlbiAmJiAhKGUucGFyZW50ICYmIGUucGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIpICYmIGEucHVzaChlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG81LmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fci5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbiAgfTtcblxuICBfcHJvdG81LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCwgbWF0Y2hNZWRpYSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVydCkge1xuICAgICAgdmFyIHR3ZWVucyA9IHRoaXMuZ2V0VHdlZW5zKCk7XG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAvLyBGbGlwIHBsdWdpbiB0d2VlbnMgYXJlIHZlcnkgZGlmZmVyZW50IGluIHRoYXQgdGhleSBzaG91bGQgYWN0dWFsbHkgYmUgcHVzaGVkIHRvIHRoZWlyIGVuZC4gVGhlIHBsdWdpbiByZXBsYWNlcyB0aGUgdGltZWxpbmUncyAucmV2ZXJ0KCkgbWV0aG9kIHRvIGRvIGV4YWN0bHkgdGhhdC4gQnV0IHdlIGFsc28gbmVlZCB0byByZW1vdmUgYW55IG9mIHRob3NlIG5lc3RlZCB0d2VlbnMgaW5zaWRlIHRoZSBmbGlwIHRpbWVsaW5lIHNvIHRoYXQgdGhleSBkb24ndCBnZXQgaW5kaXZpZHVhbGx5IHJldmVydGVkLlxuICAgICAgICBpZiAodC5kYXRhID09PSBcImlzRmxpcFwiKSB7XG4gICAgICAgICAgdC5yZXZlcnQoKTtcbiAgICAgICAgICB0LmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICAgICAgcmV0dXJuIHR3ZWVucy5zcGxpY2UodHdlZW5zLmluZGV4T2YodHdlZW4pLCAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIHNhdmUgYXMgYW4gb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGNhY2hlIHRoZSBnbG9iYWxUaW1lIGZvciBlYWNoIHR3ZWVuIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIGR1cmluZyB0aGUgc29ydFxuXG4gICAgICB0d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZzogdC5nbG9iYWxUaW1lKDApLFxuICAgICAgICAgIHQ6IHRcbiAgICAgICAgfTtcbiAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIuZyAtIGEuZyB8fCAtMTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIG8udC5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgIH0pOyAvLyBub3RlOiBhbGwgb2YgdGhlIF9zdGFydEF0IHR3ZWVucyBzaG91bGQgYmUgcmV2ZXJ0ZWQgaW4gcmV2ZXJzZSBvcmRlciB0aGF0IHRoeSB3ZXJlIGNyZWF0ZWQsIGFuZCB0aGV5J2xsIGFsbCBoYXZlIHRoZSBzYW1lIGdsb2JhbFRpbWUgKC0xKSBzbyB0aGUgXCIgfHwgLTFcIiBpbiB0aGUgc29ydCBrZWVwcyB0aGUgb3JkZXIgcHJvcGVybHkuXG5cbiAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiAhKGUgaW5zdGFuY2VvZiBBbmltYXRpb24pICYmIGUucmV2ZXJ0ICYmIGUucmV2ZXJ0KHJldmVydCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fci5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHJldHVybiBmKHJldmVydCwgX3RoaXM0KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmlzUmV2ZXJ0ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZS5raWxsICYmIGUua2lsbCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgaWYgKG1hdGNoTWVkaWEpIHtcbiAgICAgIHZhciBpID0gX21lZGlhLmluZGV4T2YodGhpcyk7XG5cbiAgICAgICEhfmkgJiYgX21lZGlhLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvNS5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgdGhpcy5raWxsKGNvbmZpZyB8fCB7fSk7XG4gIH07XG5cbiAgcmV0dXJuIENvbnRleHQ7XG59KCk7XG5cbnZhciBNYXRjaE1lZGlhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWF0Y2hNZWRpYShzY29wZSkge1xuICAgIHRoaXMuY29udGV4dHMgPSBbXTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gIH1cblxuICB2YXIgX3Byb3RvNiA9IE1hdGNoTWVkaWEucHJvdG90eXBlO1xuXG4gIF9wcm90bzYuYWRkID0gZnVuY3Rpb24gYWRkKGNvbmRpdGlvbnMsIGZ1bmMsIHNjb3BlKSB7XG4gICAgX2lzT2JqZWN0KGNvbmRpdGlvbnMpIHx8IChjb25kaXRpb25zID0ge1xuICAgICAgbWF0Y2hlczogY29uZGl0aW9uc1xuICAgIH0pO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQoMCwgc2NvcGUgfHwgdGhpcy5zY29wZSksXG4gICAgICAgIGNvbmQgPSBjb250ZXh0LmNvbmRpdGlvbnMgPSB7fSxcbiAgICAgICAgbXEsXG4gICAgICAgIHAsXG4gICAgICAgIGFjdGl2ZTtcbiAgICB0aGlzLmNvbnRleHRzLnB1c2goY29udGV4dCk7XG4gICAgZnVuYyA9IGNvbnRleHQuYWRkKFwib25NYXRjaFwiLCBmdW5jKTtcbiAgICBjb250ZXh0LnF1ZXJpZXMgPSBjb25kaXRpb25zO1xuXG4gICAgZm9yIChwIGluIGNvbmRpdGlvbnMpIHtcbiAgICAgIGlmIChwID09PSBcImFsbFwiKSB7XG4gICAgICAgIGFjdGl2ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtcSA9IF93aW4ubWF0Y2hNZWRpYShjb25kaXRpb25zW3BdKTtcblxuICAgICAgICBpZiAobXEpIHtcbiAgICAgICAgICBfbWVkaWEuaW5kZXhPZihjb250ZXh0KSA8IDAgJiYgX21lZGlhLnB1c2goY29udGV4dCk7XG4gICAgICAgICAgKGNvbmRbcF0gPSBtcS5tYXRjaGVzKSAmJiAoYWN0aXZlID0gMSk7XG4gICAgICAgICAgbXEuYWRkTGlzdGVuZXIgPyBtcS5hZGRMaXN0ZW5lcihfb25NZWRpYUNoYW5nZSkgOiBtcS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIF9vbk1lZGlhQ2hhbmdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGFjdGl2ZSAmJiBmdW5jKGNvbnRleHQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHJlZnJlc2goKSB7XG4gIC8vIFx0bGV0IHRpbWUgPSBfbGFzdE1lZGlhVGltZSxcbiAgLy8gXHRcdG1lZGlhID0gX21lZGlhO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gLTE7XG4gIC8vIFx0X21lZGlhID0gdGhpcy5jb250ZXh0cztcbiAgLy8gXHRfb25NZWRpYUNoYW5nZSgpO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gdGltZTtcbiAgLy8gXHRfbWVkaWEgPSBtZWRpYTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvNi5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgdGhpcy5raWxsKGNvbmZpZyB8fCB7fSk7XG4gIH07XG5cbiAgX3Byb3RvNi5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQpIHtcbiAgICB0aGlzLmNvbnRleHRzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLmtpbGwocmV2ZXJ0LCB0cnVlKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWF0Y2hNZWRpYTtcbn0oKTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogR1NBUFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfZ3NhcCA9IHtcbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVBsdWdpbihjb25maWcpO1xuICAgIH0pO1xuICB9LFxuICB0aW1lbGluZTogZnVuY3Rpb24gdGltZWxpbmUodmFycykge1xuICAgIHJldHVybiBuZXcgVGltZWxpbmUodmFycyk7XG4gIH0sXG4gIGdldFR3ZWVuc09mOiBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKTtcbiAgfSxcbiAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uIGdldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICBfaXNTdHJpbmcodGFyZ2V0KSAmJiAodGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpWzBdKTsgLy9pbiBjYXNlIHNlbGVjdG9yIHRleHQgb3IgYW4gYXJyYXkgaXMgcGFzc2VkIGluXG5cbiAgICB2YXIgZ2V0dGVyID0gX2dldENhY2hlKHRhcmdldCB8fCB7fSkuZ2V0LFxuICAgICAgICBmb3JtYXQgPSB1bml0ID8gX3Bhc3NUaHJvdWdoIDogX251bWVyaWNJZlBvc3NpYmxlO1xuXG4gICAgdW5pdCA9PT0gXCJuYXRpdmVcIiAmJiAodW5pdCA9IFwiXCIpO1xuICAgIHJldHVybiAhdGFyZ2V0ID8gdGFyZ2V0IDogIXByb3BlcnR5ID8gZnVuY3Rpb24gKHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgICB9IDogZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgfSxcbiAgcXVpY2tTZXR0ZXI6IGZ1bmN0aW9uIHF1aWNrU2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHtcbiAgICB0YXJnZXQgPSB0b0FycmF5KHRhcmdldCk7XG5cbiAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzZXR0ZXJzID0gdGFyZ2V0Lm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZ3NhcC5xdWlja1NldHRlcih0LCBwcm9wZXJ0eSwgdW5pdCk7XG4gICAgICB9KSxcbiAgICAgICAgICBsID0gc2V0dGVycy5sZW5ndGg7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gbDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgc2V0dGVyc1tpXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0WzBdIHx8IHt9O1xuXG4gICAgdmFyIFBsdWdpbiA9IF9wbHVnaW5zW3Byb3BlcnR5XSxcbiAgICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgICAgcCA9IGNhY2hlLmhhcm5lc3MgJiYgKGNhY2hlLmhhcm5lc3MuYWxpYXNlcyB8fCB7fSlbcHJvcGVydHldIHx8IHByb3BlcnR5LFxuICAgICAgICAvLyBpbiBjYXNlIGl0J3MgYW4gYWxpYXMsIGxpa2UgXCJyb3RhdGVcIiBmb3IgXCJyb3RhdGlvblwiLlxuICAgIHNldHRlciA9IFBsdWdpbiA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIHAgPSBuZXcgUGx1Z2luKCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgPSAwO1xuICAgICAgcC5pbml0KHRhcmdldCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBfcXVpY2tUd2VlbiwgMCwgW3RhcmdldF0pO1xuICAgICAgcC5yZW5kZXIoMSwgcCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgJiYgX3JlbmRlclByb3BUd2VlbnMoMSwgX3F1aWNrVHdlZW4pO1xuICAgIH0gOiBjYWNoZS5zZXQodGFyZ2V0LCBwKTtcblxuICAgIHJldHVybiBQbHVnaW4gPyBzZXR0ZXIgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBzZXR0ZXIodGFyZ2V0LCBwLCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIGNhY2hlLCAxKTtcbiAgICB9O1xuICB9LFxuICBxdWlja1RvOiBmdW5jdGlvbiBxdWlja1RvKHRhcmdldCwgcHJvcGVydHksIHZhcnMpIHtcbiAgICB2YXIgX21lcmdlMjtcblxuICAgIHZhciB0d2VlbiA9IGdzYXAudG8odGFyZ2V0LCBfbWVyZ2UoKF9tZXJnZTIgPSB7fSwgX21lcmdlMltwcm9wZXJ0eV0gPSBcIis9MC4xXCIsIF9tZXJnZTIucGF1c2VkID0gdHJ1ZSwgX21lcmdlMiksIHZhcnMgfHwge30pKSxcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmModmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpIHtcbiAgICAgIHJldHVybiB0d2Vlbi5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7XG4gICAgfTtcblxuICAgIGZ1bmMudHdlZW4gPSB0d2VlbjtcbiAgICByZXR1cm4gZnVuYztcbiAgfSxcbiAgaXNUd2VlbmluZzogZnVuY3Rpb24gaXNUd2VlbmluZyh0YXJnZXRzKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCB0cnVlKS5sZW5ndGggPiAwO1xuICB9LFxuICBkZWZhdWx0czogZnVuY3Rpb24gZGVmYXVsdHModmFsdWUpIHtcbiAgICB2YWx1ZSAmJiB2YWx1ZS5lYXNlICYmICh2YWx1ZS5lYXNlID0gX3BhcnNlRWFzZSh2YWx1ZS5lYXNlLCBfZGVmYXVsdHMuZWFzZSkpO1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9kZWZhdWx0cywgdmFsdWUgfHwge30pO1xuICB9LFxuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyh2YWx1ZSkge1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9jb25maWcsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgcmVnaXN0ZXJFZmZlY3Q6IGZ1bmN0aW9uIHJlZ2lzdGVyRWZmZWN0KF9yZWYzKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3QsXG4gICAgICAgIHBsdWdpbnMgPSBfcmVmMy5wbHVnaW5zLFxuICAgICAgICBkZWZhdWx0cyA9IF9yZWYzLmRlZmF1bHRzLFxuICAgICAgICBleHRlbmRUaW1lbGluZSA9IF9yZWYzLmV4dGVuZFRpbWVsaW5lO1xuICAgIChwbHVnaW5zIHx8IFwiXCIpLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gICAgICByZXR1cm4gcGx1Z2luTmFtZSAmJiAhX3BsdWdpbnNbcGx1Z2luTmFtZV0gJiYgIV9nbG9iYWxzW3BsdWdpbk5hbWVdICYmIF93YXJuKG5hbWUgKyBcIiBlZmZlY3QgcmVxdWlyZXMgXCIgKyBwbHVnaW5OYW1lICsgXCIgcGx1Z2luLlwiKTtcbiAgICB9KTtcblxuICAgIF9lZmZlY3RzW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHRsKSB7XG4gICAgICByZXR1cm4gZWZmZWN0KHRvQXJyYXkodGFyZ2V0cyksIF9zZXREZWZhdWx0cyh2YXJzIHx8IHt9LCBkZWZhdWx0cyksIHRsKTtcbiAgICB9O1xuXG4gICAgaWYgKGV4dGVuZFRpbWVsaW5lKSB7XG4gICAgICBUaW1lbGluZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKF9lZmZlY3RzW25hbWVdKHRhcmdldHMsIF9pc09iamVjdCh2YXJzKSA/IHZhcnMgOiAocG9zaXRpb24gPSB2YXJzKSAmJiB7fSwgdGhpcyksIHBvc2l0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICByZWdpc3RlckVhc2U6IGZ1bmN0aW9uIHJlZ2lzdGVyRWFzZShuYW1lLCBlYXNlKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfcGFyc2VFYXNlKGVhc2UpO1xuICB9LFxuICBwYXJzZUVhc2U6IGZ1bmN0aW9uIHBhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkgOiBfZWFzZU1hcDtcbiAgfSxcbiAgZ2V0QnlJZDogZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0QnlJZChpZCk7XG4gIH0sXG4gIGV4cG9ydFJvb3Q6IGZ1bmN0aW9uIGV4cG9ydFJvb3QodmFycywgaW5jbHVkZURlbGF5ZWRDYWxscykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUodmFycyksXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0O1xuICAgIHRsLnNtb290aENoaWxkVGltaW5nID0gX2lzTm90RmFsc2UodmFycy5zbW9vdGhDaGlsZFRpbWluZyk7XG5cbiAgICBfZ2xvYmFsVGltZWxpbmUucmVtb3ZlKHRsKTtcblxuICAgIHRsLl9kcCA9IDA7IC8vb3RoZXJ3aXNlIGl0J2xsIGdldCByZS1hY3RpdmF0ZWQgd2hlbiBhZGRpbmcgY2hpbGRyZW4gYW5kIGJlIHJlLWludHJvZHVjZWQgaW50byBfZ2xvYmFsVGltZWxpbmUncyBsaW5rZWQgbGlzdCAodGhlbiBhZGRlZCB0byBpdHNlbGYpLlxuXG4gICAgdGwuX3RpbWUgPSB0bC5fdFRpbWUgPSBfZ2xvYmFsVGltZWxpbmUuX3RpbWU7XG4gICAgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgIGlmIChpbmNsdWRlRGVsYXllZENhbGxzIHx8ICEoIWNoaWxkLl9kdXIgJiYgY2hpbGQgaW5zdGFuY2VvZiBUd2VlbiAmJiBjaGlsZC52YXJzLm9uQ29tcGxldGUgPT09IGNoaWxkLl90YXJnZXRzWzBdKSkge1xuICAgICAgICBfYWRkVG9UaW1lbGluZSh0bCwgY2hpbGQsIGNoaWxkLl9zdGFydCAtIGNoaWxkLl9kZWxheSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShfZ2xvYmFsVGltZWxpbmUsIHRsLCAwKTtcblxuICAgIHJldHVybiB0bDtcbiAgfSxcbiAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHJldHVybiBmdW5jID8gbmV3IENvbnRleHQoZnVuYywgc2NvcGUpIDogX2NvbnRleHQ7XG4gIH0sXG4gIG1hdGNoTWVkaWE6IGZ1bmN0aW9uIG1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IE1hdGNoTWVkaWEoc2NvcGUpO1xuICB9LFxuICBtYXRjaE1lZGlhUmVmcmVzaDogZnVuY3Rpb24gbWF0Y2hNZWRpYVJlZnJlc2goKSB7XG4gICAgcmV0dXJuIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgY29uZCA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBmb3VuZCxcbiAgICAgICAgICBwO1xuXG4gICAgICBmb3IgKHAgaW4gY29uZCkge1xuICAgICAgICBpZiAoY29uZFtwXSkge1xuICAgICAgICAgIGNvbmRbcF0gPSBmYWxzZTtcbiAgICAgICAgICBmb3VuZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm91bmQgJiYgYy5yZXZlcnQoKTtcbiAgICB9KSB8fCBfb25NZWRpYUNoYW5nZSgpO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICAgIH5hLmluZGV4T2YoY2FsbGJhY2spIHx8IGEucHVzaChjYWxsYmFjayk7XG4gIH0sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0sXG4gICAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaSA+PSAwICYmIGEuc3BsaWNlKGksIDEpO1xuICB9LFxuICB1dGlsczoge1xuICAgIHdyYXA6IHdyYXAsXG4gICAgd3JhcFlveW86IHdyYXBZb3lvLFxuICAgIGRpc3RyaWJ1dGU6IGRpc3RyaWJ1dGUsXG4gICAgcmFuZG9tOiByYW5kb20sXG4gICAgc25hcDogc25hcCxcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgICBnZXRVbml0OiBnZXRVbml0LFxuICAgIGNsYW1wOiBjbGFtcCxcbiAgICBzcGxpdENvbG9yOiBzcGxpdENvbG9yLFxuICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIG1hcFJhbmdlOiBtYXBSYW5nZSxcbiAgICBwaXBlOiBwaXBlLFxuICAgIHVuaXRpemU6IHVuaXRpemUsXG4gICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgIHNodWZmbGU6IHNodWZmbGVcbiAgfSxcbiAgaW5zdGFsbDogX2luc3RhbGwsXG4gIGVmZmVjdHM6IF9lZmZlY3RzLFxuICB0aWNrZXI6IF90aWNrZXIsXG4gIHVwZGF0ZVJvb3Q6IFRpbWVsaW5lLnVwZGF0ZVJvb3QsXG4gIHBsdWdpbnM6IF9wbHVnaW5zLFxuICBnbG9iYWxUaW1lbGluZTogX2dsb2JhbFRpbWVsaW5lLFxuICBjb3JlOiB7XG4gICAgUHJvcFR3ZWVuOiBQcm9wVHdlZW4sXG4gICAgZ2xvYmFsczogX2FkZEdsb2JhbCxcbiAgICBUd2VlbjogVHdlZW4sXG4gICAgVGltZWxpbmU6IFRpbWVsaW5lLFxuICAgIEFuaW1hdGlvbjogQW5pbWF0aW9uLFxuICAgIGdldENhY2hlOiBfZ2V0Q2FjaGUsXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtOiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sXG4gICAgcmV2ZXJ0aW5nOiBmdW5jdGlvbiByZXZlcnRpbmcoKSB7XG4gICAgICByZXR1cm4gX3JldmVydGluZztcbiAgICB9LFxuICAgIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQodG9BZGQpIHtcbiAgICAgIGlmICh0b0FkZCAmJiBfY29udGV4dCkge1xuICAgICAgICBfY29udGV4dC5kYXRhLnB1c2godG9BZGQpO1xuXG4gICAgICAgIHRvQWRkLl9jdHggPSBfY29udGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9jb250ZXh0O1xuICAgIH0sXG4gICAgc3VwcHJlc3NPdmVyd3JpdGVzOiBmdW5jdGlvbiBzdXBwcmVzc092ZXJ3cml0ZXModmFsdWUpIHtcbiAgICAgIHJldHVybiBfc3VwcHJlc3NPdmVyd3JpdGVzID0gdmFsdWU7XG4gICAgfVxuICB9XG59O1xuXG5fZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxkZWxheWVkQ2FsbCxzZXQsa2lsbFR3ZWVuc09mXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfZ3NhcFtuYW1lXSA9IFR3ZWVuW25hbWVdO1xufSk7XG5cbl90aWNrZXIuYWRkKFRpbWVsaW5lLnVwZGF0ZVJvb3QpO1xuXG5fcXVpY2tUd2VlbiA9IF9nc2FwLnRvKHt9LCB7XG4gIGR1cmF0aW9uOiAwXG59KTsgLy8gLS0tLSBFWFRSQSBQTFVHSU5TIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBfZ2V0UGx1Z2luUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2dldFBsdWdpblByb3BUd2VlbihwbHVnaW4sIHByb3ApIHtcbiAgdmFyIHB0ID0gcGx1Z2luLl9wdDtcblxuICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcCAmJiBwdC5vcCAhPT0gcHJvcCAmJiBwdC5mcCAhPT0gcHJvcCkge1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRNb2RpZmllcnMgPSBmdW5jdGlvbiBfYWRkTW9kaWZpZXJzKHR3ZWVuLCBtb2RpZmllcnMpIHtcbiAgdmFyIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgcHQ7XG5cbiAgZm9yIChwIGluIG1vZGlmaWVycykge1xuICAgIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gdHdlZW4uX3B0TG9va3VwW2ldW3BdO1xuXG4gICAgICBpZiAocHQgJiYgKHB0ID0gcHQuZCkpIHtcbiAgICAgICAgaWYgKHB0Ll9wdCkge1xuICAgICAgICAgIC8vIGlzIGEgcGx1Z2luXG4gICAgICAgICAgcHQgPSBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHB0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB0ICYmIHB0Lm1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyc1twXSwgdHdlZW4sIHRhcmdldHNbaV0sIHApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfYnVpbGRNb2RpZmllclBsdWdpbiA9IGZ1bmN0aW9uIF9idWlsZE1vZGlmaWVyUGx1Z2luKG5hbWUsIG1vZGlmaWVyKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICByYXdWYXJzOiAxLFxuICAgIC8vZG9uJ3QgcHJlLXByb2Nlc3MgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG9yIFwicmFuZG9tKClcIiBzdHJpbmdzLlxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbikge1xuICAgICAgdHdlZW4uX29uSW5pdCA9IGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICB2YXIgdGVtcCwgcDtcblxuICAgICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcFtuYW1lXSA9IDE7XG4gICAgICAgICAgfSk7IC8vaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gcm91bmRQcm9wcywgbGlrZSBcIngseVwiLCB3ZSByb3VuZCB0byB3aG9sZSBudW1iZXJzLlxuXG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RpZmllcikge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICB0ZW1wW3BdID0gbW9kaWZpZXIodmFyc1twXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBfYWRkTW9kaWZpZXJzKHR3ZWVuLCB2YXJzKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTsgLy9yZWdpc3RlciBjb3JlIHBsdWdpbnNcblxuXG5leHBvcnQgdmFyIGdzYXAgPSBfZ3NhcC5yZWdpc3RlclBsdWdpbih7XG4gIG5hbWU6IFwiYXR0clwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHAsIHB0LCB2O1xuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICB2ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShwKSB8fCBcIlwiO1xuICAgICAgcHQgPSB0aGlzLmFkZCh0YXJnZXQsIFwic2V0QXR0cmlidXRlXCIsICh2IHx8IDApICsgXCJcIiwgdmFyc1twXSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgcHQub3AgPSBwO1xuICAgICAgcHQuYiA9IHY7IC8vIHJlY29yZCB0aGUgYmVnaW5uaW5nIHZhbHVlIHNvIHdlIGNhbiByZXZlcnQoKVxuXG4gICAgICB0aGlzLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgX3JldmVydGluZyA/IHB0LnNldChwdC50LCBwdC5wLCBwdC5iLCBwdCkgOiBwdC5yKHJhdGlvLCBwdC5kKTsgLy8gaWYgcmV2ZXJ0aW5nLCBnbyBiYWNrIHRvIHRoZSBvcmlnaW5hbCAocHQuYilcblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG4gIH1cbn0sIHtcbiAgbmFtZTogXCJlbmRBcnJheVwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFsdWUpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuYWRkKHRhcmdldCwgaSwgdGFyZ2V0W2ldIHx8IDAsIHZhbHVlW2ldLCAwLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG4gIH1cbn0sIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwicm91bmRQcm9wc1wiLCBfcm91bmRNb2RpZmllciksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwibW9kaWZpZXJzXCIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcInNuYXBcIiwgc25hcCkpIHx8IF9nc2FwOyAvL3RvIHByZXZlbnQgdGhlIGNvcmUgcGx1Z2lucyBmcm9tIGJlaW5nIGRyb3BwZWQgdmlhIGFnZ3Jlc3NpdmUgdHJlZSBzaGFraW5nLCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGUgdmFyaWFibGUgZGVjbGFyYXRpb24gaW4gdGhpcyB3YXkuXG5cblR3ZWVuLnZlcnNpb24gPSBUaW1lbGluZS52ZXJzaW9uID0gZ3NhcC52ZXJzaW9uID0gXCIzLjExLjNcIjtcbl9jb3JlUmVhZHkgPSAxO1xuX3dpbmRvd0V4aXN0cygpICYmIF93YWtlKCk7XG52YXIgUG93ZXIwID0gX2Vhc2VNYXAuUG93ZXIwLFxuICAgIFBvd2VyMSA9IF9lYXNlTWFwLlBvd2VyMSxcbiAgICBQb3dlcjIgPSBfZWFzZU1hcC5Qb3dlcjIsXG4gICAgUG93ZXIzID0gX2Vhc2VNYXAuUG93ZXIzLFxuICAgIFBvd2VyNCA9IF9lYXNlTWFwLlBvd2VyNCxcbiAgICBMaW5lYXIgPSBfZWFzZU1hcC5MaW5lYXIsXG4gICAgUXVhZCA9IF9lYXNlTWFwLlF1YWQsXG4gICAgQ3ViaWMgPSBfZWFzZU1hcC5DdWJpYyxcbiAgICBRdWFydCA9IF9lYXNlTWFwLlF1YXJ0LFxuICAgIFF1aW50ID0gX2Vhc2VNYXAuUXVpbnQsXG4gICAgU3Ryb25nID0gX2Vhc2VNYXAuU3Ryb25nLFxuICAgIEVsYXN0aWMgPSBfZWFzZU1hcC5FbGFzdGljLFxuICAgIEJhY2sgPSBfZWFzZU1hcC5CYWNrLFxuICAgIFN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuU3RlcHBlZEVhc2UsXG4gICAgQm91bmNlID0gX2Vhc2VNYXAuQm91bmNlLFxuICAgIFNpbmUgPSBfZWFzZU1hcC5TaW5lLFxuICAgIEV4cG8gPSBfZWFzZU1hcC5FeHBvLFxuICAgIENpcmMgPSBfZWFzZU1hcC5DaXJjO1xuZXhwb3J0IHsgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjIH07XG5leHBvcnQgeyBUd2VlbiBhcyBUd2Vlbk1heCwgVHdlZW4gYXMgVHdlZW5MaXRlLCBUaW1lbGluZSBhcyBUaW1lbGluZU1heCwgVGltZWxpbmUgYXMgVGltZWxpbmVMaXRlLCBnc2FwIGFzIGRlZmF1bHQsIHdyYXAsIHdyYXBZb3lvLCBkaXN0cmlidXRlLCByYW5kb20sIHNuYXAsIG5vcm1hbGl6ZSwgZ2V0VW5pdCwgY2xhbXAsIHNwbGl0Q29sb3IsIHRvQXJyYXksIHNlbGVjdG9yLCBtYXBSYW5nZSwgcGlwZSwgdW5pdGl6ZSwgaW50ZXJwb2xhdGUsIHNodWZmbGUgfTsgLy9leHBvcnQgc29tZSBpbnRlcm5hbCBtZXRob2RzL29yb2plY3RzIGZvciB1c2UgaW4gQ1NTUGx1Z2luIHNvIHRoYXQgd2UgY2FuIGV4dGVybmFsaXplIHRoYXQgZmlsZSBhbmQgYWxsb3cgY3VzdG9tIGJ1aWxkcyB0aGF0IGV4Y2x1ZGUgaXQuXG5cbmV4cG9ydCB7IF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtLCBfZm9yRWFjaE5hbWUsIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHksIF9jb2xvclN0cmluZ0ZpbHRlciwgX3JlcGxhY2VSYW5kb20sIF9jaGVja1BsdWdpbiwgX3BsdWdpbnMsIF90aWNrZXIsIF9jb25maWcsIF9yb3VuZE1vZGlmaWVyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUgfTsiLCIvKiFcbiAqIENTU1BsdWdpbiAzLjExLjNcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDA4LTIwMjIsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBnc2FwLCBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgZ2V0VW5pdCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfZm9yRWFjaE5hbWUsIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHksIF9jb2xvclN0cmluZ0ZpbHRlciwgX2NoZWNrUGx1Z2luLCBfcmVwbGFjZVJhbmRvbSwgX3BsdWdpbnMsIEdTQ2FjaGUsIFByb3BUd2VlbiwgX2NvbmZpZywgX3RpY2tlciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSAvL2ZvciB0aGUgY29tbWVudGVkLW91dCBjbGFzc05hbWUgZmVhdHVyZS5cbn0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5cbnZhciBfd2luLFxuICAgIF9kb2MsXG4gICAgX2RvY0VsZW1lbnQsXG4gICAgX3BsdWdpbkluaXR0ZWQsXG4gICAgX3RlbXBEaXYsXG4gICAgX3RlbXBEaXZTdHlsZXIsXG4gICAgX3JlY2VudFNldHRlclBsdWdpbixcbiAgICBfcmV2ZXJ0aW5nLFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3BzID0ge30sXG4gICAgX1JBRDJERUcgPSAxODAgLyBNYXRoLlBJLFxuICAgIF9ERUcyUkFEID0gTWF0aC5QSSAvIDE4MCxcbiAgICBfYXRhbjIgPSBNYXRoLmF0YW4yLFxuICAgIF9iaWdOdW0gPSAxZTgsXG4gICAgX2NhcHNFeHAgPSAvKFtBLVpdKS9nLFxuICAgIF9ob3Jpem9udGFsRXhwID0gLyhsZWZ0fHJpZ2h0fHdpZHRofG1hcmdpbnxwYWRkaW5nfHgpL2ksXG4gICAgX2NvbXBsZXhFeHAgPSAvW1xccyxcXChdXFxTLyxcbiAgICBfcHJvcGVydHlBbGlhc2VzID0ge1xuICBhdXRvQWxwaGE6IFwib3BhY2l0eSx2aXNpYmlsaXR5XCIsXG4gIHNjYWxlOiBcInNjYWxlWCxzY2FsZVlcIixcbiAgYWxwaGE6IFwib3BhY2l0eVwiXG59LFxuICAgIF9yZW5kZXJDU1NQcm9wID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJQcm9wV2l0aEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wV2l0aEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID09PSAxID8gZGF0YS5lIDogTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmcocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA/IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51IDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgLy9pZiB1bml0cyBjaGFuZ2UsIHdlIG5lZWQgYSB3YXkgdG8gcmVuZGVyIHRoZSBvcmlnaW5hbCB1bml0L3ZhbHVlIHdoZW4gdGhlIHR3ZWVuIGdvZXMgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nIChyYXRpbzowKVxuX3JlbmRlclJvdW5kZWRDU1NQcm9wID0gZnVuY3Rpb24gX3JlbmRlclJvdW5kZWRDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGEucyArIGRhdGEuYyAqIHJhdGlvO1xuICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgfn4odmFsdWUgKyAodmFsdWUgPCAwID8gLS41IDogLjUpKSArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlID0gZnVuY3Rpb24gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kID0gZnVuY3Rpb24gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyAhPT0gMSA/IGRhdGEuYiA6IGRhdGEuZSwgZGF0YSk7XG59LFxuICAgIF9zZXR0ZXJDU1NTdHlsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJDU1NTdHlsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9zZXR0ZXJDU1NQcm9wKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlID0gZnVuY3Rpb24gX3NldHRlclNjYWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAuc2NhbGVYID0gdGFyZ2V0Ll9nc2FwLnNjYWxlWSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyID0gZnVuY3Rpb24gX3NldHRlclNjYWxlV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZS5zY2FsZVggPSBjYWNoZS5zY2FsZVkgPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGVbcHJvcGVydHldID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcCA9IFwidHJhbnNmb3JtXCIsXG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCIsXG4gICAgX3NhdmVTdHlsZSA9IGZ1bmN0aW9uIF9zYXZlU3R5bGUocHJvcGVydHksIGlzTm90Q1NTKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGU7XG5cbiAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcykge1xuICAgIHRoaXMudGZtID0gdGhpcy50Zm0gfHwge307XG5cbiAgICBpZiAocHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV0gfHwgcHJvcGVydHk7XG4gICAgICB+cHJvcGVydHkuaW5kZXhPZihcIixcIikgPyBwcm9wZXJ0eS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gX3RoaXMudGZtW2FdID0gX2dldCh0YXJnZXQsIGEpO1xuICAgICAgfSkgOiB0aGlzLnRmbVtwcm9wZXJ0eV0gPSB0YXJnZXQuX2dzYXAueCA/IHRhcmdldC5fZ3NhcFtwcm9wZXJ0eV0gOiBfZ2V0KHRhcmdldCwgcHJvcGVydHkpOyAvLyBub3RlOiBzY2FsZSB3b3VsZCBtYXAgdG8gXCJzY2FsZVgsc2NhbGVZXCIsIHRodXMgd2UgbG9vcCBhbmQgYXBwbHkgdGhlbSBib3RoLlxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmluZGV4T2YoX3RyYW5zZm9ybVByb3ApID49IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0Ll9nc2FwLnN2Zykge1xuICAgICAgdGhpcy5zdmdvID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTtcbiAgICAgIHRoaXMucHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgaXNOb3RDU1MsIFwiXCIpO1xuICAgIH1cblxuICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gIH1cblxuICAoc3R5bGUgfHwgaXNOb3RDU1MpICYmIHRoaXMucHJvcHMucHVzaChwcm9wZXJ0eSwgaXNOb3RDU1MsIHN0eWxlW3Byb3BlcnR5XSk7XG59LFxuICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKSB7XG4gIGlmIChzdHlsZS50cmFuc2xhdGUpIHtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRyYW5zbGF0ZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInNjYWxlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwicm90YXRlXCIpO1xuICB9XG59LFxuICAgIF9yZXZlcnRTdHlsZSA9IGZ1bmN0aW9uIF9yZXZlcnRTdHlsZSgpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIGksXG4gICAgICBwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMykge1xuICAgIC8vIHN0b3JlZCBsaWtlIHRoaXM6IHByb3BlcnR5LCBpc05vdENTUywgdmFsdWVcbiAgICBwcm9wc1tpICsgMV0gPyB0YXJnZXRbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogcHJvcHNbaSArIDJdID8gc3R5bGVbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcHNbaV0ucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICBpZiAodGhpcy50Zm0pIHtcbiAgICBmb3IgKHAgaW4gdGhpcy50Zm0pIHtcbiAgICAgIGNhY2hlW3BdID0gdGhpcy50Zm1bcF07XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIsIHRoaXMuc3ZnbyB8fCBcIlwiKTtcbiAgICB9XG5cbiAgICBpID0gX3JldmVydGluZygpO1xuXG4gICAgaWYgKGkgJiYgIWkuaXNTdGFydCAmJiAhc3R5bGVbX3RyYW5zZm9ybVByb3BdKSB7XG4gICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcblxuICAgICAgY2FjaGUudW5jYWNoZSA9IDE7IC8vIGlmIGl0J3MgYSBzdGFydEF0IHRoYXQncyBiZWluZyByZXZlcnRlZCBpbiB0aGUgX2luaXRUd2VlbigpIG9mIHRoZSBjb3JlLCB3ZSBkb24ndCBuZWVkIHRvIHVuY2FjaGUgdHJhbnNmb3Jtcy4gVGhpcyBpcyBwdXJlbHkgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdHlsZVNhdmVyID0gZnVuY3Rpb24gX2dldFN0eWxlU2F2ZXIodGFyZ2V0LCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBzYXZlciA9IHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBwcm9wczogW10sXG4gICAgcmV2ZXJ0OiBfcmV2ZXJ0U3R5bGUsXG4gICAgc2F2ZTogX3NhdmVTdHlsZVxuICB9O1xuICBwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gc2F2ZXIuc2F2ZShwKTtcbiAgfSk7XG4gIHJldHVybiBzYXZlcjtcbn0sXG4gICAgX3N1cHBvcnRzM0QsXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIwMjE1LXByb2JsZW0tdXNpbmctdHdlZW5tYXgtaW4tc3RhbmRhbG9uZS1zZWxmLWNvbnRhaW5pbmctc3ZnLWZpbGUtZXJyLWNhbm5vdC1zZXQtcHJvcGVydHktY3NzdGV4dC1vZi11bmRlZmluZWQvKS5cbn0sXG4gICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiOyAvL2NzcyB2YXJpYWJsZXMgbWF5IG5vdCBuZWVkIGNhcHMgc3dhcHBlZCBvdXQgZm9yIGRhc2hlcyBhbmQgbG93ZXJjYXNlLlxufSxcbiAgICBfcHJlZml4ZXMgPSBcIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgIHMgPSBlLnN0eWxlLFxuICAgICAgaSA9IDU7XG5cbiAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgfVxuXG4gIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgd2hpbGUgKGktLSAmJiAhKF9wcmVmaXhlc1tpXSArIHByb3BlcnR5IGluIHMpKSB7fVxuXG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBfd2luLmRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiOyAvL21ha2Ugc3VyZSB0byBvdmVycmlkZSBjZXJ0YWluIHByb3BlcnRpZXMgdGhhdCBtYXkgY29udGFtaW5hdGUgbWVhc3VyZW1lbnRzLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBvdmVycmVhY2hpbmcgc3R5bGUgc2hlZXRzLlxuXG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICBfcmV2ZXJ0aW5nID0gZ3NhcC5jb3JlLnJldmVydGluZztcbiAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gIH1cbn0sXG4gICAgX2dldEJCb3hIYWNrID0gZnVuY3Rpb24gX2dldEJCb3hIYWNrKHN3YXBJZlBvc3NpYmxlKSB7XG4gIC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHRoYXQgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCBnZXRCQm94KCkgb24gU1ZHIGVsZW1lbnRzIGluc2lkZSBhIDxkZWZzPiBlbGVtZW50IGFuZC9vciA8bWFzaz4uIFdlIHRyeSBjcmVhdGluZyBhbiBTVkcsIGFkZGluZyBpdCB0byB0aGUgZG9jdW1lbnRFbGVtZW50IGFuZCB0b3NzIHRoZSBlbGVtZW50IGluIHRoZXJlIHNvIHRoYXQgaXQncyBkZWZpbml0ZWx5IHBhcnQgb2YgdGhlIHJlbmRlcmluZyB0cmVlLCB0aGVuIGdyYWIgdGhlIGJib3ggYW5kIGlmIGl0IHdvcmtzLCB3ZSBhY3R1YWxseSBzd2FwIG91dCB0aGUgb3JpZ2luYWwgZ2V0QkJveCgpIG1ldGhvZCBmb3Igb3VyIG93biB0aGF0IGRvZXMgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbmV2ZXIgZ2V0QkJveCBpcyBuZWVkZWQuIFRoaXMgaGVscHMgZW5zdXJlIHRoYXQgcGVyZm9ybWFuY2UgaXMgb3B0aW1hbCAob25seSBkbyBhbGwgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS4uLm1vc3QgZWxlbWVudHMgZG9uJ3QgbmVlZCBpdCkuXG4gIHZhciBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCB0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgb2xkUGFyZW50ID0gdGhpcy5wYXJlbnROb2RlLFxuICAgICAgb2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG4gICAgICBvbGRDU1MgPSB0aGlzLnN0eWxlLmNzc1RleHQsXG4gICAgICBiYm94O1xuXG4gIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgc3ZnLmFwcGVuZENoaWxkKHRoaXMpO1xuICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgaWYgKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJib3ggPSB0aGlzLmdldEJCb3goKTtcbiAgICAgIHRoaXMuX2dzYXBCQm94ID0gdGhpcy5nZXRCQm94OyAvL3N0b3JlIHRoZSBvcmlnaW5hbFxuXG4gICAgICB0aGlzLmdldEJCb3ggPSBfZ2V0QkJveEhhY2s7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSBlbHNlIGlmICh0aGlzLl9nc2FwQkJveCkge1xuICAgIGJib3ggPSB0aGlzLl9nc2FwQkJveCgpO1xuICB9XG5cbiAgaWYgKG9sZFBhcmVudCkge1xuICAgIGlmIChvbGRTaWJsaW5nKSB7XG4gICAgICBvbGRQYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG9sZFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICB0aGlzLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gIHJldHVybiBiYm94O1xufSxcbiAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICB2YXIgaSA9IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gIHZhciBib3VuZHM7XG5cbiAgdHJ5IHtcbiAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpO1xuICB9XG5cbiAgYm91bmRzICYmIChib3VuZHMud2lkdGggfHwgYm91bmRzLmhlaWdodCkgfHwgdGFyZ2V0LmdldEJCb3ggPT09IF9nZXRCQm94SGFjayB8fCAoYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKSk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBtaXNyZXBvcnQgdGhlIGJvdW5kcyBpZiB0aGUgZWxlbWVudCBoYXMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IChpdCBqdXN0IGFzc3VtZXMgaXQncyBhdCB4OjAsIHk6MCksIHRodXMgd2UgbmVlZCB0byBtYW51YWxseSBncmFiIHRoZSBwb3NpdGlvbiBpbiB0aGF0IGNhc2UuXG5cbiAgcmV0dXJuIGJvdW5kcyAmJiAhYm91bmRzLndpZHRoICYmICFib3VuZHMueCAmJiAhYm91bmRzLnkgPyB7XG4gICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9IDogYm91bmRzO1xufSxcbiAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbn0sXG4gICAgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncbl9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZTtcblxuICAgIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB7XG4gICAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICAgIH1cblxuICAgIGlmIChzdHlsZS5yZW1vdmVQcm9wZXJ0eSkge1xuICAgICAgaWYgKHByb3BlcnR5LnN1YnN0cigwLCAyKSA9PT0gXCJtc1wiIHx8IHByb3BlcnR5LnN1YnN0cigwLCA2KSA9PT0gXCJ3ZWJraXRcIikge1xuICAgICAgICAvL01pY3Jvc29mdCBhbmQgc29tZSBXZWJraXQgYnJvd3NlcnMgZG9uJ3QgY29uZm9ybSB0byB0aGUgc3RhbmRhcmQgb2YgY2FwaXRhbGl6aW5nIHRoZSBmaXJzdCBwcmVmaXggY2hhcmFjdGVyLCBzbyB3ZSBhZGp1c3Qgc28gdGhhdCB3aGVuIHdlIHByZWZpeCB0aGUgY2FwcyB3aXRoIGEgZGFzaCwgaXQncyBjb3JyZWN0IChvdGhlcndpc2UgaXQnZCBiZSBcIm1zLXRyYW5zZm9ybVwiIGluc3RlYWQgb2YgXCItbXMtdHJhbnNmb3JtXCIgZm9yIElFOSwgZm9yIGV4YW1wbGUpXG4gICAgICAgIHByb3BlcnR5ID0gXCItXCIgKyBwcm9wZXJ0eTtcbiAgICAgIH1cblxuICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vbm90ZTogb2xkIHZlcnNpb25zIG9mIElFIHVzZSBcInJlbW92ZUF0dHJpYnV0ZSgpXCIgaW5zdGVhZCBvZiBcInJlbW92ZVByb3BlcnR5KClcIlxuICAgICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQgPSBmdW5jdGlvbiBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGJlZ2lubmluZywgZW5kLCBvbmx5U2V0QXRFbmQpIHtcbiAgdmFyIHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBvbmx5U2V0QXRFbmQgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKTtcbiAgcGx1Z2luLl9wdCA9IHB0O1xuICBwdC5iID0gYmVnaW5uaW5nO1xuICBwdC5lID0gZW5kO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfbm9uQ29udmVydGlibGVVbml0cyA9IHtcbiAgZGVnOiAxLFxuICByYWQ6IDEsXG4gIHR1cm46IDFcbn0sXG4gICAgX25vblN0YW5kYXJkTGF5b3V0cyA9IHtcbiAgZ3JpZDogMSxcbiAgZmxleDogMVxufSxcbiAgICAvL3Rha2VzIGEgc2luZ2xlIHZhbHVlIGxpa2UgMjBweCBhbmQgY29udmVydHMgaXQgdG8gdGhlIHVuaXQgc3BlY2lmaWVkLCBsaWtlIFwiJVwiLCByZXR1cm5pbmcgb25seSB0aGUgbnVtZXJpYyBhbW91bnQuXG5fY29udmVydFRvVW5pdCA9IGZ1bmN0aW9uIF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSB7XG4gIHZhciBjdXJWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDAsXG4gICAgICBjdXJVbml0ID0gKHZhbHVlICsgXCJcIikudHJpbSgpLnN1YnN0cigoY3VyVmFsdWUgKyBcIlwiKS5sZW5ndGgpIHx8IFwicHhcIixcbiAgICAgIC8vIHNvbWUgYnJvd3NlcnMgbGVhdmUgZXh0cmEgd2hpdGVzcGFjZSBhdCB0aGUgYmVnaW5uaW5nIG9mIENTUyB2YXJpYWJsZXMsIGhlbmNlIHRoZSBuZWVkIHRvIHRyaW0oKVxuICBzdHlsZSA9IF90ZW1wRGl2LnN0eWxlLFxuICAgICAgaG9yaXpvbnRhbCA9IF9ob3Jpem9udGFsRXhwLnRlc3QocHJvcGVydHkpLFxuICAgICAgaXNSb290U1ZHID0gdGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIixcbiAgICAgIG1lYXN1cmVQcm9wZXJ0eSA9IChpc1Jvb3RTVkcgPyBcImNsaWVudFwiIDogXCJvZmZzZXRcIikgKyAoaG9yaXpvbnRhbCA/IFwiV2lkdGhcIiA6IFwiSGVpZ2h0XCIpLFxuICAgICAgYW1vdW50ID0gMTAwLFxuICAgICAgdG9QaXhlbHMgPSB1bml0ID09PSBcInB4XCIsXG4gICAgICB0b1BlcmNlbnQgPSB1bml0ID09PSBcIiVcIixcbiAgICAgIHB4LFxuICAgICAgcGFyZW50LFxuICAgICAgY2FjaGUsXG4gICAgICBpc1NWRztcblxuICBpZiAodW5pdCA9PT0gY3VyVW5pdCB8fCAhY3VyVmFsdWUgfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbdW5pdF0gfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbY3VyVW5pdF0pIHtcbiAgICByZXR1cm4gY3VyVmFsdWU7XG4gIH1cblxuICBjdXJVbml0ICE9PSBcInB4XCIgJiYgIXRvUGl4ZWxzICYmIChjdXJWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBcInB4XCIpKTtcbiAgaXNTVkcgPSB0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpO1xuXG4gIGlmICgodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSB8fCB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpKSkge1xuICAgIHB4ID0gaXNTVkcgPyB0YXJnZXQuZ2V0QkJveCgpW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA6IHRhcmdldFttZWFzdXJlUHJvcGVydHldO1xuICAgIHJldHVybiBfcm91bmQodG9QZXJjZW50ID8gY3VyVmFsdWUgLyBweCAqIGFtb3VudCA6IGN1clZhbHVlIC8gMTAwICogcHgpO1xuICB9XG5cbiAgc3R5bGVbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdID0gYW1vdW50ICsgKHRvUGl4ZWxzID8gY3VyVW5pdCA6IHVuaXQpO1xuICBwYXJlbnQgPSB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpIHx8IHVuaXQgPT09IFwiZW1cIiAmJiB0YXJnZXQuYXBwZW5kQ2hpbGQgJiYgIWlzUm9vdFNWRyA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gIGlmIChpc1NWRykge1xuICAgIHBhcmVudCA9ICh0YXJnZXQub3duZXJTVkdFbGVtZW50IHx8IHt9KS5wYXJlbnROb2RlO1xuICB9XG5cbiAgaWYgKCFwYXJlbnQgfHwgcGFyZW50ID09PSBfZG9jIHx8ICFwYXJlbnQuYXBwZW5kQ2hpbGQpIHtcbiAgICBwYXJlbnQgPSBfZG9jLmJvZHk7XG4gIH1cblxuICBjYWNoZSA9IHBhcmVudC5fZ3NhcDtcblxuICBpZiAoY2FjaGUgJiYgdG9QZXJjZW50ICYmIGNhY2hlLndpZHRoICYmIGhvcml6b250YWwgJiYgY2FjaGUudGltZSA9PT0gX3RpY2tlci50aW1lICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgcmV0dXJuIF9yb3VuZChjdXJWYWx1ZSAvIGNhY2hlLndpZHRoICogYW1vdW50KTtcbiAgfSBlbHNlIHtcbiAgICAodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAhX25vblN0YW5kYXJkTGF5b3V0c1tfZ2V0Q29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQsIFwiZGlzcGxheVwiKV0gJiYgKHN0eWxlLnBvc2l0aW9uID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcInBvc2l0aW9uXCIpKTtcbiAgICBwYXJlbnQgPT09IHRhcmdldCAmJiAoc3R5bGUucG9zaXRpb24gPSBcInN0YXRpY1wiKTsgLy8gbGlrZSBmb3IgYm9yZGVyUmFkaXVzLCBpZiBpdCdzIGEgJSB3ZSBtdXN0IGhhdmUgaXQgcmVsYXRpdmUgdG8gdGhlIHRhcmdldCBpdHNlbGYgYnV0IHRoYXQgbWF5IG5vdCBoYXZlIHBvc2l0aW9uOiByZWxhdGl2ZSBvciBwb3NpdGlvbjogYWJzb2x1dGUgaW4gd2hpY2ggY2FzZSBpdCdkIGdvIHVwIHRoZSBjaGFpbiB1bnRpbCBpdCBmaW5kcyBpdHMgb2Zmc2V0UGFyZW50IChiYWQpLiBwb3NpdGlvbjogc3RhdGljIHByb3RlY3RzIGFnYWluc3QgdGhhdC5cblxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChfdGVtcERpdik7XG4gICAgcHggPSBfdGVtcERpdlttZWFzdXJlUHJvcGVydHldO1xuICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGVtcERpdik7XG4gICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cbiAgICBpZiAoaG9yaXpvbnRhbCAmJiB0b1BlcmNlbnQpIHtcbiAgICAgIGNhY2hlID0gX2dldENhY2hlKHBhcmVudCk7XG4gICAgICBjYWNoZS50aW1lID0gX3RpY2tlci50aW1lO1xuICAgICAgY2FjaGUud2lkdGggPSBwYXJlbnRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3JvdW5kKHRvUGl4ZWxzID8gcHggKiBjdXJWYWx1ZSAvIGFtb3VudCA6IHB4ICYmIGN1clZhbHVlID8gYW1vdW50IC8gcHggKiBjdXJWYWx1ZSA6IDApO1xufSxcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gIHZhciB2YWx1ZTtcbiAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgaWYgKHByb3BlcnR5IGluIF9wcm9wZXJ0eUFsaWFzZXMgJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuXG4gICAgaWYgKH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSkge1xuICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5zcGxpdChcIixcIilbMF07XG4gICAgfVxuICB9XG5cbiAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICB2YWx1ZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpO1xuICAgIHZhbHVlID0gcHJvcGVydHkgIT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyB2YWx1ZVtwcm9wZXJ0eV0gOiB2YWx1ZS5zdmcgPyB2YWx1ZS5vcmlnaW4gOiBfZmlyc3RUd29Pbmx5KF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApKSArIFwiIFwiICsgdmFsdWUuek9yaWdpbiArIFwicHhcIjtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSBcImF1dG9cIiB8fCB1bmNhY2hlIHx8IH4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiY2FsYyhcIikpIHtcbiAgICAgIHZhbHVlID0gX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0gJiYgX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0odGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkgfHwgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IChwcm9wZXJ0eSA9PT0gXCJvcGFjaXR5XCIgPyAxIDogMCk7IC8vIG5vdGU6IHNvbWUgYnJvd3NlcnMsIGxpa2UgRmlyZWZveCwgZG9uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkhIEluc3RlYWQsIGl0IG9ubHkgcmVwb3J0cyBldmVyeSBjb3JuZXIgbGlrZSAgYm9yZGVyVG9wTGVmdFJhZGl1c1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bml0ICYmICF+KHZhbHVlICsgXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpICsgdW5pdCA6IHZhbHVlO1xufSxcbiAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nID0gZnVuY3Rpb24gX3R3ZWVuQ29tcGxleENTU1N0cmluZyh0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQpIHtcbiAgLy8gbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMTgzMTAtY2xpcHBhdGgtZG9lc250LXdvcmstb24taW9zL1xuICAgIHZhciBwID0gX2NoZWNrUHJvcFByZWZpeChwcm9wLCB0YXJnZXQsIDEpLFxuICAgICAgICBzID0gcCAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHAsIDEpO1xuXG4gICAgaWYgKHMgJiYgcyAhPT0gc3RhcnQpIHtcbiAgICAgIHByb3AgPSBwO1xuICAgICAgc3RhcnQgPSBzO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gXCJib3JkZXJDb2xvclwiKSB7XG4gICAgICBzdGFydCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJib3JkZXJUb3BDb2xvclwiKTsgLy8gRmlyZWZveCBidWc6IGFsd2F5cyByZXBvcnRzIFwiYm9yZGVyQ29sb3JcIiBhcyBcIlwiLCBzbyB3ZSBtdXN0IGZhbGwgYmFjayB0byBib3JkZXJUb3BDb2xvci4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVmFsdWVzO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vIGVuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgIHRhcmdldC5zdHlsZVtwcm9wXSA9IGVuZDtcbiAgICBlbmQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHx8IGVuZDtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydDtcbiAgfVxuXG4gIGEgPSBbc3RhcnQsIGVuZF07XG5cbiAgX2NvbG9yU3RyaW5nRmlsdGVyKGEpOyAvLyBwYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKGVuZFZhbHVlID0gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZFZhbHVlKSArIHN0YXJ0VW5pdCk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy8gdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCB8fCBwcm9wID09PSBcInpJbmRleFwiID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG4gIH0gZWxzZSB7XG4gICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICB9XG5cbiAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhbm90aGVyIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICB0b3A6IFwiMCVcIixcbiAgYm90dG9tOiBcIjEwMCVcIixcbiAgbGVmdDogXCIwJVwiLFxuICByaWdodDogXCIxMDAlXCIsXG4gIGNlbnRlcjogXCI1MCVcIlxufSxcbiAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiIFwiKSxcbiAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gIGlmICh4ID09PSBcInRvcFwiIHx8IHggPT09IFwiYm90dG9tXCIgfHwgeSA9PT0gXCJsZWZ0XCIgfHwgeSA9PT0gXCJyaWdodFwiKSB7XG4gICAgLy90aGUgdXNlciBwcm92aWRlZCB0aGVtIGluIHRoZSB3cm9uZyBvcmRlciwgc28gZmxpcCB0aGVtXG4gICAgdmFsdWUgPSB4O1xuICAgIHggPSB5O1xuICAgIHkgPSB2YWx1ZTtcbiAgfVxuXG4gIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgc3BsaXRbMV0gPSBfa2V5d29yZFRvUGVyY2VudFt5XSB8fCB5O1xuICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG59LFxuICAgIF9yZW5kZXJDbGVhclByb3BzID0gZnVuY3Rpb24gX3JlbmRlckNsZWFyUHJvcHMocmF0aW8sIGRhdGEpIHtcbiAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHByb3BzID09PSBcImFsbFwiIHx8IHByb3BzID09PSB0cnVlKSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYXJUcmFuc2Zvcm1zKSB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTsgLy8gZm9yY2UgYWxsIHRoZSBjYWNoZWQgdmFsdWVzIGJhY2sgdG8gXCJub3JtYWxcIi9pZGVudGl0eSwgb3RoZXJ3aXNlIGlmIHRoZXJlJ3MgYW5vdGhlciB0d2VlbiB0aGF0J3MgYWxyZWFkeSBzZXQgdG8gcmVuZGVyIHRyYW5zZm9ybXMgb24gdGhpcyBlbGVtZW50LCBpdCBjb3VsZCBkaXNwbGF5IHRoZSB3cm9uZyB2YWx1ZXMuXG5cblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcblxuICAgICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgLy8gbm90ZTogc3BlY2lhbFByb3BzIHNob3VsZCByZXR1cm4gMSBpZiAoYW5kIG9ubHkgaWYpIHRoZXkgaGF2ZSBhIG5vbi16ZXJvIHByaW9yaXR5LiBJdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byBzb3J0IHRoZSBsaW5rZWQgbGlzdC5cbl9zcGVjaWFsUHJvcHMgPSB7XG4gIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICB2YXIgcHQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAwLCBfcmVuZGVyQ2xlYXJQcm9wcyk7XG4gICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICBwdC5wciA9IC0xMDtcbiAgICAgIHB0LnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICAvKiBjbGFzc05hbWUgZmVhdHVyZSAoYWJvdXQgMC40a2IgZ3ppcHBlZCkuXG4gICwgY2xhc3NOYW1lKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gIFx0bGV0IF9yZW5kZXJDbGFzc05hbWUgPSAocmF0aW8sIGRhdGEpID0+IHtcbiAgXHRcdFx0ZGF0YS5jc3MucmVuZGVyKHJhdGlvLCBkYXRhLmNzcyk7XG4gIFx0XHRcdGlmICghcmF0aW8gfHwgcmF0aW8gPT09IDEpIHtcbiAgXHRcdFx0XHRsZXQgaW5saW5lID0gZGF0YS5ybXYsXG4gIFx0XHRcdFx0XHR0YXJnZXQgPSBkYXRhLnQsXG4gIFx0XHRcdFx0XHRwO1xuICBcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYik7XG4gIFx0XHRcdFx0Zm9yIChwIGluIGlubGluZSkge1xuICBcdFx0XHRcdFx0X3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcCk7XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHR9LFxuICBcdFx0X2dldEFsbFN0eWxlcyA9ICh0YXJnZXQpID0+IHtcbiAgXHRcdFx0bGV0IHN0eWxlcyA9IHt9LFxuICBcdFx0XHRcdGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICBcdFx0XHRcdHA7XG4gIFx0XHRcdGZvciAocCBpbiBjb21wdXRlZCkge1xuICBcdFx0XHRcdGlmIChpc05hTihwKSAmJiBwICE9PSBcImNzc1RleHRcIiAmJiBwICE9PSBcImxlbmd0aFwiKSB7XG4gIFx0XHRcdFx0XHRzdHlsZXNbcF0gPSBjb21wdXRlZFtwXTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdFx0X3NldERlZmF1bHRzKHN0eWxlcywgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSkpO1xuICBcdFx0XHRyZXR1cm4gc3R5bGVzO1xuICBcdFx0fSxcbiAgXHRcdHN0YXJ0Q2xhc3NMaXN0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLFxuICBcdFx0c3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gIFx0XHRjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCxcbiAgXHRcdGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICBcdFx0Y2xhc3NQVCA9IGNhY2hlLmNsYXNzUFQsXG4gIFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kID0ge30sXG4gIFx0XHRkYXRhID0ge3Q6dGFyZ2V0LCBwbHVnaW46cGx1Z2luLCBybXY6aW5saW5lVG9SZW1vdmVBdEVuZCwgYjpzdGFydENsYXNzTGlzdCwgZTooZW5kVmFsdWUuY2hhckF0KDEpICE9PSBcIj1cIikgPyBlbmRWYWx1ZSA6IHN0YXJ0Q2xhc3NMaXN0LnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgKyBcIig/IVtcXFxcdy1dKVwiKSwgXCJcIikgKyAoKGVuZFZhbHVlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgOiBcIlwiKX0sXG4gIFx0XHRjaGFuZ2luZ1ZhcnMgPSB7fSxcbiAgXHRcdHN0YXJ0VmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0KSxcbiAgXHRcdHRyYW5zZm9ybVJlbGF0ZWQgPSAvKHRyYW5zZm9ybXxwZXJzcGVjdGl2ZSkvaSxcbiAgXHRcdGVuZFZhcnMsIHA7XG4gIFx0aWYgKGNsYXNzUFQpIHtcbiAgXHRcdGNsYXNzUFQucigxLCBjbGFzc1BULmQpO1xuICBcdFx0X3JlbW92ZUxpbmtlZExpc3RJdGVtKGNsYXNzUFQuZC5wbHVnaW4sIGNsYXNzUFQsIFwiX3B0XCIpO1xuICBcdH1cbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGF0YS5lKTtcbiAgXHRlbmRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIHRydWUpO1xuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzdGFydENsYXNzTGlzdCk7XG4gIFx0Zm9yIChwIGluIGVuZFZhcnMpIHtcbiAgXHRcdGlmIChlbmRWYXJzW3BdICE9PSBzdGFydFZhcnNbcF0gJiYgIXRyYW5zZm9ybVJlbGF0ZWQudGVzdChwKSkge1xuICBcdFx0XHRjaGFuZ2luZ1ZhcnNbcF0gPSBlbmRWYXJzW3BdO1xuICBcdFx0XHRpZiAoIXN0eWxlW3BdICYmIHN0eWxlW3BdICE9PSBcIjBcIikge1xuICBcdFx0XHRcdGlubGluZVRvUmVtb3ZlQXRFbmRbcF0gPSAxO1xuICBcdFx0XHR9XG4gIFx0XHR9XG4gIFx0fVxuICBcdGNhY2hlLmNsYXNzUFQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIFwiY2xhc3NOYW1lXCIsIDAsIDAsIF9yZW5kZXJDbGFzc05hbWUsIGRhdGEsIDAsIC0xMSk7XG4gIFx0aWYgKHN0eWxlLmNzc1RleHQgIT09IGNzc1RleHQpIHsgLy9vbmx5IGFwcGx5IGlmIHRoaW5ncyBjaGFuZ2UuIE90aGVyd2lzZSwgaW4gY2FzZXMgbGlrZSBhIGJhY2tncm91bmQtaW1hZ2UgdGhhdCdzIHB1bGxlZCBkeW5hbWljYWxseSwgaXQgY291bGQgY2F1c2UgYSByZWZyZXNoLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDM2OC1wb3NzaWJsZS1nc2FwLWJ1Zy1zd2l0Y2hpbmctY2xhc3NuYW1lcy1pbi1jaHJvbWUvLlxuICBcdFx0c3R5bGUuY3NzVGV4dCA9IGNzc1RleHQ7IC8vd2UgcmVjb3JkZWQgY3NzVGV4dCBiZWZvcmUgd2Ugc3dhcHBlZCBjbGFzc2VzIGFuZCByYW4gX2dldEFsbFN0eWxlcygpIGJlY2F1c2UgaW4gY2FzZXMgd2hlbiBhIGNsYXNzTmFtZSB0d2VlbiBpcyBvdmVyd3JpdHRlbiwgd2UgcmVtb3ZlIGFsbCB0aGUgcmVsYXRlZCB0d2VlbmluZyBwcm9wZXJ0aWVzIGZyb20gdGhhdCBjbGFzcyBjaGFuZ2UgKG90aGVyd2lzZSBjbGFzcy1zcGVjaWZpYyBzdHVmZiBjYW4ndCBvdmVycmlkZSBwcm9wZXJ0aWVzIHdlJ3ZlIGRpcmVjdGx5IHNldCBvbiB0aGUgdGFyZ2V0J3Mgc3R5bGUgb2JqZWN0IGR1ZSB0byBzcGVjaWZpY2l0eSkuXG4gIFx0fVxuICBcdF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHRydWUpOyAvL3RvIGNsZWFyIHRoZSBjYWNoaW5nIG9mIHRyYW5zZm9ybXNcbiAgXHRkYXRhLmNzcyA9IG5ldyBnc2FwLnBsdWdpbnMuY3NzKCk7XG4gIFx0ZGF0YS5jc3MuaW5pdCh0YXJnZXQsIGNoYW5naW5nVmFycywgdHdlZW4pO1xuICBcdHBsdWdpbi5fcHJvcHMucHVzaCguLi5kYXRhLmNzcy5fcHJvcHMpO1xuICBcdHJldHVybiAxO1xuICB9XG4gICovXG5cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFJBTlNGT1JNU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX2lkZW50aXR5MkRNYXRyaXggPSBbMSwgMCwgMCwgMSwgMCwgMF0sXG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzID0ge30sXG4gICAgX2lzTnVsbFRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9pc051bGxUcmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBcIm1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKVwiIHx8IHZhbHVlID09PSBcIm5vbmVcIiB8fCAhdmFsdWU7XG59LFxuICAgIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCkge1xuICB2YXIgbWF0cml4U3RyaW5nID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgcmV0dXJuIF9pc051bGxUcmFuc2Zvcm0obWF0cml4U3RyaW5nKSA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4U3RyaW5nLnN1YnN0cig3KS5tYXRjaChfbnVtRXhwKS5tYXAoX3JvdW5kKTtcbn0sXG4gICAgX2dldE1hdHJpeCA9IGZ1bmN0aW9uIF9nZXRNYXRyaXgodGFyZ2V0LCBmb3JjZTJEKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpLFxuICAgICAgcGFyZW50LFxuICAgICAgbmV4dFNpYmxpbmcsXG4gICAgICB0ZW1wLFxuICAgICAgYWRkZWRUb0RPTTtcblxuICBpZiAoY2FjaGUuc3ZnICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpIHtcbiAgICB0ZW1wID0gdGFyZ2V0LnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkubWF0cml4OyAvL2Vuc3VyZXMgdGhhdCBldmVuIGNvbXBsZXggdmFsdWVzIGxpa2UgXCJ0cmFuc2xhdGUoNTAsNjApIHJvdGF0ZSgxMzUsMCwwKVwiIGFyZSBwYXJzZWQgYmVjYXVzZSBpdCBtYXNoZXMgaXQgaW50byBhIG1hdHJpeC5cblxuICAgIG1hdHJpeCA9IFt0ZW1wLmEsIHRlbXAuYiwgdGVtcC5jLCB0ZW1wLmQsIHRlbXAuZSwgdGVtcC5mXTtcbiAgICByZXR1cm4gbWF0cml4LmpvaW4oXCIsXCIpID09PSBcIjEsMCwwLDEsMCwwXCIgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeDtcbiAgfSBlbHNlIGlmIChtYXRyaXggPT09IF9pZGVudGl0eTJETWF0cml4ICYmICF0YXJnZXQub2Zmc2V0UGFyZW50ICYmIHRhcmdldCAhPT0gX2RvY0VsZW1lbnQgJiYgIWNhY2hlLnN2Zykge1xuICAgIC8vbm90ZTogaWYgb2Zmc2V0UGFyZW50IGlzIG51bGwsIHRoYXQgbWVhbnMgdGhlIGVsZW1lbnQgaXNuJ3QgaW4gdGhlIG5vcm1hbCBkb2N1bWVudCBmbG93LCBsaWtlIGlmIGl0IGhhcyBkaXNwbGF5Om5vbmUgb3Igb25lIG9mIGl0cyBhbmNlc3RvcnMgaGFzIGRpc3BsYXk6bm9uZSkuIEZpcmVmb3ggcmV0dXJucyBudWxsIGZvciBnZXRDb21wdXRlZFN0eWxlKCkgaWYgdGhlIGVsZW1lbnQgaXMgaW4gYW4gaWZyYW1lIHRoYXQgaGFzIGRpc3BsYXk6bm9uZS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gICAgLy9icm93c2VycyBkb24ndCByZXBvcnQgdHJhbnNmb3JtcyBhY2N1cmF0ZWx5IHVubGVzcyB0aGUgZWxlbWVudCBpcyBpbiB0aGUgRE9NIGFuZCBoYXMgYSBkaXNwbGF5IHZhbHVlIHRoYXQncyBub3QgXCJub25lXCIuIEZpcmVmb3ggYW5kIE1pY3Jvc29mdCBicm93c2VycyBoYXZlIGEgcGFydGlhbCBidWcgd2hlcmUgdGhleSdsbCByZXBvcnQgdHJhbnNmb3JtcyBldmVuIGlmIGRpc3BsYXk6bm9uZSBCVVQgbm90IGFueSBwZXJjZW50YWdlLWJhc2VkIHZhbHVlcyBsaWtlIHRyYW5zbGF0ZSgtNTAlLCA4cHgpIHdpbGwgYmUgcmVwb3J0ZWQgYXMgaWYgaXQncyB0cmFuc2xhdGUoMCwgOHB4KS5cbiAgICB0ZW1wID0gc3R5bGUuZGlzcGxheTtcbiAgICBzdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIHBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKCFwYXJlbnQgfHwgIXRhcmdldC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgIC8vIG5vdGU6IGluIDMuMy4wIHdlIHN3aXRjaGVkIHRhcmdldC5vZmZzZXRQYXJlbnQgdG8gX2RvYy5ib2R5LmNvbnRhaW5zKHRhcmdldCkgdG8gYXZvaWQgW3NvbWV0aW1lcyB1bm5lY2Vzc2FyeV0gTXV0YXRpb25PYnNlcnZlciBjYWxscyBidXQgdGhhdCB3YXNuJ3QgYWRlcXVhdGUgYmVjYXVzZSB0aGVyZSBhcmUgZWRnZSBjYXNlcyB3aGVyZSBuZXN0ZWQgcG9zaXRpb246IGZpeGVkIGVsZW1lbnRzIG5lZWQgdG8gZ2V0IHJlcGFyZW50ZWQgdG8gYWNjdXJhdGVseSBzZW5zZSB0cmFuc2Zvcm1zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zODggYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzc1XG4gICAgICBhZGRlZFRvRE9NID0gMTsgLy9mbGFnXG5cbiAgICAgIG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcblxuICAgICAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KTsgLy93ZSBtdXN0IGFkZCBpdCB0byB0aGUgRE9NIGluIG9yZGVyIHRvIGdldCB2YWx1ZXMgcHJvcGVybHlcblxuICAgIH1cblxuICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KTtcbiAgICB0ZW1wID8gc3R5bGUuZGlzcGxheSA9IHRlbXAgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBcImRpc3BsYXlcIik7XG5cbiAgICBpZiAoYWRkZWRUb0RPTSkge1xuICAgICAgbmV4dFNpYmxpbmcgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbmV4dFNpYmxpbmcpIDogcGFyZW50ID8gcGFyZW50LmFwcGVuZENoaWxkKHRhcmdldCkgOiBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZCh0YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JjZTJEICYmIG1hdHJpeC5sZW5ndGggPiA2ID8gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgbWF0cml4WzEyXSwgbWF0cml4WzEzXV0gOiBtYXRyaXg7XG59LFxuICAgIF9hcHBseVNWR09yaWdpbiA9IGZ1bmN0aW9uIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIG9yaWdpbiwgb3JpZ2luSXNBYnNvbHV0ZSwgc21vb3RoLCBtYXRyaXhBcnJheSwgcGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgbWF0cml4ID0gbWF0cml4QXJyYXkgfHwgX2dldE1hdHJpeCh0YXJnZXQsIHRydWUpLFxuICAgICAgeE9yaWdpbk9sZCA9IGNhY2hlLnhPcmlnaW4gfHwgMCxcbiAgICAgIHlPcmlnaW5PbGQgPSBjYWNoZS55T3JpZ2luIHx8IDAsXG4gICAgICB4T2Zmc2V0T2xkID0gY2FjaGUueE9mZnNldCB8fCAwLFxuICAgICAgeU9mZnNldE9sZCA9IGNhY2hlLnlPZmZzZXQgfHwgMCxcbiAgICAgIGEgPSBtYXRyaXhbMF0sXG4gICAgICBiID0gbWF0cml4WzFdLFxuICAgICAgYyA9IG1hdHJpeFsyXSxcbiAgICAgIGQgPSBtYXRyaXhbM10sXG4gICAgICB0eCA9IG1hdHJpeFs0XSxcbiAgICAgIHR5ID0gbWF0cml4WzVdLFxuICAgICAgb3JpZ2luU3BsaXQgPSBvcmlnaW4uc3BsaXQoXCIgXCIpLFxuICAgICAgeE9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMF0pIHx8IDAsXG4gICAgICB5T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFsxXSkgfHwgMCxcbiAgICAgIGJvdW5kcyxcbiAgICAgIGRldGVybWluYW50LFxuICAgICAgeCxcbiAgICAgIHk7XG5cbiAgaWYgKCFvcmlnaW5Jc0Fic29sdXRlKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3godGFyZ2V0KTtcbiAgICB4T3JpZ2luID0gYm91bmRzLnggKyAofm9yaWdpblNwbGl0WzBdLmluZGV4T2YoXCIlXCIpID8geE9yaWdpbiAvIDEwMCAqIGJvdW5kcy53aWR0aCA6IHhPcmlnaW4pO1xuICAgIHlPcmlnaW4gPSBib3VuZHMueSArICh+KG9yaWdpblNwbGl0WzFdIHx8IG9yaWdpblNwbGl0WzBdKS5pbmRleE9mKFwiJVwiKSA/IHlPcmlnaW4gLyAxMDAgKiBib3VuZHMuaGVpZ2h0IDogeU9yaWdpbik7XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7XG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3NbX3RyYW5zZm9ybVByb3BdICE9PSBcIm5vbmVcIiA/IGNzW190cmFuc2Zvcm1Qcm9wXSA6IFwiXCIpO1xuICAgIH1cblxuICAgIHN0eWxlLnNjYWxlID0gc3R5bGUucm90YXRlID0gc3R5bGUudHJhbnNsYXRlID0gXCJub25lXCI7XG4gIH1cblxuICBtYXRyaXggPSBfZ2V0TWF0cml4KHRhcmdldCwgY2FjaGUuc3ZnKTtcblxuICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgaWYgKGNhY2hlLnVuY2FjaGUpIHtcbiAgICAgIC8vIGlmIGNhY2hlLnVuY2FjaGUgaXMgdHJ1ZSAoYW5kIG1heWJlIGlmIG9yaWdpbiBpcyAwLDApLCB3ZSBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFByZXZpb3VzbHkgd2UgbGV0IHRoZSBkYXRhLXN2Zy1vcmlnaW4gc3RheSBpbnN0ZWFkLCBidXQgd2hlbiBpbnRyb2R1Y2luZyByZXZlcnQoKSwgaXQgY29tcGxpY2F0ZWQgdGhpbmdzLlxuICAgICAgdDIgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgICAgb3JpZ2luID0gY2FjaGUueE9yaWdpbiAtIHQyLnggKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSB0Mi55KSArIFwicHhcIjtcbiAgICAgIHQxID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdDEgPSAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyAgUmVtZW1iZXIsIHRvIHdvcmsgYXJvdW5kIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIHdlIGFsd2F5cyBmb3JjZSBTVkcgZWxlbWVudHMnIHRyYW5zZm9ybU9yaWdpbiB0byAwLDAgYW5kIG9mZnNldCB0aGUgdHJhbnNsYXRpb24gYWNjb3JkaW5nbHkuXG4gICAgfVxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIHVuY2FjaGUgPSB1bmNhY2hlIHx8IGNhY2hlLnVuY2FjaGU7XG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAwKSB7XG4gICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gX2ZpcnN0VHdvT25seShvcmlnaW4pO1xuICB9XG5cbiAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICBjYWNoZS5mb3JjZTNEID0gX2NvbmZpZy5mb3JjZTNEO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gPSBjYWNoZS5zdmcgPyBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA6IF9zdXBwb3J0czNEID8gX3JlbmRlckNTU1RyYW5zZm9ybXMgOiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zO1xuICBjYWNoZS51bmNhY2hlID0gMDtcbiAgcmV0dXJuIGNhY2hlO1xufSxcbiAgICBfZmlyc3RUd29Pbmx5ID0gZnVuY3Rpb24gX2ZpcnN0VHdvT25seSh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlID0gdmFsdWUuc3BsaXQoXCIgXCIpKVswXSArIFwiIFwiICsgdmFsdWVbMV07XG59LFxuICAgIC8vZm9yIGhhbmRsaW5nIHRyYW5zZm9ybU9yaWdpbiB2YWx1ZXMsIHN0cmlwcGluZyBvdXQgdGhlIDNyZCBkaW1lbnNpb25cbl9hZGRQeFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgdW5pdCA9IGdldFVuaXQoc3RhcnQpO1xuICByZXR1cm4gX3JvdW5kKHBhcnNlRmxvYXQoc3RhcnQpICsgcGFyc2VGbG9hdChfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB2YWx1ZSArIFwicHhcIiwgdW5pdCkpKSArIHVuaXQ7XG59LFxuICAgIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICBjYWNoZS56ID0gXCIwcHhcIjtcbiAgY2FjaGUucm90YXRpb25ZID0gY2FjaGUucm90YXRpb25YID0gXCIwZGVnXCI7XG4gIGNhY2hlLmZvcmNlM0QgPSAwO1xuXG4gIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF96ZXJvRGVnID0gXCIwZGVnXCIsXG4gICAgX3plcm9QeCA9IFwiMHB4XCIsXG4gICAgX2VuZFBhcmVudGhlc2lzID0gXCIpIFwiLFxuICAgIF9yZW5kZXJDU1NUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55LFxuICAgICAgeiA9IF9yZWYueixcbiAgICAgIHJvdGF0aW9uID0gX3JlZi5yb3RhdGlvbixcbiAgICAgIHJvdGF0aW9uWSA9IF9yZWYucm90YXRpb25ZLFxuICAgICAgcm90YXRpb25YID0gX3JlZi5yb3RhdGlvblgsXG4gICAgICBza2V3WCA9IF9yZWYuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYuc2NhbGVZLFxuICAgICAgdHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBfcmVmLnRyYW5zZm9ybVBlcnNwZWN0aXZlLFxuICAgICAgZm9yY2UzRCA9IF9yZWYuZm9yY2UzRCxcbiAgICAgIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxuICAgICAgek9yaWdpbiA9IF9yZWYuek9yaWdpbixcbiAgICAgIHRyYW5zZm9ybXMgPSBcIlwiLFxuICAgICAgdXNlM0QgPSBmb3JjZTNEID09PSBcImF1dG9cIiAmJiByYXRpbyAmJiByYXRpbyAhPT0gMSB8fCBmb3JjZTNEID09PSB0cnVlOyAvLyBTYWZhcmkgaGFzIGEgYnVnIHRoYXQgY2F1c2VzIGl0IG5vdCB0byByZW5kZXIgM0QgdHJhbnNmb3JtLW9yaWdpbiB2YWx1ZXMgcHJvcGVybHksIHNvIHdlIGZvcmNlIHRoZSB6IG9yaWdpbiB0byAwLCByZWNvcmQgaXQgaW4gdGhlIGNhY2hlLCBhbmQgdGhlbiBkbyB0aGUgbWF0aCBoZXJlIHRvIG9mZnNldCB0aGUgdHJhbnNsYXRlIHZhbHVlcyBhY2NvcmRpbmdseSAoYmFzaWNhbGx5IGRvIHRoZSAzRCB0cmFuc2Zvcm0tb3JpZ2luIHBhcnQgbWFudWFsbHkpXG5cblxuICBpZiAoek9yaWdpbiAmJiAocm90YXRpb25YICE9PSBfemVyb0RlZyB8fCByb3RhdGlvblkgIT09IF96ZXJvRGVnKSkge1xuICAgIHZhciBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25ZKSAqIF9ERUcyUkFELFxuICAgICAgICBhMTMgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgIGEzMyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgY29zO1xuXG4gICAgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWCkgKiBfREVHMlJBRDtcbiAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgeCA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHgsIGExMyAqIGNvcyAqIC16T3JpZ2luKTtcbiAgICB5ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeSwgLU1hdGguc2luKGFuZ2xlKSAqIC16T3JpZ2luKTtcbiAgICB6ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeiwgYTMzICogY29zICogLXpPcmlnaW4gKyB6T3JpZ2luKTtcbiAgfVxuXG4gIGlmICh0cmFuc2Zvcm1QZXJzcGVjdGl2ZSAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJwZXJzcGVjdGl2ZShcIiArIHRyYW5zZm9ybVBlcnNwZWN0aXZlICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInRyYW5zbGF0ZShcIiArIHhQZXJjZW50ICsgXCIlLCBcIiArIHlQZXJjZW50ICsgXCIlKSBcIjtcbiAgfVxuXG4gIGlmICh1c2UzRCB8fCB4ICE9PSBfemVyb1B4IHx8IHkgIT09IF96ZXJvUHggfHwgeiAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0geiAhPT0gX3plcm9QeCB8fCB1c2UzRCA/IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCBcIiArIHogKyBcIikgXCIgOiBcInRyYW5zbGF0ZShcIiArIHggKyBcIiwgXCIgKyB5ICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGUoXCIgKyByb3RhdGlvbiArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblkgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVkoXCIgKyByb3RhdGlvblkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25YICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVYKFwiICsgcm90YXRpb25YICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNrZXdYICE9PSBfemVyb0RlZyB8fCBza2V3WSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2tldyhcIiArIHNrZXdYICsgXCIsIFwiICsgc2tld1kgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMSkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJzY2FsZShcIiArIHNjYWxlWCArIFwiLCBcIiArIHNjYWxlWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zIHx8IFwidHJhbnNsYXRlKDAsIDApXCI7XG59LFxuICAgIF9yZW5kZXJTVkdUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlclNWR1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmMiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYyLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmMi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmMi54LFxuICAgICAgeSA9IF9yZWYyLnksXG4gICAgICByb3RhdGlvbiA9IF9yZWYyLnJvdGF0aW9uLFxuICAgICAgc2tld1ggPSBfcmVmMi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZjIuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmMi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmMi5zY2FsZVksXG4gICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICB4T3JpZ2luID0gX3JlZjIueE9yaWdpbixcbiAgICAgIHlPcmlnaW4gPSBfcmVmMi55T3JpZ2luLFxuICAgICAgeE9mZnNldCA9IF9yZWYyLnhPZmZzZXQsXG4gICAgICB5T2Zmc2V0ID0gX3JlZjIueU9mZnNldCxcbiAgICAgIGZvcmNlQ1NTID0gX3JlZjIuZm9yY2VDU1MsXG4gICAgICB0eCA9IHBhcnNlRmxvYXQoeCksXG4gICAgICB0eSA9IHBhcnNlRmxvYXQoeSksXG4gICAgICBhMTEsXG4gICAgICBhMjEsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0ZW1wO1xuXG4gIHJvdGF0aW9uID0gcGFyc2VGbG9hdChyb3RhdGlvbik7XG4gIHNrZXdYID0gcGFyc2VGbG9hdChza2V3WCk7XG4gIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG5cbiAgaWYgKHNrZXdZKSB7XG4gICAgLy9mb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgY29tYmluZSBhbGwgc2tld2luZyBpbnRvIHRoZSBza2V3WCBhbmQgcm90YXRpb24gdmFsdWVzLiBSZW1lbWJlciwgYSBza2V3WSBvZiAxMCBkZWdyZWVzIGxvb2tzIHRoZSBzYW1lIGFzIGEgcm90YXRpb24gb2YgMTAgZGVncmVlcyBwbHVzIGEgc2tld1ggb2YgMTAgZGVncmVlcy5cbiAgICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuICAgIHNrZXdYICs9IHNrZXdZO1xuICAgIHJvdGF0aW9uICs9IHNrZXdZO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uIHx8IHNrZXdYKSB7XG4gICAgcm90YXRpb24gKj0gX0RFRzJSQUQ7XG4gICAgc2tld1ggKj0gX0RFRzJSQUQ7XG4gICAgYTExID0gTWF0aC5jb3Mocm90YXRpb24pICogc2NhbGVYO1xuICAgIGEyMSA9IE1hdGguc2luKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMTIgPSBNYXRoLnNpbihyb3RhdGlvbiAtIHNrZXdYKSAqIC1zY2FsZVk7XG4gICAgYTIyID0gTWF0aC5jb3Mocm90YXRpb24gLSBza2V3WCkgKiBzY2FsZVk7XG5cbiAgICBpZiAoc2tld1gpIHtcbiAgICAgIHNrZXdZICo9IF9ERUcyUkFEO1xuICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdYIC0gc2tld1kpO1xuICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgYTEyICo9IHRlbXA7XG4gICAgICBhMjIgKj0gdGVtcDtcblxuICAgICAgaWYgKHNrZXdZKSB7XG4gICAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WSk7XG4gICAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgICAgYTExICo9IHRlbXA7XG4gICAgICAgIGEyMSAqPSB0ZW1wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGExMSA9IF9yb3VuZChhMTEpO1xuICAgIGEyMSA9IF9yb3VuZChhMjEpO1xuICAgIGExMiA9IF9yb3VuZChhMTIpO1xuICAgIGEyMiA9IF9yb3VuZChhMjIpO1xuICB9IGVsc2Uge1xuICAgIGExMSA9IHNjYWxlWDtcbiAgICBhMjIgPSBzY2FsZVk7XG4gICAgYTIxID0gYTEyID0gMDtcbiAgfVxuXG4gIGlmICh0eCAmJiAhfih4ICsgXCJcIikuaW5kZXhPZihcInB4XCIpIHx8IHR5ICYmICF+KHkgKyBcIlwiKS5pbmRleE9mKFwicHhcIikpIHtcbiAgICB0eCA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHgsIFwicHhcIik7XG4gICAgdHkgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieVwiLCB5LCBcInB4XCIpO1xuICB9XG5cbiAgaWYgKHhPcmlnaW4gfHwgeU9yaWdpbiB8fCB4T2Zmc2V0IHx8IHlPZmZzZXQpIHtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhPcmlnaW4gLSAoeE9yaWdpbiAqIGExMSArIHlPcmlnaW4gKiBhMTIpICsgeE9mZnNldCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5T3JpZ2luIC0gKHhPcmlnaW4gKiBhMjEgKyB5T3JpZ2luICogYTIyKSArIHlPZmZzZXQpO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgLy9UaGUgU1ZHIHNwZWMgZG9lc24ndCBzdXBwb3J0IHBlcmNlbnRhZ2UtYmFzZWQgdHJhbnNsYXRpb24gaW4gdGhlIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLCBzbyB3ZSBtZXJnZSBpdCBpbnRvIHRoZSB0cmFuc2xhdGlvbiB0byBzaW11bGF0ZSBpdC5cbiAgICB0ZW1wID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhQZXJjZW50IC8gMTAwICogdGVtcC53aWR0aCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5UGVyY2VudCAvIDEwMCAqIHRlbXAuaGVpZ2h0KTtcbiAgfVxuXG4gIHRlbXAgPSBcIm1hdHJpeChcIiArIGExMSArIFwiLFwiICsgYTIxICsgXCIsXCIgKyBhMTIgKyBcIixcIiArIGEyMiArIFwiLFwiICsgdHggKyBcIixcIiArIHR5ICsgXCIpXCI7XG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdGVtcCk7XG4gIGZvcmNlQ1NTICYmICh0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdGVtcCk7IC8vc29tZSBicm93c2VycyBwcmlvcml0aXplIENTUyB0cmFuc2Zvcm1zIG92ZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUuIFdoZW4gd2Ugc2Vuc2UgdGhhdCB0aGUgdXNlciBoYXMgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCwgd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB0aGlzIHdheSAob3RoZXJ3aXNlIHNvbWUgYnJvd3NlciBzaW1wbHkgd29uJ3QgcmVuZGVyIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGNoYW5nZXMhKVxufSxcbiAgICBfYWRkUm90YXRpb25hbFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGVuZFZhbHVlKSB7XG4gIHZhciBjYXAgPSAzNjAsXG4gICAgICBpc1N0cmluZyA9IF9pc1N0cmluZyhlbmRWYWx1ZSksXG4gICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKSAqIChpc1N0cmluZyAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhZFwiKSA/IF9SQUQyREVHIDogMSksXG4gICAgICBjaGFuZ2UgPSBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgIGZpbmFsVmFsdWUgPSBzdGFydE51bSArIGNoYW5nZSArIFwiZGVnXCIsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBwdDtcblxuICBpZiAoaXNTdHJpbmcpIHtcbiAgICBkaXJlY3Rpb24gPSBlbmRWYWx1ZS5zcGxpdChcIl9cIilbMV07XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcInNob3J0XCIpIHtcbiAgICAgIGNoYW5nZSAlPSBjYXA7XG5cbiAgICAgIGlmIChjaGFuZ2UgIT09IGNoYW5nZSAlIChjYXAgLyAyKSkge1xuICAgICAgICBjaGFuZ2UgKz0gY2hhbmdlIDwgMCA/IGNhcCA6IC1jYXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJjd1wiICYmIGNoYW5nZSA8IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgKyBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFwiY2N3XCIgJiYgY2hhbmdlID4gMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSAtIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9XG4gIH1cblxuICBwbHVnaW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBjaGFuZ2UsIF9yZW5kZXJQcm9wV2l0aEVuZCk7XG4gIHB0LmUgPSBmaW5hbFZhbHVlO1xuICBwdC51ID0gXCJkZWdcIjtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2Fzc2lnbiA9IGZ1bmN0aW9uIF9hc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgZG9lc24ndCBoYXZlIE9iamVjdC5hc3NpZ24oKSwgc28gd2UgcmVjcmVhdGUgaXQgaGVyZS5cbiAgZm9yICh2YXIgcCBpbiBzb3VyY2UpIHtcbiAgICB0YXJnZXRbcF0gPSBzb3VyY2VbcF07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSxcbiAgICBfYWRkUmF3VHJhbnNmb3JtUFRzID0gZnVuY3Rpb24gX2FkZFJhd1RyYW5zZm9ybVBUcyhwbHVnaW4sIHRyYW5zZm9ybXMsIHRhcmdldCkge1xuICAvL2ZvciBoYW5kbGluZyBjYXNlcyB3aGVyZSBzb21lb25lIHBhc3NlcyBpbiBhIHdob2xlIHRyYW5zZm9ybSBzdHJpbmcsIGxpa2UgdHJhbnNmb3JtOiBcInNjYWxlKDIsIDMpIHJvdGF0ZSgyMGRlZykgdHJhbnNsYXRlWSgzMGVtKVwiXG4gIHZhciBzdGFydENhY2hlID0gX2Fzc2lnbih7fSwgdGFyZ2V0Ll9nc2FwKSxcbiAgICAgIGV4Y2x1ZGUgPSBcInBlcnNwZWN0aXZlLGZvcmNlM0QsdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpblwiLFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBlbmRDYWNoZSxcbiAgICAgIHAsXG4gICAgICBzdGFydFZhbHVlLFxuICAgICAgZW5kVmFsdWUsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGVuZE51bSxcbiAgICAgIHN0YXJ0VW5pdCxcbiAgICAgIGVuZFVuaXQ7XG5cbiAgaWYgKHN0YXJ0Q2FjaGUuc3ZnKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG5cbiAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHN0YXJ0VmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0VmFsdWUgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldClbX3RyYW5zZm9ybVByb3BdO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSBzdGFydFZhbHVlO1xuICB9XG5cbiAgZm9yIChwIGluIF90cmFuc2Zvcm1Qcm9wcykge1xuICAgIHN0YXJ0VmFsdWUgPSBzdGFydENhY2hlW3BdO1xuICAgIGVuZFZhbHVlID0gZW5kQ2FjaGVbcF07XG5cbiAgICBpZiAoc3RhcnRWYWx1ZSAhPT0gZW5kVmFsdWUgJiYgZXhjbHVkZS5pbmRleE9mKHApIDwgMCkge1xuICAgICAgLy90d2VlbmluZyB0byBubyBwZXJzcGVjdGl2ZSBnaXZlcyB2ZXJ5IHVuaW50dWl0aXZlIHJlc3VsdHMgLSBqdXN0IGtlZXAgdGhlIHNhbWUgcGVyc3BlY3RpdmUgaW4gdGhhdCBjYXNlLlxuICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZFVuaXQgPSBnZXRVbml0KGVuZFZhbHVlKTtcbiAgICAgIHN0YXJ0TnVtID0gc3RhcnRVbml0ICE9PSBlbmRVbml0ID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSA6IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgIHBsdWdpbi5fcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIGVuZENhY2hlLCBwLCBzdGFydE51bSwgZW5kTnVtIC0gc3RhcnROdW0sIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgIHBsdWdpbi5fcHQudSA9IGVuZFVuaXQgfHwgMDtcblxuICAgICAgcGx1Z2luLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfVxuXG4gIF9hc3NpZ24oZW5kQ2FjaGUsIHN0YXJ0Q2FjaGUpO1xufTsgLy8gaGFuZGxlIHNwbGl0dGluZyBhcGFydCBwYWRkaW5nLCBtYXJnaW4sIGJvcmRlcldpZHRoLCBhbmQgYm9yZGVyUmFkaXVzIGludG8gdGhlaXIgNCBjb21wb25lbnRzLiBGaXJlZm94LCBmb3IgZXhhbXBsZSwgd29uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkgLSBpdCB3aWxsIG9ubHkgZG8gYm9yZGVyVG9wTGVmdFJhZGl1cyBhbmQgdGhlIG90aGVyIGNvcm5lcnMuIFdlIGFsc28gd2FudCB0byBoYW5kbGUgcGFkZGluZ1RvcCwgbWFyZ2luTGVmdCwgYm9yZGVyUmlnaHRXaWR0aCwgZXRjLlxuXG5cbl9mb3JFYWNoTmFtZShcInBhZGRpbmcsbWFyZ2luLFdpZHRoLFJhZGl1c1wiLCBmdW5jdGlvbiAobmFtZSwgaW5kZXgpIHtcbiAgdmFyIHQgPSBcIlRvcFwiLFxuICAgICAgciA9IFwiUmlnaHRcIixcbiAgICAgIGIgPSBcIkJvdHRvbVwiLFxuICAgICAgbCA9IFwiTGVmdFwiLFxuICAgICAgcHJvcHMgPSAoaW5kZXggPCAzID8gW3QsIHIsIGIsIGxdIDogW3QgKyBsLCB0ICsgciwgYiArIHIsIGIgKyBsXSkubWFwKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIGluZGV4IDwgMiA/IG5hbWUgKyBzaWRlIDogXCJib3JkZXJcIiArIHNpZGUgKyBuYW1lO1xuICB9KTtcblxuICBfc3BlY2lhbFByb3BzW2luZGV4ID4gMSA/IFwiYm9yZGVyXCIgKyBuYW1lIDogbmFtZV0gPSBmdW5jdGlvbiAocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICB2YXIgYSwgdmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkge1xuICAgICAgLy8gZ2V0dGVyLCBwYXNzZWQgdGFyZ2V0LCBwcm9wZXJ0eSwgYW5kIHVuaXQgKGZyb20gX2dldCgpKVxuICAgICAgYSA9IHByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gX2dldChwbHVnaW4sIHByb3AsIHByb3BlcnR5KTtcbiAgICAgIH0pO1xuICAgICAgdmFycyA9IGEuam9pbihcIiBcIik7XG4gICAgICByZXR1cm4gdmFycy5zcGxpdChhWzBdKS5sZW5ndGggPT09IDUgPyBhWzBdIDogdmFycztcbiAgICB9XG5cbiAgICBhID0gKGVuZFZhbHVlICsgXCJcIikuc3BsaXQoXCIgXCIpO1xuICAgIHZhcnMgPSB7fTtcbiAgICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wLCBpKSB7XG4gICAgICByZXR1cm4gdmFyc1twcm9wXSA9IGFbaV0gPSBhW2ldIHx8IGFbKGkgLSAxKSAvIDIgfCAwXTtcbiAgICB9KTtcbiAgICBwbHVnaW4uaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuKTtcbiAgfTtcbn0pO1xuXG5leHBvcnQgdmFyIENTU1BsdWdpbiA9IHtcbiAgbmFtZTogXCJjc3NcIixcbiAgcmVnaXN0ZXI6IF9pbml0Q29yZSxcbiAgdGFyZ2V0VGVzdDogZnVuY3Rpb24gdGFyZ2V0VGVzdCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnN0eWxlICYmIHRhcmdldC5ub2RlVHlwZTtcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwcm9wcyA9IHRoaXMuX3Byb3BzLFxuICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgc3RhcnRBdCA9IHR3ZWVuLnZhcnMuc3RhcnRBdCxcbiAgICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgICAgZW5kVmFsdWUsXG4gICAgICAgIGVuZE51bSxcbiAgICAgICAgc3RhcnROdW0sXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHNwZWNpYWxQcm9wLFxuICAgICAgICBwLFxuICAgICAgICBzdGFydFVuaXQsXG4gICAgICAgIGVuZFVuaXQsXG4gICAgICAgIHJlbGF0aXZlLFxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQsXG4gICAgICAgIHRyYW5zZm9ybVByb3BUd2VlbixcbiAgICAgICAgY2FjaGUsXG4gICAgICAgIHNtb290aCxcbiAgICAgICAgaGFzUHJpb3JpdHksXG4gICAgICAgIGlubGluZVByb3BzO1xuICAgIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpOyAvLyB3ZSBtYXkgY2FsbCBpbml0KCkgbXVsdGlwbGUgdGltZXMgb24gdGhlIHNhbWUgcGx1Z2luIGluc3RhbmNlLCBsaWtlIHdoZW4gYWRkaW5nIHNwZWNpYWwgcHJvcGVydGllcywgc28gbWFrZSBzdXJlIHdlIGRvbid0IG92ZXJ3cml0ZSB0aGUgcmV2ZXJ0IGRhdGEgb3IgaW5saW5lUHJvcHNcblxuICAgIHRoaXMuc3R5bGVzID0gdGhpcy5zdHlsZXMgfHwgX2dldFN0eWxlU2F2ZXIodGFyZ2V0KTtcbiAgICBpbmxpbmVQcm9wcyA9IHRoaXMuc3R5bGVzLnByb3BzO1xuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICBpZiAocCA9PT0gXCJhdXRvUm91bmRcIikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZW5kVmFsdWUgPSB2YXJzW3BdO1xuXG4gICAgICBpZiAoX3BsdWdpbnNbcF0gJiYgX2NoZWNrUGx1Z2luKHAsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSkge1xuICAgICAgICAvLyBwbHVnaW5zXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgc3BlY2lhbFByb3AgPSBfc3BlY2lhbFByb3BzW3BdO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGVuZFZhbHVlID0gZW5kVmFsdWUuY2FsbCh0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gICAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgICBlbmRWYWx1ZSA9IF9yZXBsYWNlUmFuZG9tKGVuZFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwZWNpYWxQcm9wKSB7XG4gICAgICAgIHNwZWNpYWxQcm9wKHRoaXMsIHRhcmdldCwgcCwgZW5kVmFsdWUsIHR3ZWVuKSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgIH0gZWxzZSBpZiAocC5zdWJzdHIoMCwgMikgPT09IFwiLS1cIikge1xuICAgICAgICAvL0NTUyB2YXJpYWJsZVxuICAgICAgICBzdGFydFZhbHVlID0gKGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5nZXRQcm9wZXJ0eVZhbHVlKHApICsgXCJcIikudHJpbSgpO1xuICAgICAgICBlbmRWYWx1ZSArPSBcIlwiO1xuICAgICAgICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICAgICAgICBpZiAoIV9jb2xvckV4cC50ZXN0KHN0YXJ0VmFsdWUpKSB7XG4gICAgICAgICAgLy8gY29sb3JzIGRvbid0IGhhdmUgdW5pdHNcbiAgICAgICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgICAgIGVuZFVuaXQgPSBnZXRVbml0KGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZFVuaXQgPyBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0VmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpICsgZW5kVW5pdCkgOiBzdGFydFVuaXQgJiYgKGVuZFZhbHVlICs9IHN0YXJ0VW5pdCk7XG4gICAgICAgIHRoaXMuYWRkKHN0eWxlLCBcInNldFByb3BlcnR5XCIsIHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cywgMCwgMCwgcCk7XG4gICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICAgIGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmIChzdGFydEF0ICYmIHAgaW4gc3RhcnRBdCkge1xuICAgICAgICAgIC8vIGluIGNhc2Ugc29tZW9uZSBoYXJkLWNvZGVzIGEgY29tcGxleCB2YWx1ZSBhcyB0aGUgc3RhcnQsIGxpa2UgdG9wOiBcImNhbGMoMnZoIC8gMilcIi4gV2l0aG91dCB0aGlzLCBpdCdkIHVzZSB0aGUgY29tcHV0ZWQgdmFsdWUgKGFsd2F5cyBpbiBweClcbiAgICAgICAgICBzdGFydFZhbHVlID0gdHlwZW9mIHN0YXJ0QXRbcF0gPT09IFwiZnVuY3Rpb25cIiA/IHN0YXJ0QXRbcF0uY2FsbCh0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykgOiBzdGFydEF0W3BdO1xuICAgICAgICAgIF9pc1N0cmluZyhzdGFydFZhbHVlKSAmJiB+c3RhcnRWYWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSAmJiAoc3RhcnRWYWx1ZSA9IF9yZXBsYWNlUmFuZG9tKHN0YXJ0VmFsdWUpKTtcbiAgICAgICAgICBnZXRVbml0KHN0YXJ0VmFsdWUgKyBcIlwiKSB8fCAoc3RhcnRWYWx1ZSArPSBfY29uZmlnLnVuaXRzW3BdIHx8IGdldFVuaXQoX2dldCh0YXJnZXQsIHApKSB8fCBcIlwiKTsgLy8gZm9yIGNhc2VzIHdoZW4gc29tZW9uZSBwYXNzZXMgaW4gYSB1bml0bGVzcyB2YWx1ZSBsaWtlIHt4OiAxMDB9OyBpZiB3ZSB0cnkgc2V0dGluZyB0cmFuc2xhdGUoMTAwLCAwcHgpIGl0IHdvbid0IHdvcmsuXG5cbiAgICAgICAgICAoc3RhcnRWYWx1ZSArIFwiXCIpLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCkpOyAvLyBjYW4ndCB3b3JrIHdpdGggcmVsYXRpdmUgdmFsdWVzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgICAgcmVsYXRpdmUgPSB0eXBlID09PSBcInN0cmluZ1wiICYmIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgZW5kVmFsdWUuc3Vic3RyKDAsIDIpO1xuICAgICAgICByZWxhdGl2ZSAmJiAoZW5kVmFsdWUgPSBlbmRWYWx1ZS5zdWJzdHIoMikpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcblxuICAgICAgICBpZiAocCBpbiBfcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgICAgICAgaWYgKHAgPT09IFwiYXV0b0FscGhhXCIpIHtcbiAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIHdoZXJlIHdlIGNvbnRyb2wgdGhlIHZpc2liaWxpdHkgYWxvbmcgd2l0aCBvcGFjaXR5LiBXZSBzdGlsbCBhbGxvdyB0aGUgb3BhY2l0eSB2YWx1ZSB0byBwYXNzIHRocm91Z2ggYW5kIGdldCB0d2VlbmVkLlxuICAgICAgICAgICAgaWYgKHN0YXJ0TnVtID09PSAxICYmIF9nZXQodGFyZ2V0LCBcInZpc2liaWxpdHlcIikgPT09IFwiaGlkZGVuXCIgJiYgZW5kTnVtKSB7XG4gICAgICAgICAgICAgIC8vaWYgdmlzaWJpbGl0eSBpcyBpbml0aWFsbHkgc2V0IHRvIFwiaGlkZGVuXCIsIHdlIHNob3VsZCBpbnRlcnByZXQgdGhhdCBhcyBpbnRlbnQgdG8gbWFrZSBvcGFjaXR5IDAgKGEgY29udmVuaWVuY2UpXG4gICAgICAgICAgICAgIHN0YXJ0TnVtID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChcInZpc2liaWxpdHlcIiwgMCwgc3R5bGUudmlzaWJpbGl0eSk7XG5cbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIHN0eWxlLCBcInZpc2liaWxpdHlcIiwgc3RhcnROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsIGVuZE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgIWVuZE51bSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHAgIT09IFwic2NhbGVcIiAmJiBwICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBwID0gX3Byb3BlcnR5QWxpYXNlc1twXTtcbiAgICAgICAgICAgIH5wLmluZGV4T2YoXCIsXCIpICYmIChwID0gcC5zcGxpdChcIixcIilbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCA9IHAgaW4gX3RyYW5zZm9ybVByb3BzOyAvLy0tLSBUUkFOU0ZPUk0tUkVMQVRFRCAtLS1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkKSB7XG4gICAgICAgICAgdGhpcy5zdHlsZXMuc2F2ZShwKTtcblxuICAgICAgICAgIGlmICghdHJhbnNmb3JtUHJvcFR3ZWVuKSB7XG4gICAgICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgICAgICAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSAmJiAhdmFycy5wYXJzZVRyYW5zZm9ybSB8fCBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB2YXJzLnBhcnNlVHJhbnNmb3JtKTsgLy8gaWYsIGZvciBleGFtcGxlLCBnc2FwLnNldCguLi4ge3RyYW5zZm9ybTpcInRyYW5zbGF0ZVgoNTB2dylcIn0pLCB0aGUgX2dldCgpIGNhbGwgZG9lc24ndCBwYXJzZSB0aGUgdHJhbnNmb3JtLCB0aHVzIGNhY2hlLnJlbmRlclRyYW5zZm9ybSB3b24ndCBiZSBzZXQgeWV0IHNvIGZvcmNlIHRoZSBwYXJzaW5nIG9mIHRoZSB0cmFuc2Zvcm0gaGVyZS5cblxuICAgICAgICAgICAgc21vb3RoID0gdmFycy5zbW9vdGhPcmlnaW4gIT09IGZhbHNlICYmIGNhY2hlLnNtb290aDtcbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BUd2VlbiA9IHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgc3R5bGUsIF90cmFuc2Zvcm1Qcm9wLCAwLCAxLCBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0sIGNhY2hlLCAwLCAtMSk7IC8vdGhlIGZpcnN0IHRpbWUgdGhyb3VnaCwgY3JlYXRlIHRoZSByZW5kZXJpbmcgUHJvcFR3ZWVuIHNvIHRoYXQgaXQgcnVucyBMQVNUIChpbiB0aGUgbGlua2VkIGxpc3QsIHdlIGtlZXAgYWRkaW5nIHRvIHRoZSBiZWdpbm5pbmcpXG5cbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BUd2Vlbi5kZXAgPSAxOyAvL2ZsYWcgaXQgYXMgZGVwZW5kZW50IHNvIHRoYXQgaWYgdGhpbmdzIGdldCBraWxsZWQvb3ZlcndyaXR0ZW4gYW5kIHRoaXMgaXMgdGhlIG9ubHkgUHJvcFR3ZWVuIGxlZnQsIHdlIGNhbiBzYWZlbHkga2lsbCB0aGUgd2hvbGUgdHdlZW4uXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHAgPT09IFwic2NhbGVcIikge1xuICAgICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBjYWNoZSwgXCJzY2FsZVlcIiwgc3RhcnROdW0sIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCByZWxhdGl2ZSArIGVuZE51bSkgOiBlbmROdW0pIC0gc3RhcnROdW0gfHwgMCwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICAgICAgdGhpcy5fcHQudSA9IDA7XG4gICAgICAgICAgICBwcm9wcy5wdXNoKFwic2NhbGVZXCIsIHApO1xuICAgICAgICAgICAgcCArPSBcIlhcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIGlubGluZVByb3BzLnB1c2goX3RyYW5zZm9ybU9yaWdpblByb3AsIDAsIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSk7XG4gICAgICAgICAgICBlbmRWYWx1ZSA9IF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKGVuZFZhbHVlKTsgLy9pbiBjYXNlIHNvbWV0aGluZyBsaWtlIFwibGVmdCB0b3BcIiBvciBcImJvdHRvbSByaWdodFwiIGlzIHBhc3NlZCBpbi4gQ29udmVydCB0byBwZXJjZW50YWdlcy5cblxuICAgICAgICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICAgICAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBlbmRWYWx1ZSwgMCwgc21vb3RoLCAwLCB0aGlzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVuZFVuaXQgPSBwYXJzZUZsb2F0KGVuZFZhbHVlLnNwbGl0KFwiIFwiKVsyXSkgfHwgMDsgLy9oYW5kbGUgdGhlIHpPcmlnaW4gc2VwYXJhdGVseSFcblxuICAgICAgICAgICAgICBlbmRVbml0ICE9PSBjYWNoZS56T3JpZ2luICYmIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInpPcmlnaW5cIiwgY2FjaGUuek9yaWdpbiwgZW5kVW5pdCk7XG5cbiAgICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIHAsIF9maXJzdFR3b09ubHkoc3RhcnRWYWx1ZSksIF9maXJzdFR3b09ubHkoZW5kVmFsdWUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInN2Z09yaWdpblwiKSB7XG4gICAgICAgICAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBlbmRWYWx1ZSwgMSwgc21vb3RoLCAwLCB0aGlzKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwIGluIF9yb3RhdGlvbmFsUHJvcGVydGllcykge1xuICAgICAgICAgICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4odGhpcywgY2FjaGUsIHAsIHN0YXJ0TnVtLCByZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCByZWxhdGl2ZSArIGVuZFZhbHVlKSA6IGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInNtb290aE9yaWdpblwiKSB7XG4gICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBjYWNoZSwgXCJzbW9vdGhcIiwgY2FjaGUuc21vb3RoLCBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJmb3JjZTNEXCIpIHtcbiAgICAgICAgICAgIGNhY2hlW3BdID0gZW5kVmFsdWU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHModGhpcywgZW5kVmFsdWUsIHRhcmdldCk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKHAgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgcCA9IF9jaGVja1Byb3BQcmVmaXgocCkgfHwgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQgfHwgKGVuZE51bSB8fCBlbmROdW0gPT09IDApICYmIChzdGFydE51bSB8fCBzdGFydE51bSA9PT0gMCkgJiYgIV9jb21wbGV4RXhwLnRlc3QoZW5kVmFsdWUpICYmIHAgaW4gc3R5bGUpIHtcbiAgICAgICAgICBzdGFydFVuaXQgPSAoc3RhcnRWYWx1ZSArIFwiXCIpLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICAgIGVuZE51bSB8fCAoZW5kTnVtID0gMCk7IC8vIHByb3RlY3QgYWdhaW5zdCBOYU5cblxuICAgICAgICAgIGVuZFVuaXQgPSBnZXRVbml0KGVuZFZhbHVlKSB8fCAocCBpbiBfY29uZmlnLnVuaXRzID8gX2NvbmZpZy51bml0c1twXSA6IHN0YXJ0VW5pdCk7XG4gICAgICAgICAgc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIChzdGFydE51bSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkpO1xuICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgaXNUcmFuc2Zvcm1SZWxhdGVkID8gY2FjaGUgOiBzdHlsZSwgcCwgc3RhcnROdW0sIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCByZWxhdGl2ZSArIGVuZE51bSkgOiBlbmROdW0pIC0gc3RhcnROdW0sICFpc1RyYW5zZm9ybVJlbGF0ZWQgJiYgKGVuZFVuaXQgPT09IFwicHhcIiB8fCBwID09PSBcInpJbmRleFwiKSAmJiB2YXJzLmF1dG9Sb3VuZCAhPT0gZmFsc2UgPyBfcmVuZGVyUm91bmRlZENTU1Byb3AgOiBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgdGhpcy5fcHQudSA9IGVuZFVuaXQgfHwgMDtcblxuICAgICAgICAgIGlmIChzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgZW5kVW5pdCAhPT0gXCIlXCIpIHtcbiAgICAgICAgICAgIC8vd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcsIHdlIG5lZWQgdG8gcmV2ZXJ0IGl0IHRvIHRoZSBPTEQvT1JJR0lOQUwgdmFsdWUgKHdpdGggdGhvc2UgdW5pdHMpLiBXZSByZWNvcmQgdGhhdCBhcyBhIFwiYlwiIChiZWdpbm5pbmcpIHByb3BlcnR5IGFuZCBwb2ludCB0byBhIHJlbmRlciBtZXRob2QgdGhhdCBoYW5kbGVzIHRoYXQuIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgICAgICAgICB0aGlzLl9wdC5iID0gc3RhcnRWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3B0LnIgPSBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBpZiAocCBpbiB0YXJnZXQpIHtcbiAgICAgICAgICAgIC8vbWF5YmUgaXQncyBub3QgYSBzdHlsZSAtIGl0IGNvdWxkIGJlIGEgcHJvcGVydHkgYWRkZWQgZGlyZWN0bHkgdG8gYW4gZWxlbWVudCBpbiB3aGljaCBjYXNlIHdlJ2xsIHRyeSB0byBhbmltYXRlIHRoYXQuXG4gICAgICAgICAgICB0aGlzLmFkZCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdLCByZWxhdGl2ZSA/IHJlbGF0aXZlICsgZW5kVmFsdWUgOiBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfbWlzc2luZ1BsdWdpbihwLCBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwodGhpcywgdGFyZ2V0LCBwLCBzdGFydFZhbHVlLCByZWxhdGl2ZSA/IHJlbGF0aXZlICsgZW5kVmFsdWUgOiBlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgfHwgKHAgaW4gc3R5bGUgPyBpbmxpbmVQcm9wcy5wdXNoKHAsIDAsIHN0eWxlW3BdKSA6IGlubGluZVByb3BzLnB1c2gocCwgMSwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0pKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNQcmlvcml0eSAmJiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHRoaXMpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIGlmIChkYXRhLnR3ZWVuLl90aW1lIHx8ICFfcmV2ZXJ0aW5nKCkpIHtcbiAgICAgIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuc3R5bGVzLnJldmVydCgpO1xuICAgIH1cbiAgfSxcbiAgZ2V0OiBfZ2V0LFxuICBhbGlhc2VzOiBfcHJvcGVydHlBbGlhc2VzLFxuICBnZXRTZXR0ZXI6IGZ1bmN0aW9uIGdldFNldHRlcih0YXJnZXQsIHByb3BlcnR5LCBwbHVnaW4pIHtcbiAgICAvL3JldHVybnMgYSBzZXR0ZXIgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRhcmdldCwgcHJvcGVydHksIHZhbHVlIGFuZCBhcHBsaWVzIGl0IGFjY29yZGluZ2x5LiBSZW1lbWJlciwgcHJvcGVydGllcyBsaWtlIFwieFwiIGFyZW4ndCBhcyBzaW1wbGUgYXMgdGFyZ2V0LnN0eWxlLnByb3BlcnR5ID0gdmFsdWUgYmVjYXVzZSB0aGV5J3ZlIGdvdCB0byBiZSBhcHBsaWVkIHRvIGEgcHJveHkgb2JqZWN0IGFuZCB0aGVuIG1lcmdlZCBpbnRvIGEgdHJhbnNmb3JtIHN0cmluZyBpbiBhIHJlbmRlcmVyLlxuICAgIHZhciBwID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV07XG4gICAgcCAmJiBwLmluZGV4T2YoXCIsXCIpIDwgMCAmJiAocHJvcGVydHkgPSBwKTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCAmJiAodGFyZ2V0Ll9nc2FwLnggfHwgX2dldCh0YXJnZXQsIFwieFwiKSkgPyBwbHVnaW4gJiYgX3JlY2VudFNldHRlclBsdWdpbiA9PT0gcGx1Z2luID8gcHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZSA6IF9zZXR0ZXJUcmFuc2Zvcm0gOiAoX3JlY2VudFNldHRlclBsdWdpbiA9IHBsdWdpbiB8fCB7fSkgJiYgKHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIDogX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIpIDogdGFyZ2V0LnN0eWxlICYmICFfaXNVbmRlZmluZWQodGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSkgPyBfc2V0dGVyQ1NTU3R5bGUgOiB+cHJvcGVydHkuaW5kZXhPZihcIi1cIikgPyBfc2V0dGVyQ1NTUHJvcCA6IF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gIH0sXG4gIGNvcmU6IHtcbiAgICBfcmVtb3ZlUHJvcGVydHk6IF9yZW1vdmVQcm9wZXJ0eSxcbiAgICBfZ2V0TWF0cml4OiBfZ2V0TWF0cml4XG4gIH1cbn07XG5nc2FwLnV0aWxzLmNoZWNrUHJlZml4ID0gX2NoZWNrUHJvcFByZWZpeDtcbmdzYXAuY29yZS5nZXRTdHlsZVNhdmVyID0gX2dldFN0eWxlU2F2ZXI7XG5cbihmdW5jdGlvbiAocG9zaXRpb25BbmRTY2FsZSwgcm90YXRpb24sIG90aGVycywgYWxpYXNlcykge1xuICB2YXIgYWxsID0gX2ZvckVhY2hOYW1lKHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uICsgXCIsXCIgKyBvdGhlcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RyYW5zZm9ybVByb3BzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX2ZvckVhY2hOYW1lKHJvdGF0aW9uLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9jb25maWcudW5pdHNbbmFtZV0gPSBcImRlZ1wiO1xuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9wcm9wZXJ0eUFsaWFzZXNbYWxsWzEzXV0gPSBwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbjtcblxuICBfZm9yRWFjaE5hbWUoYWxpYXNlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3BsaXQgPSBuYW1lLnNwbGl0KFwiOlwiKTtcbiAgICBfcHJvcGVydHlBbGlhc2VzW3NwbGl0WzFdXSA9IGFsbFtzcGxpdFswXV07XG4gIH0pO1xufSkoXCJ4LHkseixzY2FsZSxzY2FsZVgsc2NhbGVZLHhQZXJjZW50LHlQZXJjZW50XCIsIFwicm90YXRpb24scm90YXRpb25YLHJvdGF0aW9uWSxza2V3WCxza2V3WVwiLCBcInRyYW5zZm9ybSx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luLGZvcmNlM0Qsc21vb3RoT3JpZ2luLHRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsIFwiMDp0cmFuc2xhdGVYLDE6dHJhbnNsYXRlWSwyOnRyYW5zbGF0ZVosODpyb3RhdGUsODpyb3RhdGlvblosODpyb3RhdGVaLDk6cm90YXRlWCwxMDpyb3RhdGVZXCIpO1xuXG5fZm9yRWFjaE5hbWUoXCJ4LHkseix0b3AscmlnaHQsYm90dG9tLGxlZnQsd2lkdGgsaGVpZ2h0LGZvbnRTaXplLHBhZGRpbmcsbWFyZ2luLHBlcnNwZWN0aXZlXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIF9jb25maWcudW5pdHNbbmFtZV0gPSBcInB4XCI7XG59KTtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pO1xuZXhwb3J0IHsgQ1NTUGx1Z2luIGFzIGRlZmF1bHQsIF9nZXRCQm94LCBfY3JlYXRlRWxlbWVudCwgX2NoZWNrUHJvcFByZWZpeCBhcyBjaGVja1ByZWZpeCB9OyIsImltcG9ydCB7IGdzYXAsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYywgVHdlZW5MaXRlLCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4IH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgeyBDU1NQbHVnaW4gfSBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBDU1NQbHVnaW4sIFR3ZWVuTWF4V2l0aENTUyBhcyBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3N0eWxlLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vc3R5bGUubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnO1xyXG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvdW50ZG93blByb3BzIH0gZnJvbSAnLi9wcm9wcyc7XHJcblxyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGUubW9kdWxlLnNjc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IENvdW50ZG93biA9ICh7IG51bWJlciwgc3R5bGVUeXBlID0gJ2FjY2VudEZpcnN0JywgY2xhc3NOYW1lLCAuLi5yZXN0IH06IENvdW50ZG93blByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xyXG5cclxuICAgIGNvbnN0IHJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudCB8IG51bGw+KG51bGwpO1xyXG4gICAgY29uc3QgW3ZhbHVlXSA9IHVzZVN0YXRlKHsgdmFsOiBudW1iZXIgfSk7XHJcblxyXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnc2FwLnRvKHZhbHVlLCB7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLjYsXHJcbiAgICAgICAgICAgIHZhbDogbnVtYmVyLFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogdXBkYXRlSGFuZGxlciwgZWFzZTogJ3NpbmUub3V0J1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUhhbmRsZXIoKSB7XHJcbiAgICAgICAgICAgIGlmIChyZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmVmLmN1cnJlbnQuaW5uZXJUZXh0ID0gYCR7dmFsdWUudmFsLnRvRml4ZWQoKX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3ZhbHVlLCBudW1iZXJdKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihzdHlsZXMuY291bnRkb3duLCBzdHlsZXNbc3R5bGVUeXBlXSwgY2xhc3NOYW1lKX0gey4uLnJlc3R9IHJlZj17cmVmfT5cclxuICAgICAgICAgICAge3ZhbHVlLnZhbH1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vc3R5bGUubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9zdHlsZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0IHsgZ3NhcCB9IGZyb20gJ2dzYXAnO1xyXG5pbXBvcnQgeyBNb3VzZUV2ZW50LCB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRG90QnV0dG9uUHJvcHMgfSBmcm9tICcuL3Byb3BzJztcclxuXHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZS5tb2R1bGUuc2Nzcyc7XHJcblxyXG5leHBvcnQgY29uc3QgRG90QnV0dG9uID0gKHsgdGV4dCwgbGFiZWwsIHNldFBlcmlvZCwgaXNBY3RpdmUgPSBmYWxzZSwgY2xhc3NOYW1lLCAuLi5yZXN0IH06IERvdEJ1dHRvblByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xyXG5cclxuICAgIGNvbnN0IGJ0blJlZiA9IHVzZVJlZjxIVE1MQnV0dG9uRWxlbWVudCB8IG51bGw+KG51bGwpO1xyXG5cclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGwgPSBnc2FwLnRpbWVsaW5lKCk7XHJcbiAgICAgICAgY29uc3QgY3R4ID0gZ3NhcC5jb250ZXh0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0bC50byhidG5SZWYuY3VycmVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYigyNDQsIDI0NSwgMjQ5KScsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIHJnYmEoNjYsIDg2LCAxMjIsIDAuNSknLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciBjZW50ZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiAxXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50byhidG5SZWYuY3VycmVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnLS1vcGFjaXR5JzogMSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGJ0blJlZik7XHJcblxyXG4gICAgICAgIHJldHVybiAoKSA9PiBjdHgucmV2ZXJ0KCk7XHJcbiAgICB9LCBbaXNBY3RpdmVdKTtcclxuXHJcbiAgICBjb25zdCBvbkVudGVyID0gKHsgY3VycmVudFRhcmdldCB9OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgZ3NhcC50byhjdXJyZW50VGFyZ2V0LCB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYigyNDQsIDI0NSwgMjQ5KScsXHJcbiAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCByZ2JhKDY2LCA4NiwgMTIyLCAwLjUpJyxcclxuICAgICAgICAgICAgc2NhbGU6IDEsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciBjZW50ZXInXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG9uTGVhdmUgPSAoeyBjdXJyZW50VGFyZ2V0IH06IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICBnc2FwLnRvKGN1cnJlbnRUYXJnZXQsIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiKDY2LCA4NiwgMTIyKScsXHJcbiAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxyXG4gICAgICAgICAgICBzY2FsZTogMC4xMVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtjbihzdHlsZXMuZG90QnRuLCBjbGFzc05hbWUsIHtcclxuICAgICAgICAgICAgW3N0eWxlcy5kb3RCdG5fYWN0aXZlXTogaXNBY3RpdmVcclxuICAgICAgICB9KX1cclxuICAgICAgICAgICAgZGF0YS1sYWJlbD17bGFiZWx9XHJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2DQmiDQv9C10YDQuNC+0LTRgyAke3RleHR9LSR7bGFiZWx9YH1cclxuICAgICAgICAgICAgb25Nb3VzZUVudGVyPXtpc0FjdGl2ZSA/IHVuZGVmaW5lZCA6IG9uRW50ZXJ9XHJcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17aXNBY3RpdmUgPyB1bmRlZmluZWQgOiBvbkxlYXZlfVxyXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRQZXJpb2QoKCt0ZXh0KSAtIDEpfVxyXG4gICAgICAgICAgICByZWY9e2J0blJlZn1cclxuICAgICAgICAgICAgey4uLnJlc3R9PlxyXG4gICAgICAgICAgICA8c3Bhbj57dGV4dH08L3NwYW4+XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICApO1xyXG59O1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3N0eWxlLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vc3R5bGUubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnO1xyXG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlTWF0aE1lZGlhIH0gZnJvbSAnLi4vLi4vaG9va3MvdXNlTWF0aE1lZGlhJztcclxuaW1wb3J0IHsgRG90QnV0dG9uIH0gZnJvbSAnLi4vRG90QnV0dG9uJztcclxuaW1wb3J0IHsgRG90c0NpcmNsZVByb3BzIH0gZnJvbSAnLi9wcm9wcyc7XHJcblxyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGUubW9kdWxlLnNjc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IERvdHNDaXJjbGUgPSAoeyB0aW1lUGVyaW9kcywgY3VycmVudFBlcmlvZElkeCwgc2V0Q3VycmVudFBlcmlvZElkeCwgY2xhc3NOYW1lLCAuLi5yZXN0IH06IERvdHNDaXJjbGVQcm9wcyk6IEpTWC5FbGVtZW50ID0+IHtcclxuXHJcbiAgICBjb25zdCBpc1RhYmxldCA9IHVzZU1hdGhNZWRpYSgnKG1heC13aWR0aDogMTA2MHB4KScpO1xyXG4gICAgY29uc3QgbGlzdFJlZiA9IHVzZVJlZjxIVE1MVUxpc3RFbGVtZW50IHwgbnVsbD4obnVsbCk7XHJcbiAgICBjb25zdCByYWRpdXMgPSBpc1RhYmxldCA/ICcxNjVweCcgOiAnMjYycHgnO1xyXG4gICAgY29uc3Qgc3RhcnQgPSAtNDU7XHJcbiAgICBjb25zdCBpbnRlcnZhbCA9IDM2MCAvIHRpbWVQZXJpb2RzLmxlbmd0aDtcclxuXHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdzYXAuY29udGV4dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGdzYXAudG8obGlzdFJlZi5jdXJyZW50LCB7XHJcbiAgICAgICAgICAgICAgICByb3RhdGU6IGAtJHtjdXJyZW50UGVyaW9kSWR4ICogaW50ZXJ2YWx9ZGVnYCxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnY2VudGVyJyxcclxuICAgICAgICAgICAgICAgIGVhc2U6ICdTaW5lLmVhc2VJbk91dCdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGdzYXAudG8oJ2J1dHRvbicsIHtcclxuICAgICAgICAgICAgICAgIHJvdGF0ZTogYCR7Y3VycmVudFBlcmlvZElkeCAqIGludGVydmFsfWRlZ2AsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoNjYsIDg2LCAxMjIpJyxcclxuICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgc2NhbGU6IDAuMTFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgbGlzdFJlZik7XHJcbiAgICB9LCBbY3VycmVudFBlcmlvZElkeCwgaW50ZXJ2YWwsIHN0YXJ0XSk7XHJcblxyXG4gICAgY29uc3QgZG90cyA9IHRpbWVQZXJpb2RzLm1hcCgocCwgaWR4KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgcm90YXRlID0gaW50ZXJ2YWwgKiBpZHggKyBzdGFydDtcclxuICAgICAgICBjb25zdCByb3RhdGVSZXYgPSByb3RhdGUgKiAtMTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGxpXHJcbiAgICAgICAgICAgICAgICBrZXk9e3AudG9waWN9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5kb3RzSXRlbX1cclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKCR7cm90YXRlfWRlZykgdHJhbnNsYXRlKCR7cmFkaXVzfSkgcm90YXRlKCR7cm90YXRlUmV2fWRlZylgXHJcbiAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgIDxEb3RCdXR0b25cclxuICAgICAgICAgICAgICAgICAgICB0ZXh0PXtpZHggKyAxfVxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXtwLnRvcGljfVxyXG4gICAgICAgICAgICAgICAgICAgIHNldFBlcmlvZD17c2V0Q3VycmVudFBlcmlvZElkeH1cclxuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZT17Y3VycmVudFBlcmlvZElkeCA9PT0gaWR4fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8dWwgY2xhc3NOYW1lPXtjbihzdHlsZXMuZG90cywgY2xhc3NOYW1lKX0gey4uLnJlc3R9IHJlZj17bGlzdFJlZn0+XHJcbiAgICAgICAgICAgIHtkb3RzfVxyXG4gICAgICAgIDwvdWw+XHJcbiAgICApO1xyXG59O1xyXG4iLCIvKipcbiAqIFNTUiBXaW5kb3cgNC4wLjJcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDIxLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBEZWNlbWJlciAxMywgMjAyMVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiZcbiAgICAgICAgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCA9IHt9LCBzcmMgPSB7fSkge1xuICAgIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmXG4gICAgICAgICAgICBpc09iamVjdCh0YXJnZXRba2V5XSkgJiZcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNyY1trZXldKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5jb25zdCBzc3JEb2N1bWVudCA9IHtcbiAgICBib2R5OiB7fSxcbiAgICBhZGRFdmVudExpc3RlbmVyKCkgeyB9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7IH0sXG4gICAgYWN0aXZlRWxlbWVudDoge1xuICAgICAgICBibHVyKCkgeyB9LFxuICAgICAgICBub2RlTmFtZTogJycsXG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIGdldEVsZW1lbnRCeUlkKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGNyZWF0ZUV2ZW50KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5pdEV2ZW50KCkgeyB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICAgICAgc2V0QXR0cmlidXRlKCkgeyB9LFxuICAgICAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnROUygpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgaW1wb3J0Tm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBsb2NhdGlvbjoge1xuICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgaG9zdDogJycsXG4gICAgICAgIGhvc3RuYW1lOiAnJyxcbiAgICAgICAgaHJlZjogJycsXG4gICAgICAgIG9yaWdpbjogJycsXG4gICAgICAgIHBhdGhuYW1lOiAnJyxcbiAgICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgICBzZWFyY2g6ICcnLFxuICAgIH0sXG59O1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XG4gICAgY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gICAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICAgIHJldHVybiBkb2M7XG59XG5cbmNvbnN0IHNzcldpbmRvdyA9IHtcbiAgICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gICAgbmF2aWdhdG9yOiB7XG4gICAgICAgIHVzZXJBZ2VudDogJycsXG4gICAgfSxcbiAgICBsb2NhdGlvbjoge1xuICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgaG9zdDogJycsXG4gICAgICAgIGhvc3RuYW1lOiAnJyxcbiAgICAgICAgaHJlZjogJycsXG4gICAgICAgIG9yaWdpbjogJycsXG4gICAgICAgIHBhdGhuYW1lOiAnJyxcbiAgICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgICBzZWFyY2g6ICcnLFxuICAgIH0sXG4gICAgaGlzdG9yeToge1xuICAgICAgICByZXBsYWNlU3RhdGUoKSB7IH0sXG4gICAgICAgIHB1c2hTdGF0ZSgpIHsgfSxcbiAgICAgICAgZ28oKSB7IH0sXG4gICAgICAgIGJhY2soKSB7IH0sXG4gICAgfSxcbiAgICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcigpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKCkgeyB9LFxuICAgIGdldENvbXB1dGVkU3R5bGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBJbWFnZSgpIHsgfSxcbiAgICBEYXRlKCkgeyB9LFxuICAgIHNjcmVlbjoge30sXG4gICAgc2V0VGltZW91dCgpIHsgfSxcbiAgICBjbGVhclRpbWVvdXQoKSB7IH0sXG4gICAgbWF0Y2hNZWRpYSgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gICAgfSxcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgICBjb25zdCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xuICAgIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gICAgcmV0dXJuIHdpbjtcbn1cblxuZXhwb3J0IHsgZXh0ZW5kLCBnZXREb2N1bWVudCwgZ2V0V2luZG93LCBzc3JEb2N1bWVudCwgc3NyV2luZG93IH07XG4iLCIvKipcbiAqIERvbTcgNC4wLjRcbiAqIE1pbmltYWxpc3RpYyBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb24sIHdpdGggYSBqUXVlcnktY29tcGF0aWJsZSBBUElcbiAqIGh0dHBzOi8vZnJhbWV3b3JrNy5pby9kb2NzL2RvbTcuaHRtbFxuICpcbiAqIENvcHlyaWdodCAyMDIyLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBKYW51YXJ5IDExLCAyMDIyXG4gKi9cbmltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbmZ1bmN0aW9uIG1ha2VSZWFjdGl2ZShvYmopIHtcbiAgY29uc3QgcHJvdG8gPSBvYmouX19wcm90b19fO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnX19wcm90b19fJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBwcm90bztcbiAgICB9LFxuXG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICBwcm90by5fX3Byb3RvX18gPSB2YWx1ZTtcbiAgICB9XG5cbiAgfSk7XG59XG5cbmNsYXNzIERvbTcgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKGl0ZW1zKSB7XG4gICAgaWYgKHR5cGVvZiBpdGVtcyA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN1cGVyKGl0ZW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIoLi4uKGl0ZW1zIHx8IFtdKSk7XG4gICAgICBtYWtlUmVhY3RpdmUodGhpcyk7XG4gICAgfVxuICB9XG5cbn1cblxuZnVuY3Rpb24gYXJyYXlGbGF0KGFyciA9IFtdKSB7XG4gIGNvbnN0IHJlcyA9IFtdO1xuICBhcnIuZm9yRWFjaChlbCA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgICByZXMucHVzaCguLi5hcnJheUZsYXQoZWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnB1c2goZWwpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnIsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyLCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBhcnJheVVuaXF1ZShhcnIpIHtcbiAgY29uc3QgdW5pcXVlQXJyYXkgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh1bmlxdWVBcnJheS5pbmRleE9mKGFycltpXSkgPT09IC0xKSB1bmlxdWVBcnJheS5wdXNoKGFycltpXSk7XG4gIH1cblxuICByZXR1cm4gdW5pcXVlQXJyYXk7XG59XG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgKG1hdGNoLCBncm91cCkgPT4gZ3JvdXAudG9VcHBlckNhc2UoKSk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5mdW5jdGlvbiBxc2Eoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gW3NlbGVjdG9yXTtcbiAgfVxuXG4gIGNvbnN0IGEgPSBbXTtcbiAgY29uc3QgcmVzID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGEucHVzaChyZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uICQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgbGV0IGFyciA9IFtdO1xuXG4gIGlmICghY29udGV4dCAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cblxuICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBEb203KGFycik7XG4gIH1cblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGh0bWwgPSBzZWxlY3Rvci50cmltKCk7XG5cbiAgICBpZiAoaHRtbC5pbmRleE9mKCc8JykgPj0gMCAmJiBodG1sLmluZGV4T2YoJz4nKSA+PSAwKSB7XG4gICAgICBsZXQgdG9DcmVhdGUgPSAnZGl2JztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB0b0NyZWF0ZSA9ICd1bCc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dHInKSA9PT0gMCkgdG9DcmVhdGUgPSAndGJvZHknO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRkJykgPT09IDAgfHwgaHRtbC5pbmRleE9mKCc8dGgnKSA9PT0gMCkgdG9DcmVhdGUgPSAndHInO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHRvQ3JlYXRlID0gJ3RhYmxlJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzxvcHRpb24nKSA9PT0gMCkgdG9DcmVhdGUgPSAnc2VsZWN0JztcbiAgICAgIGNvbnN0IHRlbXBQYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRvQ3JlYXRlKTtcbiAgICAgIHRlbXBQYXJlbnQuaW5uZXJIVE1MID0gaHRtbDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyLnB1c2godGVtcFBhcmVudC5jaGlsZE5vZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXJyID0gcXNhKHNlbGVjdG9yLnRyaW0oKSwgY29udGV4dCB8fCBkb2N1bWVudCk7XG4gICAgfSAvLyBhcnIgPSBxc2Eoc2VsZWN0b3IsIGRvY3VtZW50KTtcblxuICB9IGVsc2UgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yID09PSB3aW5kb3cgfHwgc2VsZWN0b3IgPT09IGRvY3VtZW50KSB7XG4gICAgYXJyLnB1c2goc2VsZWN0b3IpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0b3IpKSB7XG4gICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykgcmV0dXJuIHNlbGVjdG9yO1xuICAgIGFyciA9IHNlbGVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEb203KGFycmF5VW5pcXVlKGFycikpO1xufVxuXG4kLmZuID0gRG9tNy5wcm90b3R5cGU7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5mdW5jdGlvbiBhZGRDbGFzcyguLi5jbGFzc2VzKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoYyA9PiBjLnNwbGl0KCcgJykpKTtcbiAgdGhpcy5mb3JFYWNoKGVsID0+IHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzTmFtZXMpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKC4uLmNsYXNzZXMpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChjID0+IGMuc3BsaXQoJyAnKSkpO1xuICB0aGlzLmZvckVhY2goZWwgPT4ge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoLi4uY2xhc3Nlcykge1xuICBjb25zdCBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGMgPT4gYy5zcGxpdCgnICcpKSk7XG4gIHRoaXMuZm9yRWFjaChlbCA9PiB7XG4gICAgY2xhc3NOYW1lcy5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzTmFtZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzcyguLi5jbGFzc2VzKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoYyA9PiBjLnNwbGl0KCcgJykpKTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKHRoaXMsIGVsID0+IHtcbiAgICByZXR1cm4gY2xhc3NOYW1lcy5maWx0ZXIoY2xhc3NOYW1lID0+IGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKS5sZW5ndGggPiAwO1xuICB9KS5sZW5ndGggPiAwO1xufVxuXG5mdW5jdGlvbiBhdHRyKGF0dHJzLCB2YWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gR2V0IGF0dHJcbiAgICBpZiAodGhpc1swXSkgcmV0dXJuIHRoaXNbMF0uZ2V0QXR0cmlidXRlKGF0dHJzKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IC8vIFNldCBhdHRyc1xuXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIC8vIFN0cmluZ1xuICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0cnMsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0XG4gICAgICBmb3IgKGNvbnN0IGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgICAgIHRoaXNbaV1bYXR0ck5hbWVdID0gYXR0cnNbYXR0ck5hbWVdO1xuICAgICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXR0cihhdHRyKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0ucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByb3AocHJvcHMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgcHJvcFxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXVtwcm9wc107XG4gIH0gZWxzZSB7XG4gICAgLy8gU2V0IHByb3BzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAvLyBTdHJpbmdcbiAgICAgICAgdGhpc1tpXVtwcm9wc10gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9iamVjdFxuICAgICAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXVtwcm9wTmFtZV0gPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXRhKGtleSwgdmFsdWUpIHtcbiAgbGV0IGVsO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7IC8vIEdldCB2YWx1ZVxuXG4gICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYga2V5IGluIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YUtleSA9IGVsLmdldEF0dHJpYnV0ZShgZGF0YS0ke2tleX1gKTtcblxuICAgIGlmIChkYXRhS2V5KSB7XG4gICAgICByZXR1cm4gZGF0YUtleTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IC8vIFNldCB2YWx1ZVxuXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWwgPSB0aGlzW2ldO1xuICAgIGlmICghZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSA9IHt9O1xuICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURhdGEoa2V5KSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSkge1xuICAgICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gbnVsbDtcbiAgICAgIGRlbGV0ZSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGFzZXQoKSB7XG4gIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgY29uc3QgZGF0YXNldCA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKGVsLmRhdGFzZXQpIHtcbiAgICBmb3IgKGNvbnN0IGRhdGFLZXkgaW4gZWwuZGF0YXNldCkge1xuICAgICAgZGF0YXNldFtkYXRhS2V5XSA9IGVsLmRhdGFzZXRbZGF0YUtleV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWwuYXR0cmlidXRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgYXR0ciA9IGVsLmF0dHJpYnV0ZXNbaV07XG5cbiAgICAgIGlmIChhdHRyLm5hbWUuaW5kZXhPZignZGF0YS0nKSA+PSAwKSB7XG4gICAgICAgIGRhdGFzZXRbdG9DYW1lbENhc2UoYXR0ci5uYW1lLnNwbGl0KCdkYXRhLScpWzFdKV0gPSBhdHRyLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IGluIGRhdGFzZXQpIHtcbiAgICBpZiAoZGF0YXNldFtrZXldID09PSAnZmFsc2UnKSBkYXRhc2V0W2tleV0gPSBmYWxzZTtlbHNlIGlmIChkYXRhc2V0W2tleV0gPT09ICd0cnVlJykgZGF0YXNldFtrZXldID0gdHJ1ZTtlbHNlIGlmIChwYXJzZUZsb2F0KGRhdGFzZXRba2V5XSkgPT09IGRhdGFzZXRba2V5XSAqIDEpIGRhdGFzZXRba2V5XSAqPSAxO1xuICB9XG5cbiAgcmV0dXJuIGRhdGFzZXQ7XG59XG5cbmZ1bmN0aW9uIHZhbCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGdldCB2YWx1ZVxuICAgIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgaWYgKGVsLm11bHRpcGxlICYmIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbC5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goZWwuc2VsZWN0ZWRPcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZWwudmFsdWU7XG4gIH0gLy8gc2V0IHZhbHVlXG5cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgZWwubXVsdGlwbGUgJiYgZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZWwub3B0aW9ucy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBlbC5vcHRpb25zW2pdLnNlbGVjdGVkID0gdmFsdWUuaW5kZXhPZihlbC5vcHRpb25zW2pdLnZhbHVlKSA+PSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB2YWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy52YWwodmFsdWUpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgZHVyYXRpb24gIT09ICdzdHJpbmcnID8gYCR7ZHVyYXRpb259bXNgIDogZHVyYXRpb247XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb24oLi4uYXJncykge1xuICBsZXQgW2V2ZW50VHlwZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2V2ZW50VHlwZSwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUxpdmVFdmVudChlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgaWYgKCF0YXJnZXQpIHJldHVybjtcbiAgICBjb25zdCBldmVudERhdGEgPSBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdO1xuXG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuXG4gICAgaWYgKCQodGFyZ2V0KS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KHRhcmdldCwgZXZlbnREYXRhKTtlbHNlIHtcbiAgICAgIGNvbnN0IHBhcmVudHMgPSAkKHRhcmdldCkucGFyZW50cygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcGFyZW50cy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICBpZiAoJChwYXJlbnRzW2tdKS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KHBhcmVudHNba10sIGV2ZW50RGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdIDogW107XG5cbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudERhdGEpO1xuICB9XG5cbiAgY29uc3QgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gIGxldCBqO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcblxuICAgIGlmICghdGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBldmVudHNbal07XG4gICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVycykgZWwuZG9tN0xpc3RlbmVycyA9IHt9O1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdKSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICBlbC5kb203TGlzdGVuZXJzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXZlIGV2ZW50c1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVycykgZWwuZG9tN0xpdmVMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0pIGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlTGl2ZUV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVMaXZlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvZmYoLi4uYXJncykge1xuICBsZXQgW2V2ZW50VHlwZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2V2ZW50VHlwZSwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuICBjb25zdCBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2ldO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXNbal07XG4gICAgICBsZXQgaGFuZGxlcnM7XG5cbiAgICAgIGlmICghdGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGl2ZUxpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhbmRsZXJzICYmIGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGxldCBrID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgayA+PSAwOyBrIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNba107XG5cbiAgICAgICAgICBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb25jZSguLi5hcmdzKSB7XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGxldCBbZXZlbnROYW1lLCB0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBbZXZlbnROYW1lLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gb25jZUhhbmRsZXIoLi4uZXZlbnRBcmdzKSB7XG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnRBcmdzKTtcbiAgICBkb20ub2ZmKGV2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcblxuICAgIGlmIChvbmNlSGFuZGxlci5kb203cHJveHkpIHtcbiAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5kb203cHJveHk7XG4gICAgfVxuICB9XG5cbiAgb25jZUhhbmRsZXIuZG9tN3Byb3h5ID0gbGlzdGVuZXI7XG4gIHJldHVybiBkb20ub24oZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyKC4uLmFyZ3MpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGV2ZW50cyA9IGFyZ3NbMF0uc3BsaXQoJyAnKTtcbiAgY29uc3QgZXZlbnREYXRhID0gYXJnc1sxXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2ldO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXNbal07XG5cbiAgICAgIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudCwge1xuICAgICAgICAgIGRldGFpbDogZXZlbnREYXRhLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IGFyZ3MuZmlsdGVyKChkYXRhLCBkYXRhSW5kZXgpID0+IGRhdGFJbmRleCA+IDApO1xuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBbXTtcbiAgICAgICAgZGVsZXRlIGVsLmRvbTdFdmVudERhdGE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoY2FsbGJhY2spIHtcbiAgY29uc3QgZG9tID0gdGhpcztcblxuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZG9tLm9mZigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBkb20ub24oJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkVuZChjYWxsYmFjaykge1xuICBjb25zdCBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9tLm9uKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHdpZHRoKCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuY3NzKCd3aWR0aCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvdXRlcldpZHRoKGluY2x1ZGVNYXJnaW5zKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGhlaWdodCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ2hlaWdodCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvdXRlckhlaWdodChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICBjb25zdCBzdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0ICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBjb25zdCBlbCA9IHRoaXNbMF07XG4gICAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgY29uc3QgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gICAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxZIDogZWwuc2Nyb2xsVG9wO1xuICAgIGNvbnN0IHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoaWRlKCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2hvdygpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cblxuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgIC8vIFN0aWxsIG5vdCB2aXNpYmxlXG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc3R5bGVzKCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKTtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBjc3MocHJvcHMsIHZhbHVlKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgaTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyAuY3NzKCd3aWR0aCcpXG4gICAgICBpZiAodGhpc1swXSkgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAuY3NzKHsgd2lkdGg6ICcxMDBweCcgfSlcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gLmNzcygnd2lkdGgnLCAnMTAwcHgnKVxuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnN0eWxlW3Byb3BzXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVhY2goY2FsbGJhY2spIHtcbiAgaWYgKCFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gIHRoaXMuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgY2FsbGJhY2suYXBwbHkoZWwsIFtlbCwgaW5kZXhdKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2spIHtcbiAgY29uc3QgcmVzdWx0ID0gYXJyYXlGaWx0ZXIodGhpcywgY2FsbGJhY2spO1xuICByZXR1cm4gJChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBodG1sKGh0bWwpIHtcbiAgaWYgKHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiBudWxsO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRleHQodGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBlbCA9IHRoaXNbMF07XG4gIGxldCBjb21wYXJlV2l0aDtcbiAgbGV0IGk7XG4gIGlmICghZWwgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGVsLm1hdGNoZXMpIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgY29tcGFyZVdpdGggPSAkKHNlbGVjdG9yKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgIHJldHVybiBlbCA9PT0gZG9jdW1lbnQ7XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgPT09IHdpbmRvdykge1xuICAgIHJldHVybiBlbCA9PT0gd2luZG93O1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgIGNvbXBhcmVXaXRoID0gc2VsZWN0b3Iubm9kZVR5cGUgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3I7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaW5kZXgoKSB7XG4gIGxldCBjaGlsZCA9IHRoaXNbMF07XG4gIGxldCBpO1xuXG4gIGlmIChjaGlsZCkge1xuICAgIGkgPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcztcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4ID4gbGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBjb25zdCByZXR1cm5JbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGlmIChyZXR1cm5JbmRleCA8IDApIHJldHVybiAkKFtdKTtcbiAgICByZXR1cm4gJChbdGhpc1tyZXR1cm5JbmRleF1dKTtcbiAgfVxuXG4gIHJldHVybiAkKFt0aGlzW2luZGV4XV0pO1xufVxuXG5mdW5jdGlvbiBhcHBlbmQoLi4uZWxzKSB7XG4gIGxldCBuZXdDaGlsZDtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gIGZvciAobGV0IGsgPSAwOyBrIDwgZWxzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgbmV3Q2hpbGQgPSBlbHNba107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgICB3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZCh0ZW1wRGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRUbyhwYXJlbnQpIHtcbiAgJChwYXJlbnQpLmFwcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmQobmV3Q2hpbGQpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBsZXQgaTtcbiAgbGV0IGo7XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgZm9yIChqID0gdGVtcERpdi5jaGlsZE5vZGVzLmxlbmd0aCAtIDE7IGogPj0gMDsgaiAtPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKHRlbXBEaXYuY2hpbGROb2Rlc1tqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZCwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJlcGVuZFRvKHBhcmVudCkge1xuICAkKHBhcmVudCkucHJlcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShzZWxlY3Rvcikge1xuICBjb25zdCBiZWZvcmUgPSAkKHNlbGVjdG9yKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYmVmb3JlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYmVmb3JlWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGJlZm9yZVswXSk7XG4gICAgfSBlbHNlIGlmIChiZWZvcmUubGVuZ3RoID4gMSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBiZWZvcmUubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYmVmb3JlW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBiZWZvcmVbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRBZnRlcihzZWxlY3Rvcikge1xuICBjb25zdCBhZnRlciA9ICQoc2VsZWN0b3IpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhZnRlci5sZW5ndGggPT09IDEpIHtcbiAgICAgIGFmdGVyWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGFmdGVyWzBdLm5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2UgaWYgKGFmdGVyLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWZ0ZXIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYWZ0ZXJbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGFmdGVyW2pdLm5leHRTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dChzZWxlY3Rvcikge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcgJiYgJCh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm4gJChbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICByZXR1cm4gJChbXSk7XG59XG5cbmZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICBsZXQgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQobmV4dCkuaXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgfSBlbHNlIG5leHRFbHMucHVzaChuZXh0KTtcblxuICAgIGVsID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiAkKG5leHRFbHMpO1xufVxuXG5mdW5jdGlvbiBwcmV2KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbMF07XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICQoZWwucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKFtdKTtcbiAgICB9XG5cbiAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykgcmV0dXJuICQoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICByZXR1cm4gJChbXSk7XG59XG5cbmZ1bmN0aW9uIHByZXZBbGwoc2VsZWN0b3IpIHtcbiAgY29uc3QgcHJldkVscyA9IFtdO1xuICBsZXQgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoJChwcmV2KS5pcyhzZWxlY3RvcikpIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICB9IGVsc2UgcHJldkVscy5wdXNoKHByZXYpO1xuXG4gICAgZWwgPSBwcmV2O1xuICB9XG5cbiAgcmV0dXJuICQocHJldkVscyk7XG59XG5cbmZ1bmN0aW9uIHNpYmxpbmdzKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0aGlzLm5leHRBbGwoc2VsZWN0b3IpLmFkZCh0aGlzLnByZXZBbGwoc2VsZWN0b3IpKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50KHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJCh0aGlzW2ldLnBhcmVudE5vZGUpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChwYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsZXQgcGFyZW50ID0gdGhpc1tpXS5wYXJlbnROb2RlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQocGFyZW50KS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKHBhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XG4gIGxldCBjbG9zZXN0ID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgaWYgKCFjbG9zZXN0LmlzKHNlbGVjdG9yKSkge1xuICAgIGNsb3Nlc3QgPSBjbG9zZXN0LnBhcmVudHMoc2VsZWN0b3IpLmVxKDApO1xuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3Q7XG59XG5cbmZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcbiAgY29uc3QgZm91bmRFbGVtZW50cyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgZm91bmQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGZvdW5kRWxlbWVudHMucHVzaChmb3VuZFtqXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQoZm91bmRFbGVtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gIGNvbnN0IGNoaWxkcmVuID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBjaGlsZE5vZGVzID0gdGhpc1tpXS5jaGlsZHJlbjtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgaWYgKCFzZWxlY3RvciB8fCAkKGNoaWxkTm9kZXNbal0pLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKGNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlKSB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZGV0YWNoKCkge1xuICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gYWRkKC4uLmVscykge1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBsZXQgaTtcbiAgbGV0IGo7XG5cbiAgZm9yIChpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHRvQWRkID0gJChlbHNbaV0pO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IHRvQWRkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBkb20ucHVzaCh0b0FkZFtqXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvbTtcbn1cblxuZnVuY3Rpb24gZW1wdHkoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBlbC5jaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwuY2hpbGROb2Rlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWwudGV4dENvbnRlbnQgPSAnJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbmZ1bmN0aW9uIHNjcm9sbFRvKC4uLmFyZ3MpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBbbGVmdCwgdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBlYXNpbmc7XG4gICAgW2xlZnQsIHRvcCwgZHVyYXRpb24sIGNhbGxiYWNrLCBlYXNpbmddID0gYXJncztcbiAgfVxuXG4gIGlmICh0eXBlb2YgZWFzaW5nID09PSAndW5kZWZpbmVkJykgZWFzaW5nID0gJ3N3aW5nJztcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIGNvbnN0IGVsID0gdGhpcztcbiAgICBsZXQgY3VycmVudFRvcDtcbiAgICBsZXQgY3VycmVudExlZnQ7XG4gICAgbGV0IG1heFRvcDtcbiAgICBsZXQgbWF4TGVmdDtcbiAgICBsZXQgbmV3VG9wO1xuICAgIGxldCBuZXdMZWZ0O1xuICAgIGxldCBzY3JvbGxUb3A7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGxldCBzY3JvbGxMZWZ0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBsZXQgYW5pbWF0ZVRvcCA9IHRvcCA+IDAgfHwgdG9wID09PSAwO1xuICAgIGxldCBhbmltYXRlTGVmdCA9IGxlZnQgPiAwIHx8IGxlZnQgPT09IDA7XG5cbiAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVhc2luZyA9ICdzd2luZyc7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVUb3ApIHtcbiAgICAgIGN1cnJlbnRUb3AgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgY3VycmVudExlZnQgPSBlbC5zY3JvbGxMZWZ0O1xuXG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZHVyYXRpb24pIHJldHVybjtcblxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBtYXhUb3AgPSBlbC5zY3JvbGxIZWlnaHQgLSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdUb3AgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIG1heFRvcCksIDApO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgbWF4TGVmdCA9IGVsLnNjcm9sbFdpZHRoIC0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICBuZXdMZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4obGVmdCwgbWF4TGVmdCksIDApO1xuICAgIH1cblxuICAgIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA9PT0gY3VycmVudFRvcCkgYW5pbWF0ZVRvcCA9IGZhbHNlO1xuICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID09PSBjdXJyZW50TGVmdCkgYW5pbWF0ZUxlZnQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlcih0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkpIHtcbiAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgICAgY29uc3QgZWFzZVByb2dyZXNzID0gZWFzaW5nID09PSAnbGluZWFyJyA/IHByb2dyZXNzIDogMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgICBsZXQgZG9uZTtcbiAgICAgIGlmIChhbmltYXRlVG9wKSBzY3JvbGxUb3AgPSBjdXJyZW50VG9wICsgZWFzZVByb2dyZXNzICogKG5ld1RvcCAtIGN1cnJlbnRUb3ApO1xuICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBzY3JvbGxMZWZ0ID0gY3VycmVudExlZnQgKyBlYXNlUHJvZ3Jlc3MgKiAobmV3TGVmdCAtIGN1cnJlbnRMZWZ0KTtcblxuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wID4gY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPj0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA8IGN1cnJlbnRUb3AgJiYgc2Nyb2xsVG9wIDw9IG5ld1RvcCkge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA+IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPj0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0IDwgY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA8PSBuZXdMZWZ0KSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBuZXdMZWZ0O1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlVG9wKSBlbC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQpIGVsLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgIH1cblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfSk7XG59IC8vIHNjcm9sbFRvcCh0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKSB7XG5cblxuZnVuY3Rpb24gc2Nyb2xsVG9wKC4uLmFyZ3MpIHtcbiAgbGV0IFt0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrXSA9IGFyZ3M7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAzICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBbdG9wLCBkdXJhdGlvbiwgY2FsbGJhY2ssIGVhc2luZ10gPSBhcmdzO1xuICB9XG5cbiAgY29uc3QgZG9tID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsVG9wO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRvbS5zY3JvbGxUbyh1bmRlZmluZWQsIHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxMZWZ0KC4uLmFyZ3MpIHtcbiAgbGV0IFtsZWZ0LCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2xlZnQsIGR1cmF0aW9uLCBjYWxsYmFjaywgZWFzaW5nXSA9IGFyZ3M7XG4gIH1cblxuICBjb25zdCBkb20gPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBkb20uc2Nyb2xsVG8obGVmdCwgdW5kZWZpbmVkLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5mdW5jdGlvbiBhbmltYXRlKGluaXRpYWxQcm9wcywgaW5pdGlhbFBhcmFtcykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZWxzID0gdGhpcztcbiAgY29uc3QgYSA9IHtcbiAgICBwcm9wczogT2JqZWN0LmFzc2lnbih7fSwgaW5pdGlhbFByb3BzKSxcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgIGVhc2luZzogJ3N3aW5nJyAvLyBvciAnbGluZWFyJ1xuXG4gICAgICAvKiBDYWxsYmFja3NcbiAgICAgIGJlZ2luKGVsZW1lbnRzKVxuICAgICAgY29tcGxldGUoZWxlbWVudHMpXG4gICAgICBwcm9ncmVzcyhlbGVtZW50cywgY29tcGxldGUsIHJlbWFpbmluZywgc3RhcnQsIHR3ZWVuVmFsdWUpXG4gICAgICAqL1xuXG4gICAgfSwgaW5pdGlhbFBhcmFtcyksXG4gICAgZWxlbWVudHM6IGVscyxcbiAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgIHF1ZTogW10sXG5cbiAgICBlYXNpbmdQcm9ncmVzcyhlYXNpbmcsIHByb2dyZXNzKSB7XG4gICAgICBpZiAoZWFzaW5nID09PSAnc3dpbmcnKSB7XG4gICAgICAgIHJldHVybiAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGVhc2luZyhwcm9ncmVzcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9ncmVzcztcbiAgICB9LFxuXG4gICAgc3RvcCgpIHtcbiAgICAgIGlmIChhLmZyYW1lSWQpIHtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGEuZnJhbWVJZCk7XG4gICAgICB9XG5cbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goZWwgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGEucXVlID0gW107XG4gICAgfSxcblxuICAgIGRvbmUoY29tcGxldGUpIHtcbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goZWwgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChjb21wbGV0ZSkgY29tcGxldGUoZWxzKTtcblxuICAgICAgaWYgKGEucXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcXVlID0gYS5xdWUuc2hpZnQoKTtcbiAgICAgICAgYS5hbmltYXRlKHF1ZVswXSwgcXVlWzFdKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYW5pbWF0ZShwcm9wcywgcGFyYW1zKSB7XG4gICAgICBpZiAoYS5hbmltYXRpbmcpIHtcbiAgICAgICAgYS5xdWUucHVzaChbcHJvcHMsIHBhcmFtc10pO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTsgLy8gRGVmaW5lICYgQ2FjaGUgSW5pdGlhbHMgJiBVbml0c1xuXG4gICAgICBhLmVsZW1lbnRzLmVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgaW5pdGlhbEZ1bGxWYWx1ZTtcbiAgICAgICAgbGV0IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgbGV0IHVuaXQ7XG4gICAgICAgIGxldCBmaW5hbFZhbHVlO1xuICAgICAgICBsZXQgZmluYWxGdWxsVmFsdWU7XG4gICAgICAgIGlmICghZWwuZG9tN0FuaW1hdGVJbnN0YW5jZSkgYS5lbGVtZW50c1tpbmRleF0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gICAgICAgIGVsZW1lbnRzW2luZGV4XSA9IHtcbiAgICAgICAgICBjb250YWluZXI6IGVsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKS5yZXBsYWNlKCcsJywgJy4nKTtcbiAgICAgICAgICBpbml0aWFsVmFsdWUgPSBwYXJzZUZsb2F0KGluaXRpYWxGdWxsVmFsdWUpO1xuICAgICAgICAgIHVuaXQgPSBpbml0aWFsRnVsbFZhbHVlLnJlcGxhY2UoaW5pdGlhbFZhbHVlLCAnJyk7XG4gICAgICAgICAgZmluYWxWYWx1ZSA9IHBhcnNlRmxvYXQocHJvcHNbcHJvcF0pO1xuICAgICAgICAgIGZpbmFsRnVsbFZhbHVlID0gcHJvcHNbcHJvcF0gKyB1bml0O1xuICAgICAgICAgIGVsZW1lbnRzW2luZGV4XVtwcm9wXSA9IHtcbiAgICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICB1bml0LFxuICAgICAgICAgICAgZmluYWxWYWx1ZSxcbiAgICAgICAgICAgIGZpbmFsRnVsbFZhbHVlLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlOiBpbml0aWFsVmFsdWVcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gICAgICBsZXQgdGltZTtcbiAgICAgIGxldCBlbGVtZW50c0RvbmUgPSAwO1xuICAgICAgbGV0IHByb3BzRG9uZSA9IDA7XG4gICAgICBsZXQgZG9uZTtcbiAgICAgIGxldCBiZWdhbiA9IGZhbHNlO1xuICAgICAgYS5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgbGV0IHByb2dyZXNzO1xuICAgICAgICBsZXQgZWFzZVByb2dyZXNzOyAvLyBsZXQgZWw7XG5cbiAgICAgICAgaWYgKCFiZWdhbikge1xuICAgICAgICAgIGJlZ2FuID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocGFyYW1zLmJlZ2luKSBwYXJhbXMuYmVnaW4oZWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzcykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIHBhcmFtcy5wcm9ncmVzcyhlbHMsIE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIHBhcmFtcy5kdXJhdGlvbiwgMSksIDApLCBzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24gLSB0aW1lIDwgMCA/IDAgOiBzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24gLSB0aW1lLCBzdGFydFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICBjb25zdCBlbCA9IGVsZW1lbnQ7XG4gICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgICAgICAgIGVhc2VQcm9ncmVzcyA9IGEuZWFzaW5nUHJvZ3Jlc3MocGFyYW1zLmVhc2luZywgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICAgIGZpbmFsVmFsdWUsXG4gICAgICAgICAgICAgIHVuaXRcbiAgICAgICAgICAgIH0gPSBlbFtwcm9wXTtcbiAgICAgICAgICAgIGVsW3Byb3BdLmN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZSArIGVhc2VQcm9ncmVzcyAqIChmaW5hbFZhbHVlIC0gaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGVsW3Byb3BdLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKGZpbmFsVmFsdWUgPiBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlID49IGZpbmFsVmFsdWUgfHwgZmluYWxWYWx1ZSA8IGluaXRpYWxWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPD0gZmluYWxWYWx1ZSkge1xuICAgICAgICAgICAgICBlbC5jb250YWluZXIuc3R5bGVbcHJvcF0gPSBmaW5hbFZhbHVlICsgdW5pdDtcbiAgICAgICAgICAgICAgcHJvcHNEb25lICs9IDE7XG5cbiAgICAgICAgICAgICAgaWYgKHByb3BzRG9uZSA9PT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVsLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzRG9uZSArPSAxO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzRG9uZSA9PT0gZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgYS5kb25lKHBhcmFtcy5jb21wbGV0ZSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gY3VycmVudFZhbHVlICsgdW5pdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47IC8vIFRoZW4gY2FsbFxuXG4gICAgICAgIGEuZnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIH1cblxuICAgICAgYS5mcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gIH07XG5cbiAgaWYgKGEuZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVscztcbiAgfVxuXG4gIGxldCBhbmltYXRlSW5zdGFuY2U7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmVsZW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSkge1xuICAgICAgYW5pbWF0ZUluc3RhbmNlID0gYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgIH0gZWxzZSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UgPSBhO1xuICB9XG5cbiAgaWYgKCFhbmltYXRlSW5zdGFuY2UpIHtcbiAgICBhbmltYXRlSW5zdGFuY2UgPSBhO1xuICB9XG5cbiAgaWYgKGluaXRpYWxQcm9wcyA9PT0gJ3N0b3AnKSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlLnN0b3AoKTtcbiAgfSBlbHNlIHtcbiAgICBhbmltYXRlSW5zdGFuY2UuYW5pbWF0ZShhLnByb3BzLCBhLnBhcmFtcyk7XG4gIH1cblxuICByZXR1cm4gZWxzO1xufVxuXG5mdW5jdGlvbiBzdG9wKCkge1xuICBjb25zdCBlbHMgPSB0aGlzO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG5vVHJpZ2dlciA9ICdyZXNpemUgc2Nyb2xsJy5zcGxpdCgnICcpO1xuXG5mdW5jdGlvbiBzaG9ydGN1dChuYW1lKSB7XG4gIGZ1bmN0aW9uIGV2ZW50SGFuZGxlciguLi5hcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChub1RyaWdnZXIuaW5kZXhPZihuYW1lKSA8IDApIHtcbiAgICAgICAgICBpZiAobmFtZSBpbiB0aGlzW2ldKSB0aGlzW2ldW25hbWVdKCk7ZWxzZSB7XG4gICAgICAgICAgICAkKHRoaXNbaV0pLnRyaWdnZXIobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIC4uLmFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50SGFuZGxlcjtcbn1cblxuY29uc3QgY2xpY2sgPSBzaG9ydGN1dCgnY2xpY2snKTtcbmNvbnN0IGJsdXIgPSBzaG9ydGN1dCgnYmx1cicpO1xuY29uc3QgZm9jdXMgPSBzaG9ydGN1dCgnZm9jdXMnKTtcbmNvbnN0IGZvY3VzaW4gPSBzaG9ydGN1dCgnZm9jdXNpbicpO1xuY29uc3QgZm9jdXNvdXQgPSBzaG9ydGN1dCgnZm9jdXNvdXQnKTtcbmNvbnN0IGtleXVwID0gc2hvcnRjdXQoJ2tleXVwJyk7XG5jb25zdCBrZXlkb3duID0gc2hvcnRjdXQoJ2tleWRvd24nKTtcbmNvbnN0IGtleXByZXNzID0gc2hvcnRjdXQoJ2tleXByZXNzJyk7XG5jb25zdCBzdWJtaXQgPSBzaG9ydGN1dCgnc3VibWl0Jyk7XG5jb25zdCBjaGFuZ2UgPSBzaG9ydGN1dCgnY2hhbmdlJyk7XG5jb25zdCBtb3VzZWRvd24gPSBzaG9ydGN1dCgnbW91c2Vkb3duJyk7XG5jb25zdCBtb3VzZW1vdmUgPSBzaG9ydGN1dCgnbW91c2Vtb3ZlJyk7XG5jb25zdCBtb3VzZXVwID0gc2hvcnRjdXQoJ21vdXNldXAnKTtcbmNvbnN0IG1vdXNlZW50ZXIgPSBzaG9ydGN1dCgnbW91c2VlbnRlcicpO1xuY29uc3QgbW91c2VsZWF2ZSA9IHNob3J0Y3V0KCdtb3VzZWxlYXZlJyk7XG5jb25zdCBtb3VzZW91dCA9IHNob3J0Y3V0KCdtb3VzZW91dCcpO1xuY29uc3QgbW91c2VvdmVyID0gc2hvcnRjdXQoJ21vdXNlb3ZlcicpO1xuY29uc3QgdG91Y2hzdGFydCA9IHNob3J0Y3V0KCd0b3VjaHN0YXJ0Jyk7XG5jb25zdCB0b3VjaGVuZCA9IHNob3J0Y3V0KCd0b3VjaGVuZCcpO1xuY29uc3QgdG91Y2htb3ZlID0gc2hvcnRjdXQoJ3RvdWNobW92ZScpO1xuY29uc3QgcmVzaXplID0gc2hvcnRjdXQoJ3Jlc2l6ZScpO1xuY29uc3Qgc2Nyb2xsID0gc2hvcnRjdXQoJ3Njcm9sbCcpO1xuXG5leHBvcnQgZGVmYXVsdCAkO1xuZXhwb3J0IHsgJCwgYWRkLCBhZGRDbGFzcywgYW5pbWF0ZSwgYW5pbWF0aW9uRW5kLCBhcHBlbmQsIGFwcGVuZFRvLCBhdHRyLCBibHVyLCBjaGFuZ2UsIGNoaWxkcmVuLCBjbGljaywgY2xvc2VzdCwgY3NzLCBkYXRhLCBkYXRhc2V0LCBkZXRhY2gsIGVhY2gsIGVtcHR5LCBlcSwgZmlsdGVyLCBmaW5kLCBmb2N1cywgZm9jdXNpbiwgZm9jdXNvdXQsIGhhc0NsYXNzLCBoZWlnaHQsIGhpZGUsIGh0bWwsIGluZGV4LCBpbnNlcnRBZnRlciwgaW5zZXJ0QmVmb3JlLCBpcywga2V5ZG93biwga2V5cHJlc3MsIGtleXVwLCBtb3VzZWRvd24sIG1vdXNlZW50ZXIsIG1vdXNlbGVhdmUsIG1vdXNlbW92ZSwgbW91c2VvdXQsIG1vdXNlb3ZlciwgbW91c2V1cCwgbmV4dCwgbmV4dEFsbCwgb2ZmLCBvZmZzZXQsIG9uLCBvbmNlLCBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aCwgcGFyZW50LCBwYXJlbnRzLCBwcmVwZW5kLCBwcmVwZW5kVG8sIHByZXYsIHByZXZBbGwsIHByb3AsIHJlbW92ZSwgcmVtb3ZlQXR0ciwgcmVtb3ZlQ2xhc3MsIHJlbW92ZURhdGEsIHJlc2l6ZSwgc2Nyb2xsLCBzY3JvbGxMZWZ0LCBzY3JvbGxUbywgc2Nyb2xsVG9wLCBzaG93LCBzaWJsaW5ncywgc3RvcCwgc3R5bGVzLCBzdWJtaXQsIHRleHQsIHRvZ2dsZUNsYXNzLCB0b3VjaGVuZCwgdG91Y2htb3ZlLCB0b3VjaHN0YXJ0LCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIHRyYW5zaXRpb25FbmQsIHRyaWdnZXIsIHZhbCwgdmFsdWUsIHdpZHRoIH07XG4iLCJpbXBvcnQgeyAkLCBhZGRDbGFzcywgcmVtb3ZlQ2xhc3MsIGhhc0NsYXNzLCB0b2dnbGVDbGFzcywgYXR0ciwgcmVtb3ZlQXR0ciwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCBvbiwgb2ZmLCB0cmlnZ2VyLCB0cmFuc2l0aW9uRW5kLCBvdXRlcldpZHRoLCBvdXRlckhlaWdodCwgc3R5bGVzLCBvZmZzZXQsIGNzcywgZWFjaCwgaHRtbCwgdGV4dCwgaXMsIGluZGV4LCBlcSwgYXBwZW5kLCBwcmVwZW5kLCBuZXh0LCBuZXh0QWxsLCBwcmV2LCBwcmV2QWxsLCBwYXJlbnQsIHBhcmVudHMsIGNsb3Nlc3QsIGZpbmQsIGNoaWxkcmVuLCBmaWx0ZXIsIHJlbW92ZSB9IGZyb20gJ2RvbTcnO1xuY29uc3QgTWV0aG9kcyA9IHtcbiAgYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzLFxuICBoYXNDbGFzcyxcbiAgdG9nZ2xlQ2xhc3MsXG4gIGF0dHIsXG4gIHJlbW92ZUF0dHIsXG4gIHRyYW5zZm9ybSxcbiAgdHJhbnNpdGlvbixcbiAgb24sXG4gIG9mZixcbiAgdHJpZ2dlcixcbiAgdHJhbnNpdGlvbkVuZCxcbiAgb3V0ZXJXaWR0aCxcbiAgb3V0ZXJIZWlnaHQsXG4gIHN0eWxlcyxcbiAgb2Zmc2V0LFxuICBjc3MsXG4gIGVhY2gsXG4gIGh0bWwsXG4gIHRleHQsXG4gIGlzLFxuICBpbmRleCxcbiAgZXEsXG4gIGFwcGVuZCxcbiAgcHJlcGVuZCxcbiAgbmV4dCxcbiAgbmV4dEFsbCxcbiAgcHJldixcbiAgcHJldkFsbCxcbiAgcGFyZW50LFxuICBwYXJlbnRzLFxuICBjbG9zZXN0LFxuICBmaW5kLFxuICBjaGlsZHJlbixcbiAgZmlsdGVyLFxuICByZW1vdmVcbn07XG5PYmplY3Qua2V5cyhNZXRob2RzKS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoJC5mbiwgbWV0aG9kTmFtZSwge1xuICAgIHZhbHVlOiBNZXRob2RzW21ldGhvZE5hbWVdLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pO1xufSk7XG5leHBvcnQgZGVmYXVsdCAkOyIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgY29uc3Qgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goa2V5ID0+IHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkgey8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkgPSAwKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG59XG5cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBzdHlsZTtcblxuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgfVxuXG4gIGlmICghc3R5bGUgJiYgZWwuY3VycmVudFN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7XG4gIH1cblxuICBpZiAoIXN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5zdHlsZTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzID0gJ3gnKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgbWF0cml4O1xuICBsZXQgY3VyVHJhbnNmb3JtO1xuICBsZXQgdHJhbnNmb3JtTWF0cml4O1xuICBjb25zdCBjdXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuXG4gIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgY3VyVHJhbnNmb3JtID0gY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLndlYmtpdFRyYW5zZm9ybTtcblxuICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGEgPT4gYS5yZXBsYWNlKCcsJywgJy4nKSkuam9pbignLCAnKTtcbiAgICB9IC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIFdlYmtpdCBjaG9rZSB3aGVuICdub25lJyBpcyBwYXNzZWQ7IHBhc3NcbiAgICAvLyBlbXB0eSBzdHJpbmcgaW5zdGVhZCBpbiB0aGlzIGNhc2VcblxuXG4gICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgfVxuXG4gIGlmIChheGlzID09PSAneCcpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQxOyAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pOyAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgfVxuXG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyOyAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pOyAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTtcbiAgfVxuXG4gIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jztcbn1cblxuZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gbm9kZSAmJiAobm9kZS5ub2RlVHlwZSA9PT0gMSB8fCBub2RlLm5vZGVUeXBlID09PSAxMSk7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZCguLi5hcmdzKSB7XG4gIGNvbnN0IHRvID0gT2JqZWN0KGFyZ3NbMF0pO1xuICBjb25zdCBub0V4dGVuZCA9IFsnX19wcm90b19fJywgJ2NvbnN0cnVjdG9yJywgJ3Byb3RvdHlwZSddO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IG5leHRTb3VyY2UgPSBhcmdzW2ldO1xuXG4gICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsICYmICFpc05vZGUobmV4dFNvdXJjZSkpIHtcbiAgICAgIGNvbnN0IGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSkuZmlsdGVyKGtleSA9PiBub0V4dGVuZC5pbmRleE9mKGtleSkgPCAwKTtcblxuICAgICAgZm9yIChsZXQgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICBjb25zdCBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuXG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcblxuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG5mdW5jdGlvbiBzZXRDU1NQcm9wZXJ0eShlbCwgdmFyTmFtZSwgdmFyVmFsdWUpIHtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xufVxuXG5mdW5jdGlvbiBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gIHN3aXBlcixcbiAgdGFyZ2V0UG9zaXRpb24sXG4gIHNpZGVcbn0pIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gIGxldCB0aW1lO1xuICBjb25zdCBkdXJhdGlvbiA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICBjb25zdCBkaXIgPSB0YXJnZXRQb3NpdGlvbiA+IHN0YXJ0UG9zaXRpb24gPyAnbmV4dCcgOiAncHJldic7XG5cbiAgY29uc3QgaXNPdXRPZkJvdW5kID0gKGN1cnJlbnQsIHRhcmdldCkgPT4ge1xuICAgIHJldHVybiBkaXIgPT09ICduZXh0JyAmJiBjdXJyZW50ID49IHRhcmdldCB8fCBkaXIgPT09ICdwcmV2JyAmJiBjdXJyZW50IDw9IHRhcmdldDtcbiAgfTtcblxuICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xuICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZWFzZVByb2dyZXNzICogKHRhcmdldFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbik7XG5cbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBjdXJyZW50UG9zaXRpb24gPSB0YXJnZXRQb3NpdGlvbjtcbiAgICB9XG5cbiAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgfSk7XG5cbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpcGVyLmNzc01vZGVGcmFtZUlEID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcblxuICBhbmltYXRlKCk7XG59XG5cbmV4cG9ydCB7IGFuaW1hdGVDU1NNb2RlU2Nyb2xsLCBkZWxldGVQcm9wcywgbmV4dFRpY2ssIG5vdywgZ2V0VHJhbnNsYXRlLCBpc09iamVjdCwgZXh0ZW5kLCBnZXRDb21wdXRlZFN0eWxlLCBzZXRDU1NQcm9wZXJ0eSB9OyIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmxldCBzdXBwb3J0O1xuXG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBzbW9vdGhTY3JvbGw6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICB0b3VjaDogISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpLFxuICAgIHBhc3NpdmVMaXN0ZW5lcjogZnVuY3Rpb24gY2hlY2tQYXNzaXZlTGlzdGVuZXIoKSB7XG4gICAgICBsZXQgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpO1xuICAgICAgfSBjYXRjaCAoZSkgey8vIE5vIHN1cHBvcnRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICB9KCksXG4gICAgZ2VzdHVyZXM6IGZ1bmN0aW9uIGNoZWNrR2VzdHVyZXMoKSB7XG4gICAgICByZXR1cm4gJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW5kb3c7XG4gICAgfSgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG5cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG5cbmV4cG9ydCB7IGdldFN1cHBvcnQgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGdldFN1cHBvcnQgfSBmcm9tICcuL2dldC1zdXBwb3J0LmpzJztcbmxldCBkZXZpY2VDYWNoZWQ7XG5cbmZ1bmN0aW9uIGNhbGNEZXZpY2Uoe1xuICB1c2VyQWdlbnRcbn0gPSB7fSkge1xuICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICBjb25zdCB1YSA9IHVzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgY29uc3QgZGV2aWNlID0ge1xuICAgIGlvczogZmFsc2UsXG4gICAgYW5kcm9pZDogZmFsc2VcbiAgfTtcbiAgY29uc3Qgc2NyZWVuV2lkdGggPSB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICBjb25zdCBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgY29uc3QgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGxldCBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgY29uc3QgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIGNvbnN0IGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICBjb25zdCB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gIGxldCBtYWNvcyA9IHBsYXRmb3JtID09PSAnTWFjSW50ZWwnOyAvLyBpUGFkT3MgMTMgZml4XG5cbiAgY29uc3QgaVBhZFNjcmVlbnMgPSBbJzEwMjR4MTM2NicsICcxMzY2eDEwMjQnLCAnODM0eDExOTQnLCAnMTE5NHg4MzQnLCAnODM0eDExMTInLCAnMTExMng4MzQnLCAnNzY4eDEwMjQnLCAnMTAyNHg3NjgnLCAnODIweDExODAnLCAnMTE4MHg4MjAnLCAnODEweDEwODAnLCAnMTA4MHg4MTAnXTtcblxuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwKSB7XG4gICAgaXBhZCA9IHVhLm1hdGNoKC8oVmVyc2lvbilcXC8oW1xcZC5dKykvKTtcbiAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH0gLy8gQW5kcm9pZFxuXG5cbiAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICBkZXZpY2Uub3MgPSAnYW5kcm9pZCc7XG4gICAgZGV2aWNlLmFuZHJvaWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfSAvLyBFeHBvcnQgb2JqZWN0XG5cblxuICByZXR1cm4gZGV2aWNlO1xufVxuXG5mdW5jdGlvbiBnZXREZXZpY2Uob3ZlcnJpZGVzID0ge30pIHtcbiAgaWYgKCFkZXZpY2VDYWNoZWQpIHtcbiAgICBkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7XG4gIH1cblxuICByZXR1cm4gZGV2aWNlQ2FjaGVkO1xufVxuXG5leHBvcnQgeyBnZXREZXZpY2UgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmxldCBicm93c2VyO1xuXG5mdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc1NhZmFyaTogaXNTYWZhcmkoKSxcbiAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IGNhbGNCcm93c2VyKCk7XG4gIH1cblxuICByZXR1cm4gYnJvd3Nlcjtcbn1cblxuZXhwb3J0IHsgZ2V0QnJvd3NlciB9OyIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIG9uKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG5cbiAgb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcblxuICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKC4uLmFyZ3MpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuXG4gICAgICBpZiAob25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkpIHtcbiAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5O1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cblxuICAgIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH0sXG5cbiAgb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuXG4gICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcikgPCAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVyc1ttZXRob2RdKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuXG4gIG9mZkFueShoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0FueUxpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG5cbiAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuXG4gIGVtaXQoLi4uYXJncykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGxldCBldmVudHM7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRleHQ7XG5cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cblxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIFtldmVudCwgLi4uZGF0YV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxufTsiLCJpbXBvcnQgdXBkYXRlU2l6ZSBmcm9tICcuL3VwZGF0ZVNpemUuanMnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlcyBmcm9tICcuL3VwZGF0ZVNsaWRlcy5qcyc7XG5pbXBvcnQgdXBkYXRlQXV0b0hlaWdodCBmcm9tICcuL3VwZGF0ZUF1dG9IZWlnaHQuanMnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc09mZnNldCBmcm9tICcuL3VwZGF0ZVNsaWRlc09mZnNldC5qcyc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MgZnJvbSAnLi91cGRhdGVTbGlkZXNQcm9ncmVzcy5qcyc7XG5pbXBvcnQgdXBkYXRlUHJvZ3Jlc3MgZnJvbSAnLi91cGRhdGVQcm9ncmVzcy5qcyc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzQ2xhc3NlcyBmcm9tICcuL3VwZGF0ZVNsaWRlc0NsYXNzZXMuanMnO1xuaW1wb3J0IHVwZGF0ZUFjdGl2ZUluZGV4IGZyb20gJy4vdXBkYXRlQWN0aXZlSW5kZXguanMnO1xuaW1wb3J0IHVwZGF0ZUNsaWNrZWRTbGlkZSBmcm9tICcuL3VwZGF0ZUNsaWNrZWRTbGlkZS5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlcyxcbiAgdXBkYXRlQXV0b0hlaWdodCxcbiAgdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGVcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCAkZWwgPSBzd2lwZXIuJGVsO1xuXG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9ICRlbFswXS5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSBudWxsKSB7XG4gICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgaGVpZ2h0ID0gJGVsWzBdLmNsaWVudEhlaWdodDtcbiAgfVxuXG4gIGlmICh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgfHwgaGVpZ2h0ID09PSAwICYmIHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gU3VidHJhY3QgcGFkZGluZ3NcblxuXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWxlZnQnKSB8fCAwLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXRvcCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctYm90dG9tJykgfHwgMCwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IHNldENTU1Byb3BlcnR5IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25MYWJlbChwcm9wZXJ0eSkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9IC8vIHByZXR0aWVyLWlnbm9yZVxuXG5cbiAgICByZXR1cm4ge1xuICAgICAgJ3dpZHRoJzogJ2hlaWdodCcsXG4gICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAnbWFyZ2luLWJvdHRvbSAnOiAnbWFyZ2luLXJpZ2h0JyxcbiAgICAgICdtYXJnaW4tbGVmdCc6ICdtYXJnaW4tdG9wJyxcbiAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAncGFkZGluZy1sZWZ0JzogJ3BhZGRpbmctdG9wJyxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogJ3BhZGRpbmctYm90dG9tJyxcbiAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgfVtwcm9wZXJ0eV07XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKG5vZGUsIGxhYmVsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS5nZXRQcm9wZXJ0eVZhbHVlKGdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgJHdyYXBwZXJFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gIGNvbnN0IHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICBsZXQgc25hcEdyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNTaXplc0dyaWQgPSBbXTtcbiAgbGV0IG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuXG4gIGxldCBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcblxuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuXG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXJTaXplO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjsgLy8gcmVzZXQgbWFyZ2luc1xuXG4gIGlmIChydGwpIHNsaWRlcy5jc3Moe1xuICAgIG1hcmdpbkxlZnQ6ICcnLFxuICAgIG1hcmdpbkJvdHRvbTogJycsXG4gICAgbWFyZ2luVG9wOiAnJ1xuICB9KTtlbHNlIHNsaWRlcy5jc3Moe1xuICAgIG1hcmdpblJpZ2h0OiAnJyxcbiAgICBtYXJnaW5Cb3R0b206ICcnLFxuICAgIG1hcmdpblRvcDogJydcbiAgfSk7IC8vIHJlc2V0IGNzc01vZGUgb2Zmc2V0c1xuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsICcnKTtcbiAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgJycpO1xuICB9XG5cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBzd2lwZXIuZ3JpZDtcblxuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlc0xlbmd0aCk7XG4gIH0gLy8gQ2FsYyBzbGlkZXNcblxuXG4gIGxldCBzbGlkZVNpemU7XG4gIGNvbnN0IHNob3VsZFJlc2V0U2xpZGVTaXplID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMocGFyYW1zLmJyZWFrcG9pbnRzKS5maWx0ZXIoa2V5ID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIHBhcmFtcy5icmVha3BvaW50c1trZXldLnNsaWRlc1BlclZpZXcgIT09ICd1bmRlZmluZWQnO1xuICB9KS5sZW5ndGggPiAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzLmVxKGkpO1xuXG4gICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShpLCBzbGlkZSwgc2xpZGVzTGVuZ3RoLCBnZXREaXJlY3Rpb25MYWJlbCk7XG4gICAgfVxuXG4gICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgaWYgKHNob3VsZFJlc2V0U2xpZGVTaXplKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZVtnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgYDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlWzBdKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGUub3V0ZXJXaWR0aCh0cnVlKSA6IHNsaWRlLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNvbnN0IHdpZHRoID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3dpZHRoJyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdMZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctbGVmdCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5MZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpblJpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICBjb25zdCBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG5cbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGhcbiAgICAgICAgICB9ID0gc2xpZGVbMF07XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcblxuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c2xpZGVTaXplfXB4YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cblxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuXG4gIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgd2lkdGg6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgXG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXTogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGBcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChncmlkRW5hYmxlZCkge1xuICAgIHN3aXBlci5ncmlkLnVwZGF0ZVdyYXBwZXJTaXplKHNsaWRlU2l6ZSwgc25hcEdyaWQsIGdldERpcmVjdGlvbkxhYmVsKTtcbiAgfSAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuXG5cbiAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuXG4gICAgICBpZiAoc25hcEdyaWRbaV0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcblxuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuXG4gIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgY29uc3Qga2V5ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHJ0bCA/ICdtYXJnaW5MZWZ0JyA6IGdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUpIHJldHVybiB0cnVlO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5jc3Moe1xuICAgICAgW2tleV06IGAke3NwYWNlQmV0d2Vlbn1weGBcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgY29uc3QgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKHNuYXAgPT4ge1xuICAgICAgaWYgKHNuYXAgPCAwKSByZXR1cm4gLW9mZnNldEJlZm9yZTtcbiAgICAgIGlmIChzbmFwID4gbWF4U25hcCkgcmV0dXJuIG1heFNuYXAgKyBvZmZzZXRBZnRlcjtcbiAgICAgIHJldHVybiBzbmFwO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcblxuICAgIGlmIChhbGxTbGlkZXNTaXplIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgY29uc3QgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBhbGxTbGlkZXNTaXplKSAvIDI7XG4gICAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNsaWRlc0dyaWRbc25hcEluZGV4XSA9IHNuYXAgKyBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcblxuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlICYmICFwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCBgJHtzd2lwZXIuc2l6ZSAvIDIgLSBzbGlkZXNTaXplc0dyaWRbc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdIC8gMn1weGApO1xuICAgIGNvbnN0IGFkZFRvU25hcEdyaWQgPSAtc3dpcGVyLnNuYXBHcmlkWzBdO1xuICAgIGNvbnN0IGFkZFRvU2xpZGVzR3JpZCA9IC1zd2lwZXIuc2xpZGVzR3JpZFswXTtcbiAgICBzd2lwZXIuc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQubWFwKHYgPT4gdiArIGFkZFRvU25hcEdyaWQpO1xuICAgIHN3aXBlci5zbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQubWFwKHYgPT4gdiArIGFkZFRvU2xpZGVzR3JpZCk7XG4gIH1cblxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG5cbiAgaWYgKCFpc1ZpcnR1YWwgJiYgIXBhcmFtcy5jc3NNb2RlICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdmYWRlJykpIHtcbiAgICBjb25zdCBiYWNrRmFjZUhpZGRlbkNsYXNzID0gYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9YmFja2ZhY2UtaGlkZGVuYDtcbiAgICBjb25zdCBoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCA9IHN3aXBlci4kZWwuaGFzQ2xhc3MoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG5cbiAgICBpZiAoc2xpZGVzTGVuZ3RoIDw9IHBhcmFtcy5tYXhCYWNrZmFjZUhpZGRlblNsaWRlcykge1xuICAgICAgaWYgKCFoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCkgc3dpcGVyLiRlbC5hZGRDbGFzcyhiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7XG4gICAgICBzd2lwZXIuJGVsLnJlbW92ZUNsYXNzKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCAkIGZyb20gJy4uLy4uL3NoYXJlZC9kb20uanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcblxuICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICB9XG5cbiAgY29uc3QgZ2V0U2xpZGVCeUluZGV4ID0gaW5kZXggPT4ge1xuICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVzLmZpbHRlcihlbCA9PiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA9PT0gaW5kZXgpWzBdO1xuICAgIH1cblxuICAgIHJldHVybiBzd2lwZXIuc2xpZGVzLmVxKGluZGV4KVswXTtcbiAgfTsgLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcblxuXG4gIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIChzd2lwZXIudmlzaWJsZVNsaWRlcyB8fCAkKFtdKSkuZWFjaChzbGlkZSA9PiB7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgIGlmIChpbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoICYmICFpc1ZpcnR1YWwpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KHN3aXBlci5hY3RpdmVJbmRleCkpO1xuICB9IC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuXG5cbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH0gLy8gVXBkYXRlIEhlaWdodFxuXG5cbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgYCR7bmV3SGVpZ2h0fXB4YCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICB9XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDApIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgbGV0IG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTsgLy8gVmlzaWJsZSBTbGlkZXNcblxuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBsZXQgc2xpZGVPZmZzZXQgPSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldDtcblxuICAgIGlmIChwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlT2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICB9XG5cbiAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyIC0gc25hcEdyaWRbMF0gKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlT2Zmc2V0KTtcbiAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG5cbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgfVxuXG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gICAgc2xpZGUub3JpZ2luYWxQcm9ncmVzcyA9IHJ0bCA/IC1vcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgOiBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3M7XG4gIH1cblxuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9ICQoc3dpcGVyLnZpc2libGVTbGlkZXMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHRyYW5zbGF0ZSA9IHN3aXBlciAmJiBzd2lwZXIudHJhbnNsYXRlICYmIHN3aXBlci50cmFuc2xhdGUgKiBtdWx0aXBsaWVyIHx8IDA7XG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgbGV0IHtcbiAgICBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgY29uc3Qgd2FzRW5kID0gaXNFbmQ7XG5cbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIGlzQmVnaW5uaW5nID0gcHJvZ3Jlc3MgPD0gMDtcbiAgICBpc0VuZCA9IHByb2dyZXNzID49IDE7XG4gIH1cblxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kXG4gIH0pO1xuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuXG4gIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoRW5kIHRvRWRnZScpO1xuICB9XG5cbiAgaWYgKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcgfHwgd2FzRW5kICYmICFpc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcGFyYW1zLFxuICAgICR3cmFwcGVyRWwsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcmVhbEluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIHNsaWRlcy5yZW1vdmVDbGFzcyhgJHtwYXJhbXMuc2xpZGVBY3RpdmVDbGFzc30gJHtwYXJhbXMuc2xpZGVOZXh0Q2xhc3N9ICR7cGFyYW1zLnNsaWRlUHJldkNsYXNzfSAke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzfSAke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzc30gJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3N9YCk7XG4gIGxldCBhY3RpdmVTbGlkZTtcblxuICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2FjdGl2ZUluZGV4fVwiXWApO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmVxKGFjdGl2ZUluZGV4KTtcbiAgfSAvLyBBY3RpdmUgY2xhc3Nlc1xuXG5cbiAgYWN0aXZlU2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChhY3RpdmVTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgfSAvLyBOZXh0IFNsaWRlXG5cblxuICBsZXQgbmV4dFNsaWRlID0gYWN0aXZlU2xpZGUubmV4dEFsbChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3AgJiYgbmV4dFNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgIG5leHRTbGlkZSA9IHNsaWRlcy5lcSgwKTtcbiAgICBuZXh0U2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgfSAvLyBQcmV2IFNsaWRlXG5cblxuICBsZXQgcHJldlNsaWRlID0gYWN0aXZlU2xpZGUucHJldkFsbChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3AgJiYgcHJldlNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHByZXZTbGlkZSA9IHNsaWRlcy5lcSgtMSk7XG4gICAgcHJldlNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXNcbiAgICBpZiAobmV4dFNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke25leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUluZGV4KG5ld0FjdGl2ZUluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNuYXBHcmlkLFxuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH0gLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcblxuXG4gICAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgICB9XG4gIH1cblxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cblxuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoc25hcEluZGV4ICE9PSBwcmV2aW91c1NuYXBJbmRleCkge1xuICAgICAgc3dpcGVyLnNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0gLy8gR2V0IHJlYWwgaW5kZXhcblxuXG4gIGNvbnN0IHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5zbGlkZXMuZXEoYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgfHwgYWN0aXZlSW5kZXgsIDEwKTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBzbmFwSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSk7XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG5cbiAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gIH1cblxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn0iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHNsaWRlID0gJChlKS5jbG9zZXN0KGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKVswXTtcbiAgbGV0IHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgbGV0IHNsaWRlSW5kZXg7XG5cbiAgaWYgKHNsaWRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHtcbiAgICAgICAgc2xpZGVGb3VuZCA9IHRydWU7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcblxuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KCQoc2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gdW5kZWZpbmVkICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uRW1pdCh7XG4gIHN3aXBlcixcbiAgcnVuQ2FsbGJhY2tzLFxuICBkaXJlY3Rpb24sXG4gIHN0ZXBcbn0pIHtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LFxuICAgIHByZXZpb3VzSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGRpciA9IGRpcmVjdGlvbjtcblxuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cblxuICBzd2lwZXIuZW1pdChgdHJhbnNpdGlvbiR7c3RlcH1gKTtcblxuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUmVzZXRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KGBzbGlkZUNoYW5nZVRyYW5zaXRpb24ke3N0ZXB9YCk7XG5cbiAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZU5leHRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVQcmV2VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgc2xpZGVUbyBmcm9tICcuL3NsaWRlVG8uanMnO1xuaW1wb3J0IHNsaWRlVG9Mb29wIGZyb20gJy4vc2xpZGVUb0xvb3AuanMnO1xuaW1wb3J0IHNsaWRlTmV4dCBmcm9tICcuL3NsaWRlTmV4dC5qcyc7XG5pbXBvcnQgc2xpZGVQcmV2IGZyb20gJy4vc2xpZGVQcmV2LmpzJztcbmltcG9ydCBzbGlkZVJlc2V0IGZyb20gJy4vc2xpZGVSZXNldC5qcyc7XG5pbXBvcnQgc2xpZGVUb0Nsb3Nlc3QgZnJvbSAnLi9zbGlkZVRvQ2xvc2VzdC5qcyc7XG5pbXBvcnQgc2xpZGVUb0NsaWNrZWRTbGlkZSBmcm9tICcuL3NsaWRlVG9DbGlja2VkU2xpZGUuanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0LFxuICBzbGlkZVByZXYsXG4gIHNsaWRlUmVzZXQsXG4gIHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlXG59OyIsImltcG9ydCB7IGFuaW1hdGVDU1NNb2RlU2Nyb2xsIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG8oaW5kZXggPSAwLCBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCwgaW5pdGlhbCkge1xuICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgaW5kZXggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgJ2luZGV4JyBhcmd1bWVudCBjYW5ub3QgaGF2ZSB0eXBlIG90aGVyIHRoYW4gJ251bWJlcicgb3IgJ3N0cmluZycuIFske3R5cGVvZiBpbmRleH1dIGdpdmVuLmApO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYGluZGV4YCBhcmd1bWVudCBjb252ZXJ0ZWQgZnJvbSBgc3RyaW5nYCB0byBgbnVtYmVyYC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGNvbnN0IGluZGV4QXNOdW1iZXIgPSBwYXJzZUludChpbmRleCwgMTApO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgYGluZGV4YCBhcmd1bWVudCBpcyBhIHZhbGlkIGBudW1iZXJgXG4gICAgICogYWZ0ZXIgYmVpbmcgY29udmVydGVkIGZyb20gdGhlIGBzdHJpbmdgIHR5cGUuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG5cbiAgICBjb25zdCBpc1ZhbGlkTnVtYmVyID0gaXNGaW5pdGUoaW5kZXhBc051bWJlcik7XG5cbiAgICBpZiAoIWlzVmFsaWROdW1iZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHBhc3NlZC1pbiAnaW5kZXgnIChzdHJpbmcpIGNvdWxkbid0IGJlIGNvbnZlcnRlZCB0byAnbnVtYmVyJy4gWyR7aW5kZXh9XSBnaXZlbi5gKTtcbiAgICB9IC8vIEtub3dpbmcgdGhhdCB0aGUgY29udmVydGVkIGBpbmRleGAgaXMgYSB2YWxpZCBudW1iZXIsXG4gICAgLy8gd2UgY2FuIHVwZGF0ZSB0aGUgb3JpZ2luYWwgYXJndW1lbnQncyB2YWx1ZS5cblxuXG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG5cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JhcHBlckVsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIHx8ICFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gIGxldCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoc2xpZGVJbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBjb25zdCB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTsgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcblxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSAtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaV0gKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWROZXh0ID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2kgKyAxXSAqIDEwMCk7XG5cbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBEaXJlY3Rpb25zIGxvY2tzXG5cblxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbGlkZUluZGV4ICE9PSAocHJldmlvdXNJbmRleCB8fCAwKSAmJiBydW5DYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICB9IC8vIFVwZGF0ZSBwcm9ncmVzc1xuXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIGxldCBkaXJlY3Rpb247XG4gIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICduZXh0JztlbHNlIGlmIChzbGlkZUluZGV4IDwgYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICdwcmV2JztlbHNlIGRpcmVjdGlvbiA9ICdyZXNldCc7IC8vIFVwZGF0ZSBJbmRleFxuXG4gIGlmIChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSB8fCAhcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTsgLy8gVXBkYXRlIEhlaWdodFxuXG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cblxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICBpZiAocGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0ID0gcnRsID8gdHJhbnNsYXRlIDogLXRyYW5zbGF0ZTtcblxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG5cbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICAgICAgc3dpcGVyLl9zd2lwZXJJbW1lZGlhdGVWaXJ0dWFsID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiB0LFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogdCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcblxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICBkZWxldGUgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUb0xvb3AoaW5kZXggPSAwLCBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIC8qKlxuICAgICAqIFRoZSBgaW5kZXhgIGFyZ3VtZW50IGNvbnZlcnRlZCBmcm9tIGBzdHJpbmdgIHRvIGBudW1iZXJgLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBgaW5kZXhgIGFyZ3VtZW50IGlzIGEgdmFsaWQgYG51bWJlcmBcbiAgICAgKiBhZnRlciBiZWluZyBjb252ZXJ0ZWQgZnJvbSB0aGUgYHN0cmluZ2AgdHlwZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICAgIGNvbnN0IGlzVmFsaWROdW1iZXIgPSBpc0Zpbml0ZShpbmRleEFzTnVtYmVyKTtcblxuICAgIGlmICghaXNWYWxpZE51bWJlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgcGFzc2VkLWluICdpbmRleCcgKHN0cmluZykgY291bGRuJ3QgYmUgY29udmVydGVkIHRvICdudW1iZXInLiBbJHtpbmRleH1dIGdpdmVuLmApO1xuICAgIH0gLy8gS25vd2luZyB0aGF0IHRoZSBjb252ZXJ0ZWQgYGluZGV4YCBpcyBhIHZhbGlkIG51bWJlcixcbiAgICAvLyB3ZSBjYW4gdXBkYXRlIHRoZSBvcmlnaW5hbCBhcmd1bWVudCdzIHZhbHVlLlxuXG5cbiAgICBpbmRleCA9IGluZGV4QXNOdW1iZXI7XG4gIH1cblxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgbmV3SW5kZXggPSBpbmRleDtcblxuICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgbmV3SW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgfVxuXG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBhbmltYXRpbmcsXG4gICAgZW5hYmxlZCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICBsZXQgcGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICBwZXJHcm91cCA9IE1hdGgubWF4KHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygnY3VycmVudCcsIHRydWUpLCAxKTtcbiAgfVxuXG4gIGNvbnN0IGluY3JlbWVudCA9IHN3aXBlci5hY3RpdmVJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGVyR3JvdXA7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGUpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gIH1cblxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNFbmQpIHtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVQcmV2KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgYW5pbWF0aW5nLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRlKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG5cbiAgY29uc3QgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICBpZiAodmFsIDwgMCkgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gIH1cblxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCh2YWwgPT4gbm9ybWFsaXplKHZhbCkpO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuXG4gIGlmICh0eXBlb2YgcHJldlNuYXAgPT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgbGV0IHByZXZTbmFwSW5kZXg7XG4gICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSB7XG4gICAgICAgIC8vIHByZXZTbmFwID0gc25hcDtcbiAgICAgICAgcHJldlNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgcHJldlNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHByZXZTbmFwID0gc25hcEdyaWRbcHJldlNuYXBJbmRleCA+IDAgPyBwcmV2U25hcEluZGV4IC0gMSA6IHByZXZTbmFwSW5kZXhdO1xuICAgIH1cbiAgfVxuXG4gIGxldCBwcmV2SW5kZXggPSAwO1xuXG4gIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTtcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgICBwcmV2SW5kZXggPSBwcmV2SW5kZXggLSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ3ByZXZpb3VzJywgdHJ1ZSkgKyAxO1xuICAgICAgcHJldkluZGV4ID0gTWF0aC5tYXgocHJldkluZGV4LCAwKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICBjb25zdCBsYXN0SW5kZXggPSBzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obGFzdEluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsLCB0aHJlc2hvbGQgPSAwLjUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgY29uc3Qgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcblxuICBpZiAodHJhbnNsYXRlID49IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIG9uIG9yIGFmdGVyIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGFmdGVyIGl0LlxuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgY29uc3QgbmV4dFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4ICsgMV07XG5cbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIGNvbnN0IHByZXZTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCAtIDFdO1xuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG5cbiAgICBpZiAodHJhbnNsYXRlIC0gcHJldlNuYXAgPD0gKGN1cnJlbnRTbmFwIC0gcHJldlNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCAtPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfVxuXG4gIGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApO1xuICBpbmRleCA9IE1hdGgubWluKGluZGV4LCBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGggLSAxKTtcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5pbXBvcnQgeyBuZXh0VGljayB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgICR3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBsZXQgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgbGV0IHJlYWxJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykgcmV0dXJuO1xuICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KCQoc3dpcGVyLmNsaWNrZWRTbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuXG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgaWYgKHNsaWRlVG9JbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMgLSBzbGlkZXNQZXJWaWV3IC8gMiB8fCBzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKyBzbGlkZXNQZXJWaWV3IC8gMikge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl06bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlgKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzbGlkZXNQZXJWaWV3KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdOm5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICB9XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnOyAvLyBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0NTIwNTU0L2N1c3RvbS1lbGVtZW50LWdldHJvb3Rub2RlLWNsb3Nlc3QtZnVuY3Rpb24tY3Jvc3NpbmctbXVsdGlwbGUtcGFyZW50LXNoYWRvd2RcblxuZnVuY3Rpb24gY2xvc2VzdEVsZW1lbnQoc2VsZWN0b3IsIGJhc2UgPSB0aGlzKSB7XG4gIGZ1bmN0aW9uIF9fY2xvc2VzdEZyb20oZWwpIHtcbiAgICBpZiAoIWVsIHx8IGVsID09PSBnZXREb2N1bWVudCgpIHx8IGVsID09PSBnZXRXaW5kb3coKSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGVsLmFzc2lnbmVkU2xvdCkgZWwgPSBlbC5hc3NpZ25lZFNsb3Q7XG4gICAgY29uc3QgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcblxuICAgIGlmICghZm91bmQgJiYgIWVsLmdldFJvb3ROb2RlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQgfHwgX19jbG9zZXN0RnJvbShlbC5nZXRSb290Tm9kZSgpLmhvc3QpO1xuICB9XG5cbiAgcmV0dXJuIF9fY2xvc2VzdEZyb20oYmFzZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRml4KCk7XG4gIH1cblxuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBsZXQgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG5cbiAgaWYgKHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ3dyYXBwZXInKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChzd2lwZXIud3JhcHBlckVsKS5sZW5ndGgpIHJldHVybjtcbiAgfVxuXG4gIGRhdGEuaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hzdGFydCc7XG4gIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47IC8vIGNoYW5nZSB0YXJnZXQgZWwgZm9yIHNoYWRvdyByb290IGNvbXBvbmVudFxuXG4gIGNvbnN0IHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgY29uc3QgZXZlbnRQYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoID8gZXZlbnQuY29tcG9zZWRQYXRoKCkgOiBldmVudC5wYXRoO1xuXG4gIGlmIChzd2lwaW5nQ2xhc3NIYXNWYWx1ZSAmJiBlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290ICYmIGV2ZW50UGF0aCkge1xuICAgICR0YXJnZXRFbCA9ICQoZXZlbnRQYXRoWzBdKTtcbiAgfVxuXG4gIGNvbnN0IG5vU3dpcGluZ1NlbGVjdG9yID0gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogYC4ke3BhcmFtcy5ub1N3aXBpbmdDbGFzc31gO1xuICBjb25zdCBpc1RhcmdldFNoYWRvdyA9ICEhKGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QpOyAvLyB1c2UgY2xvc2VzdEVsZW1lbnQgZm9yIHNoYWRvdyByb290IGVsZW1lbnQgdG8gZ2V0IHRoZSBhY3R1YWwgY2xvc2VzdCBmb3IgbmVzdGVkIHNoYWRvdyByb290IGVsZW1lbnRcblxuICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAoaXNUYXJnZXRTaGFkb3cgPyBjbG9zZXN0RWxlbWVudChub1N3aXBpbmdTZWxlY3RvciwgJHRhcmdldEVsWzBdKSA6ICR0YXJnZXRFbC5jbG9zZXN0KG5vU3dpcGluZ1NlbGVjdG9yKVswXSkpIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoISR0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpWzBdKSByZXR1cm47XG4gIH1cblxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZOyAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICBjb25zdCBlZGdlU3dpcGVEZXRlY3Rpb24gPSBwYXJhbXMuZWRnZVN3aXBlRGV0ZWN0aW9uIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVEZXRlY3Rpb247XG4gIGNvbnN0IGVkZ2VTd2lwZVRocmVzaG9sZCA9IHBhcmFtcy5lZGdlU3dpcGVUaHJlc2hvbGQgfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZVRocmVzaG9sZDtcblxuICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uICYmIChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkIHx8IHN0YXJ0WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpIHtcbiAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uID09PSAncHJldmVudCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuXG4gIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIGxldCBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG5cbiAgICBpZiAoJHRhcmdldEVsLmlzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuXG4gICAgICBpZiAoJHRhcmdldEVsWzBdLm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gJHRhcmdldEVsWzBdKSB7XG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuXG4gICAgaWYgKChwYXJhbXMudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQpICYmICEkdGFyZ2V0RWxbMF0uaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlICYmIHN3aXBlci5hbmltYXRpbmcgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hTdGFydCgpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn0iLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG5cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBlLnR5cGUgIT09ICd0b3VjaG1vdmUnKSByZXR1cm47XG4gIGNvbnN0IHRhcmdldFRvdWNoID0gZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMgJiYgKGUudGFyZ2V0VG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdKTtcbiAgY29uc3QgcGFnZVggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gdGFyZ2V0VG91Y2gucGFnZVggOiBlLnBhZ2VYO1xuICBjb25zdCBwYWdlWSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWSA6IGUucGFnZVk7XG5cbiAgaWYgKGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHtcbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dUb3VjaE1vdmUpIHtcbiAgICBpZiAoISQoZS50YXJnZXQpLmlzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZXG4gICAgICB9KTtcbiAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgcGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGUudGFyZ2V0KS5pcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuXG4gIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG4gIGNvbnN0IGRpZmZYID0gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYO1xuICBjb25zdCBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydChkaWZmWCAqKiAyICsgZGlmZlkgKiogMikgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuXG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuXG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAocGFyYW1zLmxvb3AgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIH1cblxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG5cbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwudHJpZ2dlcignd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJyk7XG4gICAgfVxuXG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7IC8vIEdyYWIgQ3Vyc29yXG5cbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpO1xuICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICBsZXQgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIGRpZmYgPSAtZGlmZjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuXG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cblxuICBpZiAoZGlmZiA+IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gIH1cblxuICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlcikge1xuICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlO1xuICB9IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAhc3dpcGVyLmFsbG93U2xpZGVOZXh0KSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfSAvLyBUaHJlc2hvbGRcblxuXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47IC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hNb3ZlKCk7XG4gIH0gLy8gVXBkYXRlIHByb2dyZXNzXG5cblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTsgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn0iLCJpbXBvcnQgeyBub3csIG5leHRUaWNrIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG5cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICB9XG5cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG5cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLmlzTW92ZWQgJiYgcGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgICB9XG5cbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9IC8vIFJldHVybiBHcmFiIEN1cnNvclxuXG5cbiAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmlzVG91Y2hlZCAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gIH0gLy8gVGltZSBkaWZmXG5cblxuICBjb25zdCB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lOyAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcblxuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBjb25zdCBwYXRoVHJlZSA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUocGF0aFRyZWUgJiYgcGF0aFRyZWVbMF0gfHwgZS50YXJnZXQpO1xuICAgIHN3aXBlci5lbWl0KCd0YXAgY2xpY2snLCBlKTtcblxuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cblxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgbmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkIHx8ICFkYXRhLmlzTW92ZWQgfHwgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fCB0b3VjaGVzLmRpZmYgPT09IDAgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgbGV0IGN1cnJlbnRQb3M7XG5cbiAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaEVuZCh7XG4gICAgICBjdXJyZW50UG9zXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIEZpbmQgY3VycmVudCBzbGlkZVxuXG5cbiAgbGV0IHN0b3BJbmRleCA9IDA7XG4gIGxldCBncm91cFNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgY29uc3QgaW5jcmVtZW50ID0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gLSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMl07XG4gICAgfVxuICB9XG5cbiAgbGV0IHJld2luZEZpcnN0SW5kZXggPSBudWxsO1xuICBsZXQgcmV3aW5kTGFzdEluZGV4ID0gbnVsbDtcblxuICBpZiAocGFyYW1zLnJld2luZCkge1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgIHJld2luZExhc3RJbmRleCA9IHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICByZXdpbmRGaXJzdEluZGV4ID0gMDtcbiAgICB9XG4gIH0gLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcblxuXG4gIGNvbnN0IHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICBjb25zdCBpbmNyZW1lbnQgPSBzdG9wSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8ocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNFbmQgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBpZiAocmF0aW8gPiAxIC0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmIChyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgJiYgcmF0aW8gPCAwICYmIE1hdGguYWJzKHJhdGlvKSA+IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kTGFzdEluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFNob3J0IHN3aXBlc1xuICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG5cbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kRmlyc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsID8gcmV3aW5kTGFzdEluZGV4IDogc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47IC8vIEJyZWFrcG9pbnRzXG5cbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH0gLy8gU2F2ZSBsb2Nrc1xuXG5cbiAgY29uc3Qge1xuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7IC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG5cbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gIH0gLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuXG5cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuXG4gIGlmICghc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyRWwsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG5cbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5cbiAgaWYgKHN3aXBlci50cmFuc2xhdGUgPT09IDApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcblxuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuXG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgb25Ub3VjaFN0YXJ0IGZyb20gJy4vb25Ub3VjaFN0YXJ0LmpzJztcbmltcG9ydCBvblRvdWNoTW92ZSBmcm9tICcuL29uVG91Y2hNb3ZlLmpzJztcbmltcG9ydCBvblRvdWNoRW5kIGZyb20gJy4vb25Ub3VjaEVuZC5qcyc7XG5pbXBvcnQgb25SZXNpemUgZnJvbSAnLi9vblJlc2l6ZS5qcyc7XG5pbXBvcnQgb25DbGljayBmcm9tICcuL29uQ2xpY2suanMnO1xuaW1wb3J0IG9uU2Nyb2xsIGZyb20gJy4vb25TY3JvbGwuanMnO1xubGV0IGR1bW15RXZlbnRBdHRhY2hlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkdW1teUV2ZW50TGlzdGVuZXIoKSB7fVxuXG5jb25zdCBldmVudHMgPSAoc3dpcGVyLCBtZXRob2QpID0+IHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoRXZlbnRzLFxuICAgIGVsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBkZXZpY2UsXG4gICAgc3VwcG9ydFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuICBjb25zdCBkb21NZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIGNvbnN0IHN3aXBlck1ldGhvZCA9IG1ldGhvZDsgLy8gVG91Y2ggRXZlbnRzXG5cbiAgaWYgKCFzdXBwb3J0LnRvdWNoKSB7XG4gICAgZWxbZG9tTWV0aG9kXSh0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIGRvY3VtZW50W2RvbU1ldGhvZF0odG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICBkb2N1bWVudFtkb21NZXRob2RdKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGVsW2RvbU1ldGhvZF0odG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgZWxbZG9tTWV0aG9kXSh0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlXG4gICAgfSA6IGNhcHR1cmUpO1xuICAgIGVsW2RvbU1ldGhvZF0odG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcblxuICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgIGVsW2RvbU1ldGhvZF0odG91Y2hFdmVudHMuY2FuY2VsLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG4gIH0gLy8gUHJldmVudCBMaW5rcyBDbGlja3NcblxuXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbZG9tTWV0aG9kXSgnc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfSAvLyBSZXNpemUgaGFuZGxlclxuXG5cbiAgaWYgKHBhcmFtcy51cGRhdGVPbldpbmRvd1Jlc2l6ZSkge1xuICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzdXBwb3J0XG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5vblRvdWNoU3RhcnQgPSBvblRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaE1vdmUgPSBvblRvdWNoTW92ZS5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoRW5kID0gb25Ub3VjaEVuZC5iaW5kKHN3aXBlcik7XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLm9uU2Nyb2xsID0gb25TY3JvbGwuYmluZChzd2lwZXIpO1xuICB9XG5cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcblxuICBpZiAoc3VwcG9ydC50b3VjaCAmJiAhZHVtbXlFdmVudEF0dGFjaGVkKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGR1bW15RXZlbnRMaXN0ZW5lcik7XG4gICAgZHVtbXlFdmVudEF0dGFjaGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGV2ZW50cyhzd2lwZXIsICdvbicpO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGV2ZW50cyhzd2lwZXIsICdvZmYnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50c1xufTsiLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuXG5jb25zdCBpc0dyaWRFbmFibGVkID0gKHN3aXBlciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEJyZWFrcG9pbnQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleCxcbiAgICBpbml0aWFsaXplZCxcbiAgICBsb29wZWRTbGlkZXMgPSAwLFxuICAgIHBhcmFtcyxcbiAgICAkZWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuOyAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuXG4gIGNvbnN0IGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgc3dpcGVyLnBhcmFtcy5icmVha3BvaW50c0Jhc2UsIHN3aXBlci5lbCk7XG4gIGlmICghYnJlYWtwb2ludCB8fCBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnQpIHJldHVybjtcbiAgY29uc3QgYnJlYWtwb2ludE9ubHlQYXJhbXMgPSBicmVha3BvaW50IGluIGJyZWFrcG9pbnRzID8gYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gIGNvbnN0IHdhc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIHBhcmFtcyk7XG4gIGNvbnN0IGlzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IHdhc0VuYWJsZWQgPSBwYXJhbXMuZW5hYmxlZDtcblxuICBpZiAod2FzTXVsdGlSb3cgJiYgIWlzTXVsdGlSb3cpIHtcbiAgICAkZWwucmVtb3ZlQ2xhc3MoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZCAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH0gZWxzZSBpZiAoIXdhc011bHRpUm93ICYmIGlzTXVsdGlSb3cpIHtcbiAgICAkZWwuYWRkQ2xhc3MoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGApO1xuXG4gICAgaWYgKGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJyB8fCAhYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9IC8vIFRvZ2dsZSBuYXZpZ2F0aW9uLCBwYWdpbmF0aW9uLCBzY3JvbGxiYXJcblxuXG4gIFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgY29uc3Qgd2FzTW9kdWxlRW5hYmxlZCA9IHBhcmFtc1twcm9wXSAmJiBwYXJhbXNbcHJvcF0uZW5hYmxlZDtcbiAgICBjb25zdCBpc01vZHVsZUVuYWJsZWQgPSBicmVha3BvaW50UGFyYW1zW3Byb3BdICYmIGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0uZW5hYmxlZDtcblxuICAgIGlmICh3YXNNb2R1bGVFbmFibGVkICYmICFpc01vZHVsZUVuYWJsZWQpIHtcbiAgICAgIHN3aXBlcltwcm9wXS5kaXNhYmxlKCk7XG4gICAgfVxuXG4gICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcblxuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuXG4gIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3QgaXNFbmFibGVkID0gc3dpcGVyLnBhcmFtcy5lbmFibGVkO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gIH0pO1xuXG4gIGlmICh3YXNFbmFibGVkICYmICFpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZGlzYWJsZSgpO1xuICB9IGVsc2UgaWYgKCF3YXNFbmFibGVkICYmIGlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5lbmFibGUoKTtcbiAgfVxuXG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuXG4gIGlmIChuZWVkc1JlTG9vcCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn0iLCJpbXBvcnQgc2V0QnJlYWtwb2ludCBmcm9tICcuL3NldEJyZWFrcG9pbnQuanMnO1xuaW1wb3J0IGdldEJyZWFrcG9pbnQgZnJvbSAnLi9nZXRCcmVha3BvaW50LmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0QnJlYWtwb2ludCxcbiAgZ2V0QnJlYWtwb2ludFxufTsiLCJpbXBvcnQgYWRkQ2xhc3NlcyBmcm9tICcuL2FkZENsYXNzZXMuanMnO1xuaW1wb3J0IHJlbW92ZUNsYXNzZXMgZnJvbSAnLi9yZW1vdmVDbGFzc2VzLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWRkQ2xhc3NlcyxcbiAgcmVtb3ZlQ2xhc3Nlc1xufTsiLCJmdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdO1xuICBlbnRyaWVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZENsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWVzLFxuICAgIHBhcmFtcyxcbiAgICBydGwsXG4gICAgJGVsLFxuICAgIGRldmljZSxcbiAgICBzdXBwb3J0XG4gIH0gPSBzd2lwZXI7IC8vIHByZXR0aWVyLWlnbm9yZVxuXG4gIGNvbnN0IHN1ZmZpeGVzID0gcHJlcGFyZUNsYXNzZXMoWydpbml0aWFsaXplZCcsIHBhcmFtcy5kaXJlY3Rpb24sIHtcbiAgICAncG9pbnRlci1ldmVudHMnOiAhc3VwcG9ydC50b3VjaFxuICB9LCB7XG4gICAgJ2ZyZWUtbW9kZSc6IHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWRcbiAgfSwge1xuICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHRcbiAgfSwge1xuICAgICdydGwnOiBydGxcbiAgfSwge1xuICAgICdncmlkJzogcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDFcbiAgfSwge1xuICAgICdncmlkLWNvbHVtbic6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nXG4gIH0sIHtcbiAgICAnYW5kcm9pZCc6IGRldmljZS5hbmRyb2lkXG4gIH0sIHtcbiAgICAnaW9zJzogZGV2aWNlLmlvc1xuICB9LCB7XG4gICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGVcbiAgfSwge1xuICAgICdjZW50ZXJlZCc6IHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc1xuICB9LCB7XG4gICAgJ3dhdGNoLXByb2dyZXNzJzogcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3NcbiAgfV0sIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKTtcbiAgY2xhc3NOYW1lcy5wdXNoKC4uLnN1ZmZpeGVzKTtcbiAgJGVsLmFkZENsYXNzKFsuLi5jbGFzc05hbWVzXS5qb2luKCcgJykpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgJGVsLFxuICAgIGNsYXNzTmFtZXNcbiAgfSA9IHN3aXBlcjtcbiAgJGVsLnJlbW92ZUNsYXNzKGNsYXNzTmFtZXMuam9pbignICcpKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59IiwiZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICd3cmFwcGVyJyxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBzcGVlZDogMzAwLFxuICBjc3NNb2RlOiBmYWxzZSxcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gIHJlc2l6ZU9ic2VydmVyOiB0cnVlLFxuICBuZXN0ZWQ6IGZhbHNlLFxuICBjcmVhdGVFbGVtZW50czogZmFsc2UsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIGZvY3VzYWJsZUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbywgbGFiZWwnLFxuICAvLyBPdmVycmlkZXNcbiAgd2lkdGg6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcbiAgLy8gc3NyXG4gIHVzZXJBZ2VudDogbnVsbCxcbiAgdXJsOiBudWxsLFxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gIC8vIEF1dG9oZWlnaHRcbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIC8vIFNldCB3cmFwcGVyIHdpZHRoXG4gIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcbiAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG4gIC8vIEVmZmVjdHNcbiAgZWZmZWN0OiAnc2xpZGUnLFxuICAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgc2xpZGVzUGVyR3JvdXBBdXRvOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgLy8gaW4gcHhcbiAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gIC8vIGluIHB4XG4gIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogZmFsc2UsXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IHRydWUsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDAsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gSW1hZ2VzXG4gIHByZWxvYWRJbWFnZXM6IHRydWUsXG4gIHVwZGF0ZU9uSW1hZ2VzUmVhZHk6IHRydWUsXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wZWRTbGlkZXM6IG51bGwsXG4gIGxvb3BlZFNsaWRlc0xpbWl0OiB0cnVlLFxuICBsb29wRmlsbEdyb3VwV2l0aEJsYW5rOiBmYWxzZSxcbiAgbG9vcFByZXZlbnRzU2xpZGU6IHRydWUsXG4gIC8vIHJld2luZFxuICByZXdpbmQ6IGZhbHNlLFxuICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgYWxsb3dTbGlkZVByZXY6IHRydWUsXG4gIGFsbG93U2xpZGVOZXh0OiB0cnVlLFxuICBzd2lwZUhhbmRsZXI6IG51bGwsXG4gIC8vICcuc3dpcGUtaGFuZGxlcicsXG4gIG5vU3dpcGluZzogdHJ1ZSxcbiAgbm9Td2lwaW5nQ2xhc3M6ICdzd2lwZXItbm8tc3dpcGluZycsXG4gIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuICBtYXhCYWNrZmFjZUhpZGRlblNsaWRlczogMTAsXG4gIC8vIE5TXG4gIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItJyxcbiAgLy8gTkVXXG4gIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVEdXBsaWNhdGVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUnLFxuICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIC8vIEludGVybmFsc1xuICBfZW1pdENsYXNzZXM6IGZhbHNlXG59OyIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBleHRlbmRQYXJhbXMob2JqID0ge30pIHtcbiAgICBjb25zdCBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhvYmopWzBdO1xuICAgIGNvbnN0IG1vZHVsZVBhcmFtcyA9IG9ialttb2R1bGVQYXJhbU5hbWVdO1xuXG4gICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmluZGV4T2YobW9kdWxlUGFyYW1OYW1lKSA+PSAwICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgYXV0bzogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gIH07XG59IiwiLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vc2hhcmVkL2RvbS5qcyc7XG5pbXBvcnQgeyBleHRlbmQsIG5vdywgZGVsZXRlUHJvcHMgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydCB9IGZyb20gJy4uL3NoYXJlZC9nZXQtc3VwcG9ydC5qcyc7XG5pbXBvcnQgeyBnZXREZXZpY2UgfSBmcm9tICcuLi9zaGFyZWQvZ2V0LWRldmljZS5qcyc7XG5pbXBvcnQgeyBnZXRCcm93c2VyIH0gZnJvbSAnLi4vc2hhcmVkL2dldC1icm93c2VyLmpzJztcbmltcG9ydCBSZXNpemUgZnJvbSAnLi9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUuanMnO1xuaW1wb3J0IE9ic2VydmVyIGZyb20gJy4vbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlci5qcyc7XG5pbXBvcnQgZXZlbnRzRW1pdHRlciBmcm9tICcuL2V2ZW50cy1lbWl0dGVyLmpzJztcbmltcG9ydCB1cGRhdGUgZnJvbSAnLi91cGRhdGUvaW5kZXguanMnO1xuaW1wb3J0IHRyYW5zbGF0ZSBmcm9tICcuL3RyYW5zbGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbiBmcm9tICcuL3RyYW5zaXRpb24vaW5kZXguanMnO1xuaW1wb3J0IHNsaWRlIGZyb20gJy4vc2xpZGUvaW5kZXguanMnO1xuaW1wb3J0IGxvb3AgZnJvbSAnLi9sb29wL2luZGV4LmpzJztcbmltcG9ydCBncmFiQ3Vyc29yIGZyb20gJy4vZ3JhYi1jdXJzb3IvaW5kZXguanMnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICcuL2V2ZW50cy9pbmRleC5qcyc7XG5pbXBvcnQgYnJlYWtwb2ludHMgZnJvbSAnLi9icmVha3BvaW50cy9pbmRleC5qcyc7XG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL2NsYXNzZXMvaW5kZXguanMnO1xuaW1wb3J0IGltYWdlcyBmcm9tICcuL2ltYWdlcy9pbmRleC5qcyc7XG5pbXBvcnQgY2hlY2tPdmVyZmxvdyBmcm9tICcuL2NoZWNrLW92ZXJmbG93L2luZGV4LmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzLmpzJztcbmltcG9ydCBtb2R1bGVFeHRlbmRQYXJhbXMgZnJvbSAnLi9tb2R1bGVFeHRlbmRQYXJhbXMuanMnO1xuY29uc3QgcHJvdG90eXBlcyA9IHtcbiAgZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlLFxuICB0cmFuc2xhdGUsXG4gIHRyYW5zaXRpb24sXG4gIHNsaWRlLFxuICBsb29wLFxuICBncmFiQ3Vyc29yLFxuICBldmVudHMsXG4gIGJyZWFrcG9pbnRzLFxuICBjaGVja092ZXJmbG93LFxuICBjbGFzc2VzLFxuICBpbWFnZXNcbn07XG5jb25zdCBleHRlbmRlZERlZmF1bHRzID0ge307XG5cbmNsYXNzIFN3aXBlciB7XG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHBhcmFtcztcblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmdzWzBdKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbZWwsIHBhcmFtc10gPSBhcmdzO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zKSBwYXJhbXMgPSB7fTtcbiAgICBwYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgaWYgKGVsICYmICFwYXJhbXMuZWwpIHBhcmFtcy5lbCA9IGVsO1xuXG4gICAgaWYgKHBhcmFtcy5lbCAmJiAkKHBhcmFtcy5lbCkubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3Qgc3dpcGVycyA9IFtdO1xuICAgICAgJChwYXJhbXMuZWwpLmVhY2goY29udGFpbmVyRWwgPT4ge1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcywge1xuICAgICAgICAgIGVsOiBjb250YWluZXJFbFxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuXG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9IC8vIFN3aXBlciBJbnN0YW5jZVxuXG5cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcblxuICAgIGlmIChwYXJhbXMubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5tb2R1bGVzKSkge1xuICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsTW9kdWxlc1BhcmFtcyA9IHt9O1xuICAgIHN3aXBlci5tb2R1bGVzLmZvckVhY2gobW9kID0+IHtcbiAgICAgIG1vZCh7XG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSxcbiAgICAgICAgb246IHN3aXBlci5vbi5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uY2U6IHN3aXBlci5vbmNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb2ZmOiBzd2lwZXIub2ZmLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZW1pdDogc3dpcGVyLmVtaXQuYmluZChzd2lwZXIpXG4gICAgICB9KTtcbiAgICB9KTsgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcblxuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpOyAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG5cbiAgICBzd2lwZXIucGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpOyAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uQW55KSB7XG4gICAgICBzd2lwZXIub25Bbnkoc3dpcGVyLnBhcmFtcy5vbkFueSk7XG4gICAgfSAvLyBTYXZlIERvbSBsaWJcblxuXG4gICAgc3dpcGVyLiQgPSAkOyAvLyBFeHRlbmQgU3dpcGVyXG5cbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZW5hYmxlZDogc3dpcGVyLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWwsXG4gICAgICAvLyBDbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiBbXSxcbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiAkKCksXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG5cbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcblxuICAgICAgaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcblxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50czogZnVuY3Rpb24gdG91Y2hFdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IHRvdWNoID0gWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZScsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCddO1xuICAgICAgICBjb25zdCBkZXNrdG9wID0gWydwb2ludGVyZG93bicsICdwb2ludGVybW92ZScsICdwb2ludGVydXAnXTtcbiAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggPSB7XG4gICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgIG1vdmU6IHRvdWNoWzFdLFxuICAgICAgICAgIGVuZDogdG91Y2hbMl0sXG4gICAgICAgICAgY2FuY2VsOiB0b3VjaFszXVxuICAgICAgICB9O1xuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wID0ge1xuICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLFxuICAgICAgICAgIG1vdmU6IGRlc2t0b3BbMV0sXG4gICAgICAgICAgZW5kOiBkZXNrdG9wWzJdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggOiBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgfSgpLFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb2N1c2FibGVFbGVtZW50czogc3dpcGVyLnBhcmFtcy5mb2N1c2FibGVFbGVtZW50cyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IG5vdygpLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1RvdWNoRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgdG91Y2hlczoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VycmVudFg6IDAsXG4gICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICBkaWZmOiAwXG4gICAgICB9LFxuICAgICAgLy8gSW1hZ2VzXG4gICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgaW1hZ2VzTG9hZGVkOiAwXG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19zd2lwZXInKTsgLy8gSW5pdFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9IC8vIFJldHVybiBhcHAgaW5zdGFuY2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG5cblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cblxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdlbmFibGUnKTtcbiAgfVxuXG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci51bnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGlzYWJsZScpO1xuICB9XG5cbiAgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgY29uc3QgbWluID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IG1heCA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuXG4gIGVtaXRDb250YWluZXJDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgY29uc3QgY2xzID0gc3dpcGVyLmVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihjbGFzc05hbWUgPT4ge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXInKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpID09PSAwO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfY29udGFpbmVyQ2xhc3NlcycsIGNscy5qb2luKCcgJykpO1xuICB9XG5cbiAgZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgfSkuam9pbignICcpO1xuICB9XG5cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cblxuICBzbGlkZXNQZXJWaWV3RHluYW1pYyh2aWV3ID0gJ2N1cnJlbnQnLCBleGFjdCA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGxldCBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgIGxldCBicmVha0xvb3A7XG5cbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAodmlldyA9PT0gJ2N1cnJlbnQnKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IGV4YWN0ID8gc2xpZGVzR3JpZFtpXSArIHNsaWRlc1NpemVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSA6IHNsaWRlc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemU7XG5cbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG5cbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzcHY7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyOyAvLyBCcmVha3BvaW50c1xuXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIGxldCB0cmFuc2xhdGVkO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cblxuICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuXG4gICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG5cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG5cbiAgICBzd2lwZXIuJGVsLnJlbW92ZUNsYXNzKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2N1cnJlbnREaXJlY3Rpb259YCkuYWRkQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7bmV3RGlyZWN0aW9ufWApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdydGwnIHx8ICFzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ2x0cicpIHJldHVybjtcbiAgICBzd2lwZXIucnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuXG4gICAgaWYgKHN3aXBlci5ydGwpIHtcbiAgICAgIHN3aXBlci4kZWwuYWRkQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApO1xuICAgICAgc3dpcGVyLmVsLmRpciA9ICdydGwnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuJGVsLnJlbW92ZUNsYXNzKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICB9XG5cbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cblxuICBtb3VudChlbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5tb3VudGVkKSByZXR1cm4gdHJ1ZTsgLy8gRmluZCBlbFxuXG4gICAgY29uc3QgJGVsID0gJChlbCB8fCBzd2lwZXIucGFyYW1zLmVsKTtcbiAgICBlbCA9ICRlbFswXTtcblxuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBlbC5zd2lwZXIgPSBzd2lwZXI7XG5cbiAgICBjb25zdCBnZXRXcmFwcGVyU2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gYC4keyhzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyB8fCAnJykudHJpbSgpLnNwbGl0KCcgJykuam9pbignLicpfWA7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldFdyYXBwZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoZWwgJiYgZWwuc2hhZG93Um9vdCAmJiBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVzID0gJChlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoZ2V0V3JhcHBlclNlbGVjdG9yKCkpKTsgLy8gQ2hpbGRyZW4gbmVlZHMgdG8gcmV0dXJuIHNsb3QgaXRlbXNcblxuICAgICAgICByZXMuY2hpbGRyZW4gPSBvcHRpb25zID0+ICRlbC5jaGlsZHJlbihvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoISRlbC5jaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gJCgkZWwpLmNoaWxkcmVuKGdldFdyYXBwZXJTZWxlY3RvcigpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICRlbC5jaGlsZHJlbihnZXRXcmFwcGVyU2VsZWN0b3IoKSk7XG4gICAgfTsgLy8gRmluZCBXcmFwcGVyXG5cblxuICAgIGxldCAkd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuXG4gICAgaWYgKCR3cmFwcGVyRWwubGVuZ3RoID09PSAwICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICR3cmFwcGVyRWwgPSAkKHdyYXBwZXIpO1xuICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcztcbiAgICAgICRlbC5hcHBlbmQod3JhcHBlcik7XG4gICAgICAkZWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5lYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZUVsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICAkZWwsXG4gICAgICBlbCxcbiAgICAgICR3cmFwcGVyRWwsXG4gICAgICB3cmFwcGVyRWw6ICR3cmFwcGVyRWxbMF0sXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6ICR3cmFwcGVyRWwuY3NzKCdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGluaXQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7XG4gICAgY29uc3QgbW91bnRlZCA9IHN3aXBlci5tb3VudChlbCk7XG4gICAgaWYgKG1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gc3dpcGVyO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7IC8vIFNldCBicmVha3BvaW50XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9IC8vIEFkZCBDbGFzc2VzXG5cblxuICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7IC8vIENyZWF0ZSBsb29wXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH0gLy8gVXBkYXRlIHNpemVcblxuXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTsgLy8gVXBkYXRlIHNsaWRlc1xuXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9IC8vIFNldCBHcmFiIEN1cnNvclxuXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMpIHtcbiAgICAgIHN3aXBlci5wcmVsb2FkSW1hZ2VzKCk7XG4gICAgfSAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG5cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSAvLyBBdHRhY2ggZXZlbnRzXG5cblxuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTsgLy8gSW5pdCBGbGFnXG5cbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSB0cnVlOyAvLyBFbWl0XG5cbiAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgZGVzdHJveShkZWxldGVJbnN0YW5jZSA9IHRydWUsIGNsZWFuU3R5bGVzID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgJGVsLFxuICAgICAgJHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1xuICAgIH0gPSBzd2lwZXI7XG5cbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7IC8vIEluaXQgRmxhZ1xuXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7IC8vIERldGFjaCBldmVudHNcblxuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTsgLy8gRGVzdHJveSBsb29wXG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH0gLy8gQ2xlYW51cCBzdHlsZXNcblxuXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgJGVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAkd3JhcHBlckVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG5cbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXMucmVtb3ZlQ2xhc3MoW3BhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzXS5qb2luKCcgJykpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpOyAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcblxuICAgIE9iamVjdC5rZXlzKHN3aXBlci5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcblxuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuXG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG5cbiAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgIHJldHVybiBleHRlbmRlZERlZmF1bHRzO1xuICB9XG5cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cblxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2QpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcblxuICAgIGlmICh0eXBlb2YgbW9kID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZXMuaW5kZXhPZihtb2QpIDwgMCkge1xuICAgICAgbW9kdWxlcy5wdXNoKG1vZCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaChtID0+IFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pKTtcbiAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgfVxuXG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG5cbn1cblxuT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChwcm90b3R5cGVHcm91cCA9PiB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKHByb3RvTWV0aG9kID0+IHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcbmV4cG9ydCBkZWZhdWx0IFN3aXBlcjsiLCJpbXBvcnQgZ2V0VHJhbnNsYXRlIGZyb20gJy4vZ2V0VHJhbnNsYXRlLmpzJztcbmltcG9ydCBzZXRUcmFuc2xhdGUgZnJvbSAnLi9zZXRUcmFuc2xhdGUuanMnO1xuaW1wb3J0IG1pblRyYW5zbGF0ZSBmcm9tICcuL21pblRyYW5zbGF0ZS5qcyc7XG5pbXBvcnQgbWF4VHJhbnNsYXRlIGZyb20gJy4vbWF4VHJhbnNsYXRlLmpzJztcbmltcG9ydCB0cmFuc2xhdGVUbyBmcm9tICcuL3RyYW5zbGF0ZVRvLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0VHJhbnNsYXRlLFxuICBzZXRUcmFuc2xhdGUsXG4gIG1pblRyYW5zbGF0ZSxcbiAgbWF4VHJhbnNsYXRlLFxuICB0cmFuc2xhdGVUb1xufTsiLCJpbXBvcnQgeyBnZXRUcmFuc2xhdGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3dpcGVyVHJhbnNsYXRlKGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgdHJhbnNsYXRlLFxuICAgICR3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICByZXR1cm4gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybiB0cmFuc2xhdGU7XG4gIH1cblxuICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSgkd3JhcHBlckVsWzBdLCBheGlzKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgcGFyYW1zLFxuICAgICR3cmFwcGVyRWwsXG4gICAgd3JhcHBlckVsLFxuICAgIHByb2dyZXNzXG4gIH0gPSBzd2lwZXI7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBjb25zdCB6ID0gMDtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICAkd3JhcHBlckVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgKTtcbiAgfVxuXG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTsgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcblxuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cblxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdO1xufSIsImltcG9ydCB7IGFuaW1hdGVDU1NNb2RlU2Nyb2xsIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zbGF0ZVRvKHRyYW5zbGF0ZSA9IDAsIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIHRyYW5zbGF0ZUJvdW5kcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTsgLy8gVXBkYXRlIHByb2dyZXNzXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgY29uc3QgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuXG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuXG4gICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgc2V0VHJhbnNpdGlvbiBmcm9tICcuL3NldFRyYW5zaXRpb24uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25TdGFydCBmcm9tICcuL3RyYW5zaXRpb25TdGFydC5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbkVuZCBmcm9tICcuL3RyYW5zaXRpb25FbmQuanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmRcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59IiwiaW1wb3J0IHRyYW5zaXRpb25FbWl0IGZyb20gJy4vdHJhbnNpdGlvbkVtaXQuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcyA9IHRydWUsIGRpcmVjdGlvbikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cblxuICB0cmFuc2l0aW9uRW1pdCh7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcDogJ1N0YXJ0J1xuICB9KTtcbn0iLCJpbXBvcnQgdHJhbnNpdGlvbkVtaXQgZnJvbSAnLi90cmFuc2l0aW9uRW1pdC5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcyA9IHRydWUsIGRpcmVjdGlvbikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICB0cmFuc2l0aW9uRW1pdCh7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcDogJ0VuZCdcbiAgfSk7XG59IiwiaW1wb3J0IGxvb3BDcmVhdGUgZnJvbSAnLi9sb29wQ3JlYXRlLmpzJztcbmltcG9ydCBsb29wRml4IGZyb20gJy4vbG9vcEZpeC5qcyc7XG5pbXBvcnQgbG9vcERlc3Ryb3kgZnJvbSAnLi9sb29wRGVzdHJveS5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvb3BDcmVhdGUsXG4gIGxvb3BGaXgsXG4gIGxvb3BEZXN0cm95XG59OyIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BDcmVhdGUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICAkd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7IC8vIFJlbW92ZSBkdXBsaWNhdGVkIHNsaWRlc1xuXG4gIGNvbnN0ICRzZWxlY3RvciA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oKS5sZW5ndGggPiAwID8gJCgkd3JhcHBlckVsLmNoaWxkcmVuKClbMF0ucGFyZW50Tm9kZSkgOiAkd3JhcHBlckVsO1xuICAkc2VsZWN0b3IuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfWApLnJlbW92ZSgpO1xuICBsZXQgc2xpZGVzID0gJHNlbGVjdG9yLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcblxuICBpZiAocGFyYW1zLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHtcbiAgICBjb25zdCBibGFua1NsaWRlc051bSA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAtIHNsaWRlcy5sZW5ndGggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICBpZiAoYmxhbmtTbGlkZXNOdW0gIT09IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibGFua1NsaWRlc051bTsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGJsYW5rTm9kZSA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFkZENsYXNzKGAke3BhcmFtcy5zbGlkZUNsYXNzfSAke3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3N9YCk7XG4gICAgICAgICRzZWxlY3Rvci5hcHBlbmQoYmxhbmtOb2RlKTtcbiAgICAgIH1cblxuICAgICAgc2xpZGVzID0gJHNlbGVjdG9yLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiAhcGFyYW1zLmxvb3BlZFNsaWRlcykgcGFyYW1zLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMubG9vcGVkU2xpZGVzIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcblxuICBpZiAoc3dpcGVyLmxvb3BlZFNsaWRlcyA+IHNsaWRlcy5sZW5ndGggJiYgc3dpcGVyLnBhcmFtcy5sb29wZWRTbGlkZXNMaW1pdCkge1xuICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICB9XG5cbiAgY29uc3QgcHJlcGVuZFNsaWRlcyA9IFtdO1xuICBjb25zdCBhcHBlbmRTbGlkZXMgPSBbXTtcbiAgc2xpZGVzLmVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHNsaWRlID0gJChlbCk7XG4gICAgc2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gIH0pO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLmxvb3BlZFNsaWRlczsgaSArPSAxKSB7XG4gICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gc2xpZGVzLmxlbmd0aCkgKiBzbGlkZXMubGVuZ3RoO1xuICAgIGFwcGVuZFNsaWRlcy5wdXNoKHNsaWRlcy5lcShpbmRleClbMF0pO1xuICAgIHByZXBlbmRTbGlkZXMudW5zaGlmdChzbGlkZXMuZXEoc2xpZGVzLmxlbmd0aCAtIGluZGV4IC0gMSlbMF0pO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcHBlbmRTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAkc2VsZWN0b3IuYXBwZW5kKCQoYXBwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSBwcmVwZW5kU2xpZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgJHNlbGVjdG9yLnByZXBlbmQoJChwcmVwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BGaXgoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVMb29wRml4Jyk7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleCxcbiAgICBzbGlkZXMsXG4gICAgbG9vcGVkU2xpZGVzLFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIHNuYXBHcmlkLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsXG4gIH0gPSBzd2lwZXI7XG4gIGxldCBuZXdJbmRleDtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgY29uc3Qgc25hcFRyYW5zbGF0ZSA9IC1zbmFwR3JpZFthY3RpdmVJbmRleF07XG4gIGNvbnN0IGRpZmYgPSBzbmFwVHJhbnNsYXRlIC0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpOyAvLyBGaXggRm9yIE5lZ2F0aXZlIE92ZXJzbGlkaW5nXG5cbiAgaWYgKGFjdGl2ZUluZGV4IDwgbG9vcGVkU2xpZGVzKSB7XG4gICAgbmV3SW5kZXggPSBzbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzICogMyArIGFjdGl2ZUluZGV4O1xuICAgIG5ld0luZGV4ICs9IGxvb3BlZFNsaWRlcztcbiAgICBjb25zdCBzbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuXG4gICAgaWYgKHNsaWRlQ2hhbmdlZCAmJiBkaWZmICE9PSAwKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGl2ZUluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMpIHtcbiAgICAvLyBGaXggRm9yIFBvc2l0aXZlIE92ZXJzbGlkaW5nXG4gICAgbmV3SW5kZXggPSAtc2xpZGVzLmxlbmd0aCArIGFjdGl2ZUluZGV4ICsgbG9vcGVkU2xpZGVzO1xuICAgIG5ld0luZGV4ICs9IGxvb3BlZFNsaWRlcztcbiAgICBjb25zdCBzbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuXG4gICAgaWYgKHNsaWRlQ2hhbmdlZCAmJiBkaWZmICE9PSAwKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7XG4gICAgfVxuICB9XG5cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgJHdyYXBwZXJFbCxcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzXG4gIH0gPSBzd2lwZXI7XG4gICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSwuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVCbGFua0NsYXNzfWApLnJlbW92ZSgpO1xuICBzbGlkZXMucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbn0iLCJpbXBvcnQgc2V0R3JhYkN1cnNvciBmcm9tICcuL3NldEdyYWJDdXJzb3IuanMnO1xuaW1wb3J0IHVuc2V0R3JhYkN1cnNvciBmcm9tICcuL3Vuc2V0R3JhYkN1cnNvci5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNldEdyYWJDdXJzb3IsXG4gIHVuc2V0R3JhYkN1cnNvclxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRHcmFiQ3Vyc29yKG1vdmluZykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnN1cHBvcnQudG91Y2ggfHwgIXN3aXBlci5wYXJhbXMuc2ltdWxhdGVUb3VjaCB8fCBzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBjb25zdCBlbCA9IHN3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gc3dpcGVyLmVsIDogc3dpcGVyLndyYXBwZXJFbDtcbiAgZWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvcigpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBpZiAoc3dpcGVyLnN1cHBvcnQudG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2lwZXJbc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyAnZWwnIDogJ3dyYXBwZXJFbCddLnN0eWxlLmN1cnNvciA9ICcnO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgYmFzZSA9ICd3aW5kb3cnLCBjb250YWluZXJFbCkge1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChwb2ludCA9PiB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICBjb25zdCBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudEhlaWdodCAqIG1pblJhdGlvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBvaW50XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogcG9pbnQsXG4gICAgICBwb2ludFxuICAgIH07XG4gIH0pO1xuICBwb2ludHMuc29ydCgoYSwgYikgPT4gcGFyc2VJbnQoYS52YWx1ZSwgMTApIC0gcGFyc2VJbnQoYi52YWx1ZSwgMTApKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBvaW50LFxuICAgICAgdmFsdWVcbiAgICB9ID0gcG9pbnRzW2ldO1xuXG4gICAgaWYgKGJhc2UgPT09ICd3aW5kb3cnKSB7XG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7dmFsdWV9cHgpYCkubWF0Y2hlcykge1xuICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8PSBjb250YWluZXJFbC5jbGllbnRXaWR0aCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBicmVha3BvaW50IHx8ICdtYXgnO1xufSIsImZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBpc0xvY2tlZDogd2FzTG9ja2VkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgc2xpZGVzT2Zmc2V0QmVmb3JlXG4gIH0gPSBwYXJhbXM7XG5cbiAgaWYgKHNsaWRlc09mZnNldEJlZm9yZSkge1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGxhc3RTbGlkZVJpZ2h0RWRnZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc2xpZGVzT2Zmc2V0QmVmb3JlICogMjtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc2l6ZSA+IGxhc3RTbGlkZVJpZ2h0RWRnZTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cblxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuXG4gIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNoZWNrT3ZlcmZsb3dcbn07IiwiaW1wb3J0IGxvYWRJbWFnZSBmcm9tICcuL2xvYWRJbWFnZS5qcyc7XG5pbXBvcnQgcHJlbG9hZEltYWdlcyBmcm9tICcuL3ByZWxvYWRJbWFnZXMuanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBsb2FkSW1hZ2UsXG4gIHByZWxvYWRJbWFnZXNcbn07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWRJbWFnZShpbWFnZUVsLCBzcmMsIHNyY3NldCwgc2l6ZXMsIGNoZWNrRm9yQ29tcGxldGUsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgaW1hZ2U7XG5cbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gIH1cblxuICBjb25zdCBpc1BpY3R1cmUgPSAkKGltYWdlRWwpLnBhcmVudCgncGljdHVyZScpWzBdO1xuXG4gIGlmICghaXNQaWN0dXJlICYmICghaW1hZ2VFbC5jb21wbGV0ZSB8fCAhY2hlY2tGb3JDb21wbGV0ZSkpIHtcbiAgICBpZiAoc3JjKSB7XG4gICAgICBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcbiAgICAgIGltYWdlLm9ubG9hZCA9IG9uUmVhZHk7XG4gICAgICBpbWFnZS5vbmVycm9yID0gb25SZWFkeTtcblxuICAgICAgaWYgKHNpemVzKSB7XG4gICAgICAgIGltYWdlLnNpemVzID0gc2l6ZXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcmNzZXQpIHtcbiAgICAgICAgaW1hZ2Uuc3Jjc2V0ID0gc3Jjc2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb25SZWFkeSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpbWFnZSBhbHJlYWR5IGxvYWRlZC4uLlxuICAgIG9uUmVhZHkoKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZWxvYWRJbWFnZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHN3aXBlci5pbWFnZXNUb0xvYWQgPSBzd2lwZXIuJGVsLmZpbmQoJ2ltZycpO1xuXG4gIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSBzd2lwZXIuaW1hZ2VzTG9hZGVkICs9IDE7XG5cbiAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCA9PT0gc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVwZGF0ZU9uSW1hZ2VzUmVhZHkpIHN3aXBlci51cGRhdGUoKTtcbiAgICAgIHN3aXBlci5lbWl0KCdpbWFnZXNSZWFkeScpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGltYWdlRWwgPSBzd2lwZXIuaW1hZ2VzVG9Mb2FkW2ldO1xuICAgIHN3aXBlci5sb2FkSW1hZ2UoaW1hZ2VFbCwgaW1hZ2VFbC5jdXJyZW50U3JjIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmMnKSwgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLCBpbWFnZUVsLnNpemVzIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzaXplcycpLCB0cnVlLCBvblJlYWR5KTtcbiAgfVxufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVzaXplKHtcbiAgc3dpcGVyLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG9ic2VydmVyID0gbnVsbDtcbiAgbGV0IGFuaW1hdGlvbkZyYW1lID0gbnVsbDtcblxuICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgIGVtaXQoJ3Jlc2l6ZScpO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgIGhlaWdodFxuICAgICAgICB9ID0gc3dpcGVyO1xuICAgICAgICBsZXQgbmV3V2lkdGggPSB3aWR0aDtcbiAgICAgICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKCh7XG4gICAgICAgICAgY29udGVudEJveFNpemUsXG4gICAgICAgICAgY29udGVudFJlY3QsXG4gICAgICAgICAgdGFyZ2V0XG4gICAgICAgIH0pID0+IHtcbiAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gc3dpcGVyLmVsKSByZXR1cm47XG4gICAgICAgICAgbmV3V2lkdGggPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LndpZHRoIDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5pbmxpbmVTaXplO1xuICAgICAgICAgIG5ld0hlaWdodCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3QuaGVpZ2h0IDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5ibG9ja1NpemU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICByZXNpemVIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgfTtcblxuICBjb25zdCByZW1vdmVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnVub2JzZXJ2ZSAmJiBzd2lwZXIuZWwpIHtcbiAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgfTtcblxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3JlYXRlT2JzZXJ2ZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIHJlbW92ZU9ic2VydmVyKCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT2JzZXJ2ZXIoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb24sXG4gIGVtaXRcbn0pIHtcbiAgY29uc3Qgb2JzZXJ2ZXJzID0gW107XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGNvbnN0IGF0dGFjaCA9ICh0YXJnZXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYyhtdXRhdGlvbnMgPT4ge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgIGNoaWxkTGlzdDogdHlwZW9mIG9wdGlvbnMuY2hpbGRMaXN0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoaWxkTGlzdCxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgIH0pO1xuICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgfTtcblxuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhcmVudHMgPSBzd2lwZXIuJGVsLnBhcmVudHMoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vIE9ic2VydmUgY29udGFpbmVyXG5cblxuICAgIGF0dGFjaChzd2lwZXIuJGVsWzBdLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTsgLy8gT2JzZXJ2ZSB3cmFwcGVyXG5cbiAgICBhdHRhY2goc3dpcGVyLiR3cmFwcGVyRWxbMF0sIHtcbiAgICAgIGF0dHJpYnV0ZXM6IGZhbHNlXG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnNwbGljZSgwLCBvYnNlcnZlcnMubGVuZ3RoKTtcbiAgfTtcblxuICBleHRlbmRQYXJhbXMoe1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0pO1xuICBvbignaW5pdCcsIGluaXQpO1xuICBvbignZGVzdHJveScsIGRlc3Ryb3kpO1xufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICBPYmplY3Qua2V5cyhjaGVja1Byb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoIXBhcmFtc1trZXldICYmIHBhcmFtcy5hdXRvID09PSB0cnVlKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gc3dpcGVyLiRlbC5jaGlsZHJlbihgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuJGVsLmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcGFyYW1zO1xufSIsImltcG9ydCBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIGZyb20gJy4uLy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5qcyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5hdmlnYXRpb24oe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb24sXG4gIGVtaXRcbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICBuZXh0RWw6IG51bGwsXG4gICAgICBwcmV2RWw6IG51bGwsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsXG4gICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1idXR0b24taGlkZGVuJyxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaycsXG4gICAgICBuYXZpZ2F0aW9uRGlzYWJsZWRDbGFzczogJ3N3aXBlci1uYXZpZ2F0aW9uLWRpc2FibGVkJ1xuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5uYXZpZ2F0aW9uID0ge1xuICAgIG5leHRFbDogbnVsbCxcbiAgICAkbmV4dEVsOiBudWxsLFxuICAgIHByZXZFbDogbnVsbCxcbiAgICAkcHJldkVsOiBudWxsXG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0RWwoZWwpIHtcbiAgICBsZXQgJGVsO1xuXG4gICAgaWYgKGVsKSB7XG4gICAgICAkZWwgPSAkKGVsKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIGVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSAmJiBzd2lwZXIuJGVsLmZpbmQoZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAkZWwgPSBzd2lwZXIuJGVsLmZpbmQoZWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAkZWw7XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVFbCgkZWwsIGRpc2FibGVkKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKCRlbCAmJiAkZWwubGVuZ3RoID4gMCkge1xuICAgICAgJGVsW2Rpc2FibGVkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIGlmICgkZWxbMF0gJiYgJGVsWzBdLnRhZ05hbWUgPT09ICdCVVRUT04nKSAkZWxbMF0uZGlzYWJsZWQgPSBkaXNhYmxlZDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAkZWxbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBVcGRhdGUgTmF2aWdhdGlvbiBCdXR0b25zXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgICRuZXh0RWwsXG4gICAgICAkcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIHRvZ2dsZUVsKCRwcmV2RWwsIHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICAgIHRvZ2dsZUVsKCRuZXh0RWwsIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25QcmV2Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBvbk5leHRDbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgZW1pdCgnbmF2aWdhdGlvbk5leHQnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMubmF2aWdhdGlvbiwgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLCB7XG4gICAgICBuZXh0RWw6ICdzd2lwZXItYnV0dG9uLW5leHQnLFxuICAgICAgcHJldkVsOiAnc3dpcGVyLWJ1dHRvbi1wcmV2J1xuICAgIH0pO1xuICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHJldHVybjtcbiAgICBjb25zdCAkbmV4dEVsID0gZ2V0RWwocGFyYW1zLm5leHRFbCk7XG4gICAgY29uc3QgJHByZXZFbCA9IGdldEVsKHBhcmFtcy5wcmV2RWwpO1xuXG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkbmV4dEVsLm9uKCdjbGljaycsIG9uTmV4dENsaWNrKTtcbiAgICB9XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgICRwcmV2RWwub24oJ2NsaWNrJywgb25QcmV2Q2xpY2spO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICAgICRuZXh0RWwsXG4gICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICRwcmV2RWwsXG4gICAgICBwcmV2RWw6ICRwcmV2RWwgJiYgJHByZXZFbFswXVxuICAgIH0pO1xuXG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgaWYgKCRuZXh0RWwpICRuZXh0RWwuYWRkQ2xhc3MocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICBpZiAoJHByZXZFbCkgJHByZXZFbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHtcbiAgICAgICRuZXh0RWwsXG4gICAgICAkcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGgpIHtcbiAgICAgICRuZXh0RWwub2ZmKCdjbGljaycsIG9uTmV4dENsaWNrKTtcbiAgICAgICRuZXh0RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoKSB7XG4gICAgICAkcHJldkVsLm9mZignY2xpY2snLCBvblByZXZDbGljayk7XG4gICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG4gIH1cblxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3RvRWRnZSBmcm9tRWRnZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAkbmV4dEVsLFxuICAgICAgJHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcblxuICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAkbmV4dEVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAkcHJldkVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICRuZXh0RWwsXG4gICAgICAkcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrICYmICEkKHRhcmdldEVsKS5pcygkcHJldkVsKSAmJiAhJCh0YXJnZXRFbCkuaXMoJG5leHRFbCkpIHtcbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoc3dpcGVyLnBhZ2luYXRpb24uZWwgPT09IHRhcmdldEVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKHRhcmdldEVsKSkpIHJldHVybjtcbiAgICAgIGxldCBpc0hpZGRlbjtcblxuICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgaXNIaWRkZW4gPSAkbmV4dEVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9IGVsc2UgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgaXNIaWRkZW4gPSAkcHJldkVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uU2hvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICAkcHJldkVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLiRlbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGluaXQoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcblxuICBjb25zdCBkaXNhYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci4kZWwuYWRkQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzKTtcbiAgICBkZXN0cm95KCk7XG4gIH07XG5cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3NlcyA9ICcnKSB7XG4gIHJldHVybiBgLiR7Y2xhc3Nlcy50cmltKCkucmVwbGFjZSgvKFtcXC46IVxcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn0iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmltcG9ydCBjbGFzc2VzVG9TZWxlY3RvciBmcm9tICcuLi8uLi9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5qcyc7XG5pbXBvcnQgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBmcm9tICcuLi8uLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnaW5hdGlvbih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCBwZnggPSAnc3dpcGVyLXBhZ2luYXRpb24nO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgYnVsbGV0RWxlbWVudDogJ3NwYW4nLFxuICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIHJlbmRlckJ1bGxldDogbnVsbCxcbiAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICByZW5kZXJDdXN0b206IG51bGwsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdidWxsZXRzJyxcbiAgICAgIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBidWxsZXRDbGFzczogYCR7cGZ4fS1idWxsZXRgLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6IGAke3BmeH0tYnVsbGV0LWFjdGl2ZWAsXG4gICAgICBtb2RpZmllckNsYXNzOiBgJHtwZnh9LWAsXG4gICAgICBjdXJyZW50Q2xhc3M6IGAke3BmeH0tY3VycmVudGAsXG4gICAgICB0b3RhbENsYXNzOiBgJHtwZnh9LXRvdGFsYCxcbiAgICAgIGhpZGRlbkNsYXNzOiBgJHtwZnh9LWhpZGRlbmAsXG4gICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1maWxsYCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1vcHBvc2l0ZWAsXG4gICAgICBjbGlja2FibGVDbGFzczogYCR7cGZ4fS1jbGlja2FibGVgLFxuICAgICAgbG9ja0NsYXNzOiBgJHtwZnh9LWxvY2tgLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgJHtwZnh9LWhvcml6b250YWxgLFxuICAgICAgdmVydGljYWxDbGFzczogYCR7cGZ4fS12ZXJ0aWNhbGAsXG4gICAgICBwYWdpbmF0aW9uRGlzYWJsZWRDbGFzczogYCR7cGZ4fS1kaXNhYmxlZGBcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIucGFnaW5hdGlvbiA9IHtcbiAgICBlbDogbnVsbCxcbiAgICAkZWw6IG51bGwsXG4gICAgYnVsbGV0czogW11cbiAgfTtcbiAgbGV0IGJ1bGxldFNpemU7XG4gIGxldCBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuXG4gIGZ1bmN0aW9uIGlzUGFnaW5hdGlvbkRpc2FibGVkKCkge1xuICAgIHJldHVybiAhc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDA7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRTaWRlQnVsbGV0cygkYnVsbGV0RWwsIHBvc2l0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3NcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICRidWxsZXRFbFtwb3NpdGlvbl0oKS5hZGRDbGFzcyhgJHtidWxsZXRBY3RpdmVDbGFzc30tJHtwb3NpdGlvbn1gKVtwb3NpdGlvbl0oKS5hZGRDbGFzcyhgJHtidWxsZXRBY3RpdmVDbGFzc30tJHtwb3NpdGlvbn0tJHtwb3NpdGlvbn1gKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBSZW5kZXIgfHwgVXBkYXRlIFBhZ2luYXRpb24gYnVsbGV0cy9pdGVtc1xuICAgIGNvbnN0IHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmIChpc1BhZ2luYXRpb25EaXNhYmxlZCgpKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgY29uc3QgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsOyAvLyBDdXJyZW50L1RvdGFsXG5cbiAgICBsZXQgY3VycmVudDtcbiAgICBjb25zdCB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgY3VycmVudCA9IE1hdGguY2VpbCgoc3dpcGVyLmFjdGl2ZUluZGV4IC0gc3dpcGVyLmxvb3BlZFNsaWRlcykgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcblxuICAgICAgaWYgKGN1cnJlbnQgPiBzbGlkZXNMZW5ndGggLSAxIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIHtcbiAgICAgICAgY3VycmVudCAtPSBzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMjtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnQgPiB0b3RhbCAtIDEpIGN1cnJlbnQgLT0gdG90YWw7XG4gICAgICBpZiAoY3VycmVudCA8IDAgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uVHlwZSAhPT0gJ2J1bGxldHMnKSBjdXJyZW50ID0gdG90YWwgKyBjdXJyZW50O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH0gLy8gVHlwZXNcblxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGJ1bGxldHMgPSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzO1xuICAgICAgbGV0IGZpcnN0SW5kZXg7XG4gICAgICBsZXQgbGFzdEluZGV4O1xuICAgICAgbGV0IG1pZEluZGV4O1xuXG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGJ1bGxldFNpemUgPSBidWxsZXRzLmVxKDApW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdvdXRlcldpZHRoJyA6ICdvdXRlckhlaWdodCddKHRydWUpO1xuICAgICAgICAkZWwuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0JywgYCR7YnVsbGV0U2l6ZSAqIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCl9cHhgKTtcblxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCArPSBjdXJyZW50IC0gKHN3aXBlci5wcmV2aW91c0luZGV4IC0gc3dpcGVyLmxvb3BlZFNsaWRlcyB8fCAwKTtcblxuICAgICAgICAgIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZpcnN0SW5kZXggPSBNYXRoLm1heChjdXJyZW50IC0gZHluYW1pY0J1bGxldEluZGV4LCAwKTtcbiAgICAgICAgbGFzdEluZGV4ID0gZmlyc3RJbmRleCArIChNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKTtcbiAgICAgICAgbWlkSW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgLyAyO1xuICAgICAgfVxuXG4gICAgICBidWxsZXRzLnJlbW92ZUNsYXNzKFsnJywgJy1uZXh0JywgJy1uZXh0LW5leHQnLCAnLXByZXYnLCAnLXByZXYtcHJldicsICctbWFpbiddLm1hcChzdWZmaXggPT4gYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfSR7c3VmZml4fWApLmpvaW4oJyAnKSk7XG5cbiAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBjb25zdCAkYnVsbGV0ID0gJChidWxsZXQpO1xuICAgICAgICAgIGNvbnN0IGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuXG4gICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gZmlyc3RJbmRleCkge1xuICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cygkYnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cygkYnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCAkYnVsbGV0ID0gYnVsbGV0cy5lcShjdXJyZW50KTtcbiAgICAgICAgY29uc3QgYnVsbGV0SW5kZXggPSAkYnVsbGV0LmluZGV4KCk7XG4gICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcblxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgY29uc3QgJGZpcnN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShmaXJzdEluZGV4KTtcbiAgICAgICAgICBjb25zdCAkbGFzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEobGFzdEluZGV4KTtcblxuICAgICAgICAgIGZvciAobGV0IGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICBidWxsZXRzLmVxKGkpLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBidWxsZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0czsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICBidWxsZXRzLmVxKGJ1bGxldHMubGVuZ3RoIC0gaSkuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBidWxsZXRzLmVxKGJ1bGxldHMubGVuZ3RoIC0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldmApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoJGZpcnN0RGlzcGxheWVkQnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cygkbGFzdERpc3BsYXllZEJ1bGxldCwgJ25leHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoJGZpcnN0RGlzcGxheWVkQnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoJGxhc3REaXNwbGF5ZWRCdWxsZXQsICduZXh0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKGJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIGJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogYnVsbGV0U2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/IG9mZnNldFByb3AgOiAndG9wJywgYCR7YnVsbGV0c09mZnNldH1weGApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uQ3VycmVudChjdXJyZW50ICsgMSkpO1xuICAgICAgJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnRvdGFsQ2xhc3MpKS50ZXh0KHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBsZXQgcHJvZ3Jlc3NiYXJEaXJlY3Rpb247XG5cbiAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCc7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgbGV0IHNjYWxlWCA9IDE7XG4gICAgICBsZXQgc2NhbGVZID0gMTtcblxuICAgICAgaWYgKHByb2dyZXNzYmFyRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2FsZVkgPSBzY2FsZTtcbiAgICAgIH1cblxuICAgICAgJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKSkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKCR7c2NhbGVYfSkgc2NhbGVZKCR7c2NhbGVZfSlgKS50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgJGVsLmh0bWwocGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCkpO1xuICAgICAgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsICRlbFswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCAkZWxbMF0pO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICRlbFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciBDb250YWluZXJcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgbGV0IHBhZ2luYXRpb25IVE1MID0gJyc7XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgbGV0IG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgbnVtYmVyT2ZCdWxsZXRzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mQnVsbGV0czsgaSArPSAxKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBgPCR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9IGNsYXNzPVwiJHtwYXJhbXMuYnVsbGV0Q2xhc3N9XCI+PC8ke3BhcmFtcy5idWxsZXRFbGVtZW50fT5gO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgPSAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuYnVsbGV0Q2xhc3MpKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMuY3VycmVudENsYXNzfVwiPjwvc3Bhbj5gICsgJyAvICcgKyBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy50b3RhbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuXG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cblxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzd2lwZXIucGFnaW5hdGlvbi4kZWxbMF0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uLCBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiAnc3dpcGVyLXBhZ2luYXRpb24nXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgbGV0ICRlbCA9ICQocGFyYW1zLmVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICRlbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMuZWwpOyAvLyBjaGVjayBpZiBpdCBiZWxvbmdzIHRvIGFub3RoZXIgbmVzdGVkIFN3aXBlclxuXG4gICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgJGVsID0gJGVsLmZpbHRlcihlbCA9PiB7XG4gICAgICAgICAgaWYgKCQoZWwpLnBhcmVudHMoJy5zd2lwZXInKVswXSAhPT0gc3dpcGVyLmVsKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY2xpY2thYmxlQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAkZWwuYWRkQ2xhc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgJGVsLmFkZENsYXNzKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG5cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9uKCdjbGljaycsIGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcyksIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBpbmRleCA9ICQodGhpcykuaW5kZXgoKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIGluZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICAgICRlbCxcbiAgICAgIGVsOiAkZWxbMF1cbiAgICB9KTtcblxuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgJGVsLnJlbW92ZUNsYXNzKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5yZW1vdmVDbGFzcykgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5yZW1vdmVDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuXG4gICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5vZmYoJ2NsaWNrJywgY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSk7XG4gICAgfVxuICB9XG5cbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBkaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHJlbmRlcigpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2FjdGl2ZUluZGV4Q2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc25hcEluZGV4Q2hhbmdlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVzTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHJlbmRlcigpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICByZW5kZXIoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAkZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG5cbiAgICBpZiAoJGVsKSB7XG4gICAgICAkZWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2xvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBjb25zdCB7XG4gICAgICAkZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiAkZWwgJiYgJGVsLmxlbmd0aCA+IDAgJiYgISQodGFyZ2V0RWwpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiAoc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpKSByZXR1cm47XG4gICAgICBjb25zdCBpc0hpZGRlbiA9ICRlbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuXG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICB9XG5cbiAgICAgICRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci4kZWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTtcblxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi4kZWwpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIH1cblxuICAgIGluaXQoKTtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcblxuICBjb25zdCBkaXNhYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci4kZWwuYWRkQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTtcblxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi4kZWwpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5hZGRDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKTtcbiAgfTtcblxuICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgcmVuZGVyLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59IiwiaW1wb3J0IGNsYXNzZXNUb1NlbGVjdG9yIGZyb20gJy4uLy4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLmpzJztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3NoYXJlZC9kb20uanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQTExeSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGExMXk6IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBub3RpZmljYXRpb25DbGFzczogJ3N3aXBlci1ub3RpZmljYXRpb24nLFxuICAgICAgcHJldlNsaWRlTWVzc2FnZTogJ1ByZXZpb3VzIHNsaWRlJyxcbiAgICAgIG5leHRTbGlkZU1lc3NhZ2U6ICdOZXh0IHNsaWRlJyxcbiAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUnLFxuICAgICAgbGFzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGxhc3Qgc2xpZGUnLFxuICAgICAgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6ICdHbyB0byBzbGlkZSB7e2luZGV4fX0nLFxuICAgICAgc2xpZGVMYWJlbE1lc3NhZ2U6ICd7e2luZGV4fX0gLyB7e3NsaWRlc0xlbmd0aH19JyxcbiAgICAgIGNvbnRhaW5lck1lc3NhZ2U6IG51bGwsXG4gICAgICBjb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlOiBudWxsLFxuICAgICAgaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICBzbGlkZVJvbGU6ICdncm91cCcsXG4gICAgICBpZDogbnVsbFxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5hMTF5ID0ge1xuICAgIGNsaWNrZWQ6IGZhbHNlXG4gIH07XG4gIGxldCBsaXZlUmVnaW9uID0gbnVsbDtcblxuICBmdW5jdGlvbiBub3RpZnkobWVzc2FnZSkge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IGxpdmVSZWdpb247XG4gICAgaWYgKG5vdGlmaWNhdGlvbi5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBub3RpZmljYXRpb24uaHRtbCgnJyk7XG4gICAgbm90aWZpY2F0aW9uLmh0bWwobWVzc2FnZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIoc2l6ZSA9IDE2KSB7XG4gICAgY29uc3QgcmFuZG9tQ2hhciA9ICgpID0+IE1hdGgucm91bmQoMTYgKiBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygxNik7XG5cbiAgICByZXR1cm4gJ3gnLnJlcGVhdChzaXplKS5yZXBsYWNlKC94L2csIHJhbmRvbUNoYXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUVsRm9jdXNhYmxlKCRlbCkge1xuICAgICRlbC5hdHRyKCd0YWJJbmRleCcsICcwJyk7XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlRWxOb3RGb2N1c2FibGUoJGVsKSB7XG4gICAgJGVsLmF0dHIoJ3RhYkluZGV4JywgJy0xJyk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFbFJvbGUoJGVsLCByb2xlKSB7XG4gICAgJGVsLmF0dHIoJ3JvbGUnLCByb2xlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEVsUm9sZURlc2NyaXB0aW9uKCRlbCwgZGVzY3JpcHRpb24pIHtcbiAgICAkZWwuYXR0cignYXJpYS1yb2xlZGVzY3JpcHRpb24nLCBkZXNjcmlwdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFbENvbnRyb2xzKCRlbCwgY29udHJvbHMpIHtcbiAgICAkZWwuYXR0cignYXJpYS1jb250cm9scycsIGNvbnRyb2xzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEVsTGFiZWwoJGVsLCBsYWJlbCkge1xuICAgICRlbC5hdHRyKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRWxJZCgkZWwsIGlkKSB7XG4gICAgJGVsLmF0dHIoJ2lkJywgaWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRWxMaXZlKCRlbCwgbGl2ZSkge1xuICAgICRlbC5hdHRyKCdhcmlhLWxpdmUnLCBsaXZlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGVFbCgkZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5hYmxlRWwoJGVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkVudGVyT3JTcGFjZUtleShlKSB7XG4gICAgaWYgKGUua2V5Q29kZSAhPT0gMTMgJiYgZS5rZXlDb2RlICE9PSAzMikgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBjb25zdCAkdGFyZ2V0RWwgPSAkKGUudGFyZ2V0KTtcblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSkge1xuICAgICAgaWYgKCEoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBub3RpZnkocGFyYW1zLmxhc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm90aWZ5KHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCAmJiAkdGFyZ2V0RWwuaXMoc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkpIHtcbiAgICAgIGlmICghKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgbm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3RpZnkocGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiAkdGFyZ2V0RWwuaXMoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkpIHtcbiAgICAgICR0YXJnZXRFbFswXS5jbGljaygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU5hdmlnYXRpb24oKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCB8fCBzd2lwZXIucGFyYW1zLnJld2luZCB8fCAhc3dpcGVyLm5hdmlnYXRpb24pIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICAkbmV4dEVsLFxuICAgICAgJHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcblxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBkaXNhYmxlRWwoJHByZXZFbCk7XG4gICAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuYWJsZUVsKCRwcmV2RWwpO1xuICAgICAgICBtYWtlRWxGb2N1c2FibGUoJHByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIGRpc2FibGVFbCgkbmV4dEVsKTtcbiAgICAgICAgbWFrZUVsTm90Rm9jdXNhYmxlKCRuZXh0RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5hYmxlRWwoJG5leHRFbCk7XG4gICAgICAgIG1ha2VFbEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYXNQYWdpbmF0aW9uKCkge1xuICAgIHJldHVybiBzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzQ2xpY2thYmxlUGFnaW5hdGlvbigpIHtcbiAgICByZXR1cm4gaGFzUGFnaW5hdGlvbigpICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGU7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBpZiAoIWhhc1BhZ2luYXRpb24oKSkgcmV0dXJuO1xuICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZWFjaChidWxsZXRFbCA9PiB7XG4gICAgICBjb25zdCAkYnVsbGV0RWwgPSAkKGJ1bGxldEVsKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUpIHtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKCRidWxsZXRFbCk7XG5cbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgYWRkRWxSb2xlKCRidWxsZXRFbCwgJ2J1dHRvbicpO1xuICAgICAgICAgIGFkZEVsTGFiZWwoJGJ1bGxldEVsLCBwYXJhbXMucGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UucmVwbGFjZSgvXFx7XFx7aW5kZXhcXH1cXH0vLCAkYnVsbGV0RWwuaW5kZXgoKSArIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJGJ1bGxldEVsLmlzKGAuJHtzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0QWN0aXZlQ2xhc3N9YCkpIHtcbiAgICAgICAgJGJ1bGxldEVsLmF0dHIoJ2FyaWEtY3VycmVudCcsICd0cnVlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkYnVsbGV0RWwucmVtb3ZlQXR0cignYXJpYS1jdXJyZW50Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBpbml0TmF2RWwgPSAoJGVsLCB3cmFwcGVySWQsIG1lc3NhZ2UpID0+IHtcbiAgICBtYWtlRWxGb2N1c2FibGUoJGVsKTtcblxuICAgIGlmICgkZWxbMF0udGFnTmFtZSAhPT0gJ0JVVFRPTicpIHtcbiAgICAgIGFkZEVsUm9sZSgkZWwsICdidXR0b24nKTtcbiAgICAgICRlbC5vbigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICB9XG5cbiAgICBhZGRFbExhYmVsKCRlbCwgbWVzc2FnZSk7XG4gICAgYWRkRWxDb250cm9scygkZWwsIHdyYXBwZXJJZCk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUG9pbnRlckRvd24gPSAoKSA9PiB7XG4gICAgc3dpcGVyLmExMXkuY2xpY2tlZCA9IHRydWU7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUG9pbnRlclVwID0gKCkgPT4ge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5jbGlja2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZSA9PiB7XG4gICAgaWYgKHN3aXBlci5hMTF5LmNsaWNrZWQpIHJldHVybjtcbiAgICBjb25zdCBzbGlkZUVsID0gZS50YXJnZXQuY2xvc2VzdChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApO1xuICAgIGlmICghc2xpZGVFbCB8fCAhc3dpcGVyLnNsaWRlcy5pbmNsdWRlcyhzbGlkZUVsKSkgcmV0dXJuO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gc3dpcGVyLnNsaWRlcy5pbmRleE9mKHNsaWRlRWwpID09PSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgY29uc3QgaXNWaXNpYmxlID0gc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzICYmIHN3aXBlci52aXNpYmxlU2xpZGVzICYmIHN3aXBlci52aXNpYmxlU2xpZGVzLmluY2x1ZGVzKHNsaWRlRWwpO1xuICAgIGlmIChpc0FjdGl2ZSB8fCBpc1Zpc2libGUpIHJldHVybjtcbiAgICBpZiAoZS5zb3VyY2VDYXBhYmlsaXRpZXMgJiYgZS5zb3VyY2VDYXBhYmlsaXRpZXMuZmlyZXNUb3VjaEV2ZW50cykgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgc3dpcGVyLmVsLnNjcm9sbExlZnQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZWwuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG5cbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmluZGV4T2Yoc2xpZGVFbCksIDApO1xuICB9O1xuXG4gIGNvbnN0IGluaXRTbGlkZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuXG4gICAgaWYgKHBhcmFtcy5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSkge1xuICAgICAgYWRkRWxSb2xlRGVzY3JpcHRpb24oJChzd2lwZXIuc2xpZGVzKSwgcGFyYW1zLml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlUm9sZSkge1xuICAgICAgYWRkRWxSb2xlKCQoc3dpcGVyLnNsaWRlcyksIHBhcmFtcy5zbGlkZVJvbGUpO1xuICAgIH1cblxuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHN3aXBlci5zbGlkZXMuZmlsdGVyKGVsID0+ICFlbC5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlTGFiZWxNZXNzYWdlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVzLmVhY2goKHNsaWRlRWwsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0ICRzbGlkZUVsID0gJChzbGlkZUVsKTtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHBhcnNlSW50KCRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA6IGluZGV4O1xuICAgICAgICBjb25zdCBhcmlhTGFiZWxNZXNzYWdlID0gcGFyYW1zLnNsaWRlTGFiZWxNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9Lywgc2xpZGVJbmRleCArIDEpLnJlcGxhY2UoL1xce1xce3NsaWRlc0xlbmd0aFxcfVxcfS8sIHNsaWRlc0xlbmd0aCk7XG4gICAgICAgIGFkZEVsTGFiZWwoJHNsaWRlRWwsIGFyaWFMYWJlbE1lc3NhZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIHN3aXBlci4kZWwuYXBwZW5kKGxpdmVSZWdpb24pOyAvLyBDb250YWluZXJcblxuICAgIGNvbnN0ICRjb250YWluZXJFbCA9IHN3aXBlci4kZWw7XG5cbiAgICBpZiAocGFyYW1zLmNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpIHtcbiAgICAgIGFkZEVsUm9sZURlc2NyaXB0aW9uKCRjb250YWluZXJFbCwgcGFyYW1zLmNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY29udGFpbmVyTWVzc2FnZSkge1xuICAgICAgYWRkRWxMYWJlbCgkY29udGFpbmVyRWwsIHBhcmFtcy5jb250YWluZXJNZXNzYWdlKTtcbiAgICB9IC8vIFdyYXBwZXJcblxuXG4gICAgY29uc3QgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIGNvbnN0IHdyYXBwZXJJZCA9IHBhcmFtcy5pZCB8fCAkd3JhcHBlckVsLmF0dHIoJ2lkJykgfHwgYHN3aXBlci13cmFwcGVyLSR7Z2V0UmFuZG9tTnVtYmVyKDE2KX1gO1xuICAgIGNvbnN0IGxpdmUgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCA/ICdvZmYnIDogJ3BvbGl0ZSc7XG4gICAgYWRkRWxJZCgkd3JhcHBlckVsLCB3cmFwcGVySWQpO1xuICAgIGFkZEVsTGl2ZSgkd3JhcHBlckVsLCBsaXZlKTsgLy8gU2xpZGVcblxuICAgIGluaXRTbGlkZXMoKTsgLy8gTmF2aWdhdGlvblxuXG4gICAgbGV0ICRuZXh0RWw7XG4gICAgbGV0ICRwcmV2RWw7XG5cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHtcbiAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoKSB7XG4gICAgICBpbml0TmF2RWwoJG5leHRFbCwgd3JhcHBlcklkLCBwYXJhbXMubmV4dFNsaWRlTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGgpIHtcbiAgICAgIGluaXROYXZFbCgkcHJldkVsLCB3cmFwcGVySWQsIHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICB9IC8vIFBhZ2luYXRpb25cblxuXG4gICAgaWYgKGhhc0NsaWNrYWJsZVBhZ2luYXRpb24oKSkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9uKCdrZXlkb3duJywgY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSwgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgIH0gLy8gVGFiIGZvY3VzXG5cblxuICAgIHN3aXBlci4kZWwub24oJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgIHN3aXBlci4kZWwub24oJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICAgIHN3aXBlci4kZWwub24oJ3BvaW50ZXJ1cCcsIGhhbmRsZVBvaW50ZXJVcCwgdHJ1ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAobGl2ZVJlZ2lvbiAmJiBsaXZlUmVnaW9uLmxlbmd0aCA+IDApIGxpdmVSZWdpb24ucmVtb3ZlKCk7XG4gICAgbGV0ICRuZXh0RWw7XG4gICAgbGV0ICRwcmV2RWw7XG5cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHtcbiAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgIH1cblxuICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAkbmV4dEVsLm9mZigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICB9XG5cbiAgICBpZiAoJHByZXZFbCkge1xuICAgICAgJHByZXZFbC5vZmYoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSk7XG4gICAgfSAvLyBQYWdpbmF0aW9uXG5cblxuICAgIGlmIChoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5vZmYoJ2tleWRvd24nLCBjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpLCBvbkVudGVyT3JTcGFjZUtleSk7XG4gICAgfSAvLyBUYWIgZm9jdXNcblxuXG4gICAgc3dpcGVyLiRlbC5vZmYoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgIHN3aXBlci4kZWwub2ZmKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBzd2lwZXIuJGVsLm9mZigncG9pbnRlcnVwJywgaGFuZGxlUG9pbnRlclVwLCB0cnVlKTtcbiAgfVxuXG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGxpdmVSZWdpb24gPSAkKGA8c3BhbiBjbGFzcz1cIiR7c3dpcGVyLnBhcmFtcy5hMTF5Lm5vdGlmaWNhdGlvbkNsYXNzfVwiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiPjwvc3Bhbj5gKTtcbiAgfSk7XG4gIG9uKCdhZnRlckluaXQnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGluaXQoKTtcbiAgfSk7XG4gIG9uKCdzbGlkZXNMZW5ndGhDaGFuZ2Ugc25hcEdyaWRMZW5ndGhDaGFuZ2Ugc2xpZGVzR3JpZExlbmd0aENoYW5nZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgaW5pdFNsaWRlcygpO1xuICB9KTtcbiAgb24oJ2Zyb21FZGdlIHRvRWRnZSBhZnRlckluaXQgbG9jayB1bmxvY2snLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgfSk7XG4gIG9uKCdwYWdpbmF0aW9uVXBkYXRlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICB1cGRhdGVQYWdpbmF0aW9uKCk7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbn0iLCJmdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnO1xufVxuXG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcbiAgT2JqZWN0LmtleXMoc3JjKS5maWx0ZXIoa2V5ID0+IG5vRXh0ZW5kLmluZGV4T2Yoa2V5KSA8IDApLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJykgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiYgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3JjW2tleV0uX19zd2lwZXJfXykgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtlbHNlIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG5lZWRzTmF2aWdhdGlvbihwYXJhbXMgPSB7fSkge1xuICByZXR1cm4gcGFyYW1zLm5hdmlnYXRpb24gJiYgdHlwZW9mIHBhcmFtcy5uYXZpZ2F0aW9uLm5leHRFbCA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHBhcmFtcy5uYXZpZ2F0aW9uLnByZXZFbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbmZ1bmN0aW9uIG5lZWRzUGFnaW5hdGlvbihwYXJhbXMgPSB7fSkge1xuICByZXR1cm4gcGFyYW1zLnBhZ2luYXRpb24gJiYgdHlwZW9mIHBhcmFtcy5wYWdpbmF0aW9uLmVsID09PSAndW5kZWZpbmVkJztcbn1cblxuZnVuY3Rpb24gbmVlZHNTY3JvbGxiYXIocGFyYW1zID0ge30pIHtcbiAgcmV0dXJuIHBhcmFtcy5zY3JvbGxiYXIgJiYgdHlwZW9mIHBhcmFtcy5zY3JvbGxiYXIuZWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG5mdW5jdGlvbiB1bmlxdWVDbGFzc2VzKGNsYXNzTmFtZXMgPSAnJykge1xuICBjb25zdCBjbGFzc2VzID0gY2xhc3NOYW1lcy5zcGxpdCgnICcpLm1hcChjID0+IGMudHJpbSgpKS5maWx0ZXIoYyA9PiAhIWMpO1xuICBjb25zdCB1bmlxdWUgPSBbXTtcbiAgY2xhc3Nlcy5mb3JFYWNoKGMgPT4ge1xuICAgIGlmICh1bmlxdWUuaW5kZXhPZihjKSA8IDApIHVuaXF1ZS5wdXNoKGMpO1xuICB9KTtcbiAgcmV0dXJuIHVuaXF1ZS5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCB7IGlzT2JqZWN0LCBleHRlbmQsIG5lZWRzTmF2aWdhdGlvbiwgbmVlZHNQYWdpbmF0aW9uLCBuZWVkc1Njcm9sbGJhciwgdW5pcXVlQ2xhc3NlcyB9OyIsIi8qIHVuZGVyc2NvcmUgaW4gbmFtZSAtPiB3YXRjaCBmb3IgY2hhbmdlcyAqL1xuY29uc3QgcGFyYW1zTGlzdCA9IFsnbW9kdWxlcycsICdpbml0JywgJ19kaXJlY3Rpb24nLCAndG91Y2hFdmVudHNUYXJnZXQnLCAnaW5pdGlhbFNsaWRlJywgJ19zcGVlZCcsICdjc3NNb2RlJywgJ3VwZGF0ZU9uV2luZG93UmVzaXplJywgJ3Jlc2l6ZU9ic2VydmVyJywgJ25lc3RlZCcsICdmb2N1c2FibGVFbGVtZW50cycsICdfZW5hYmxlZCcsICdfd2lkdGgnLCAnX2hlaWdodCcsICdwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24nLCAndXNlckFnZW50JywgJ3VybCcsICdfZWRnZVN3aXBlRGV0ZWN0aW9uJywgJ19lZGdlU3dpcGVUaHJlc2hvbGQnLCAnX2ZyZWVNb2RlJywgJ19hdXRvSGVpZ2h0JywgJ3NldFdyYXBwZXJTaXplJywgJ3ZpcnR1YWxUcmFuc2xhdGUnLCAnX2VmZmVjdCcsICdicmVha3BvaW50cycsICdfc3BhY2VCZXR3ZWVuJywgJ19zbGlkZXNQZXJWaWV3JywgJ21heEJhY2tmYWNlSGlkZGVuU2xpZGVzJywgJ19ncmlkJywgJ19zbGlkZXNQZXJHcm91cCcsICdfc2xpZGVzUGVyR3JvdXBTa2lwJywgJ19zbGlkZXNQZXJHcm91cEF1dG8nLCAnX2NlbnRlcmVkU2xpZGVzJywgJ19jZW50ZXJlZFNsaWRlc0JvdW5kcycsICdfc2xpZGVzT2Zmc2V0QmVmb3JlJywgJ19zbGlkZXNPZmZzZXRBZnRlcicsICdub3JtYWxpemVTbGlkZUluZGV4JywgJ19jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMnLCAnX3dhdGNoT3ZlcmZsb3cnLCAncm91bmRMZW5ndGhzJywgJ3RvdWNoUmF0aW8nLCAndG91Y2hBbmdsZScsICdzaW11bGF0ZVRvdWNoJywgJ19zaG9ydFN3aXBlcycsICdfbG9uZ1N3aXBlcycsICdsb25nU3dpcGVzUmF0aW8nLCAnbG9uZ1N3aXBlc01zJywgJ19mb2xsb3dGaW5nZXInLCAnYWxsb3dUb3VjaE1vdmUnLCAnX3RocmVzaG9sZCcsICd0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24nLCAndG91Y2hTdGFydFByZXZlbnREZWZhdWx0JywgJ3RvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0JywgJ3RvdWNoUmVsZWFzZU9uRWRnZXMnLCAndW5pcXVlTmF2RWxlbWVudHMnLCAnX3Jlc2lzdGFuY2UnLCAnX3Jlc2lzdGFuY2VSYXRpbycsICdfd2F0Y2hTbGlkZXNQcm9ncmVzcycsICdfZ3JhYkN1cnNvcicsICdwcmV2ZW50Q2xpY2tzJywgJ3ByZXZlbnRDbGlja3NQcm9wYWdhdGlvbicsICdfc2xpZGVUb0NsaWNrZWRTbGlkZScsICdfcHJlbG9hZEltYWdlcycsICd1cGRhdGVPbkltYWdlc1JlYWR5JywgJ19sb29wJywgJ19sb29wQWRkaXRpb25hbFNsaWRlcycsICdfbG9vcGVkU2xpZGVzJywgJ19sb29wZWRTbGlkZXNMaW1pdCcsICdfbG9vcEZpbGxHcm91cFdpdGhCbGFuaycsICdsb29wUHJldmVudHNTbGlkZScsICdfcmV3aW5kJywgJ19hbGxvd1NsaWRlUHJldicsICdfYWxsb3dTbGlkZU5leHQnLCAnX3N3aXBlSGFuZGxlcicsICdfbm9Td2lwaW5nJywgJ25vU3dpcGluZ0NsYXNzJywgJ25vU3dpcGluZ1NlbGVjdG9yJywgJ3Bhc3NpdmVMaXN0ZW5lcnMnLCAnY29udGFpbmVyTW9kaWZpZXJDbGFzcycsICdzbGlkZUNsYXNzJywgJ3NsaWRlQmxhbmtDbGFzcycsICdzbGlkZUFjdGl2ZUNsYXNzJywgJ3NsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MnLCAnc2xpZGVWaXNpYmxlQ2xhc3MnLCAnc2xpZGVEdXBsaWNhdGVDbGFzcycsICdzbGlkZU5leHRDbGFzcycsICdzbGlkZUR1cGxpY2F0ZU5leHRDbGFzcycsICdzbGlkZVByZXZDbGFzcycsICdzbGlkZUR1cGxpY2F0ZVByZXZDbGFzcycsICd3cmFwcGVyQ2xhc3MnLCAncnVuQ2FsbGJhY2tzT25Jbml0JywgJ29ic2VydmVyJywgJ29ic2VydmVQYXJlbnRzJywgJ29ic2VydmVTbGlkZUNoaWxkcmVuJywgLy8gbW9kdWxlc1xuJ2ExMXknLCAnX2F1dG9wbGF5JywgJ19jb250cm9sbGVyJywgJ2NvdmVyZmxvd0VmZmVjdCcsICdjdWJlRWZmZWN0JywgJ2ZhZGVFZmZlY3QnLCAnZmxpcEVmZmVjdCcsICdjcmVhdGl2ZUVmZmVjdCcsICdjYXJkc0VmZmVjdCcsICdoYXNoTmF2aWdhdGlvbicsICdoaXN0b3J5JywgJ2tleWJvYXJkJywgJ2xhenknLCAnbW91c2V3aGVlbCcsICdfbmF2aWdhdGlvbicsICdfcGFnaW5hdGlvbicsICdwYXJhbGxheCcsICdfc2Nyb2xsYmFyJywgJ190aHVtYnMnLCAndmlydHVhbCcsICd6b29tJ107XG5leHBvcnQgeyBwYXJhbXNMaXN0IH07IiwiaW1wb3J0IFN3aXBlciBmcm9tICdzd2lwZXInO1xuZXhwb3J0IGNvbnN0IGNhbGNMb29wZWRTbGlkZXMgPSAoc2xpZGVzLCBzd2lwZXJQYXJhbXMpID0+IHtcbiAgbGV0IHNsaWRlc1BlclZpZXdQYXJhbXMgPSBzd2lwZXJQYXJhbXMuc2xpZGVzUGVyVmlldztcblxuICBpZiAoc3dpcGVyUGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgY29uc3QgYnJlYWtwb2ludCA9IFN3aXBlci5wcm90b3R5cGUuZ2V0QnJlYWtwb2ludChzd2lwZXJQYXJhbXMuYnJlYWtwb2ludHMpO1xuICAgIGNvbnN0IGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBzd2lwZXJQYXJhbXMuYnJlYWtwb2ludHMgPyBzd2lwZXJQYXJhbXMuYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoYnJlYWtwb2ludE9ubHlQYXJhbXMgJiYgYnJlYWtwb2ludE9ubHlQYXJhbXMuc2xpZGVzUGVyVmlldykge1xuICAgICAgc2xpZGVzUGVyVmlld1BhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgfVxuICB9XG5cbiAgbGV0IGxvb3BlZFNsaWRlcyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHN3aXBlclBhcmFtcy5sb29wZWRTbGlkZXMgfHwgc2xpZGVzUGVyVmlld1BhcmFtcywgMTApKTtcbiAgbG9vcGVkU2xpZGVzICs9IHN3aXBlclBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcblxuICBpZiAobG9vcGVkU2xpZGVzID4gc2xpZGVzLmxlbmd0aCAmJiBzd2lwZXJQYXJhbXMubG9vcGVkU2xpZGVzTGltaXQpIHtcbiAgICBsb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGxvb3BlZFNsaWRlcztcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gaXNDaGlsZFN3aXBlclNsaWRlKGNoaWxkKSB7XG4gIHJldHVybiBjaGlsZC50eXBlICYmIGNoaWxkLnR5cGUuZGlzcGxheU5hbWUgJiYgY2hpbGQudHlwZS5kaXNwbGF5TmFtZS5pbmNsdWRlcygnU3dpcGVyU2xpZGUnKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NoaWxkcmVuKGMpIHtcbiAgY29uc3Qgc2xpZGVzID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoYykuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgaWYgKGlzQ2hpbGRTd2lwZXJTbGlkZShjaGlsZCkpIHtcbiAgICAgIHNsaWRlcy5wdXNoKGNoaWxkKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnByb3BzICYmIGNoaWxkLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICBwcm9jZXNzQ2hpbGRyZW4oY2hpbGQucHJvcHMuY2hpbGRyZW4pLmZvckVhY2goc2xpZGUgPT4gc2xpZGVzLnB1c2goc2xpZGUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2xpZGVzO1xufVxuXG5mdW5jdGlvbiBnZXRDaGlsZHJlbihjKSB7XG4gIGNvbnN0IHNsaWRlcyA9IFtdO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICAnY29udGFpbmVyLXN0YXJ0JzogW10sXG4gICAgJ2NvbnRhaW5lci1lbmQnOiBbXSxcbiAgICAnd3JhcHBlci1zdGFydCc6IFtdLFxuICAgICd3cmFwcGVyLWVuZCc6IFtdXG4gIH07XG4gIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoYykuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgaWYgKGlzQ2hpbGRTd2lwZXJTbGlkZShjaGlsZCkpIHtcbiAgICAgIHNsaWRlcy5wdXNoKGNoaWxkKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnByb3BzICYmIGNoaWxkLnByb3BzLnNsb3QgJiYgc2xvdHNbY2hpbGQucHJvcHMuc2xvdF0pIHtcbiAgICAgIHNsb3RzW2NoaWxkLnByb3BzLnNsb3RdLnB1c2goY2hpbGQpO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IGZvdW5kU2xpZGVzID0gcHJvY2Vzc0NoaWxkcmVuKGNoaWxkLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgaWYgKGZvdW5kU2xpZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm91bmRTbGlkZXMuZm9yRWFjaChzbGlkZSA9PiBzbGlkZXMucHVzaChzbGlkZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdHNbJ2NvbnRhaW5lci1lbmQnXS5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2xvdHNbJ2NvbnRhaW5lci1lbmQnXS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHNsaWRlcyxcbiAgICBzbG90c1xuICB9O1xufVxuXG5leHBvcnQgeyBnZXRDaGlsZHJlbiB9OyIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGNhbGxiYWNrLCBkZXBzKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB1c2VFZmZlY3QoY2FsbGJhY2ssIGRlcHMpO1xuICByZXR1cm4gdXNlTGF5b3V0RWZmZWN0KGNhbGxiYWNrLCBkZXBzKTtcbn1cblxuZXhwb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9OyIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5leHBvcnQgY29uc3QgU3dpcGVyU2xpZGVDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgY29uc3QgdXNlU3dpcGVyU2xpZGUgPSAoKSA9PiB7XG4gIHJldHVybiB1c2VDb250ZXh0KFN3aXBlclNsaWRlQ29udGV4dCk7XG59O1xuZXhwb3J0IGNvbnN0IFN3aXBlckNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydCBjb25zdCB1c2VTd2lwZXIgPSAoKSA9PiB7XG4gIHJldHVybiB1c2VDb250ZXh0KFN3aXBlckNvbnRleHQpO1xufTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTd2lwZXJDb3JlIGZyb20gJ3N3aXBlcic7XG5pbXBvcnQgeyBnZXRQYXJhbXMgfSBmcm9tICcuLi9jb21wb25lbnRzLXNoYXJlZC9nZXQtcGFyYW1zLmpzJztcbmltcG9ydCB7IG1vdW50U3dpcGVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy1zaGFyZWQvbW91bnQtc3dpcGVyLmpzJztcbmltcG9ydCB7IG5lZWRzU2Nyb2xsYmFyLCBuZWVkc05hdmlnYXRpb24sIG5lZWRzUGFnaW5hdGlvbiwgdW5pcXVlQ2xhc3NlcywgZXh0ZW5kIH0gZnJvbSAnLi4vY29tcG9uZW50cy1zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgcmVuZGVyTG9vcCwgY2FsY0xvb3BlZFNsaWRlcyB9IGZyb20gJy4vbG9vcC5qcyc7XG5pbXBvcnQgeyBnZXRDaGFuZ2VkUGFyYW1zIH0gZnJvbSAnLi4vY29tcG9uZW50cy1zaGFyZWQvZ2V0LWNoYW5nZWQtcGFyYW1zLmpzJztcbmltcG9ydCB7IGdldENoaWxkcmVuIH0gZnJvbSAnLi9nZXQtY2hpbGRyZW4uanMnO1xuaW1wb3J0IHsgdXBkYXRlU3dpcGVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy1zaGFyZWQvdXBkYXRlLXN3aXBlci5qcyc7XG5pbXBvcnQgeyByZW5kZXJWaXJ0dWFsIH0gZnJvbSAnLi92aXJ0dWFsLmpzJztcbmltcG9ydCB7IHVwZGF0ZU9uVmlydHVhbERhdGEgfSBmcm9tICcuLi9jb21wb25lbnRzLXNoYXJlZC91cGRhdGUtb24tdmlydHVhbC1kYXRhLmpzJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuL3VzZS1pc29tb3JwaGljLWxheW91dC1lZmZlY3QuanMnO1xuaW1wb3J0IHsgU3dpcGVyQ29udGV4dCB9IGZyb20gJy4vY29udGV4dC5qcyc7XG5jb25zdCBTd2lwZXIgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAoX3RlbXAsIGV4dGVybmFsRWxSZWYpIHtcbiAgbGV0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgdGFnOiBUYWcgPSAnZGl2JyxcbiAgICB3cmFwcGVyVGFnOiBXcmFwcGVyVGFnID0gJ2RpdicsXG4gICAgY2hpbGRyZW4sXG4gICAgb25Td2lwZXIsXG4gICAgLi4ucmVzdFxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBldmVudHNBc3NpZ25lZCA9IGZhbHNlO1xuICBjb25zdCBbY29udGFpbmVyQ2xhc3Nlcywgc2V0Q29udGFpbmVyQ2xhc3Nlc10gPSB1c2VTdGF0ZSgnc3dpcGVyJyk7XG4gIGNvbnN0IFt2aXJ0dWFsRGF0YSwgc2V0VmlydHVhbERhdGFdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFticmVha3BvaW50Q2hhbmdlZCwgc2V0QnJlYWtwb2ludENoYW5nZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBpbml0aWFsaXplZFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IHN3aXBlckVsUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBzd2lwZXJSZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IG9sZFBhc3NlZFBhcmFtc1JlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3Qgb2xkU2xpZGVzID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBuZXh0RWxSZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IHByZXZFbFJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgcGFnaW5hdGlvbkVsUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBzY3JvbGxiYXJFbFJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtczogc3dpcGVyUGFyYW1zLFxuICAgIHBhc3NlZFBhcmFtcyxcbiAgICByZXN0OiByZXN0UHJvcHMsXG4gICAgZXZlbnRzXG4gIH0gPSBnZXRQYXJhbXMocmVzdCk7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgc2xvdHNcbiAgfSA9IGdldENoaWxkcmVuKGNoaWxkcmVuKTtcblxuICBjb25zdCBvbkJlZm9yZUJyZWFrcG9pbnQgPSAoKSA9PiB7XG4gICAgc2V0QnJlYWtwb2ludENoYW5nZWQoIWJyZWFrcG9pbnRDaGFuZ2VkKTtcbiAgfTtcblxuICBPYmplY3QuYXNzaWduKHN3aXBlclBhcmFtcy5vbiwge1xuICAgIF9jb250YWluZXJDbGFzc2VzKHN3aXBlciwgY2xhc3Nlcykge1xuICAgICAgc2V0Q29udGFpbmVyQ2xhc3NlcyhjbGFzc2VzKTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgY29uc3QgaW5pdFN3aXBlciA9ICgpID0+IHtcbiAgICAvLyBpbml0IHN3aXBlclxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyUGFyYW1zLm9uLCBldmVudHMpO1xuICAgIGV2ZW50c0Fzc2lnbmVkID0gdHJ1ZTtcbiAgICBzd2lwZXJSZWYuY3VycmVudCA9IG5ldyBTd2lwZXJDb3JlKHN3aXBlclBhcmFtcyk7XG5cbiAgICBzd2lwZXJSZWYuY3VycmVudC5sb29wQ3JlYXRlID0gKCkgPT4ge307XG5cbiAgICBzd2lwZXJSZWYuY3VycmVudC5sb29wRGVzdHJveSA9ICgpID0+IHt9O1xuXG4gICAgaWYgKHN3aXBlclBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXJSZWYuY3VycmVudC5sb29wZWRTbGlkZXMgPSBjYWxjTG9vcGVkU2xpZGVzKHNsaWRlcywgc3dpcGVyUGFyYW1zKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyUmVmLmN1cnJlbnQudmlydHVhbCAmJiBzd2lwZXJSZWYuY3VycmVudC5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXJSZWYuY3VycmVudC52aXJ0dWFsLnNsaWRlcyA9IHNsaWRlcztcbiAgICAgIGNvbnN0IGV4dGVuZFdpdGggPSB7XG4gICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgc2xpZGVzLFxuICAgICAgICByZW5kZXJFeHRlcm5hbDogc2V0VmlydHVhbERhdGEsXG4gICAgICAgIHJlbmRlckV4dGVybmFsVXBkYXRlOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIGV4dGVuZChzd2lwZXJSZWYuY3VycmVudC5wYXJhbXMudmlydHVhbCwgZXh0ZW5kV2l0aCk7XG4gICAgICBleHRlbmQoc3dpcGVyUmVmLmN1cnJlbnQub3JpZ2luYWxQYXJhbXMudmlydHVhbCwgZXh0ZW5kV2l0aCk7XG4gICAgfVxuICB9O1xuXG4gIGlmICghc3dpcGVyRWxSZWYuY3VycmVudCkge1xuICAgIGluaXRTd2lwZXIoKTtcbiAgfSAvLyBMaXN0ZW4gZm9yIGJyZWFrcG9pbnRzIGNoYW5nZVxuXG5cbiAgaWYgKHN3aXBlclJlZi5jdXJyZW50KSB7XG4gICAgc3dpcGVyUmVmLmN1cnJlbnQub24oJ19iZWZvcmVCcmVha3BvaW50Jywgb25CZWZvcmVCcmVha3BvaW50KTtcbiAgfVxuXG4gIGNvbnN0IGF0dGFjaEV2ZW50cyA9ICgpID0+IHtcbiAgICBpZiAoZXZlbnRzQXNzaWduZWQgfHwgIWV2ZW50cyB8fCAhc3dpcGVyUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhldmVudHMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlclJlZi5jdXJyZW50Lm9uKGV2ZW50TmFtZSwgZXZlbnRzW2V2ZW50TmFtZV0pO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGRldGFjaEV2ZW50cyA9ICgpID0+IHtcbiAgICBpZiAoIWV2ZW50cyB8fCAhc3dpcGVyUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhldmVudHMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlclJlZi5jdXJyZW50Lm9mZihldmVudE5hbWUsIGV2ZW50c1tldmVudE5hbWVdKTtcbiAgICB9KTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyUmVmLmN1cnJlbnQpIHN3aXBlclJlZi5jdXJyZW50Lm9mZignX2JlZm9yZUJyZWFrcG9pbnQnLCBvbkJlZm9yZUJyZWFrcG9pbnQpO1xuICAgIH07XG4gIH0pOyAvLyBzZXQgaW5pdGlhbGl6ZWQgZmxhZ1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpbml0aWFsaXplZFJlZi5jdXJyZW50ICYmIHN3aXBlclJlZi5jdXJyZW50KSB7XG4gICAgICBzd2lwZXJSZWYuY3VycmVudC5lbWl0U2xpZGVzQ2xhc3NlcygpO1xuICAgICAgaW5pdGlhbGl6ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfVxuICB9KTsgLy8gbW91bnQgc3dpcGVyXG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGV4dGVybmFsRWxSZWYpIHtcbiAgICAgIGV4dGVybmFsRWxSZWYuY3VycmVudCA9IHN3aXBlckVsUmVmLmN1cnJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXJFbFJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICBpZiAoc3dpcGVyUmVmLmN1cnJlbnQuZGVzdHJveWVkKSB7XG4gICAgICBpbml0U3dpcGVyKCk7XG4gICAgfVxuXG4gICAgbW91bnRTd2lwZXIoe1xuICAgICAgZWw6IHN3aXBlckVsUmVmLmN1cnJlbnQsXG4gICAgICBuZXh0RWw6IG5leHRFbFJlZi5jdXJyZW50LFxuICAgICAgcHJldkVsOiBwcmV2RWxSZWYuY3VycmVudCxcbiAgICAgIHBhZ2luYXRpb25FbDogcGFnaW5hdGlvbkVsUmVmLmN1cnJlbnQsXG4gICAgICBzY3JvbGxiYXJFbDogc2Nyb2xsYmFyRWxSZWYuY3VycmVudCxcbiAgICAgIHN3aXBlcjogc3dpcGVyUmVmLmN1cnJlbnRcbiAgICB9LCBzd2lwZXJQYXJhbXMpO1xuICAgIGlmIChvblN3aXBlcikgb25Td2lwZXIoc3dpcGVyUmVmLmN1cnJlbnQpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyUmVmLmN1cnJlbnQgJiYgIXN3aXBlclJlZi5jdXJyZW50LmRlc3Ryb3llZCkge1xuICAgICAgICBzd2lwZXJSZWYuY3VycmVudC5kZXN0cm95KHRydWUsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7IC8vIHdhdGNoIGZvciBwYXJhbXMgY2hhbmdlXG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYXR0YWNoRXZlbnRzKCk7XG4gICAgY29uc3QgY2hhbmdlZFBhcmFtcyA9IGdldENoYW5nZWRQYXJhbXMocGFzc2VkUGFyYW1zLCBvbGRQYXNzZWRQYXJhbXNSZWYuY3VycmVudCwgc2xpZGVzLCBvbGRTbGlkZXMuY3VycmVudCwgYyA9PiBjLmtleSk7XG4gICAgb2xkUGFzc2VkUGFyYW1zUmVmLmN1cnJlbnQgPSBwYXNzZWRQYXJhbXM7XG4gICAgb2xkU2xpZGVzLmN1cnJlbnQgPSBzbGlkZXM7XG5cbiAgICBpZiAoY2hhbmdlZFBhcmFtcy5sZW5ndGggJiYgc3dpcGVyUmVmLmN1cnJlbnQgJiYgIXN3aXBlclJlZi5jdXJyZW50LmRlc3Ryb3llZCkge1xuICAgICAgdXBkYXRlU3dpcGVyKHtcbiAgICAgICAgc3dpcGVyOiBzd2lwZXJSZWYuY3VycmVudCxcbiAgICAgICAgc2xpZGVzLFxuICAgICAgICBwYXNzZWRQYXJhbXMsXG4gICAgICAgIGNoYW5nZWRQYXJhbXMsXG4gICAgICAgIG5leHRFbDogbmV4dEVsUmVmLmN1cnJlbnQsXG4gICAgICAgIHByZXZFbDogcHJldkVsUmVmLmN1cnJlbnQsXG4gICAgICAgIHNjcm9sbGJhckVsOiBzY3JvbGxiYXJFbFJlZi5jdXJyZW50LFxuICAgICAgICBwYWdpbmF0aW9uRWw6IHBhZ2luYXRpb25FbFJlZi5jdXJyZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGV0YWNoRXZlbnRzKCk7XG4gICAgfTtcbiAgfSk7IC8vIHVwZGF0ZSBvbiB2aXJ0dWFsIHVwZGF0ZVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIHVwZGF0ZU9uVmlydHVhbERhdGEoc3dpcGVyUmVmLmN1cnJlbnQpO1xuICB9LCBbdmlydHVhbERhdGFdKTsgLy8gYnlwYXNzIHN3aXBlciBpbnN0YW5jZSB0byBzbGlkZXNcblxuICBmdW5jdGlvbiByZW5kZXJTbGlkZXMoKSB7XG4gICAgaWYgKHN3aXBlclBhcmFtcy52aXJ0dWFsKSB7XG4gICAgICByZXR1cm4gcmVuZGVyVmlydHVhbChzd2lwZXJSZWYuY3VycmVudCwgc2xpZGVzLCB2aXJ0dWFsRGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXJQYXJhbXMubG9vcCB8fCBzd2lwZXJSZWYuY3VycmVudCAmJiBzd2lwZXJSZWYuY3VycmVudC5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBzbGlkZXMubWFwKGNoaWxkID0+IHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICBzd2lwZXI6IHN3aXBlclJlZi5jdXJyZW50XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlckxvb3Aoc3dpcGVyUmVmLmN1cnJlbnQsIHNsaWRlcywgc3dpcGVyUGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWcsIF9leHRlbmRzKHtcbiAgICByZWY6IHN3aXBlckVsUmVmLFxuICAgIGNsYXNzTmFtZTogdW5pcXVlQ2xhc3NlcyhgJHtjb250YWluZXJDbGFzc2VzfSR7Y2xhc3NOYW1lID8gYCAke2NsYXNzTmFtZX1gIDogJyd9YClcbiAgfSwgcmVzdFByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3dpcGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzd2lwZXJSZWYuY3VycmVudFxuICB9LCBzbG90c1snY29udGFpbmVyLXN0YXJ0J10sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZXJUYWcsIHtcbiAgICBjbGFzc05hbWU6IFwic3dpcGVyLXdyYXBwZXJcIlxuICB9LCBzbG90c1snd3JhcHBlci1zdGFydCddLCByZW5kZXJTbGlkZXMoKSwgc2xvdHNbJ3dyYXBwZXItZW5kJ10pLCBuZWVkc05hdmlnYXRpb24oc3dpcGVyUGFyYW1zKSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHJlZjogcHJldkVsUmVmLFxuICAgIGNsYXNzTmFtZTogXCJzd2lwZXItYnV0dG9uLXByZXZcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHJlZjogbmV4dEVsUmVmLFxuICAgIGNsYXNzTmFtZTogXCJzd2lwZXItYnV0dG9uLW5leHRcIlxuICB9KSksIG5lZWRzU2Nyb2xsYmFyKHN3aXBlclBhcmFtcykgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHJlZjogc2Nyb2xsYmFyRWxSZWYsXG4gICAgY2xhc3NOYW1lOiBcInN3aXBlci1zY3JvbGxiYXJcIlxuICB9KSwgbmVlZHNQYWdpbmF0aW9uKHN3aXBlclBhcmFtcykgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHJlZjogcGFnaW5hdGlvbkVsUmVmLFxuICAgIGNsYXNzTmFtZTogXCJzd2lwZXItcGFnaW5hdGlvblwiXG4gIH0pLCBzbG90c1snY29udGFpbmVyLWVuZCddKSk7XG59KTtcblN3aXBlci5kaXNwbGF5TmFtZSA9ICdTd2lwZXInO1xuZXhwb3J0IHsgU3dpcGVyIH07IiwiaW1wb3J0IFN3aXBlciBmcm9tICdzd2lwZXInO1xuaW1wb3J0IHsgaXNPYmplY3QsIGV4dGVuZCB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgcGFyYW1zTGlzdCB9IGZyb20gJy4vcGFyYW1zLWxpc3QuanMnO1xuXG5mdW5jdGlvbiBnZXRQYXJhbXMob2JqID0ge30sIHNwbGl0RXZlbnRzID0gdHJ1ZSkge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgb246IHt9XG4gIH07XG4gIGNvbnN0IGV2ZW50cyA9IHt9O1xuICBjb25zdCBwYXNzZWRQYXJhbXMgPSB7fTtcbiAgZXh0ZW5kKHBhcmFtcywgU3dpcGVyLmRlZmF1bHRzKTtcbiAgZXh0ZW5kKHBhcmFtcywgU3dpcGVyLmV4dGVuZGVkRGVmYXVsdHMpO1xuICBwYXJhbXMuX2VtaXRDbGFzc2VzID0gdHJ1ZTtcbiAgcGFyYW1zLmluaXQgPSBmYWxzZTtcbiAgY29uc3QgcmVzdCA9IHt9O1xuICBjb25zdCBhbGxvd2VkUGFyYW1zID0gcGFyYW1zTGlzdC5tYXAoa2V5ID0+IGtleS5yZXBsYWNlKC9fLywgJycpKTtcbiAgY29uc3QgcGxhaW5PYmogPSBPYmplY3QuYXNzaWduKHt9LCBvYmopO1xuICBPYmplY3Qua2V5cyhwbGFpbk9iaikuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG5cbiAgICBpZiAoYWxsb3dlZFBhcmFtcy5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialtrZXldKSkge1xuICAgICAgICBwYXJhbXNba2V5XSA9IHt9O1xuICAgICAgICBwYXNzZWRQYXJhbXNba2V5XSA9IHt9O1xuICAgICAgICBleHRlbmQocGFyYW1zW2tleV0sIG9ialtrZXldKTtcbiAgICAgICAgZXh0ZW5kKHBhc3NlZFBhcmFtc1trZXldLCBvYmpba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXNba2V5XSA9IG9ialtrZXldO1xuICAgICAgICBwYXNzZWRQYXJhbXNba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5LnNlYXJjaCgvb25bQS1aXS8pID09PSAwICYmIHR5cGVvZiBvYmpba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHNwbGl0RXZlbnRzKSB7XG4gICAgICAgIGV2ZW50c1tgJHtrZXlbMl0udG9Mb3dlckNhc2UoKX0ke2tleS5zdWJzdHIoMyl9YF0gPSBvYmpba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5vbltgJHtrZXlbMl0udG9Mb3dlckNhc2UoKX0ke2tleS5zdWJzdHIoMyl9YF0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdFtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9KTtcbiAgWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChwYXJhbXNba2V5XSA9PT0gdHJ1ZSkgcGFyYW1zW2tleV0gPSB7fTtcbiAgICBpZiAocGFyYW1zW2tleV0gPT09IGZhbHNlKSBkZWxldGUgcGFyYW1zW2tleV07XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXNzZWRQYXJhbXMsXG4gICAgcmVzdCxcbiAgICBldmVudHNcbiAgfTtcbn1cblxuZXhwb3J0IHsgZ2V0UGFyYW1zIH07IiwiaW1wb3J0IHsgbmVlZHNOYXZpZ2F0aW9uLCBuZWVkc1BhZ2luYXRpb24sIG5lZWRzU2Nyb2xsYmFyIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbmZ1bmN0aW9uIG1vdW50U3dpcGVyKHtcbiAgZWwsXG4gIG5leHRFbCxcbiAgcHJldkVsLFxuICBwYWdpbmF0aW9uRWwsXG4gIHNjcm9sbGJhckVsLFxuICBzd2lwZXJcbn0sIHN3aXBlclBhcmFtcykge1xuICBpZiAobmVlZHNOYXZpZ2F0aW9uKHN3aXBlclBhcmFtcykgJiYgbmV4dEVsICYmIHByZXZFbCkge1xuICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5uZXh0RWwgPSBuZXh0RWw7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLm5hdmlnYXRpb24ubmV4dEVsID0gbmV4dEVsO1xuICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5wcmV2RWwgPSBwcmV2RWw7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLm5hdmlnYXRpb24ucHJldkVsID0gcHJldkVsO1xuICB9XG5cbiAgaWYgKG5lZWRzUGFnaW5hdGlvbihzd2lwZXJQYXJhbXMpICYmIHBhZ2luYXRpb25FbCkge1xuICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCA9IHBhZ2luYXRpb25FbDtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMucGFnaW5hdGlvbi5lbCA9IHBhZ2luYXRpb25FbDtcbiAgfVxuXG4gIGlmIChuZWVkc1Njcm9sbGJhcihzd2lwZXJQYXJhbXMpICYmIHNjcm9sbGJhckVsKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgPSBzY3JvbGxiYXJFbDtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMuc2Nyb2xsYmFyLmVsID0gc2Nyb2xsYmFyRWw7XG4gIH1cblxuICBzd2lwZXIuaW5pdChlbCk7XG59XG5cbmV4cG9ydCB7IG1vdW50U3dpcGVyIH07IiwiaW1wb3J0IHsgcGFyYW1zTGlzdCB9IGZyb20gJy4vcGFyYW1zLWxpc3QuanMnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuL3V0aWxzLmpzJztcblxuZnVuY3Rpb24gZ2V0Q2hhbmdlZFBhcmFtcyhzd2lwZXJQYXJhbXMsIG9sZFBhcmFtcywgY2hpbGRyZW4sIG9sZENoaWxkcmVuLCBnZXRLZXkpIHtcbiAgY29uc3Qga2V5cyA9IFtdO1xuICBpZiAoIW9sZFBhcmFtcykgcmV0dXJuIGtleXM7XG5cbiAgY29uc3QgYWRkS2V5ID0ga2V5ID0+IHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgPCAwKSBrZXlzLnB1c2goa2V5KTtcbiAgfTtcblxuICBpZiAoY2hpbGRyZW4gJiYgb2xkQ2hpbGRyZW4pIHtcbiAgICBjb25zdCBvbGRDaGlsZHJlbktleXMgPSBvbGRDaGlsZHJlbi5tYXAoZ2V0S2V5KTtcbiAgICBjb25zdCBjaGlsZHJlbktleXMgPSBjaGlsZHJlbi5tYXAoZ2V0S2V5KTtcbiAgICBpZiAob2xkQ2hpbGRyZW5LZXlzLmpvaW4oJycpICE9PSBjaGlsZHJlbktleXMuam9pbignJykpIGFkZEtleSgnY2hpbGRyZW4nKTtcbiAgICBpZiAob2xkQ2hpbGRyZW4ubGVuZ3RoICE9PSBjaGlsZHJlbi5sZW5ndGgpIGFkZEtleSgnY2hpbGRyZW4nKTtcbiAgfVxuXG4gIGNvbnN0IHdhdGNoUGFyYW1zID0gcGFyYW1zTGlzdC5maWx0ZXIoa2V5ID0+IGtleVswXSA9PT0gJ18nKS5tYXAoa2V5ID0+IGtleS5yZXBsYWNlKC9fLywgJycpKTtcbiAgd2F0Y2hQYXJhbXMuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChrZXkgaW4gc3dpcGVyUGFyYW1zICYmIGtleSBpbiBvbGRQYXJhbXMpIHtcbiAgICAgIGlmIChpc09iamVjdChzd2lwZXJQYXJhbXNba2V5XSkgJiYgaXNPYmplY3Qob2xkUGFyYW1zW2tleV0pKSB7XG4gICAgICAgIGNvbnN0IG5ld0tleXMgPSBPYmplY3Qua2V5cyhzd2lwZXJQYXJhbXNba2V5XSk7XG4gICAgICAgIGNvbnN0IG9sZEtleXMgPSBPYmplY3Qua2V5cyhvbGRQYXJhbXNba2V5XSk7XG5cbiAgICAgICAgaWYgKG5ld0tleXMubGVuZ3RoICE9PSBvbGRLZXlzLmxlbmd0aCkge1xuICAgICAgICAgIGFkZEtleShrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0tleXMuZm9yRWFjaChuZXdLZXkgPT4ge1xuICAgICAgICAgICAgaWYgKHN3aXBlclBhcmFtc1trZXldW25ld0tleV0gIT09IG9sZFBhcmFtc1trZXldW25ld0tleV0pIHtcbiAgICAgICAgICAgICAgYWRkS2V5KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb2xkS2V5cy5mb3JFYWNoKG9sZEtleSA9PiB7XG4gICAgICAgICAgICBpZiAoc3dpcGVyUGFyYW1zW2tleV1bb2xkS2V5XSAhPT0gb2xkUGFyYW1zW2tleV1bb2xkS2V5XSkgYWRkS2V5KGtleSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyUGFyYW1zW2tleV0gIT09IG9sZFBhcmFtc1trZXldKSB7XG4gICAgICAgIGFkZEtleShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5leHBvcnQgeyBnZXRDaGFuZ2VkUGFyYW1zIH07IiwiaW1wb3J0IHsgaXNPYmplY3QsIGV4dGVuZCB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG5mdW5jdGlvbiB1cGRhdGVTd2lwZXIoe1xuICBzd2lwZXIsXG4gIHNsaWRlcyxcbiAgcGFzc2VkUGFyYW1zLFxuICBjaGFuZ2VkUGFyYW1zLFxuICBuZXh0RWwsXG4gIHByZXZFbCxcbiAgc2Nyb2xsYmFyRWwsXG4gIHBhZ2luYXRpb25FbFxufSkge1xuICBjb25zdCB1cGRhdGVQYXJhbXMgPSBjaGFuZ2VkUGFyYW1zLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAnY2hpbGRyZW4nICYmIGtleSAhPT0gJ2RpcmVjdGlvbicpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zOiBjdXJyZW50UGFyYW1zLFxuICAgIHBhZ2luYXRpb24sXG4gICAgbmF2aWdhdGlvbixcbiAgICBzY3JvbGxiYXIsXG4gICAgdmlydHVhbCxcbiAgICB0aHVtYnNcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IG5lZWRUaHVtYnNJbml0O1xuICBsZXQgbmVlZENvbnRyb2xsZXJJbml0O1xuICBsZXQgbmVlZFBhZ2luYXRpb25Jbml0O1xuICBsZXQgbmVlZFNjcm9sbGJhckluaXQ7XG4gIGxldCBuZWVkTmF2aWdhdGlvbkluaXQ7XG5cbiAgaWYgKGNoYW5nZWRQYXJhbXMuaW5jbHVkZXMoJ3RodW1icycpICYmIHBhc3NlZFBhcmFtcy50aHVtYnMgJiYgcGFzc2VkUGFyYW1zLnRodW1icy5zd2lwZXIgJiYgY3VycmVudFBhcmFtcy50aHVtYnMgJiYgIWN1cnJlbnRQYXJhbXMudGh1bWJzLnN3aXBlcikge1xuICAgIG5lZWRUaHVtYnNJbml0ID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjaGFuZ2VkUGFyYW1zLmluY2x1ZGVzKCdjb250cm9sbGVyJykgJiYgcGFzc2VkUGFyYW1zLmNvbnRyb2xsZXIgJiYgcGFzc2VkUGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCAmJiBjdXJyZW50UGFyYW1zLmNvbnRyb2xsZXIgJiYgIWN1cnJlbnRQYXJhbXMuY29udHJvbGxlci5jb250cm9sKSB7XG4gICAgbmVlZENvbnRyb2xsZXJJbml0ID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjaGFuZ2VkUGFyYW1zLmluY2x1ZGVzKCdwYWdpbmF0aW9uJykgJiYgcGFzc2VkUGFyYW1zLnBhZ2luYXRpb24gJiYgKHBhc3NlZFBhcmFtcy5wYWdpbmF0aW9uLmVsIHx8IHBhZ2luYXRpb25FbCkgJiYgKGN1cnJlbnRQYXJhbXMucGFnaW5hdGlvbiB8fCBjdXJyZW50UGFyYW1zLnBhZ2luYXRpb24gPT09IGZhbHNlKSAmJiBwYWdpbmF0aW9uICYmICFwYWdpbmF0aW9uLmVsKSB7XG4gICAgbmVlZFBhZ2luYXRpb25Jbml0ID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjaGFuZ2VkUGFyYW1zLmluY2x1ZGVzKCdzY3JvbGxiYXInKSAmJiBwYXNzZWRQYXJhbXMuc2Nyb2xsYmFyICYmIChwYXNzZWRQYXJhbXMuc2Nyb2xsYmFyLmVsIHx8IHNjcm9sbGJhckVsKSAmJiAoY3VycmVudFBhcmFtcy5zY3JvbGxiYXIgfHwgY3VycmVudFBhcmFtcy5zY3JvbGxiYXIgPT09IGZhbHNlKSAmJiBzY3JvbGxiYXIgJiYgIXNjcm9sbGJhci5lbCkge1xuICAgIG5lZWRTY3JvbGxiYXJJbml0ID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjaGFuZ2VkUGFyYW1zLmluY2x1ZGVzKCduYXZpZ2F0aW9uJykgJiYgcGFzc2VkUGFyYW1zLm5hdmlnYXRpb24gJiYgKHBhc3NlZFBhcmFtcy5uYXZpZ2F0aW9uLnByZXZFbCB8fCBwcmV2RWwpICYmIChwYXNzZWRQYXJhbXMubmF2aWdhdGlvbi5uZXh0RWwgfHwgbmV4dEVsKSAmJiAoY3VycmVudFBhcmFtcy5uYXZpZ2F0aW9uIHx8IGN1cnJlbnRQYXJhbXMubmF2aWdhdGlvbiA9PT0gZmFsc2UpICYmIG5hdmlnYXRpb24gJiYgIW5hdmlnYXRpb24ucHJldkVsICYmICFuYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgIG5lZWROYXZpZ2F0aW9uSW5pdCA9IHRydWU7XG4gIH1cblxuICBjb25zdCBkZXN0cm95TW9kdWxlID0gbW9kID0+IHtcbiAgICBpZiAoIXN3aXBlclttb2RdKSByZXR1cm47XG4gICAgc3dpcGVyW21vZF0uZGVzdHJveSgpO1xuXG4gICAgaWYgKG1vZCA9PT0gJ25hdmlnYXRpb24nKSB7XG4gICAgICBjdXJyZW50UGFyYW1zW21vZF0ucHJldkVsID0gdW5kZWZpbmVkO1xuICAgICAgY3VycmVudFBhcmFtc1ttb2RdLm5leHRFbCA9IHVuZGVmaW5lZDtcbiAgICAgIHN3aXBlclttb2RdLnByZXZFbCA9IHVuZGVmaW5lZDtcbiAgICAgIHN3aXBlclttb2RdLm5leHRFbCA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudFBhcmFtc1ttb2RdLmVsID0gdW5kZWZpbmVkO1xuICAgICAgc3dpcGVyW21vZF0uZWwgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIHVwZGF0ZVBhcmFtcy5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKGlzT2JqZWN0KGN1cnJlbnRQYXJhbXNba2V5XSkgJiYgaXNPYmplY3QocGFzc2VkUGFyYW1zW2tleV0pKSB7XG4gICAgICBleHRlbmQoY3VycmVudFBhcmFtc1trZXldLCBwYXNzZWRQYXJhbXNba2V5XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gcGFzc2VkUGFyYW1zW2tleV07XG5cbiAgICAgIGlmICgobmV3VmFsdWUgPT09IHRydWUgfHwgbmV3VmFsdWUgPT09IGZhbHNlKSAmJiAoa2V5ID09PSAnbmF2aWdhdGlvbicgfHwga2V5ID09PSAncGFnaW5hdGlvbicgfHwga2V5ID09PSAnc2Nyb2xsYmFyJykpIHtcbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgIGRlc3Ryb3lNb2R1bGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudFBhcmFtc1trZXldID0gcGFzc2VkUGFyYW1zW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAodXBkYXRlUGFyYW1zLmluY2x1ZGVzKCdjb250cm9sbGVyJykgJiYgIW5lZWRDb250cm9sbGVySW5pdCAmJiBzd2lwZXIuY29udHJvbGxlciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sICYmIGN1cnJlbnRQYXJhbXMuY29udHJvbGxlciAmJiBjdXJyZW50UGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCkge1xuICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgPSBjdXJyZW50UGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgfVxuXG4gIGlmIChjaGFuZ2VkUGFyYW1zLmluY2x1ZGVzKCdjaGlsZHJlbicpICYmIHNsaWRlcyAmJiB2aXJ0dWFsICYmIGN1cnJlbnRQYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgdmlydHVhbC5zbGlkZXMgPSBzbGlkZXM7XG4gICAgdmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gIH0gZWxzZSBpZiAoY2hhbmdlZFBhcmFtcy5pbmNsdWRlcygnY2hpbGRyZW4nKSAmJiBzd2lwZXIubGF6eSAmJiBzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgfVxuXG4gIGlmIChuZWVkVGh1bWJzSW5pdCkge1xuICAgIGNvbnN0IGluaXRpYWxpemVkID0gdGh1bWJzLmluaXQoKTtcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHRodW1icy51cGRhdGUodHJ1ZSk7XG4gIH1cblxuICBpZiAobmVlZENvbnRyb2xsZXJJbml0KSB7XG4gICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCA9IGN1cnJlbnRQYXJhbXMuY29udHJvbGxlci5jb250cm9sO1xuICB9XG5cbiAgaWYgKG5lZWRQYWdpbmF0aW9uSW5pdCkge1xuICAgIGlmIChwYWdpbmF0aW9uRWwpIGN1cnJlbnRQYXJhbXMucGFnaW5hdGlvbi5lbCA9IHBhZ2luYXRpb25FbDtcbiAgICBwYWdpbmF0aW9uLmluaXQoKTtcbiAgICBwYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgIHBhZ2luYXRpb24udXBkYXRlKCk7XG4gIH1cblxuICBpZiAobmVlZFNjcm9sbGJhckluaXQpIHtcbiAgICBpZiAoc2Nyb2xsYmFyRWwpIGN1cnJlbnRQYXJhbXMuc2Nyb2xsYmFyLmVsID0gc2Nyb2xsYmFyRWw7XG4gICAgc2Nyb2xsYmFyLmluaXQoKTtcbiAgICBzY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgIHNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKTtcbiAgfVxuXG4gIGlmIChuZWVkTmF2aWdhdGlvbkluaXQpIHtcbiAgICBpZiAobmV4dEVsKSBjdXJyZW50UGFyYW1zLm5hdmlnYXRpb24ubmV4dEVsID0gbmV4dEVsO1xuICAgIGlmIChwcmV2RWwpIGN1cnJlbnRQYXJhbXMubmF2aWdhdGlvbi5wcmV2RWwgPSBwcmV2RWw7XG4gICAgbmF2aWdhdGlvbi5pbml0KCk7XG4gICAgbmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgfVxuXG4gIGlmIChjaGFuZ2VkUGFyYW1zLmluY2x1ZGVzKCdhbGxvd1NsaWRlTmV4dCcpKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gcGFzc2VkUGFyYW1zLmFsbG93U2xpZGVOZXh0O1xuICB9XG5cbiAgaWYgKGNoYW5nZWRQYXJhbXMuaW5jbHVkZXMoJ2FsbG93U2xpZGVQcmV2JykpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBwYXNzZWRQYXJhbXMuYWxsb3dTbGlkZVByZXY7XG4gIH1cblxuICBpZiAoY2hhbmdlZFBhcmFtcy5pbmNsdWRlcygnZGlyZWN0aW9uJykpIHtcbiAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKHBhc3NlZFBhcmFtcy5kaXJlY3Rpb24sIGZhbHNlKTtcbiAgfVxuXG4gIHN3aXBlci51cGRhdGUoKTtcbn1cblxuZXhwb3J0IHsgdXBkYXRlU3dpcGVyIH07IiwiZXhwb3J0IGNvbnN0IHVwZGF0ZU9uVmlydHVhbERhdGEgPSBzd2lwZXIgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zLnZpcnR1YWwgfHwgc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmICFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gIGlmIChzd2lwZXIubGF6eSAmJiBzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIucGFyYWxsYXggJiYgc3dpcGVyLnBhcmFtcy5wYXJhbGxheCAmJiBzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHtcbiAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XG4gIH1cbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gcmVuZGVyVmlydHVhbChzd2lwZXIsIHNsaWRlcywgdmlydHVhbERhdGEpIHtcbiAgaWYgKCF2aXJ0dWFsRGF0YSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IHN0eWxlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8ge1xuICAgIFtzd2lwZXIucnRsVHJhbnNsYXRlID8gJ3JpZ2h0JyA6ICdsZWZ0J106IGAke3ZpcnR1YWxEYXRhLm9mZnNldH1weGBcbiAgfSA6IHtcbiAgICB0b3A6IGAke3ZpcnR1YWxEYXRhLm9mZnNldH1weGBcbiAgfTtcbiAgcmV0dXJuIHNsaWRlcy5maWx0ZXIoKGNoaWxkLCBpbmRleCkgPT4gaW5kZXggPj0gdmlydHVhbERhdGEuZnJvbSAmJiBpbmRleCA8PSB2aXJ0dWFsRGF0YS50bykubWFwKGNoaWxkID0+IHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgc3dpcGVyLFxuICAgICAgc3R5bGVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IHJlbmRlclZpcnR1YWwgfTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2FsY0xvb3BlZFNsaWRlcyB9IGZyb20gJy4uL3NoYXJlZC9jYWxjLWxvb3BlZC1zbGlkZXMuanMnO1xuXG5mdW5jdGlvbiByZW5kZXJMb29wKHN3aXBlciwgc2xpZGVzLCBzd2lwZXJQYXJhbXMpIHtcbiAgY29uc3QgbW9kaWZpZWRTbGlkZXMgPSBzbGlkZXMubWFwKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgc3dpcGVyLFxuICAgICAgJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JzogaW5kZXhcbiAgICB9KTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZHVwbGljYXRlU2xpZGUoY2hpbGQsIGluZGV4LCBwb3NpdGlvbikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBrZXk6IGAke2NoaWxkLmtleX0tZHVwbGljYXRlLSR7aW5kZXh9LSR7cG9zaXRpb259YCxcbiAgICAgIGNsYXNzTmFtZTogYCR7Y2hpbGQucHJvcHMuY2xhc3NOYW1lIHx8ICcnfSAke3N3aXBlclBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfWBcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChzd2lwZXJQYXJhbXMubG9vcEZpbGxHcm91cFdpdGhCbGFuaykge1xuICAgIGNvbnN0IGJsYW5rU2xpZGVzTnVtID0gc3dpcGVyUGFyYW1zLnNsaWRlc1Blckdyb3VwIC0gbW9kaWZpZWRTbGlkZXMubGVuZ3RoICUgc3dpcGVyUGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgaWYgKGJsYW5rU2xpZGVzTnVtICE9PSBzd2lwZXJQYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxhbmtTbGlkZXNOdW07IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBibGFua1NsaWRlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogYCR7c3dpcGVyUGFyYW1zLnNsaWRlQ2xhc3N9ICR7c3dpcGVyUGFyYW1zLnNsaWRlQmxhbmtDbGFzc31gXG4gICAgICAgIH0pO1xuICAgICAgICBtb2RpZmllZFNsaWRlcy5wdXNoKGJsYW5rU2xpZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzd2lwZXJQYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFzd2lwZXJQYXJhbXMubG9vcGVkU2xpZGVzKSB7XG4gICAgc3dpcGVyUGFyYW1zLmxvb3BlZFNsaWRlcyA9IG1vZGlmaWVkU2xpZGVzLmxlbmd0aDtcbiAgfVxuXG4gIGNvbnN0IGxvb3BlZFNsaWRlcyA9IGNhbGNMb29wZWRTbGlkZXMobW9kaWZpZWRTbGlkZXMsIHN3aXBlclBhcmFtcyk7XG4gIGNvbnN0IHByZXBlbmRTbGlkZXMgPSBbXTtcbiAgY29uc3QgYXBwZW5kU2xpZGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wZWRTbGlkZXM7IGkgKz0gMSkge1xuICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIG1vZGlmaWVkU2xpZGVzLmxlbmd0aCkgKiBtb2RpZmllZFNsaWRlcy5sZW5ndGg7XG4gICAgYXBwZW5kU2xpZGVzLnB1c2goZHVwbGljYXRlU2xpZGUobW9kaWZpZWRTbGlkZXNbaW5kZXhdLCBpLCAnYXBwZW5kJykpO1xuICAgIHByZXBlbmRTbGlkZXMudW5zaGlmdChkdXBsaWNhdGVTbGlkZShtb2RpZmllZFNsaWRlc1ttb2RpZmllZFNsaWRlcy5sZW5ndGggLSBpbmRleCAtIDFdLCBpLCAncHJlcGVuZCcpKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIpIHtcbiAgICBzd2lwZXIubG9vcGVkU2xpZGVzID0gbG9vcGVkU2xpZGVzO1xuICB9XG5cbiAgcmV0dXJuIFsuLi5wcmVwZW5kU2xpZGVzLCAuLi5tb2RpZmllZFNsaWRlcywgLi4uYXBwZW5kU2xpZGVzXTtcbn1cblxuZXhwb3J0IHsgY2FsY0xvb3BlZFNsaWRlcywgcmVuZGVyTG9vcCB9OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSwgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVuaXF1ZUNsYXNzZXMgfSBmcm9tICcuLi9jb21wb25lbnRzLXNoYXJlZC91dGlscy5qcyc7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi91c2UtaXNvbW9ycGhpYy1sYXlvdXQtZWZmZWN0LmpzJztcbmltcG9ydCB7IFN3aXBlclNsaWRlQ29udGV4dCB9IGZyb20gJy4vY29udGV4dC5qcyc7XG5jb25zdCBTd2lwZXJTbGlkZSA9IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIChfdGVtcCwgZXh0ZXJuYWxSZWYpIHtcbiAgbGV0IHtcbiAgICB0YWc6IFRhZyA9ICdkaXYnLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSA9ICcnLFxuICAgIHN3aXBlcixcbiAgICB6b29tLFxuICAgIHZpcnR1YWxJbmRleCxcbiAgICAuLi5yZXN0XG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc2xpZGVFbFJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgW3NsaWRlQ2xhc3Nlcywgc2V0U2xpZGVDbGFzc2VzXSA9IHVzZVN0YXRlKCdzd2lwZXItc2xpZGUnKTtcblxuICBmdW5jdGlvbiB1cGRhdGVDbGFzc2VzKF9zLCBlbCwgY2xhc3NOYW1lcykge1xuICAgIGlmIChlbCA9PT0gc2xpZGVFbFJlZi5jdXJyZW50KSB7XG4gICAgICBzZXRTbGlkZUNsYXNzZXMoY2xhc3NOYW1lcyk7XG4gICAgfVxuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGV4dGVybmFsUmVmKSB7XG4gICAgICBleHRlcm5hbFJlZi5jdXJyZW50ID0gc2xpZGVFbFJlZi5jdXJyZW50O1xuICAgIH1cblxuICAgIGlmICghc2xpZGVFbFJlZi5jdXJyZW50IHx8ICFzd2lwZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgaWYgKHNsaWRlQ2xhc3NlcyAhPT0gJ3N3aXBlci1zbGlkZScpIHtcbiAgICAgICAgc2V0U2xpZGVDbGFzc2VzKCdzd2lwZXItc2xpZGUnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXBlci5vbignX3NsaWRlQ2xhc3MnLCB1cGRhdGVDbGFzc2VzKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci5vZmYoJ19zbGlkZUNsYXNzJywgdXBkYXRlQ2xhc3Nlcyk7XG4gICAgfTtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzd2lwZXIgJiYgc2xpZGVFbFJlZi5jdXJyZW50ICYmICFzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICBzZXRTbGlkZUNsYXNzZXMoc3dpcGVyLmdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsUmVmLmN1cnJlbnQpKTtcbiAgICB9XG4gIH0sIFtzd2lwZXJdKTtcbiAgY29uc3Qgc2xpZGVEYXRhID0ge1xuICAgIGlzQWN0aXZlOiBzbGlkZUNsYXNzZXMuaW5kZXhPZignc3dpcGVyLXNsaWRlLWFjdGl2ZScpID49IDAgfHwgc2xpZGVDbGFzc2VzLmluZGV4T2YoJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtYWN0aXZlJykgPj0gMCxcbiAgICBpc1Zpc2libGU6IHNsaWRlQ2xhc3Nlcy5pbmRleE9mKCdzd2lwZXItc2xpZGUtdmlzaWJsZScpID49IDAsXG4gICAgaXNEdXBsaWNhdGU6IHNsaWRlQ2xhc3Nlcy5pbmRleE9mKCdzd2lwZXItc2xpZGUtZHVwbGljYXRlJykgPj0gMCxcbiAgICBpc1ByZXY6IHNsaWRlQ2xhc3Nlcy5pbmRleE9mKCdzd2lwZXItc2xpZGUtcHJldicpID49IDAgfHwgc2xpZGVDbGFzc2VzLmluZGV4T2YoJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtcHJldicpID49IDAsXG4gICAgaXNOZXh0OiBzbGlkZUNsYXNzZXMuaW5kZXhPZignc3dpcGVyLXNsaWRlLW5leHQnKSA+PSAwIHx8IHNsaWRlQ2xhc3Nlcy5pbmRleE9mKCdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnKSA+PSAwXG4gIH07XG5cbiAgY29uc3QgcmVuZGVyQ2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKHNsaWRlRGF0YSkgOiBjaGlsZHJlbjtcbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBzbGlkZUVsUmVmLFxuICAgIGNsYXNzTmFtZTogdW5pcXVlQ2xhc3NlcyhgJHtzbGlkZUNsYXNzZXN9JHtjbGFzc05hbWUgPyBgICR7Y2xhc3NOYW1lfWAgOiAnJ31gKSxcbiAgICBcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCI6IHZpcnR1YWxJbmRleFxuICB9LCByZXN0KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3dpcGVyU2xpZGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHNsaWRlRGF0YVxuICB9LCB6b29tID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJzd2lwZXItem9vbS1jb250YWluZXJcIixcbiAgICBcImRhdGEtc3dpcGVyLXpvb21cIjogdHlwZW9mIHpvb20gPT09ICdudW1iZXInID8gem9vbSA6IHVuZGVmaW5lZFxuICB9LCByZW5kZXJDaGlsZHJlbigpKSA6IHJlbmRlckNoaWxkcmVuKCkpKTtcbn0pO1xuU3dpcGVyU2xpZGUuZGlzcGxheU5hbWUgPSAnU3dpcGVyU2xpZGUnO1xuZXhwb3J0IHsgU3dpcGVyU2xpZGUgfTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3N0eWxlLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vc3R5bGUubW9kdWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCB7IEV2ZW50U2xpZGVQcm9wcyB9IGZyb20gJy4vcHJvcHMnO1xyXG5cclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlLm1vZHVsZS5zY3NzJztcclxuXHJcbmV4cG9ydCBjb25zdCBFdmVudFNsaWRlID0gKHsgZGF0ZSwgaW5mbywgY2xhc3NOYW1lLCAuLi5yZXN0IH06IEV2ZW50U2xpZGVQcm9wcyk6IEpTWC5FbGVtZW50ID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihzdHlsZXMuc2xpZGUsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zbGlkZVRpdGxlfT57ZGF0ZX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zbGlkZVRleHR9PntpbmZvfTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuIiwidmFyIF9wYXRoO1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbnZhciBTdmdBcnJvd1JpZ2h0ID0gZnVuY3Rpb24gU3ZnQXJyb3dSaWdodChwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIHdpZHRoOiA1LFxuICAgIGhlaWdodDogMTAsXG4gICAgdmlld0JveDogXCIwIDAgOCAxMlwiLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgfSwgcHJvcHMpLCBfcGF0aCB8fCAoX3BhdGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwibTEgMSA1IDUtNSA1XCIsXG4gICAgc3Ryb2tlOiBcIiMwMDBcIixcbiAgICBzdHJva2VXaWR0aDogMlxuICB9KSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IFN2Z0Fycm93UmlnaHQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9zdHlsZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3N0eWxlLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgeyBGb3J3YXJkZWRSZWYsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEFycm93QnV0dG9uUHJvcHMgfSBmcm9tICcuL3Byb3BzJztcclxuaW1wb3J0IEFycm93IGZyb20gJy4uLy4uL2Fzc2V0cy9pY29ucy9hcnJvd1JpZ2h0LnN2Zyc7XHJcblxyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGUubW9kdWxlLnNjc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFycm93QnV0dG9uID0gZm9yd2FyZFJlZigoeyBhcnJvdywgc3R5bGVUeXBlID0gJ2dyYXknLCBhcnJTaXplID0gJ3MnLCBjbGFzc05hbWUsIC4uLnJlc3QgfTogQXJyb3dCdXR0b25Qcm9wcywgcmVmOiBGb3J3YXJkZWRSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+KTogSlNYLkVsZW1lbnQgPT4ge1xyXG5cclxuICAgIGNvbnN0IHMgPSB7XHJcbiAgICAgICAgd2lkdGg6IDUsXHJcbiAgICAgICAgaGVpZ2h0OiAxMCxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgbSA9IHtcclxuICAgICAgICB3aWR0aDogMTAsXHJcbiAgICAgICAgaGVpZ2h0OiAxNCxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oc3R5bGVzLmFycm93QnRuLCBzdHlsZXNbc3R5bGVUeXBlXSwgc3R5bGVzW2Fycm93XSwgY2xhc3NOYW1lKX1cclxuICAgICAgICAgICAgYXJpYS1sYWJlbD17YXJyb3cgPT09ICdsZWZ0JyA/XHJcbiAgICAgICAgICAgICAgICAn0Jog0L/RgNC10LTRi9C00YPRidC10LzRgyDRgdC70LDQudC00YMnIDogJ9CaINGB0LvQtdC00YPRjtGJ0LXQvNGDINGB0LvQsNC50LTRgyd9XHJcbiAgICAgICAgICAgIHsuLi5yZXN0fVxyXG4gICAgICAgICAgICByZWY9e3JlZn1cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxBcnJvdyB7Li4uKGFyclNpemUgPT09ICdtJyA/IG0gOiBzKX0gLz5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICk7XHJcbn0pO1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vc3dpcGVyLm1pbi5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3N3aXBlci5taW4uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi8uLi9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL25hdmlnYXRpb24ubWluLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uLy4uLy4uL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vbmF2aWdhdGlvbi5taW4uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi8uLi9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3BhZ2luYXRpb24ubWluLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uLy4uLy4uL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vcGFnaW5hdGlvbi5taW4uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9zbGlkZXJTdHlsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vc2xpZGVyU3R5bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vc3R5bGUubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9zdHlsZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0IHsgZ3NhcCB9IGZyb20gJ2dzYXAnO1xyXG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU3dpcGVyLCBTd2lwZXJTbGlkZSB9IGZyb20gJ3N3aXBlci9yZWFjdCc7XHJcbmltcG9ydCB7IE5hdmlnYXRpb24sIFBhZ2luYXRpb24sIEExMXkgfSBmcm9tICdzd2lwZXInO1xyXG5pbXBvcnQgeyBFdmVudFNsaWRlIH0gZnJvbSAnLi4vRXZlbnRTbGlkZSc7XHJcbmltcG9ydCB7IEFycm93QnV0dG9uIH0gZnJvbSAnLi4vQXJyb3dCdXR0b24nO1xyXG5pbXBvcnQgeyBFdmVudFNsaWRlclByb3BzIH0gZnJvbSAnLi9wcm9wcyc7XHJcblxyXG5pbXBvcnQgJ3N3aXBlci9jc3MnO1xyXG5pbXBvcnQgJ3N3aXBlci9jc3MvbmF2aWdhdGlvbic7XHJcbmltcG9ydCAnc3dpcGVyL2Nzcy9wYWdpbmF0aW9uJztcclxuaW1wb3J0ICcuL3NsaWRlclN0eWxlLnNjc3MnO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGUubW9kdWxlLnNjc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEV2ZW50U2xpZGVyID0gKHsgc2xpZGVySWQsIHRvcGljLCBldmVudHMsIGNsYXNzTmFtZSwgLi4ucmVzdCB9OiBFdmVudFNsaWRlclByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xyXG4gICAgY29uc3QgbmV4dEJ0blJlZiA9IHVzZVJlZjxIVE1MQnV0dG9uRWxlbWVudCB8IG51bGw+KG51bGwpO1xyXG4gICAgY29uc3QgcHJldkJ0blJlZiA9IHVzZVJlZjxIVE1MQnV0dG9uRWxlbWVudCB8IG51bGw+KG51bGwpO1xyXG4gICAgY29uc3Qgc2xpZGVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50IHwgbnVsbD4obnVsbCk7XHJcblxyXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcclxuICAgICAgICBjb25zdCBjdHggPSBnc2FwLmNvbnRleHQoKCkgPT4ge1xyXG4gICAgICAgICAgICBnc2FwLmZyb20oc2xpZGVyUmVmLmN1cnJlbnQsIHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgc2xpZGVyUmVmKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICgpID0+IGN0eC5yZXZlcnQoKTtcclxuICAgIH0sIFtzbGlkZXJJZCwgZXZlbnRzXSk7XHJcblxyXG4gICAgY29uc3Qgc2xpZGVzID0gZXZlbnRzLm1hcChlID0+IChcclxuICAgICAgICA8U3dpcGVyU2xpZGVcclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuc2xpZGVyU2xpZGV9XHJcbiAgICAgICAgICAgIGtleT17ZS5kYXRlfVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPEV2ZW50U2xpZGUgZGF0ZT17ZS5kYXRlfSBpbmZvPXtlLmV2ZW50fSAvPlxyXG4gICAgICAgIDwvU3dpcGVyU2xpZGU+XHJcbiAgICApKTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVQcm9ncmVzcyA9IChwcm9ncmVzczogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKG5leHRCdG5SZWYuY3VycmVudCAmJiBwcmV2QnRuUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgaWYgKHByb2dyZXNzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHByZXZCdG5SZWYuY3VycmVudC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzcyA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgbmV4dEJ0blJlZi5jdXJyZW50LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByb2dyZXNzID4gMCAmJiBwcm9ncmVzcyA8IDEpIHtcclxuICAgICAgICAgICAgICAgIHByZXZCdG5SZWYuY3VycmVudC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgICAgICAgICAgICAgbmV4dEJ0blJlZi5jdXJyZW50LnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKHN0eWxlcy5zbGlkZXIsIGNsYXNzTmFtZSl9XHJcbiAgICAgICAgICAgIHsuLi5yZXN0fVxyXG4gICAgICAgICAgICByZWY9e3NsaWRlclJlZn0+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLnNsaWRlclRvcGljfT57dG9waWN9PC9zcGFuPlxyXG4gICAgICAgICAgICA8QXJyb3dCdXR0b25cclxuICAgICAgICAgICAgICAgIGFycm93PSdsZWZ0J1xyXG4gICAgICAgICAgICAgICAgc3R5bGVUeXBlPSdibHVlJ1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbihzdHlsZXMuc2xpZGVyTmF2X3ByZXYsIGBwcmV2XyR7c2xpZGVySWR9YCl9XHJcbiAgICAgICAgICAgICAgICByZWY9e3ByZXZCdG5SZWZ9IC8+XHJcbiAgICAgICAgICAgIDxTd2lwZXJcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnNsaWRlcldyYXBwZXJ9XHJcbiAgICAgICAgICAgICAgICBtb2R1bGVzPXtbTmF2aWdhdGlvbiwgUGFnaW5hdGlvbiwgQTExeV19XHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkVsOiBgLnByZXZfJHtzbGlkZXJJZH1gLFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRFbDogYC5uZXh0XyR7c2xpZGVySWR9YCxcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsOiBgLnBhZ2luYXRpb25fJHtzbGlkZXJJZH1gLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIHNwYWNlQmV0d2Vlbj17MjB9XHJcbiAgICAgICAgICAgICAgICBicmVha3BvaW50cz17e1xyXG4gICAgICAgICAgICAgICAgICAgIDUyNToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDQwXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICA3MjU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiA4MFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3PXsnYXV0byd9XHJcbiAgICAgICAgICAgICAgICBvblByb2dyZXNzPXsoXywgcHJvZ3Jlc3MpID0+IGhhbmRsZVByb2dyZXNzKHByb2dyZXNzKX1cclxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZVxyXG4gICAgICAgICAgICAgICAgZ3JhYkN1cnNvclxyXG4gICAgICAgICAgICAgICAgaWQ9e3NsaWRlcklkfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlwiPntzbGlkZXN9PC9kaXY+XHJcbiAgICAgICAgICAgIDwvU3dpcGVyPlxyXG4gICAgICAgICAgICA8QXJyb3dCdXR0b25cclxuICAgICAgICAgICAgICAgIGFycm93PSdyaWdodCdcclxuICAgICAgICAgICAgICAgIHN0eWxlVHlwZT0nYmx1ZSdcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oc3R5bGVzLnNsaWRlck5hdl9uZXh0LCBgbmV4dF8ke3NsaWRlcklkfWApfVxyXG4gICAgICAgICAgICAgICAgcmVmPXtuZXh0QnRuUmVmfSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9zdHlsZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3N0eWxlLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBBcnJvd0J1dHRvbiB9IGZyb20gJy4uL0Fycm93QnV0dG9uJztcclxuaW1wb3J0IHsgUGVyaW9kQ29udHJvbHNQcm9wcyB9IGZyb20gJy4vcHJvcHMnO1xyXG5cclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlLm1vZHVsZS5zY3NzJztcclxuXHJcbmV4cG9ydCBjb25zdCBQZXJpb2RDb250cm9scyA9ICh7IHNsaWRlcklkLCB0b3RhbEFtb3VudCwgYWN0aXZlUGVyaW9kLCBzZXRBY3RpdmVQZXJpb2QsIGNsYXNzTmFtZSwgLi4ucmVzdCB9OiBQZXJpb2RDb250cm9sc1Byb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xyXG5cclxuICAgIGNvbnN0IHRvdGFsID0gdXNlTWVtbygoKSA9PiBTdHJpbmcodG90YWxBbW91bnQpLnBhZFN0YXJ0KDIsICcwJyksIFt0b3RhbEFtb3VudF0pO1xyXG4gICAgY29uc3QgY3VycmVudCA9IHVzZU1lbW8oKCkgPT4gU3RyaW5nKGFjdGl2ZVBlcmlvZCArIDEpLnBhZFN0YXJ0KDIsICcwJyksIFthY3RpdmVQZXJpb2RdKTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVQZXJpb2RDaGFuZ2luZyA9IChkaXI6ICduZXh0JyB8ICdwcmV2JykgPT4ge1xyXG4gICAgICAgIGlmIChkaXIgPT09ICdwcmV2JyAmJiBhY3RpdmVQZXJpb2QgPiAwKSB7XHJcbiAgICAgICAgICAgIHNldEFjdGl2ZVBlcmlvZChhY3RpdmVQZXJpb2QgLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpciA9PT0gJ25leHQnICYmIGFjdGl2ZVBlcmlvZCA8IHRvdGFsQW1vdW50IC0gMSkge1xyXG4gICAgICAgICAgICBzZXRBY3RpdmVQZXJpb2QoYWN0aXZlUGVyaW9kICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihzdHlsZXMuY29udHJvbHMsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jb250cm9sc0NvdW50fT5cclxuICAgICAgICAgICAgICAgIDxzcGFuPntjdXJyZW50fTwvc3Bhbj4vXHJcbiAgICAgICAgICAgICAgICA8c3Bhbj57dG90YWx9PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udHJvbHNCdG5zfT5cclxuICAgICAgICAgICAgICAgIDxBcnJvd0J1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmNvbnRyb2xzQnRufVxyXG4gICAgICAgICAgICAgICAgICAgIGFycm93PSdsZWZ0J1xyXG4gICAgICAgICAgICAgICAgICAgIGFyclNpemU9J20nXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2FjdGl2ZVBlcmlvZCA9PT0gMH1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVQZXJpb2RDaGFuZ2luZygncHJldicpfSAvPlxyXG4gICAgICAgICAgICAgICAgPEFycm93QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuY29udHJvbHNCdG59XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyb3c9J3JpZ2h0J1xyXG4gICAgICAgICAgICAgICAgICAgIGFyclNpemU9J20nXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2FjdGl2ZVBlcmlvZCA9PT0gdG90YWxBbW91bnQgLSAxfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVBlcmlvZENoYW5naW5nKCduZXh0Jyl9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKHN0eWxlcy5zbGlkZXJQYWcsIGBwYWdpbmF0aW9uXyR7c2xpZGVySWR9YCl9PjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9zdHlsZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3N0eWxlLm1vZHVsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgeyBUaXRsZVByb3BzIH0gZnJvbSAnLi9wcm9wcyc7XHJcblxyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGUubW9kdWxlLnNjc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRpdGxlID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgLi4ucmVzdCB9OiBUaXRsZVByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8aDIgY2xhc3NOYW1lPXtjbihzdHlsZXMudGl0bGUsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fT5cclxuICAgICAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICAgIDwvaDI+XHJcbiAgICApO1xyXG59OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzRdIS4vc3R5bGUubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9zdHlsZS5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZU1hdGhNZWRpYSB9IGZyb20gJy4uLy4uL2hvb2tzL3VzZU1hdGhNZWRpYSc7XHJcbmltcG9ydCB7IENvdW50ZG93biB9IGZyb20gJy4uL0NvdW50ZG93bic7XHJcbmltcG9ydCB7IERvdHNDaXJjbGUgfSBmcm9tICcuLi9Eb3RzQ2lyY2xlJztcclxuaW1wb3J0IHsgRXZlbnRTbGlkZXIgfSBmcm9tICcuLi9FdmVudFNsaWRlcic7XHJcbmltcG9ydCB7IFBlcmlvZENvbnRyb2xzIH0gZnJvbSAnLi4vUGVyaW9kQ29udHJvbHMnO1xyXG5pbXBvcnQgeyBUaXRsZSB9IGZyb20gJy4uL1RpdGxlJztcclxuaW1wb3J0IHsgRGF0ZXNDYXJvdXNlbFByb3BzIH0gZnJvbSAnLi9wcm9wcyc7XHJcblxyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGUubW9kdWxlLnNjc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IERhdGVzQ2Fyb3VzZWwgPSAoeyBjYXJvdXNlbElkLCBjYXJvdXNlbFRpdGxlLCB0aW1lUGVyaW9kcywgY2xhc3NOYW1lLCAuLi5yZXN0IH06IERhdGVzQ2Fyb3VzZWxQcm9wcyk6IEpTWC5FbGVtZW50ID0+IHtcclxuXHJcbiAgICBjb25zdCBbY3VycmVudFBlcmlvZElkeCwgc2V0Q3VycmVudFBlcmlvZElkeF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xyXG4gICAgY29uc3QgaXNNb2JpbGUgPSB1c2VNYXRoTWVkaWEoJyhtYXgtd2lkdGg6IDUyNXB4KScpO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKHN0eWxlcy5jYXJvdXNlbCwgY2xhc3NOYW1lKX0gey4uLnJlc3R9PlxyXG4gICAgICAgICAgICA8VGl0bGU+e2Nhcm91c2VsVGl0bGV9PC9UaXRsZT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jYXJvdXNlbERhdGFXcmFwcGVyfT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2Fyb3VzZWxDb3VudERvd259PlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb3VudGRvd25cclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyPXt0aW1lUGVyaW9kc1tjdXJyZW50UGVyaW9kSWR4XS5wZXJpb2RbMF19IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvdW50ZG93blxyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXI9e3RpbWVQZXJpb2RzW2N1cnJlbnRQZXJpb2RJZHhdLnBlcmlvZFsxXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVUeXBlPSdhY2NlbnRTZWNvbmQnIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIHshaXNNb2JpbGUgJiZcclxuICAgICAgICAgICAgICAgICAgICA8RG90c0NpcmNsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lUGVyaW9kcz17dGltZVBlcmlvZHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQZXJpb2RJZHg9e2N1cnJlbnRQZXJpb2RJZHh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRQZXJpb2RJZHg9e3NldEN1cnJlbnRQZXJpb2RJZHh9XHJcbiAgICAgICAgICAgICAgICAgICAgLz59XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNhcm91c2VsU2xpZGVyV3JhcHBlcn0+XHJcbiAgICAgICAgICAgICAgICA8UGVyaW9kQ29udHJvbHNcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXJJZD17Y2Fyb3VzZWxJZH1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5jYXJvdXNlbENvbnRyb2xzfVxyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsQW1vdW50PXt0aW1lUGVyaW9kcy5sZW5ndGh9XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlUGVyaW9kPXtjdXJyZW50UGVyaW9kSWR4fVxyXG4gICAgICAgICAgICAgICAgICAgIHNldEFjdGl2ZVBlcmlvZD17c2V0Q3VycmVudFBlcmlvZElkeH1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8RXZlbnRTbGlkZXJcclxuICAgICAgICAgICAgICAgICAgICBldmVudHM9e3RpbWVQZXJpb2RzW2N1cnJlbnRQZXJpb2RJZHhdLmV2ZW50c31cclxuICAgICAgICAgICAgICAgICAgICB0b3BpYz17dGltZVBlcmlvZHNbY3VycmVudFBlcmlvZElkeF0udG9waWN9XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVySWQ9e2Nhcm91c2VsSWR9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL3Jlc2V0LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9yZXNldC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbNF0hLi9BcHAuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVs0XSEuL0FwcC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgVGltZVBlcmlvZCB9IGZyb20gJy4uLy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRpbWVQZXJpb2RzOiBUaW1lUGVyaW9kW10gPSBbXHJcbiAgICB7XHJcbiAgICAgICAgcGVyaW9kOiBbMTk4NywgMTk5MV0sXHJcbiAgICAgICAgdG9waWM6ICfQmtC40L3QvicsXHJcbiAgICAgICAgZXZlbnRzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDE5ODcsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ1wi0KXQuNGJ0L3QuNC6XCIvUHJlZGF0b3Ig4oCUINCw0LzQtdGA0LjQutCw0L3RgdC60LjQuSDRhNCw0L3RgtCw0YHRgtC40YfQtdGB0LrQuNC5INCx0L7QtdCy0LjQuiwg0YHQvdGP0YLRi9C5INCU0LbQvtC90L7QvCDQnNCw0LrRgtC40YDQvdCw0L3QvtC8INC/0L4g0YHRhtC10L3QsNGA0LjRjiDQsdGA0LDRgtGM0LXQsiDQotC+0LzQsNGBJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAxOTg4LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfCq9Ca0YLQviDQv9C+0LTRgdGC0LDQstC40Lsg0LrRgNC+0LvQuNC60LAg0KDQvtC00LbQtdGA0LDCuy9XaG8gRnJhbWVkIFJvZ2VyIFJhYmJpdCDigJQg0LDQvNC10YDQuNC60LDQvdGB0LrQuNC5INC60L7QvNC10LTQuNC50L3Ri9C5INCw0L3QuNC80LDRhtC40L7QvdC90L4t0LjQs9GA0L7QstC+0Lkg0YTQuNC70YzQvCDRgNC10LbQuNGB0YHRkdGA0LAg0KDQvtCx0LXRgNGC0LAg0JfQtdC80LXQutC40YHQsCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMTk4OSxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAnXCLQndCw0LfQsNC0INCyINCx0YPQtNGD0YnQtdC1IDJcIi9CYWNrIFRvIFRoZSBGdXR1cmUsIFBhcnQgSUkg4oCUINC90LDRg9GH0L3Qvi3RhNCw0L3RgtCw0YHRgtC40YfQtdGB0LrQuNC5INGE0LjQu9GM0Lwg0YDQtdC20LjRgdGB0ZHRgNCwINCg0L7QsdC10YDRgtCwINCX0LXQvNC10LrQuNGB0LAg0L/QviDRgdGG0LXQvdCw0YDQuNGOINCR0L7QsdCwINCT0LXQudC70LAsINCy0YLQvtGA0LDRjyDRh9Cw0YHRgtGMINGC0YDQuNC70L7Qs9C40LggXCLQndCw0LfQsNC0INCyINCx0YPQtNGD0YnQtdC1XCInXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDE5OTAsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9Ca0YDQtdC/0LrQuNC5INC+0YDQtdGI0LXQuiAyL0RpZSBIYXJkIDIg4oCUINCw0LzQtdGA0LjQutCw0L3RgdC60LjQuSDQsdC+0LXQstC40LogMTk5MC3Qs9C+INCz0L7QtNCwINC4INCy0YLQvtGA0LDRjyDRh9Cw0YHRgtGMINGB0LXRgNC40Lgg0YTQuNC70YzQvNC+0LIg0L4g0L/QvtC70LjRhtC10LnRgdC60L7QvCDQlNC20L7QvdC1INCc0LDQutC60LvQtdC50L3QtSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMTk5MSxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAnXCLQotC10YDQvNC40L3QsNGC0L7RgCAyOiDQodGD0LTQvdGL0Lkg0LTQtdC90YxcIi9UZXJtaW5hdG9yIDI6IEp1ZGdtZW50IERheSDigJQg0LDQvNC10YDQuNC60LDQvdGB0LrQuNC5INC90LDRg9GH0L3Qvi3RhNCw0L3RgtCw0YHRgtC40YfQtdGB0LrQuNC5INCx0L7QtdCy0LjQuiDRgNC10LbQuNGB0YHRkdGA0LAg0JTQttC10LnQvNGB0LAg0JrRjdC80LXRgNC+0L3QsCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgcGVyaW9kOiBbMTk5MiwgMTk5N10sXHJcbiAgICAgICAgdG9waWM6ICfQm9C40YLQtdGA0LDRgtGD0YDQsCcsXHJcbiAgICAgICAgZXZlbnRzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDE5OTIsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9Cd0L7QsdC10LvQtdCy0YHQutCw0Y8g0L/RgNC10LzQuNGPINC/0L4g0LvQuNGC0LXRgNCw0YLRg9GA0LUgLSDQlNC10YDQtdC6INCj0L7Qu9C70LrQvtGCIFwi0JfQsCDQsdC70LXRgdGC0Y/RidC40Lkg0L7QsdGA0LDQt9C10YYg0LrQsNGA0LjQsdGB0LrQvtCz0L4g0Y3Qv9C+0YHQsCDQsiA2NCDRgNC10LfQtNC10LvQsNGFXCInXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDE5OTQsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ1wi0JHQtdGB0YHQvtC90L3QuNGG0LBcIiAtINGA0L7QvNCw0L0g0KHRgtC40LLQtdC90LAg0JrQuNC90LPQsCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMTk5NSxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0J3QvtCx0LXQu9C10LLRgdC60LDRjyDQv9GA0LXQvNC40Y8g0L/QviDQu9C40YLQtdGA0LDRgtGD0YDQtSAtINCo0LXQudC80LDRgSDQpdC40L3QuCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMTk5NixcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0J3QvtCx0LXQu9C10LLRgdC60LDRjyDQv9GA0LXQvNC40Y8g0L/QviDQu9C40YLQtdGA0LDRgtGD0YDQtSDigJQg0JLQuNGB0LvQsNCy0LAg0KjQuNC80LHQvtGA0YHQutCw0Y8sIFwi0JfQsCDQv9C+0Y3Qt9C40Y4sINC60L7RgtC+0YDQsNGPINGBINC/0YDQtdC00LXQu9GM0L3QvtC5INGC0L7Rh9C90L7RgdGC0YzRjiDQvtC/0LjRgdGL0LLQsNC10YIg0LjRgdGC0L7RgNC40YfQtdGB0LrQuNC1INC4INCx0LjQvtC70L7Qs9C40YfQtdGB0LrQuNC1INGP0LLQu9C10L3QuNGPINCyINC60L7QvdGC0LXQutGB0YLQtSDRh9C10LvQvtCy0LXRh9C10YHQutC+0Lkg0YDQtdCw0LvRjNC90L7RgdGC0LhcIidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMTk5NyxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0J3QvtCx0LXQu9C10LLRgdC60LDRjyDQv9GA0LXQvNC40Y8g0L/QviDQu9C40YLQtdGA0LDRgtGD0YDQtSDigJQg0JTQsNGA0LjQviDQpNC+LCBcItCd0LDRgdC70LXQtNGD0Y8g0YHRgNC10LTQvdC10LLQtdC60L7QstGL0YUg0YjRg9GC0L7Qsiwg0L/QvtGA0LjRhtCw0LXRgiDQstC70LDRgdGC0Ywg0Lgg0LDQstGC0L7RgNC40YLQtdGCINC4INC30LDRidC40YnQsNC10YIg0LTQvtGB0YLQvtC40L3RgdGC0LLQviDRg9Cz0L3QtdGC0ZHQvdC90YvRhVwiJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwZXJpb2Q6IFsxOTk5LCAyMDA0XSxcclxuICAgICAgICB0b3BpYzogJ9Ci0LXQsNGC0YAnLFxyXG4gICAgICAgIGV2ZW50czogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAxOTk5LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQn9GA0LXQvNGM0LXRgNCwINCx0LDQu9C10YLQsCBcItCX0L7Qu9GD0YjQutCwXCIg0LIg0L/QvtGB0YLQsNC90L7QstC60LUg0JbQsNC9LdCa0YDQuNGB0YLQvtGE0LAg0JzQsNC50L4sINGB0YbQtdC90L7Qs9GA0LDRhNC40Y8g0K3RgNC90LXRgdGC0LAg0J/QuNC90YzQvtC90LAnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDIwMDAsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9CS0L7Qt9C+0LHQvdC+0LLQu9C10L3QviDQuNC30LTQsNC90LjQtSDQttGD0YDQvdCw0LvQsCBcItCi0LXQsNGC0YBcIidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMjAwMixcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0J/RgNC10LzRjNC10YDQsCDRgtGA0LjQu9C+0LPQuNC4INCi0L7QvNCwINCh0YLQvtC/0L/QsNGA0LTQsCBcItCR0LXRgNC10LMg0YPRgtC+0L/QuNC4XCIsINCa0L7RgNC+0LvQtdCy0YHQutC40Lkg0L3QsNGG0LjQvtC90LDQu9GM0L3Ri9C5INGC0LXQsNGC0YAsINCb0L7QvdC00L7QvSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMjAwMyxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0JIg0JLQtdC90LXRhtC40Lgg0L/QvtGB0LvQtSDQstC+0YHRjNC80LjQu9C10YLQvdC10Lkg0YDQtdGB0YLQsNCy0YDQsNGG0LjQuCDQv9C+0YHRgtCw0L3QvtCy0LrQvtC5INC+0L/QtdGA0Ysg0JTQttGD0LfQtdC/0L/QtSDQktC10YDQtNC4IFwi0KLRgNCw0LLQuNCw0YLQsFwiINC+0YLQutGA0YvQu9GB0Y8g0YLQtdCw0YLRgCBcItCb0LAg0KTQtdC90LjRh9C1XCIsINC/0L7RgdGC0YDQsNC00LDQstGI0LjQuSDQsiDQv9C+0LbQsNGA0LUgMTk5NiDQs9C+0LTQsCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMjAwNCxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAnOCDQvtC60YLRj9Cx0YDRjyDQsiDQotC10LDRgtGA0LUg0L3QsCDQv9C+0LrRgNC+0LLQutC1INGB0L7RgdGC0L7Rj9C70LDRgdGMINC/0YDQtdC80YzQtdGA0LAg0YHQv9C10LrRgtCw0LrQu9GPIFwi0J/QvtGB0LvQtdC00L3QuNC1INGB0YLRgNCw0L3QuNGG0Ysg0LjQtyDQtNC90LXQstC90LjQutCwINC20LXQvdGJ0LjQvdGLXCIg0L/QviDQvNC+0YLQuNCy0LDQvCDQvtC00L3QvtC40LzRkdC90L3QvtC5INC/0L7QstC10YHRgtC4INCSLiDQkdGA0Y7RgdC+0LLQsCDigJQg0L/RgNC+0L3Qt9C40YLQtdC70YzQvdCw0Y8g0LjRgdGC0L7RgNC40Y8g0L4g0LvRjtCx0LLQuCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgcGVyaW9kOiBbMjAwNSwgMjAxMF0sXHJcbiAgICAgICAgdG9waWM6ICfQmtC+0YHQvNC+0YEnLFxyXG4gICAgICAgIGV2ZW50czogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDA1LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQl9C+0L3QtCDCq9CT0Y7QudCz0LXQvdGBwrsg0LLQvtGI0ZHQuyDQsiDQsNGC0LzQvtGB0YTQtdGA0YMg0KLQuNGC0LDQvdCwLCDRgdC+0LLQtdGA0YjQuNC7INC80Y/Qs9C60YPRjiDQv9C+0YHQsNC00LrRgyDQvdCwINC/0L7QstC10YDRhdC90L7RgdGC0Ywg0Lgg0L/QtdGA0LXQtNCw0Lsg0YHQvdC40LzQutC4INC4INC00YDRg9Cz0LjQtSDQtNCw0L3QvdGL0LUg0YfQtdGA0LXQtyDQsNC/0L/QsNGA0LDRgiDCq9Ca0LDRgdGB0LjQvdC4wrsg0L3QsCDQl9C10LzQu9GOJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDA3LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQntGC0LrRgNGL0YLQuNC1INC/0LvQsNC90LXRgtGLINCT0LvQuNC30LUgNTgxYydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMjAwOCxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0JDQstGC0L7QvNCw0YLQuNGH0LXRgdC60LDRjyDQvNC10LbQv9C70LDQvdC10YLQvdCw0Y8g0YHRgtCw0L3RhtC40Y8gTUVTU0VOR0VSINGB0LTQtdC70LDQu9CwINC/0LXRgNCy0YvQuSDQuNC3INGC0YDRkdGFINC/0LvQsNC90LjRgNGD0LXQvNGL0YUg0L7QsdC70ZHRgtC+0LIg0JzQtdGA0LrRg9GA0LjRjy4g0J/QvtC00LvQtdGC0LXQsiDQvdCwINGA0LDRgdGB0YLQvtGP0L3QuNC1IDIwMCDQutC40LvQvtC80LXRgtGA0L7Qsiwg0L7QvdCwINC/0LXRgNC10LTQsNC70LAg0LzQvdC+0LbQtdGB0YLQstC+INGB0L3QuNC80LrQvtCyINC/0LvQsNC90LXRgtGLJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDA5LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQkdGL0Lsg0LfQsNC/0YPRidC10L0g0YDQvtGB0YHQuNC50YHQutC40Lkg0YHQv9GD0YLQvdC40LogwqvQmtC+0YDQvtC90LDRgS3QpNCe0KLQntCdwrsuINCe0L0g0YHRgtCw0Lsg0YLRgNC10YLRjNC40Lwg0YHQv9GD0YLQvdC40LrQvtC8LCDQt9Cw0L/Rg9GJ0LXQvdC90YvQvCDQsiDRgNCw0LzQutCw0YUg0L/RgNC+0LPRgNCw0LzQvNGLINCa0J7QoNCe0J3QkNChICjQmtC+0LzQv9C70LXQutGB0L3Ri9C1INC+0YDQsdC40YLQsNC70YzQvdGL0LUg0L7QutC+0LvQvtC30LXQvNC90YvQtSDQvdCw0LHQu9GO0LTQtdC90LjRjyDQsNC60YLQuNCy0L3QvtGB0YLQuCDQodC+0LvQvdGG0LApJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDEwLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQntGA0LHQuNGC0LDQu9GM0L3Ri9C5INGC0LXQu9C10YHQutC+0L8gwqvQmtC10L/Qu9C10YDCuyDQvtGC0LrRgNGL0Lsg0YHQstC+0Lgg0L/QtdGA0LLRi9C1INC/0Y/RgtGMINGN0LrQt9C+0L/Qu9Cw0L3QtdGCOiBLZXBsZXItNCBiLCBLZXBsZXItNSBiLCBLZXBsZXItNiBiLCBLZXBsZXItNyBiLCBLZXBsZXItOCBiJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwZXJpb2Q6IFsyMDE1LCAyMDIyXSxcclxuICAgICAgICB0b3BpYzogJ9Cd0LDRg9C60LAnLFxyXG4gICAgICAgIGV2ZW50czogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDE1LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICcxMyDRgdC10L3RgtGP0LHRgNGPIOKAlCDRh9Cw0YHRgtC90L7QtSDRgdC+0LvQvdC10YfQvdC+0LUg0LfQsNGC0LzQtdC90LjQtSwg0LLQuNC00LjQvNC+0LUg0LIg0K7QttC90L7QuSDQkNGE0YDQuNC60LUg0Lgg0YfQsNGB0YLQuCDQkNC90YLQsNGA0LrRgtC40LTRiydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMjAxNixcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0KLQtdC70LXRgdC60L7QvyDCq9Cl0LDQsdCx0LvCuyDQvtCx0L3QsNGA0YPQttC40Lsg0YHQsNC80YPRjiDRg9C00LDQu9GR0L3QvdGD0Y4g0LjQtyDQstGB0LXRhSDQvtCx0L3QsNGA0YPQttC10L3QvdGL0YUg0LPQsNC70LDQutGC0LjQuiwg0L/QvtC70YPRh9C40LLRiNGD0Y4g0L7QsdC+0LfQvdCw0YfQtdC90LjQtSBHTi16MTEnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDIwMTcsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9Ca0L7QvNC/0LDQvdC40Y8gVGVzbGEg0L7RhNC40YbQuNCw0LvRjNC90L4g0L/RgNC10LTRgdGC0LDQstC40LvQsCDQv9C10YDQstGL0Lkg0LIg0LzQuNGA0LUg0Y3Qu9C10LrRgtGA0LjRh9C10YHQutC40Lkg0LPRgNGD0LfQvtCy0LjQuiBUZXNsYSBTZW1pJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDE4LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQntGE0LjRhtC40LDQu9GM0L3QviDQv9C+0LTRgtCy0LXRgNC20LTQtdC90L4g0L7RgtC60YDRi9GC0LjQtSDQvdC+0LLQvtCz0L4g0LrQu9Cw0YHRgdCwINCw0L3RgtC40LHQuNC+0YLQuNC60L7QsiBPZGlsb3JoYWJkaW4sINCw0L3QvtC90YHQuNGA0L7QstCw0L3QvdC+0LUg0LIgMjAxMyDQs9C+0LTRgywg0LAg0YLQsNC60LbQtSDQvtC/0LjRgdCw0L0g0LzQtdGF0LDQvdC40LfQvCDQtdCz0L4g0LTQtdC50YHRgtCy0LjRjydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMjAxOSxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAnR29vZ2xlINC+0LHRitGP0LLQuNC7INC+INGB0L7Qt9C00LDQvdC40LggNTMt0LrRg9Cx0LjRgtC90L7Qs9C+INC60LLQsNC90YLQvtCy0L7Qs9C+INC60L7QvNC/0YzRjtGC0LXRgNCwJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDIwLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQn9GA0Lgg0LDQvdCw0LvQuNC30LUg0LzRg9GA0YfQuNGB0L7QvdGB0LrQvtCz0L4g0LzQtdGC0LXQvtGA0LjRgtCwINC+0LHQvdCw0YDRg9C20LXQvdGLINC00YDQtdCy0L3QtdC50YjQuNC1INC90LAg0JfQtdC80LvQtSDRh9Cw0YHRgtC40YbRiyDQstC10YnQtdGB0YLQstCwLCDQv9C+0Y/QstC40LLRiNC40LXRgdGPINC60L7Qs9C00LAg0LXRidGRINC90LUg0YHRg9GJ0LXRgdGC0LLQvtCy0LDQu9C+INCh0L7Qu9C90LXRh9C90L7QuSDRgdC40YHRgtC10LzRiydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMjAyMSxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0KPRh9GR0L3Ri9C1INGB0L7Qt9C00LDQu9C4INCz0LjQsdGA0LjQtNC90YvQtSDRjdC80LHRgNC40L7QvdGLINGH0LXQu9C+0LLQtdC60LAg0Lgg0L7QsdC10LfRjNGP0L3RiydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMjAyMixcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0J3QsNC50LTQtdC90L4g0LLRg9C70LrQsNC90LjRh9C10YHQutC+0LUg0L7Qt9C10YDQviDRgSDRg9GB0LvQvtCy0LjRj9C80Lgg0LbQuNC30L3QuCDQutCw0Log0L3QsCDQnNCw0YDRgdC1LiDQkiDQstGD0LvQutCw0L3QuNGH0LXRgdC60L7QvCDQvtC30LXRgNC1INCy0YPQu9C60LDQvdCwINCf0L7QsNGBINC+0LHQuNGC0LDQtdGCINC10LTQuNC90YHRgtCy0LXQvdC90YvQuSDQstC40LQg0LHQsNC60YLQtdGA0LjQuSDigJQgQWNpZGlwaGlsaXVtLiDQotCw0LrQvtC1INC+0YLQutGA0YvRgtC40LUg0L3QsNCz0LvRj9C00L3QviDQtNCw0ZHRgiDQv9C+0L3Rj9GC0YwsINC60LDQuiDQvdCwINCc0LDRgNGB0LUg0LzQvtC20LXRgiDRgdGD0YnQtdGB0YLQstC+0LLQsNGC0Ywg0LbQuNC30L3RjCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH1cclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCB0aW1lUGVyaW9kczI6IFRpbWVQZXJpb2RbXSA9IFtcclxuICAgIHtcclxuICAgICAgICBwZXJpb2Q6IFsxOTg3LCAxOTkxXSxcclxuICAgICAgICB0b3BpYzogJ9Ca0LjQvdC+JyxcclxuICAgICAgICBldmVudHM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMTk4NyxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAnXCLQpdC40YnQvdC40LpcIi9QcmVkYXRvciDigJQg0LDQvNC10YDQuNC60LDQvdGB0LrQuNC5INGE0LDQvdGC0LDRgdGC0LjRh9C10YHQutC40Lkg0LHQvtC10LLQuNC6LCDRgdC90Y/RgtGL0Lkg0JTQttC+0L3QvtC8INCc0LDQutGC0LjRgNC90LDQvdC+0Lwg0L/QviDRgdGG0LXQvdCw0YDQuNGOINCx0YDQsNGC0YzQtdCyINCi0L7QvNCw0YEnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDE5ODgsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ8Kr0JrRgtC+INC/0L7QtNGB0YLQsNCy0LjQuyDQutGA0L7Qu9C40LrQsCDQoNC+0LTQttC10YDQsMK7L1dobyBGcmFtZWQgUm9nZXIgUmFiYml0IOKAlCDQsNC80LXRgNC40LrQsNC90YHQutC40Lkg0LrQvtC80LXQtNC40LnQvdGL0Lkg0LDQvdC40LzQsNGG0LjQvtC90L3Qvi3QuNCz0YDQvtCy0L7QuSDRhNC40LvRjNC8INGA0LXQttC40YHRgdGR0YDQsCDQoNC+0LHQtdGA0YLQsCDQl9C10LzQtdC60LjRgdCwJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAxOTg5LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICdcItCd0LDQt9Cw0LQg0LIg0LHRg9C00YPRidC10LUgMlwiL0JhY2sgVG8gVGhlIEZ1dHVyZSwgUGFydCBJSSDigJQg0L3QsNGD0YfQvdC+LdGE0LDQvdGC0LDRgdGC0LjRh9C10YHQutC40Lkg0YTQuNC70YzQvCDRgNC10LbQuNGB0YHRkdGA0LAg0KDQvtCx0LXRgNGC0LAg0JfQtdC80LXQutC40YHQsCDQv9C+INGB0YbQtdC90LDRgNC40Y4g0JHQvtCx0LAg0JPQtdC50LvQsCwg0LLRgtC+0YDQsNGPINGH0LDRgdGC0Ywg0YLRgNC40LvQvtCz0LjQuCBcItCd0LDQt9Cw0LQg0LIg0LHRg9C00YPRidC10LVcIidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMTk5MCxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0JrRgNC10L/QutC40Lkg0L7RgNC10YjQtdC6IDIvRGllIEhhcmQgMiDigJQg0LDQvNC10YDQuNC60LDQvdGB0LrQuNC5INCx0L7QtdCy0LjQuiAxOTkwLdCz0L4g0LPQvtC00LAg0Lgg0LLRgtC+0YDQsNGPINGH0LDRgdGC0Ywg0YHQtdGA0LjQuCDRhNC40LvRjNC80L7QsiDQviDQv9C+0LvQuNGG0LXQudGB0LrQvtC8INCU0LbQvtC90LUg0JzQsNC60LrQu9C10LnQvdC1J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAxOTkxLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICdcItCi0LXRgNC80LjQvdCw0YLQvtGAIDI6INCh0YPQtNC90YvQuSDQtNC10L3RjFwiL1Rlcm1pbmF0b3IgMjogSnVkZ21lbnQgRGF5IOKAlCDQsNC80LXRgNC40LrQsNC90YHQutC40Lkg0L3QsNGD0YfQvdC+LdGE0LDQvdGC0LDRgdGC0LjRh9C10YHQutC40Lkg0LHQvtC10LLQuNC6INGA0LXQttC40YHRgdGR0YDQsCDQlNC20LXQudC80YHQsCDQmtGN0LzQtdGA0L7QvdCwJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwZXJpb2Q6IFsxOTkyLCAxOTk3XSxcclxuICAgICAgICB0b3BpYzogJ9Cb0LjRgtC10YDQsNGC0YPRgNCwJyxcclxuICAgICAgICBldmVudHM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMTk5MixcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0J3QvtCx0LXQu9C10LLRgdC60LDRjyDQv9GA0LXQvNC40Y8g0L/QviDQu9C40YLQtdGA0LDRgtGD0YDQtSAtINCU0LXRgNC10Log0KPQvtC70LvQutC+0YIgXCLQl9CwINCx0LvQtdGB0YLRj9GJ0LjQuSDQvtCx0YDQsNC30LXRhiDQutCw0YDQuNCx0YHQutC+0LPQviDRjdC/0L7RgdCwINCyIDY0INGA0LXQt9C00LXQu9Cw0YVcIidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMTk5NCxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAnXCLQkdC10YHRgdC+0L3QvdC40YbQsFwiIC0g0YDQvtC80LDQvSDQodGC0LjQstC10L3QsCDQmtC40L3Qs9CwJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAxOTk1LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQndC+0LHQtdC70LXQstGB0LrQsNGPINC/0YDQtdC80LjRjyDQv9C+INC70LjRgtC10YDQsNGC0YPRgNC1IC0g0KjQtdC50LzQsNGBINCl0LjQvdC4J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAxOTk3LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICctJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwZXJpb2Q6IFsyMDA1LCAyMDEwXSxcclxuICAgICAgICB0b3BpYzogJ9Ca0L7RgdC80L7RgScsXHJcbiAgICAgICAgZXZlbnRzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDIwMDUsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9CX0L7QvdC0IMKr0JPRjtC50LPQtdC90YHCuyDQstC+0YjRkdC7INCyINCw0YLQvNC+0YHRhNC10YDRgyDQotC40YLQsNC90LAsINGB0L7QstC10YDRiNC40Lsg0LzRj9Cz0LrRg9GOINC/0L7RgdCw0LTQutGDINC90LAg0L/QvtCy0LXRgNGF0L3QvtGB0YLRjCDQuCDQv9C10YDQtdC00LDQuyDRgdC90LjQvNC60Lgg0Lgg0LTRgNGD0LPQuNC1INC00LDQvdC90YvQtSDRh9C10YDQtdC3INCw0L/Qv9Cw0YDQsNGCIMKr0JrQsNGB0YHQuNC90LjCuyDQvdCwINCX0LXQvNC70Y4nXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDIwMDcsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9Ce0YLQutGA0YvRgtC40LUg0L/Qu9Cw0L3QtdGC0Ysg0JPQu9C40LfQtSA1ODFjJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDA4LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQkNCy0YLQvtC80LDRgtC40YfQtdGB0LrQsNGPINC80LXQttC/0LvQsNC90LXRgtC90LDRjyDRgdGC0LDQvdGG0LjRjyBNRVNTRU5HRVIg0YHQtNC10LvQsNC70LAg0L/QtdGA0LLRi9C5INC40Lcg0YLRgNGR0YUg0L/Qu9Cw0L3QuNGA0YPQtdC80YvRhSDQvtCx0LvRkdGC0L7QsiDQnNC10YDQutGD0YDQuNGPLiDQn9C+0LTQu9C10YLQtdCyINC90LAg0YDQsNGB0YHRgtC+0Y/QvdC40LUgMjAwINC60LjQu9C+0LzQtdGC0YDQvtCyLCDQvtC90LAg0L/QtdGA0LXQtNCw0LvQsCDQvNC90L7QttC10YHRgtCy0L4g0YHQvdC40LzQutC+0LIg0L/Qu9Cw0L3QtdGC0YsnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDIwMDksXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9CR0YvQuyDQt9Cw0L/Rg9GJ0LXQvSDRgNC+0YHRgdC40LnRgdC60LjQuSDRgdC/0YPRgtC90LjQuiDCq9Ca0L7RgNC+0L3QsNGBLdCk0J7QotCe0J3Cuy4g0J7QvSDRgdGC0LDQuyDRgtGA0LXRgtGM0LjQvCDRgdC/0YPRgtC90LjQutC+0LwsINC30LDQv9GD0YnQtdC90L3Ri9C8INCyINGA0LDQvNC60LDRhSDQv9GA0L7Qs9GA0LDQvNC80Ysg0JrQntCg0J7QndCQ0KEgKNCa0L7QvNC/0LvQtdC60YHQvdGL0LUg0L7RgNCx0LjRgtCw0LvRjNC90YvQtSDQvtC60L7Qu9C+0LfQtdC80L3Ri9C1INC90LDQsdC70Y7QtNC10L3QuNGPINCw0LrRgtC40LLQvdC+0YHRgtC4INCh0L7Qu9C90YbQsCknXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDIwMTAsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9Ce0YDQsdC40YLQsNC70YzQvdGL0Lkg0YLQtdC70LXRgdC60L7QvyDCq9Ca0LXQv9C70LXRgMK7INC+0YLQutGA0YvQuyDRgdCy0L7QuCDQv9C10YDQstGL0LUg0L/Rj9GC0Ywg0Y3QutC30L7Qv9C70LDQvdC10YI6IEtlcGxlci00IGIsIEtlcGxlci01IGIsIEtlcGxlci02IGIsIEtlcGxlci03IGIsIEtlcGxlci04IGInXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHBlcmlvZDogWzIwMTUsIDIwMjJdLFxyXG4gICAgICAgIHRvcGljOiAn0J3QsNGD0LrQsCcsXHJcbiAgICAgICAgZXZlbnRzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDIwMTUsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJzEzINGB0LXQvdGC0Y/QsdGA0Y8g4oCUINGH0LDRgdGC0L3QvtC1INGB0L7Qu9C90LXRh9C90L7QtSDQt9Cw0YLQvNC10L3QuNC1LCDQstC40LTQuNC80L7QtSDQsiDQrtC20L3QvtC5INCQ0YTRgNC40LrQtSDQuCDRh9Cw0YHRgtC4INCQ0L3RgtCw0YDQutGC0LjQtNGLJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDE2LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQotC10LvQtdGB0LrQvtC/IMKr0KXQsNCx0LHQu8K7INC+0LHQvdCw0YDRg9C20LjQuyDRgdCw0LzRg9GOINGD0LTQsNC70ZHQvdC90YPRjiDQuNC3INCy0YHQtdGFINC+0LHQvdCw0YDRg9C20LXQvdC90YvRhSDQs9Cw0LvQsNC60YLQuNC6LCDQv9C+0LvRg9GH0LjQstGI0YPRjiDQvtCx0L7Qt9C90LDRh9C10L3QuNC1IEdOLXoxMSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGF0ZTogMjAxNyxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiAn0JrQvtC80L/QsNC90LjRjyBUZXNsYSDQvtGE0LjRhtC40LDQu9GM0L3QviDQv9GA0LXQtNGB0YLQsNCy0LjQu9CwINC/0LXRgNCy0YvQuSDQsiDQvNC40YDQtSDRjdC70LXQutGC0YDQuNGH0LXRgdC60LjQuSDQs9GA0YPQt9C+0LLQuNC6IFRlc2xhIFNlbWknXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDIwMTgsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9Ce0YTQuNGG0LjQsNC70YzQvdC+INC/0L7QtNGC0LLQtdGA0LbQtNC10L3QviDQvtGC0LrRgNGL0YLQuNC1INC90L7QstC+0LPQviDQutC70LDRgdGB0LAg0LDQvdGC0LjQsdC40L7RgtC40LrQvtCyIE9kaWxvcmhhYmRpbiwg0LDQvdC+0L3RgdC40YDQvtCy0LDQvdC90L7QtSDQsiAyMDEzINCz0L7QtNGDLCDQsCDRgtCw0LrQttC1INC+0L/QuNGB0LDQvSDQvNC10YXQsNC90LjQt9C8INC10LPQviDQtNC10LnRgdGC0LLQuNGPJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDE5LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICdHb29nbGUg0L7QsdGK0Y/QstC40Lsg0L4g0YHQvtC30LTQsNC90LjQuCA1My3QutGD0LHQuNGC0L3QvtCz0L4g0LrQstCw0L3RgtC+0LLQvtCz0L4g0LrQvtC80L/RjNGO0YLQtdGA0LAnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRhdGU6IDIwMjAsXHJcbiAgICAgICAgICAgICAgICBldmVudDogJ9Cf0YDQuCDQsNC90LDQu9C40LfQtSDQvNGD0YDRh9C40YHQvtC90YHQutC+0LPQviDQvNC10YLQtdC+0YDQuNGC0LAg0L7QsdC90LDRgNGD0LbQtdC90Ysg0LTRgNC10LLQvdC10LnRiNC40LUg0L3QsCDQl9C10LzQu9C1INGH0LDRgdGC0LjRhtGLINCy0LXRidC10YHRgtCy0LAsINC/0L7Rj9Cy0LjQstGI0LjQtdGB0Y8g0LrQvtCz0LTQsCDQtdGJ0ZEg0L3QtSDRgdGD0YnQtdGB0YLQstC+0LLQsNC70L4g0KHQvtC70L3QtdGH0L3QvtC5INGB0LjRgdGC0LXQvNGLJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDIxLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQo9GH0ZHQvdGL0LUg0YHQvtC30LTQsNC70Lgg0LPQuNCx0YDQuNC00L3Ri9C1INGN0LzQsdGA0LjQvtC90Ysg0YfQtdC70L7QstC10LrQsCDQuCDQvtCx0LXQt9GM0Y/QvdGLJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiAyMDIyLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICfQndCw0LnQtNC10L3QviDQstGD0LvQutCw0L3QuNGH0LXRgdC60L7QtSDQvtC30LXRgNC+INGBINGD0YHQu9C+0LLQuNGP0LzQuCDQttC40LfQvdC4INC60LDQuiDQvdCwINCc0LDRgNGB0LUuINCSINCy0YPQu9C60LDQvdC40YfQtdGB0LrQvtC8INC+0LfQtdGA0LUg0LLRg9C70LrQsNC90LAg0J/QvtCw0YEg0L7QsdC40YLQsNC10YIg0LXQtNC40L3RgdGC0LLQtdC90L3Ri9C5INCy0LjQtCDQsdCw0LrRgtC10YDQuNC5IOKAlCBBY2lkaXBoaWxpdW0uINCi0LDQutC+0LUg0L7RgtC60YDRi9GC0LjQtSDQvdCw0LPQu9GP0LTQvdC+INC00LDRkdGCINC/0L7QvdGP0YLRjCwg0LrQsNC6INC90LAg0JzQsNGA0YHQtSDQvNC+0LbQtdGCINGB0YPRidC10YHRgtCy0L7QstCw0YLRjCDQttC40LfQvdGMJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfVxyXG5dOyIsImltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4vY29tcG9uZW50cy9Db250YWluZXInO1xyXG5pbXBvcnQgeyBEYXRlc0Nhcm91c2VsIH0gZnJvbSAnLi9jb21wb25lbnRzL0RhdGVzQ2Fyb3VzZWwnO1xyXG5pbXBvcnQgJy4vc3R5bGVzL3Jlc2V0LnNjc3MnO1xyXG5pbXBvcnQgJy4vQXBwLnNjc3MnO1xyXG5cclxuaW1wb3J0IHsgdGltZVBlcmlvZHMsIHRpbWVQZXJpb2RzMiB9IGZyb20gJy4vYXNzZXRzL2RhdGEvVGltZVBlcmlvZHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFwcCA9ICgpOiBKU1guRWxlbWVudCA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxDb250YWluZXI+XHJcbiAgICAgICAgICAgIDxEYXRlc0Nhcm91c2VsXHJcbiAgICAgICAgICAgICAgICB0aW1lUGVyaW9kcz17dGltZVBlcmlvZHN9XHJcbiAgICAgICAgICAgICAgICBjYXJvdXNlbFRpdGxlPXs8PtCY0YHRgtC+0YDQuNGH0LXRgdC60LjQtTxiciAvPtC00LDRgtGLPC8+fVxyXG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxJZD0nZGF0ZXNfMSdcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPERhdGVzQ2Fyb3VzZWxcclxuICAgICAgICAgICAgICAgIHRpbWVQZXJpb2RzPXt0aW1lUGVyaW9kczJ9XHJcbiAgICAgICAgICAgICAgICBjYXJvdXNlbFRpdGxlPXs8PtCY0YHRgtC+0YDQuNGH0LXRgdC60LjQtTxiciAvPtC00LDRgtGLPC8+fVxyXG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxJZD0nZGF0ZXNfMidcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L0NvbnRhaW5lcj5cclxuICAgICk7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9BcHAnO1xyXG5cclxuY29uc3Qgcm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKTtcclxuaWYgKHJvb3QpIHtcclxuICBjcmVhdGVSb290KHJvb3QpLnJlbmRlcig8QXBwIC8+KTtcclxufSJdLCJuYW1lcyI6WyJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZyIsImFyZ1R5cGUiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5uZXIiLCJhcHBseSIsInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaW5jbHVkZXMiLCJrZXkiLCJjYWxsIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwiaXNDYWxsYWJsZSIsInRyeVRvU3RyaW5nIiwiJFR5cGVFcnJvciIsIlR5cGVFcnJvciIsImFyZ3VtZW50IiwiJFN0cmluZyIsIlN0cmluZyIsIndlbGxLbm93blN5bWJvbCIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5IiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsInVuZGVmaW5lZCIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIiwiaXNPYmplY3QiLCIkZm9yRWFjaCIsIlNUUklDVF9NRVRIT0QiLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiZm9yRWFjaCIsImNhbGxiYWNrZm4iLCJ0aGlzIiwiYmluZCIsInRvT2JqZWN0IiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsImlzQ29uc3RydWN0b3IiLCJsZW5ndGhPZkFycmF5TGlrZSIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3IiLCJnZXRJdGVyYXRvck1ldGhvZCIsIiRBcnJheSIsImFycmF5TGlrZSIsIk8iLCJJU19DT05TVFJVQ1RPUiIsImFyZ3VtZW50c0xlbmd0aCIsIm1hcGZuIiwibWFwcGluZyIsInJlc3VsdCIsInN0ZXAiLCJpdGVyYXRvciIsIm5leHQiLCJpdGVyYXRvck1ldGhvZCIsImluZGV4IiwiZG9uZSIsInRvSW5kZXhlZE9iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluZGV4T2YiLCJ1bmN1cnJ5VGhpcyIsIkluZGV4ZWRPYmplY3QiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJUWVBFIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9SRUpFQ1QiLCJOT19IT0xFUyIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwidGFyZ2V0IiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlclJlamVjdCIsImZhaWxzIiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiY29uc3RydWN0b3IiLCJmb28iLCJCb29sZWFuIiwibWV0aG9kIiwibWF4IiwiTWF0aCIsInN0YXJ0IiwiZW5kIiwiayIsImZpbiIsIm4iLCJzbGljZSIsIm9yaWdpbmFsQXJyYXkiLCJDIiwiYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJhbk9iamVjdCIsIml0ZXJhdG9yQ2xvc2UiLCJmbiIsIkVOVFJJRVMiLCJlcnJvciIsIklURVJBVE9SIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZnJvbSIsImV4ZWMiLCJTS0lQX0NMT1NJTkciLCJJVEVSQVRJT05fU1VQUE9SVCIsIm9iamVjdCIsInN0cmluZ1NsaWNlIiwiaXQiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJjbGFzc29mUmF3IiwiVE9fU1RSSU5HX1RBRyIsIiRPYmplY3QiLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsInNvdXJjZSIsImV4Y2VwdGlvbnMiLCJrZXlzIiwiZiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkYiLCJnZXRQcm90b3R5cGVPZiIsIkRFU0NSSVBUT1JTIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwidG9Qcm9wZXJ0eUtleSIsInByb3BlcnR5S2V5Iiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImhpbnQiLCJtYWtlQnVpbHRJbiIsImRlZmluZUdsb2JhbFByb3BlcnR5Iiwib3B0aW9ucyIsInNpbXBsZSIsIm5hbWUiLCJnbG9iYWwiLCJ1bnNhZmUiLCJub25Db25maWd1cmFibGUiLCJub25Xcml0YWJsZSIsImdldCIsImRvY3VtZW50QWxsIiwiZG9jdW1lbnQiLCJhbGwiLCJJU19IVE1MRERBIiwiRVhJU1RTIiwiY3JlYXRlRWxlbWVudCIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY2xhc3NMaXN0IiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlIiwiZ2V0QnVpbHRJbiIsIm1hdGNoIiwidmVyc2lvbiIsInVzZXJBZ2VudCIsInByb2Nlc3MiLCJEZW5vIiwidmVyc2lvbnMiLCJ2OCIsInNwbGl0IiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZGVmaW5lQnVpbHRJbiIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsImRvbnRDYWxsR2V0U2V0IiwiZm9yY2VkIiwic2hhbSIsIk5BVElWRV9CSU5EIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvbiIsIlJlZmxlY3QiLCJhQ2FsbGFibGUiLCJ0ZXN0IiwiZ2V0RGVzY3JpcHRvciIsIlBST1BFUiIsIkNPTkZJR1VSQUJMRSIsInVuY3VycnlUaGlzV2l0aEJpbmQiLCJhRnVuY3Rpb24iLCJuYW1lc3BhY2UiLCJjbGFzc29mIiwiZ2V0TWV0aG9kIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJJdGVyYXRvcnMiLCJ1c2luZ0l0ZXJhdG9yIiwiViIsIlAiLCJmdW5jIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZyIsImEiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiZHVtbXkiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwic3RvcmUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsInNldCIsImhhcyIsIk5BVElWRV9XRUFLX01BUCIsInNoYXJlZCIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIldlYWtNYXAiLCJzdGF0ZSIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwidHlwZSIsIiRkb2N1bWVudEFsbCIsIm5vb3AiLCJlbXB0eSIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yUmVnRXhwIiwiSU5DT1JSRUNUX1RPX1NUUklORyIsImlzQ29uc3RydWN0b3JNb2Rlcm4iLCJpc0NvbnN0cnVjdG9yTGVnYWN5IiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiZGF0YSIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwic3RyaW5nIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiaXNQcm90b3R5cGVPZiIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiJFN5bWJvbCIsImtpbmQiLCJpbm5lclJlc3VsdCIsImlubmVyRXJyb3IiLCJJdGVyYXRvclByb3RvdHlwZSIsInNldFRvU3RyaW5nVGFnIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJOQU1FIiwiRU5VTUVSQUJMRV9ORVhUIiwiJCIsIklTX1BVUkUiLCJGdW5jdGlvbk5hbWUiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiSXRlcmF0b3JzQ29yZSIsIlBST1BFUl9GVU5DVElPTl9OQU1FIiwiQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiS0VZUyIsIlZBTFVFUyIsIkl0ZXJhYmxlIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJLRVkiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiZW50cmllcyIsInZhbHVlcyIsInByb3RvIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsInRvTGVuZ3RoIiwib2JqIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsIkNPTkZJR1VSQUJMRV9MRU5HVEgiLCJURU1QTEFURSIsImdldHRlciIsInNldHRlciIsImFyaXR5IiwiY2VpbCIsImZsb29yIiwidHJ1bmMiLCJ4IiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllc01vZHVsZSIsImVudW1CdWdLZXlzIiwiaHRtbCIsIlBST1RPVFlQRSIsIlNDUklQVCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdCIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIkpTIiwiZG9tYWluIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIlByb3BlcnRpZXMiLCJWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyIsIm9iamVjdEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJJRThfRE9NX0RFRklORSIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJFTlVNRVJBQkxFIiwiV1JJVEFCTEUiLCJBdHRyaWJ1dGVzIiwiY3VycmVudCIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJhcnJheVNsaWNlIiwid2luZG93TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJjb25jYXQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJPYmplY3RQcm90b3R5cGUiLCJuYW1lcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyIsIlVOU1VQUE9SVEVEX0RPVF9BTEwiLCJVTlNVUFBPUlRFRF9OQ0ciLCJuYXRpdmVSZXBsYWNlIiwibmF0aXZlRXhlYyIsIlJlZ0V4cCIsInBhdGNoZWRFeGVjIiwiY2hhckF0IiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwibGFzdEluZGV4IiwiVU5TVVBQT1JURURfWSIsIkJST0tFTl9DQVJFVCIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJncm91cCIsInJlIiwic3RyIiwicmF3IiwiZ3JvdXBzIiwic3RpY2t5IiwiZmxhZ3MiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsImhhc0luZGljZXMiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwidW5pY29kZSIsInVuaWNvZGVTZXRzIiwiJFJlZ0V4cCIsIk1JU1NFRF9TVElDS1kiLCJUQUciLCJ1aWQiLCJTSEFSRUQiLCJtb2RlIiwiY29weXJpZ2h0IiwibGljZW5zZSIsInRvSW50ZWdlck9ySW5maW5pdHkiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiY2hhckNvZGVBdCIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwiZmlyc3QiLCJzZWNvbmQiLCJTIiwicG9zaXRpb24iLCJzaXplIiwiY29kZUF0IiwiJHJlcGVhdCIsInJlcGVhdCIsIklTX0VORCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsIiRSYW5nZUVycm9yIiwiUmFuZ2VFcnJvciIsImNvdW50IiwiSW5maW5pdHkiLCJ3aGl0ZXNwYWNlcyIsIndoaXRlc3BhY2UiLCJsdHJpbSIsInJ0cmltIiwidHJpbSIsInN5bWJvbCIsIlN5bWJvbCIsIlN5bWJvbFByb3RvdHlwZSIsIlRPX1BSSU1JVElWRSIsIk5BVElWRV9TWU1CT0wiLCJrZXlGb3IiLCJtaW4iLCJpbnRlZ2VyIiwibnVtYmVyIiwiaXNTeW1ib2wiLCJleG90aWNUb1ByaW0iLCJ0b1ByaW1pdGl2ZSIsImlkIiwicG9zdGZpeCIsInJhbmRvbSIsInBhdGgiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwic3ltYm9sRm9yIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsImRlc2NyaXB0aW9uIiwiZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsIlNQRUNJRVNfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJsZW4iLCJFIiwiQSIsIiRmaWx0ZXIiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJpdGVyYWJsZSIsIiRpbmRleE9mIiwibmF0aXZlSW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCJzZWFyY2hFbGVtZW50IiwiYWRkVG9VbnNjb3BhYmxlcyIsImRlZmluZUl0ZXJhdG9yIiwiY3JlYXRlSXRlclJlc3VsdE9iamVjdCIsIkFSUkFZX0lURVJBVE9SIiwic2V0SW50ZXJuYWxTdGF0ZSIsIml0ZXJhdGVkIiwiQXJndW1lbnRzIiwiJG1hcCIsIm5hdGl2ZVNsaWNlIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsIkNvbnN0cnVjdG9yIiwiZGF0ZVRvUHJpbWl0aXZlIiwiRGF0ZVByb3RvdHlwZSIsIkRhdGUiLCJGVU5DVElPTl9OQU1FX0VYSVNUUyIsIm5hbWVSRSIsInJlZ0V4cEV4ZWMiLCIkc3RyaW5naWZ5IiwibnVtYmVyVG9TdHJpbmciLCJ0ZXN0ZXIiLCJsb3ciLCJoaSIsIldST05HX1NZTUJPTFNfQ09OVkVSU0lPTiIsIklMTF9GT1JNRURfVU5JQ09ERSIsInN0cmluZ2lmeVdpdGhTeW1ib2xzRml4IiwicmVwbGFjZXIiLCJhcmdzIiwiJHJlcGxhY2VyIiwiZml4SWxsRm9ybWVkIiwib2Zmc2V0IiwicHJldiIsInN0cmluZ2lmeSIsInNwYWNlIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJ0aGlzTnVtYmVyVmFsdWUiLCJOVU1CRVIiLCJOYXRpdmVOdW1iZXIiLCJOdW1iZXJQcm90b3R5cGUiLCJ0b051bWVyaWMiLCJwcmltVmFsdWUiLCJ0b051bWJlciIsInRoaXJkIiwicmFkaXgiLCJtYXhDb2RlIiwiZGlnaXRzIiwiY29kZSIsIk5hTiIsInBhcnNlSW50IiwiTnVtYmVyV3JhcHBlciIsImoiLCJuYXRpdmVUb0ZpeGVkIiwidG9GaXhlZCIsInBvdyIsImFjYyIsIm11bHRpcGx5IiwiYyIsImMyIiwiZGl2aWRlIiwiZGF0YVRvU3RyaW5nIiwicyIsInQiLCJmcmFjdGlvbkRpZ2l0cyIsImUiLCJ6IiwiZnJhY3REaWdpdHMiLCJzaWduIiwieDIiLCJsb2ciLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJuYXRpdmVLZXlzIiwiU1RSSU5HX0lURVJBVE9SIiwicG9pbnQiLCIkcGFkU3RhcnQiLCJwYWRTdGFydCIsIiR0b1N0cmluZyIsIm5hdGl2ZU9iamVjdENyZWF0ZSIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCIsImRlZmluZVdlbGxLbm93blN5bWJvbCIsImRlZmluZVN5bWJvbFRvUHJpbWl0aXZlIiwiSElEREVOIiwiU1lNQk9MIiwiUU9iamVjdCIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJ3cmFwIiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiSVNfT0JKRUNUX1BST1RPVFlQRSIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIk5hdGl2ZVN5bWJvbCIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJ0aGlzU3ltYm9sVmFsdWUiLCJzeW1ib2xEZXNjcmlwdGl2ZVN0cmluZyIsInJlZ2V4cCIsImRlc2MiLCJOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJzeW0iLCJET01JdGVyYWJsZXMiLCJoYW5kbGVQcm90b3R5cGUiLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ09MTEVDVElPTl9OQU1FIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwibG9jYWxzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJpdGVtIiwibmVlZExheWVyIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfayIsInVybCIsIl9fZXNNb2R1bGUiLCJoYXNoIiwibmVlZFF1b3RlcyIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic291cmNlTWFwcGluZyIsImFhIiwiY2EiLCJwIiwiYiIsImRhIiwiU2V0IiwiZWEiLCJmYSIsImhhIiwiYWRkIiwiaWEiLCJqYSIsImthIiwibGEiLCJtYSIsInYiLCJkIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJyYSIsInNhIiwidG9VcHBlckNhc2UiLCJ0YSIsInBhIiwiaXNOYU4iLCJxYSIsIm9hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJ1YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmEiLCJmb3IiLCJ3YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJhc3NpZ24iLCJNYSIsIkVycm9yIiwic3RhY2siLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJsIiwiaCIsImRpc3BsYXlOYW1lIiwiUGEiLCJyZW5kZXIiLCJRYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUmEiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJjYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJ0YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTmIiLCJtIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiV2IiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIlhiIiwiWmIiLCJjaGlsZCIsInNpYmxpbmciLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiY2x6MzIiLCJwYyIsInFjIiwiTE4yIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwidmMiLCJ4YyIsInljIiwiemMiLCJBYyIsImV2ZW50VGltZXMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIk1hcCIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiVGMiLCJuYXRpdmVFdmVudCIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJ0YXJnZXRDb250YWluZXJzIiwiVmMiLCJXYyIsInByaW9yaXR5IiwiaXNEZWh5ZHJhdGVkIiwiY29udGFpbmVySW5mbyIsIlhjIiwiWWMiLCJkaXNwYXRjaEV2ZW50Iiwic2hpZnQiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJkZCIsImVkIiwidHJhbnNpdGlvbiIsImZkIiwiZ2QiLCJoZCIsIlVjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsImZyb21DaGFyQ29kZSIsImxvY2F0aW9uIiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImhyZWYiLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIkoiLCJ1IiwidyIsInRmIiwidWYiLCJ2ZiIsIndmIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJzZXRUaW1lb3V0IiwiR2YiLCJjbGVhclRpbWVvdXQiLCJIZiIsIlByb21pc2UiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwicmVzb2x2ZSIsInRoZW4iLCJjYXRjaCIsIklmIiwiS2YiLCJMZiIsIk1mIiwicHJldmlvdXNTaWJsaW5nIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsIkkiLCJ6ZyIsIkFnIiwiQmciLCJlbGVtZW50VHlwZSIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIkRnIiwiRWciLCJGZyIsIkdnIiwibWVtb2l6ZWRQcm9wcyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJkZWZhdWx0UHJvcHMiLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJfY3VycmVudFZhbHVlIiwiU2ciLCJjaGlsZExhbmVzIiwiVGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsIlVnIiwiVmciLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsIldnIiwiWGciLCJZZyIsImludGVybGVhdmVkIiwiWmciLCIkZyIsImFoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInBlbmRpbmciLCJlZmZlY3RzIiwiYmgiLCJjaCIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJkaCIsIksiLCJlaCIsImZoIiwiZ2giLCJxIiwiciIsInkiLCJoaCIsImloIiwiamgiLCJDb21wb25lbnQiLCJyZWZzIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkwiLCJsaCIsIm1oIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm9oIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJwaCIsImNvbnRleHRUeXBlIiwidXBkYXRlciIsInFoIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmgiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInNoIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsImltcGxlbWVudGF0aW9uIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJ0YWdOYW1lIiwiSmgiLCJLaCIsIkxoIiwiTSIsIk1oIiwicmV2ZWFsT3JkZXIiLCJOaCIsIk9oIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJQaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJRaCIsIlJoIiwiTiIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiUSIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJxdWV1ZSIsImRpIiwiZWkiLCJmaSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJnaSIsImlpIiwiamkiLCJraSIsImdldFNuYXBzaG90IiwibGkiLCJtaSIsIlIiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJyaSIsImRlc3Ryb3kiLCJkZXBzIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwiSGkiLCJJaSIsIkppIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIktpIiwibWVzc2FnZSIsImRpZ2VzdCIsIkxpIiwiTWkiLCJjb25zb2xlIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJSaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiU2kiLCJjb21wb25lbnRTdGFjayIsIlRpIiwicGluZ0NhY2hlIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJSZWFjdEN1cnJlbnRPd25lciIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJjb21wYXJlIiwiY2oiLCJkaiIsImVqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJmaiIsImdqIiwiaGoiLCJpaiIsImpqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwia2oiLCJsaiIsInBlbmRpbmdDb250ZXh0IiwibWoiLCJBaiIsIkNqIiwiRGoiLCJuaiIsIm9qIiwicGoiLCJmYWxsYmFjayIsInFqIiwicmoiLCJ0aiIsImRhdGFzZXQiLCJkZ3N0IiwidWoiLCJ2aiIsIl9yZWFjdFJldHJ5Iiwic2oiLCJzdWJ0cmVlRmxhZ3MiLCJ3aiIsInhqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwieWoiLCJFaiIsIkZqIiwiR2oiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIlQiLCJIaiIsIklqIiwiSmoiLCJLaiIsIlUiLCJMaiIsIldlYWtTZXQiLCJNaiIsIlciLCJOaiIsIk9qIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiWGoiLCJYIiwiWWoiLCJaaiIsImFrIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJpc0hpZGRlbiIsImdrIiwiaGsiLCJpayIsImprIiwia2siLCJsayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiV2siLCJtayIsIm5rIiwib2siLCJwayIsIlkiLCJaIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsIkVrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwid2MiLCJjYWxsYmFja1ByaW9yaXR5IiwiaWciLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJPayIsIlBrIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlFrIiwidGltZW91dEhhbmRsZSIsIlJrIiwiU2siLCJUayIsIlVrIiwiVmsiLCJtdXRhYmxlUmVhZExhbmVzIiwiQmMiLCJQaiIsIm9uQ29tbWl0RmliZXJSb290IiwibWMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJYayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIllrIiwiWmsiLCJhbCIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJibCIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJjbCIsImNhY2hlIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImRsIiwiZmwiLCJnbCIsImhsIiwiaWwiLCJqbCIsInpqIiwiJGsiLCJsbCIsInJlcG9ydEVycm9yIiwibWwiLCJfaW50ZXJuYWxSb290IiwibmwiLCJvbCIsInBsIiwicWwiLCJzbCIsInJsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwic3BsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJ0bCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInVsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImVyciIsIl9fc2VsZiIsIl9fc291cmNlIiwiRnJhZ21lbnQiLCJqc3giLCJqc3hzIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJpbnNlcnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIm8iLCJwcm9wIiwiYmFzZVVSSSIsIm5jIiwiQ29udGFpbmVyIiwiY2xhc3NOYW1lIiwicmVzdCIsImNuIiwic3R5bGVzIiwidXNlTWF0aE1lZGlhIiwicXVlcnkiLCJzZXRNYXRoIiwibWF0Y2hPYmoiLCJtYXRjaE1lZGlhIiwiaGFuZGxlTWF0Y2giLCJtYXRjaGVzIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX3JldmVydGluZyIsIl9nbG9iYWxUaW1lbGluZSIsIl93aW4iLCJfY29yZUluaXR0ZWQiLCJfZG9jIiwiX2NvcmVSZWFkeSIsIl9sYXN0UmVuZGVyZWRGcmFtZSIsIl9xdWlja1R3ZWVuIiwiX3RpY2tlckFjdGl2ZSIsIm4xIiwiZWFzZU91dCIsIl9jb25maWciLCJhdXRvU2xlZXAiLCJmb3JjZTNEIiwibnVsbFRhcmdldFdhcm4iLCJ1bml0cyIsIl9kZWZhdWx0cyIsImR1cmF0aW9uIiwib3ZlcndyaXRlIiwiX2JpZ051bSIsIl90aW55TnVtIiwiXzJQSSIsIlBJIiwiX0hBTEZfUEkiLCJfZ3NJRCIsIl9zcXJ0Iiwic3FydCIsIl9jb3MiLCJjb3MiLCJfc2luIiwic2luIiwiX2lzU3RyaW5nIiwiX2lzRnVuY3Rpb24iLCJfaXNOdW1iZXIiLCJfaXNVbmRlZmluZWQiLCJfaXNPYmplY3QiLCJfaXNOb3RGYWxzZSIsIl93aW5kb3dFeGlzdHMiLCJfaXNGdW5jT3JTdHJpbmciLCJfaXNUeXBlZEFycmF5IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJfaXNBcnJheSIsIl9zdHJpY3ROdW1FeHAiLCJfbnVtRXhwIiwiX251bVdpdGhVbml0RXhwIiwiX2NvbXBsZXhTdHJpbmdOdW1FeHAiLCJfcmVsRXhwIiwiX2RlbGltaXRlZFZhbHVlRXhwIiwiX3VuaXRFeHAiLCJfZ2xvYmFscyIsIl9pbnN0YWxsU2NvcGUiLCJfaW5zdGFsbCIsInNjb3BlIiwiX21lcmdlIiwiZ3NhcCIsIl9taXNzaW5nUGx1Z2luIiwicHJvcGVydHkiLCJ3YXJuIiwiX3dhcm4iLCJzdXBwcmVzcyIsIl9hZGRHbG9iYWwiLCJfZW1wdHlGdW5jIiwiX3N0YXJ0QXRSZXZlcnRDb25maWciLCJzdXBwcmVzc0V2ZW50cyIsImlzU3RhcnQiLCJraWxsIiwiX3JldmVydENvbmZpZ05vS2lsbCIsIl9yZXZlcnRDb25maWciLCJfcmVzZXJ2ZWRQcm9wcyIsIl9sYXp5VHdlZW5zIiwiX2xhenlMb29rdXAiLCJfcGx1Z2lucyIsIl9lZmZlY3RzIiwiX25leHRHQ0ZyYW1lIiwiX2hhcm5lc3NQbHVnaW5zIiwiX2NhbGxiYWNrTmFtZXMiLCJfaGFybmVzcyIsInRhcmdldHMiLCJoYXJuZXNzUGx1Z2luIiwiX2dzYXAiLCJoYXJuZXNzIiwidGFyZ2V0VGVzdCIsIkdTQ2FjaGUiLCJfZ2V0Q2FjaGUiLCJfZ2V0UHJvcGVydHkiLCJnZXRBdHRyaWJ1dGUiLCJfZm9yRWFjaE5hbWUiLCJfcm91bmQiLCJyb3VuZCIsIl9yb3VuZFByZWNpc2UiLCJfcGFyc2VSZWxhdGl2ZSIsIm9wZXJhdG9yIiwicGFyc2VGbG9hdCIsInN1YnN0ciIsIl9hcnJheUNvbnRhaW5zQW55IiwidG9TZWFyY2giLCJ0b0ZpbmQiLCJfbGF6eVJlbmRlciIsInR3ZWVuIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJmb3JjZSIsIl9pbml0dGVkIiwiX3N0YXJ0QXQiLCJfbnVtZXJpY0lmUG9zc2libGUiLCJfcGFzc1Rocm91Z2giLCJfc2V0RGVmYXVsdHMiLCJkZWZhdWx0cyIsInRvTWVyZ2UiLCJfbWVyZ2VEZWVwIiwiX2NvcHlFeGNsdWRpbmciLCJleGNsdWRpbmciLCJjb3B5IiwiX2luaGVyaXREZWZhdWx0cyIsInZhcnMiLCJleGNsdWRlRHVyYXRpb24iLCJwYXJlbnQiLCJrZXlmcmFtZXMiLCJpbmhlcml0IiwiX2RwIiwiX2FkZExpbmtlZExpc3RJdGVtIiwiZmlyc3RQcm9wIiwibGFzdFByb3AiLCJzb3J0QnkiLCJfcHJldiIsIl9uZXh0IiwiX3JlbW92ZUxpbmtlZExpc3RJdGVtIiwiX3JlbW92ZUZyb21QYXJlbnQiLCJvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIiwiYXV0b1JlbW92ZUNoaWxkcmVuIiwiX2FjdCIsIl91bmNhY2hlIiwiX2VuZCIsIl9kdXIiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmVjYWNoZUFuY2VzdG9ycyIsInRvdGFsRHVyYXRpb24iLCJfcmV3aW5kU3RhcnRBdCIsInRvdGFsVGltZSIsInJldmVydCIsImltbWVkaWF0ZVJlbmRlciIsImF1dG9SZXZlcnQiLCJfaGFzTm9QYXVzZWRBbmNlc3RvcnMiLCJfdHMiLCJfZWxhcHNlZEN5Y2xlRHVyYXRpb24iLCJfcmVwZWF0IiwiX2FuaW1hdGlvbkN5Y2xlIiwiX3RUaW1lIiwiX3JEZWxheSIsInRUaW1lIiwiY3ljbGVEdXJhdGlvbiIsIndob2xlIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwiX3REdXIiLCJfc2V0RW5kIiwiYWJzIiwiX3J0cyIsIl9hbGlnblBsYXloZWFkIiwic21vb3RoQ2hpbGRUaW1pbmciLCJfdGltZSIsIl9wb3N0QWRkQ2hlY2tzIiwidGltZWxpbmUiLCJyYXdUaW1lIiwiX2NsYW1wIiwiX3pUaW1lIiwiX2FkZFRvVGltZWxpbmUiLCJza2lwQ2hlY2tzIiwiX3BhcnNlUG9zaXRpb24iLCJfZGVsYXkiLCJ0aW1lU2NhbGUiLCJfc29ydCIsIl9pc0Zyb21PckZyb21TdGFydCIsIl9yZWNlbnQiLCJfc2Nyb2xsVHJpZ2dlciIsInRyaWdnZXIiLCJTY3JvbGxUcmlnZ2VyIiwiX2F0dGVtcHRJbml0VHdlZW4iLCJfaW5pdFR3ZWVuIiwiX3B0IiwiX3RpY2tlciIsImZyYW1lIiwiX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCIsIl9yZWYiLCJfbG9jayIsIl9yZWYyIiwiX3NldER1cmF0aW9uIiwic2tpcFVuY2FjaGUiLCJsZWF2ZVBsYXloZWFkIiwiZHVyIiwidG90YWxQcm9ncmVzcyIsIl9vblVwZGF0ZVRvdGFsRHVyYXRpb24iLCJUaW1lbGluZSIsIl96ZXJvUG9zaXRpb24iLCJlbmRUaW1lIiwicGVyY2VudEFuaW1hdGlvbiIsImlzUGVyY2VudCIsImxhYmVscyIsInJlY2VudCIsImNsaXBwZWREdXJhdGlvbiIsIl9jcmVhdGVUd2VlblR5cGUiLCJwYXJhbXMiLCJpclZhcnMiLCJpc0xlZ2FjeSIsInZhcnNJbmRleCIsInJ1bkJhY2t3YXJkcyIsInN0YXJ0QXQiLCJUd2VlbiIsIl9jb25kaXRpb25hbFJldHVybiIsImdldFVuaXQiLCJfc2xpY2UiLCJfaXNBcnJheUxpa2UiLCJub25FbXB0eSIsImxlYXZlU3RyaW5ncyIsInNlbGVjdG9yIiwiX3dha2UiLCJhciIsImFjY3VtdWxhdG9yIiwiX2FjY3VtdWxhdG9yIiwiX2ZsYXR0ZW4iLCJuYXRpdmVFbGVtZW50Iiwic2h1ZmZsZSIsInNvcnQiLCJkaXN0cmlidXRlIiwiZWFjaCIsImVhc2UiLCJfcGFyc2VFYXNlIiwiaXNEZWNpbWFsIiwicmF0aW9zIiwiYXhpcyIsInJhdGlvWCIsInJhdGlvWSIsImNlbnRlciIsImVkZ2VzIiwib3JpZ2luWCIsIm9yaWdpblkiLCJ3cmFwQXQiLCJkaXN0YW5jZXMiLCJncmlkIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYW1vdW50IiwiX2ludmVydEVhc2UiLCJfcm91bmRNb2RpZmllciIsInNuYXAiLCJzbmFwVG8iLCJyYWRpdXMiLCJpczJEIiwiaW5jcmVtZW50IiwiZHgiLCJkeSIsImNsb3Nlc3QiLCJyb3VuZGluZ0luY3JlbWVudCIsInJldHVybkZ1bmN0aW9uIiwiX3dyYXBBcnJheSIsIndyYXBwZXIiLCJfcmVwbGFjZVJhbmRvbSIsIm51bXMiLCJtYXBSYW5nZSIsImluTWluIiwiaW5NYXgiLCJvdXRNaW4iLCJvdXRNYXgiLCJpblJhbmdlIiwib3V0UmFuZ2UiLCJfZ2V0TGFiZWxJbkRpcmVjdGlvbiIsImZyb21UaW1lIiwiYmFja3dhcmQiLCJkaXN0YW5jZSIsImxhYmVsIiwiX2NhbGxiYWNrIiwiZXhlY3V0ZUxhenlGaXJzdCIsInByZXZDb250ZXh0IiwiX2N0eCIsImNhbGxiYWNrU2NvcGUiLCJfaW50ZXJydXB0Iiwic2Nyb2xsVHJpZ2dlciIsInByb2dyZXNzIiwiX2NyZWF0ZVBsdWdpbiIsImNvbmZpZyIsImlzRnVuYyIsImluaXQiLCJfcHJvcHMiLCJpbnN0YW5jZURlZmF1bHRzIiwiX3JlbmRlclByb3BUd2VlbnMiLCJfYWRkUHJvcFR3ZWVuIiwiX2tpbGxQcm9wVHdlZW5zT2YiLCJtb2RpZmllciIsIl9hZGRQbHVnaW5Nb2RpZmllciIsInJhd1ZhcnMiLCJzdGF0aWNzIiwiZ2V0U2V0dGVyIiwiX2dldFNldHRlciIsImFsaWFzZXMiLCJyZWdpc3RlciIsIlByb3BUd2VlbiIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsImJsYWNrIiwibWFyb29uIiwidGVhbCIsImJsdWUiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsInllbGxvdyIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJncmVlbiIsInJlZCIsInBpbmsiLCJjeWFuIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwibTEiLCJtMiIsInNwbGl0Q29sb3IiLCJ0b0hTTCIsImZvcmNlQWxwaGEiLCJ3YXNIU0wiLCJOdW1iZXIiLCJfY29sb3JPcmRlckRhdGEiLCJfY29sb3JFeHAiLCJfZm9ybWF0Q29sb3JzIiwib3JkZXJNYXRjaERhdGEiLCJzaGVsbCIsImNvbG9ycyIsIl9oc2xFeHAiLCJfY29sb3JTdHJpbmdGaWx0ZXIiLCJjb21iaW5lZCIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfZ2V0VGltZSIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfc3RhcnRUaW1lIiwiX2xhc3RVcGRhdGUiLCJfZ2FwIiwiX25leHRUaW1lIiwiX2xpc3RlbmVycyIsIl90aWNrIiwib3ZlcmxhcCIsImVsYXBzZWQiLCJtYW51YWwiLCJ0aWNrIiwiZGVsdGFSYXRpbyIsImZwcyIsIndha2UiLCJnc2FwVmVyc2lvbnMiLCJHcmVlblNvY2tHbG9iYWxzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2xlZXAiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImxhZ1Ntb290aGluZyIsInRocmVzaG9sZCIsImFkanVzdGVkTGFnIiwiX2ZwcyIsIm9uY2UiLCJwcmlvcml0aXplIiwiX2Vhc2VNYXAiLCJfY3VzdG9tRWFzZUV4cCIsIl9xdW90ZXNFeHAiLCJfcGFyc2VPYmplY3RJblN0cmluZyIsInBhcnNlZFZhbCIsImxhc3RJbmRleE9mIiwiX3Byb3BhZ2F0ZVlveW9FYXNlIiwiaXNZb3lvIiwiX2ZpcnN0IiwieW95b0Vhc2UiLCJfeW95byIsIl9lYXNlIiwiX3lFYXNlIiwiZGVmYXVsdEVhc2UiLCJuZXN0ZWQiLCJfQ0UiLCJfY29uZmlnRWFzZUZyb21TdHJpbmciLCJfaW5zZXJ0RWFzZSIsImVhc2VJbiIsImVhc2VJbk91dCIsImxvd2VyY2FzZU5hbWUiLCJfZWFzZUluT3V0RnJvbU91dCIsIl9jb25maWdFbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwicDEiLCJwMiIsInAzIiwiYXNpbiIsIl9jb25maWdCYWNrIiwib3ZlcnNob290IiwicG93ZXIiLCJMaW5lYXIiLCJlYXNlTm9uZSIsIm5vbmUiLCJTdGVwcGVkRWFzZSIsInN0ZXBzIiwiaW1tZWRpYXRlU3RhcnQiLCJBbmltYXRpb24iLCJyZXBlYXREZWxheSIsInlveW8iLCJfcHJvdG8iLCJfdG90YWxUaW1lIiwiX3B0TG9va3VwIiwiX3BUaW1lIiwicmF0aW8iLCJpdGVyYXRpb24iLCJfcHMiLCJwYXVzZWQiLCJpbmNsdWRlUmVwZWF0cyIsIndyYXBSZXBlYXRzIiwicHJldklzUmV2ZXJ0aW5nIiwiZ2xvYmFsVGltZSIsInNlZWsiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicGxheSIsInJldmVyc2VkIiwicmV2ZXJzZSIsInBhdXNlIiwiYXRUaW1lIiwicmVzdW1lIiwiaW52YWxpZGF0ZSIsImlzQWN0aXZlIiwiZXZlbnRDYWxsYmFjayIsIl9vblVwZGF0ZSIsIm9uRnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJfdGhlbiIsIl9wcm9tIiwiX0FuaW1hdGlvbiIsIl90aGlzIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsInRvIiwiZnJvbVRvIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsInN0YWdnZXIiLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGUiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwicHJldlBhdXNlZCIsInBhdXNlVHdlZW4iLCJwcmV2U3RhcnQiLCJwcmV2SXRlcmF0aW9uIiwicHJldlRpbWUiLCJ0RHVyIiwiY3Jvc3NpbmdTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwicmVwZWF0UmVmcmVzaCIsIm9uUmVwZWF0IiwiX2hhc1BhdXNlIiwiX2ZvcmNpbmciLCJfbGFzdCIsIl9maW5kTmV4dFBhdXNlVHdlZW4iLCJvblVwZGF0ZSIsImFkanVzdGVkVGltZSIsIl90aGlzMiIsImFkZExhYmVsIiwiZ2V0Q2hpbGRyZW4iLCJ0d2VlbnMiLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwiZ2V0QnlJZCIsImFuaW1hdGlvbnMiLCJyZW1vdmVMYWJlbCIsImtpbGxUd2VlbnNPZiIsIl90b3RhbFRpbWUyIiwiYWRkUGF1c2UiLCJyZW1vdmVQYXVzZSIsIm9ubHlBY3RpdmUiLCJnZXRUd2VlbnNPZiIsIl9vdmVyd3JpdGluZ1R3ZWVuIiwicGFyc2VkVGFyZ2V0cyIsImlzR2xvYmFsVGltZSIsIl90YXJnZXRzIiwidHdlZW5UbyIsImluaXR0ZWQiLCJfdmFycyIsIl9vblN0YXJ0Iiwib25TdGFydCIsIm9uU3RhcnRQYXJhbXMiLCJ0d2VlbkZyb21UbyIsImZyb21Qb3NpdGlvbiIsInRvUG9zaXRpb24iLCJuZXh0TGFiZWwiLCJhZnRlclRpbWUiLCJwcmV2aW91c0xhYmVsIiwiYmVmb3JlVGltZSIsImN1cnJlbnRMYWJlbCIsInNoaWZ0Q2hpbGRyZW4iLCJhZGp1c3RMYWJlbHMiLCJzb2Z0IiwiY2xlYXIiLCJpbmNsdWRlTGFiZWxzIiwidXBkYXRlUm9vdCIsIl9mb3JjZUFsbFByb3BUd2VlbnMiLCJfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiIsInN0cmluZ0ZpbHRlciIsImZ1bmNQYXJhbSIsInN0YXJ0TnVtcyIsImVuZE51bSIsImNodW5rIiwic3RhcnROdW0iLCJoYXNSYW5kb20iLCJwdCIsIl9yZW5kZXJDb21wbGV4U3RyaW5nIiwibWF0Y2hJbmRleCIsImZwIiwib3B0aW9uYWwiLCJjdXJyZW50VmFsdWUiLCJwYXJzZWRTdGFydCIsIl9zZXR0ZXJGdW5jV2l0aFBhcmFtIiwiX3NldHRlckZ1bmMiLCJfc2V0dGVyUGxhaW4iLCJfcmVuZGVyQm9vbGVhbiIsIl9yZW5kZXJQbGFpbiIsIl9jaGVja1BsdWdpbiIsInBsdWdpbiIsInB0TG9va3VwIiwiX3BhcnNlRnVuY09yU3RyaW5nIiwiX3Byb2Nlc3NWYXJzIiwiY2xlYW5WYXJzIiwiaGFzUHJpb3JpdHkiLCJnc0RhdGEiLCJoYXJuZXNzVmFycyIsIm92ZXJ3cml0dGVuIiwib25VcGRhdGVQYXJhbXMiLCJwcmV2U3RhcnRBdCIsImZ1bGxUYXJnZXRzIiwiYXV0b092ZXJ3cml0ZSIsIl9vdmVyd3JpdGUiLCJfZnJvbSIsIl9wdENhY2hlIiwiX29wIiwiX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSIsIl9vbkluaXQiLCJfcGFyc2VLZXlmcmFtZSIsImFsbFByb3BzIiwiZWFzZUVhY2giLCJfc3RhZ2dlclR3ZWVuUHJvcHMiLCJfc3RhZ2dlclByb3BzVG9Ta2lwIiwiX0FuaW1hdGlvbjIiLCJza2lwSW5oZXJpdCIsIl90aGlzMyIsImN1clRhcmdldCIsInN0YWdnZXJGdW5jIiwic3RhZ2dlclZhcnNUb01lcmdlIiwiX3RoaXMzJHZhcnMiLCJrZiIsIl9wcm90bzMiLCJpc05lZ2F0aXZlIiwicHJldlJhdGlvIiwiX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuIiwicmVzZXRUbyIsInN0YXJ0SXNSZWxhdGl2ZSIsInJvb3RQVCIsImxvb2t1cCIsInB0Q2FjaGUiLCJfdXBkYXRlUHJvcFR3ZWVucyIsIm92ZXJ3cml0dGVuUHJvcHMiLCJjdXJMb29rdXAiLCJjdXJPdmVyd3JpdGVQcm9wcyIsImtpbGxpbmdUYXJnZXRzIiwicHJvcFR3ZWVuTG9va3VwIiwiZmlyc3RQVCIsImExIiwiYTIiLCJfYXJyYXlzTWF0Y2giLCJwcm9wZXJ0eUFsaWFzZXMiLCJfYWRkQWxpYXNlc1RvVmFycyIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJfc2V0dGVyQXR0cmlidXRlIiwiaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nIiwib3AiLCJkZXAiLCJfc2V0dGVyV2l0aE1vZGlmaWVyIiwibVNldCIsIm10IiwicHQyIiwicHIiLCJjaGFuZ2UiLCJyZW5kZXJlciIsIlR3ZWVuTWF4IiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJfbWVkaWEiLCJfZW1wdHlBcnJheSIsIl9sYXN0TWVkaWFUaW1lIiwiX2Rpc3BhdGNoIiwiX29uTWVkaWFDaGFuZ2UiLCJhbnlNYXRjaCIsInRvZ2dsZWQiLCJxdWVyaWVzIiwiY29uZGl0aW9ucyIsIm9uTWF0Y2giLCJDb250ZXh0IiwiX3IiLCJpc1JldmVydGVkIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImlnbm9yZSIsImdldFR3ZWVucyIsIl90aGlzNCIsIk1hdGNoTWVkaWEiLCJjb250ZXh0cyIsIl9wcm90bzYiLCJtcSIsImFjdGl2ZSIsImNvbmQiLCJhZGRMaXN0ZW5lciIsInJlZ2lzdGVyUGx1Z2luIiwiX2xlbjIiLCJfa2V5MiIsImdldFByb3BlcnR5IiwidW5pdCIsInVuY2FjaGUiLCJmb3JtYXQiLCJxdWlja1NldHRlciIsInNldHRlcnMiLCJxdWlja1RvIiwiX21lcmdlMiIsImlzVHdlZW5pbmciLCJyZWdpc3RlckVmZmVjdCIsIl9yZWYzIiwiZWZmZWN0IiwicGx1Z2lucyIsImV4dGVuZFRpbWVsaW5lIiwicGx1Z2luTmFtZSIsInJlZ2lzdGVyRWFzZSIsInBhcnNlRWFzZSIsImV4cG9ydFJvb3QiLCJpbmNsdWRlRGVsYXllZENhbGxzIiwibWF0Y2hNZWRpYVJlZnJlc2giLCJmb3VuZCIsInV0aWxzIiwid3JhcFlveW8iLCJ0b3RhbCIsImNsYW1wIiwicGlwZSIsIl9sZW4iLCJmdW5jdGlvbnMiLCJfa2V5IiwicmVkdWNlIiwidW5pdGl6ZSIsImludGVycG9sYXRlIiwibXV0YXRlIiwiaW50ZXJwb2xhdG9ycyIsImlzU3RyaW5nIiwibWFzdGVyIiwiaW5zdGFsbCIsInRpY2tlciIsImdsb2JhbFRpbWVsaW5lIiwiY29yZSIsImdsb2JhbHMiLCJnZXRDYWNoZSIsInJldmVydGluZyIsInRvQWRkIiwic3VwcHJlc3NPdmVyd3JpdGVzIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwibW9kaWZpZXJzIiwiX2FkZE1vZGlmaWVycyIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsIl9kb2NFbGVtZW50IiwiX3BsdWdpbkluaXR0ZWQiLCJfdGVtcERpdiIsIl9yZWNlbnRTZXR0ZXJQbHVnaW4iLCJfc3VwcG9ydHMzRCIsIl90cmFuc2Zvcm1Qcm9wcyIsIl9SQUQyREVHIiwiX0RFRzJSQUQiLCJfYXRhbjIiLCJhdGFuMiIsIl9jYXBzRXhwIiwiX2hvcml6b250YWxFeHAiLCJfY29tcGxleEV4cCIsIl9wcm9wZXJ0eUFsaWFzZXMiLCJhdXRvQWxwaGEiLCJzY2FsZSIsImFscGhhIiwiX3JlbmRlckNTU1Byb3AiLCJfcmVuZGVyUHJvcFdpdGhFbmQiLCJfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmciLCJfcmVuZGVyUm91bmRlZENTU1Byb3AiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIiwiX3NldHRlckNTU1N0eWxlIiwiX3NldHRlckNTU1Byb3AiLCJfc2V0dGVyVHJhbnNmb3JtIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsInJlbmRlclRyYW5zZm9ybSIsIl9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyIiwiX3RyYW5zZm9ybVByb3AiLCJfdHJhbnNmb3JtT3JpZ2luUHJvcCIsIl9zYXZlU3R5bGUiLCJpc05vdENTUyIsInRmbSIsIl9nZXQiLCJzdmciLCJzdmdvIiwiX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyIsInRyYW5zbGF0ZSIsInJlbW92ZVByb3BlcnR5IiwiX3JldmVydFN0eWxlIiwiX2dldFN0eWxlU2F2ZXIiLCJzYXZlciIsInNhdmUiLCJfY3JlYXRlRWxlbWVudCIsIm5zIiwiX2dldENvbXB1dGVkUHJvcGVydHkiLCJza2lwUHJlZml4RmFsbGJhY2siLCJjcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiX2NoZWNrUHJvcFByZWZpeCIsIl9wcmVmaXhlcyIsInByZWZlclByZWZpeCIsIl9pbml0Q29yZSIsIl9nZXRCQm94SGFjayIsInN3YXBJZlBvc3NpYmxlIiwiYmJveCIsIm93bmVyU1ZHRWxlbWVudCIsIm9sZFBhcmVudCIsIm9sZFNpYmxpbmciLCJvbGRDU1MiLCJnZXRCQm94IiwiX2dzYXBCQm94IiwiX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyIsImF0dHJpYnV0ZXNBcnJheSIsImhhc0F0dHJpYnV0ZSIsIl9nZXRCQm94IiwiYm91bmRzIiwiX2lzU1ZHIiwiZ2V0Q1RNIiwiX3JlbW92ZVByb3BlcnR5IiwiX2FkZE5vblR3ZWVuaW5nUFQiLCJiZWdpbm5pbmciLCJvbmx5U2V0QXRFbmQiLCJfbm9uQ29udmVydGlibGVVbml0cyIsImRlZyIsInJhZCIsInR1cm4iLCJfbm9uU3RhbmRhcmRMYXlvdXRzIiwiX2NvbnZlcnRUb1VuaXQiLCJweCIsImlzU1ZHIiwiY3VyVmFsdWUiLCJjdXJVbml0IiwiaG9yaXpvbnRhbCIsImlzUm9vdFNWRyIsIm1lYXN1cmVQcm9wZXJ0eSIsInRvUGl4ZWxzIiwidG9QZXJjZW50IiwiX3BhcnNlVHJhbnNmb3JtIiwib3JpZ2luIiwiX2ZpcnN0VHdvT25seSIsInpPcmlnaW4iLCJfc3BlY2lhbFByb3BzIiwiX3R3ZWVuQ29tcGxleENTU1N0cmluZyIsInN0YXJ0VmFsdWVzIiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiZW5kVW5pdCIsInN0YXJ0VW5pdCIsIl9rZXl3b3JkVG9QZXJjZW50IiwiYm90dG9tIiwicmlnaHQiLCJfcmVuZGVyQ2xlYXJQcm9wcyIsImNsZWFyVHJhbnNmb3JtcyIsImNsZWFyUHJvcHMiLCJfaWRlbnRpdHkyRE1hdHJpeCIsIl9yb3RhdGlvbmFsUHJvcGVydGllcyIsIl9pc051bGxUcmFuc2Zvcm0iLCJfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5IiwibWF0cml4U3RyaW5nIiwiX2dldE1hdHJpeCIsImZvcmNlMkQiLCJhZGRlZFRvRE9NIiwibWF0cml4IiwidHJhbnNmb3JtIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsInNtb290aCIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJkZXRlcm1pbmFudCIsInhPcmlnaW5PbGQiLCJ4T3JpZ2luIiwieU9yaWdpbk9sZCIsInlPcmlnaW4iLCJ4T2Zmc2V0T2xkIiwieE9mZnNldCIsInlPZmZzZXRPbGQiLCJ5T2Zmc2V0IiwidHgiLCJ0eSIsIm9yaWdpblNwbGl0Iiwicm90YXRpb24iLCJyb3RhdGlvblgiLCJyb3RhdGlvblkiLCJza2V3WCIsInNrZXdZIiwicGVyc3BlY3RpdmUiLCJhbmdsZSIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsImludmVydGVkU2NhbGVYIiwicm90YXRlIiwiZm9yY2VDU1MiLCJ4UGVyY2VudCIsIm9mZnNldFdpZHRoIiwieVBlcmNlbnQiLCJvZmZzZXRIZWlnaHQiLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsIl9yZW5kZXJTVkdUcmFuc2Zvcm1zIiwiX3JlbmRlckNTU1RyYW5zZm9ybXMiLCJfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zIiwiX2FkZFB4VHJhbnNsYXRlIiwiX3plcm9EZWciLCJfemVyb1B4IiwiX2VuZFBhcmVudGhlc2lzIiwidHJhbnNmb3JtcyIsInVzZTNEIiwiYTExIiwiYTIxIiwidGFuIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJkaXJlY3Rpb24iLCJjYXAiLCJmaW5hbFZhbHVlIiwiX2Fzc2lnbiIsIl9hZGRSYXdUcmFuc2Zvcm1QVHMiLCJlbmRDYWNoZSIsInN0YXJ0Q2FjaGUiLCJzaWRlIiwiQ1NTUGx1Z2luIiwic3BlY2lhbFByb3AiLCJyZWxhdGl2ZSIsImlzVHJhbnNmb3JtUmVsYXRlZCIsInRyYW5zZm9ybVByb3BUd2VlbiIsImlubGluZVByb3BzIiwidmlzaWJpbGl0eSIsInBhcnNlVHJhbnNmb3JtIiwic21vb3RoT3JpZ2luIiwiYXV0b1JvdW5kIiwiY2hlY2tQcmVmaXgiLCJnZXRTdHlsZVNhdmVyIiwicG9zaXRpb25BbmRTY2FsZSIsImdzYXBXaXRoQ1NTIiwiQ291bnRkb3duIiwic3R5bGVUeXBlIiwiaW5uZXJUZXh0IiwiRG90QnV0dG9uIiwic2V0UGVyaW9kIiwiYnRuUmVmIiwiY3R4IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwidHJhbnNmb3JtT3JpZ2luIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwiRG90c0NpcmNsZSIsInRpbWVQZXJpb2RzIiwiY3VycmVudFBlcmlvZElkeCIsInNldEN1cnJlbnRQZXJpb2RJZHgiLCJpc1RhYmxldCIsImxpc3RSZWYiLCJpbnRlcnZhbCIsImRvdHMiLCJpZHgiLCJyb3RhdGVSZXYiLCJ0b3BpYyIsInNzckRvY3VtZW50IiwiYmx1ciIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjaGlsZE5vZGVzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbXBvcnROb2RlIiwiaG9zdCIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsImRvYyIsInNzcldpbmRvdyIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJnbyIsImJhY2siLCJDdXN0b21FdmVudCIsIkltYWdlIiwic2NyZWVuIiwid2luIiwiRG9tNyIsIml0ZW1zIiwic3VwZXIiLCJtYWtlUmVhY3RpdmUiLCJhcnJheUZsYXQiLCJhcnIiLCJyZXMiLCJhcnJheUZpbHRlciIsInRvQ3JlYXRlIiwidGVtcFBhcmVudCIsInFzYSIsInVuaXF1ZUFycmF5IiwiYXJyYXlVbmlxdWUiLCJub1RyaWdnZXIiLCJzaG9ydGN1dCIsIm9uIiwiTWV0aG9kcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJoYXNDbGFzcyIsInRvZ2dsZUNsYXNzIiwidG9nZ2xlIiwiYXR0ciIsImF0dHJzIiwiYXR0ck5hbWUiLCJyZW1vdmVBdHRyIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiZXZlbnRUeXBlIiwidGFyZ2V0U2VsZWN0b3IiLCJoYW5kbGVMaXZlRXZlbnQiLCJldmVudERhdGEiLCJkb203RXZlbnREYXRhIiwicGFyZW50cyIsImhhbmRsZUV2ZW50IiwiZXZlbnRzIiwiZG9tN0xpdmVMaXN0ZW5lcnMiLCJwcm94eUxpc3RlbmVyIiwiZG9tN0xpc3RlbmVycyIsIm9mZiIsImhhbmRsZXJzIiwiaGFuZGxlciIsImRvbTdwcm94eSIsImV2dCIsImRhdGFJbmRleCIsInRyYW5zaXRpb25FbmQiLCJkb20iLCJmaXJlQ2FsbEJhY2siLCJvdXRlcldpZHRoIiwiaW5jbHVkZU1hcmdpbnMiLCJvdXRlckhlaWdodCIsImJveCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJzY3JvbGxZIiwic2Nyb2xsWCIsImNvbXBhcmVXaXRoIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJlcSIsInJldHVybkluZGV4IiwiYXBwZW5kIiwiZWxzIiwibmV3Q2hpbGQiLCJ0ZW1wRGl2IiwicHJlcGVuZCIsIm5leHRBbGwiLCJuZXh0RWxzIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXZBbGwiLCJwcmV2RWxzIiwiZm91bmRFbGVtZW50cyIsIm1ldGhvZE5hbWUiLCJub0V4dGVuZCIsIm5leHRTb3VyY2UiLCJIVE1MRWxlbWVudCIsImtleXNBcnJheSIsIm5leHRJbmRleCIsIm5leHRLZXkiLCJfX3N3aXBlcl9fIiwidmFyTmFtZSIsInZhclZhbHVlIiwiYW5pbWF0ZUNTU01vZGVTY3JvbGwiLCJzd2lwZXIiLCJ0YXJnZXRQb3NpdGlvbiIsInN0YXJ0UG9zaXRpb24iLCJzcGVlZCIsIndyYXBwZXJFbCIsInNjcm9sbFNuYXBUeXBlIiwiY3NzTW9kZUZyYW1lSUQiLCJkaXIiLCJpc091dE9mQm91bmQiLCJhbmltYXRlIiwiZ2V0VGltZSIsImVhc2VQcm9ncmVzcyIsImN1cnJlbnRQb3NpdGlvbiIsInNjcm9sbFRvIiwic3VwcG9ydCIsImRldmljZUNhY2hlZCIsImJyb3dzZXIiLCJnZXRTdXBwb3J0Iiwic21vb3RoU2Nyb2xsIiwidG91Y2giLCJEb2N1bWVudFRvdWNoIiwicGFzc2l2ZUxpc3RlbmVyIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImdlc3R1cmVzIiwiY2FsY1N1cHBvcnQiLCJldmVudHNMaXN0ZW5lcnMiLCJkZXN0cm95ZWQiLCJvbmNlSGFuZGxlciIsIl9fZW1pdHRlclByb3h5Iiwib25BbnkiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJvZmZBbnkiLCJldmVudEhhbmRsZXIiLCJlbWl0IiwidXBkYXRlU2l6ZSIsIiRlbCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsInVwZGF0ZVNsaWRlcyIsImdldERpcmVjdGlvbkxhYmVsIiwiZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZSIsIiR3cmFwcGVyRWwiLCJzd2lwZXJTaXplIiwicnRsVHJhbnNsYXRlIiwicnRsIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwiZW5hYmxlZCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzIiwic2xpZGVDbGFzcyIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsImNlbnRlcmVkU2xpZGVzIiwiY3NzTW9kZSIsImdyaWRFbmFibGVkIiwicm93cyIsInNsaWRlU2l6ZSIsImluaXRTbGlkZXMiLCJzaG91bGRSZXNldFNsaWRlU2l6ZSIsInNsaWRlc1BlclZpZXciLCJicmVha3BvaW50cyIsInNsaWRlIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJzd2lwZXJTbGlkZVNpemUiLCJzbGlkZXNQZXJHcm91cCIsInNsaWRlc1Blckdyb3VwU2tpcCIsInNldFdyYXBwZXJTaXplIiwidXBkYXRlV3JhcHBlclNpemUiLCJuZXdTbGlkZXNHcmlkIiwic2xpZGVzR3JpZEl0ZW0iLCJfIiwic2xpZGVJbmRleCIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsImNlbnRlckluc3VmZmljaWVudFNsaWRlcyIsImFsbFNsaWRlc09mZnNldCIsInNuYXBJbmRleCIsImFkZFRvU25hcEdyaWQiLCJhZGRUb1NsaWRlc0dyaWQiLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJiYWNrRmFjZUhpZGRlbkNsYXNzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkIiwibWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsImdldFNsaWRlQnlJbmRleCIsInZpc2libGVTbGlkZXMiLCJhY3RpdmVJbmRleCIsInN3aXBlclNsaWRlT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInVwZGF0ZVNsaWRlc1Byb2dyZXNzIiwib2Zmc2V0Q2VudGVyIiwic2xpZGVWaXNpYmxlQ2xhc3MiLCJ2aXNpYmxlU2xpZGVzSW5kZXhlcyIsInNsaWRlT2Zmc2V0Iiwic2xpZGVQcm9ncmVzcyIsIm1pblRyYW5zbGF0ZSIsIm9yaWdpbmFsU2xpZGVQcm9ncmVzcyIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsIm9yaWdpbmFsUHJvZ3Jlc3MiLCJ1cGRhdGVQcm9ncmVzcyIsIm11bHRpcGxpZXIiLCJ0cmFuc2xhdGVzRGlmZiIsIm1heFRyYW5zbGF0ZSIsImlzQmVnaW5uaW5nIiwiaXNFbmQiLCJ3YXNCZWdpbm5pbmciLCJ3YXNFbmQiLCJhdXRvSGVpZ2h0IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsInJlYWxJbmRleCIsImFjdGl2ZVNsaWRlIiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzIiwic2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyIsImxvb3AiLCJzbGlkZUR1cGxpY2F0ZUNsYXNzIiwibmV4dFNsaWRlIiwicHJldlNsaWRlIiwiZW1pdFNsaWRlc0NsYXNzZXMiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4Iiwic2tpcCIsImluaXRpYWxpemVkIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJ0cmFuc2l0aW9uRW1pdCIsInJ1bkNhbGxiYWNrcyIsInNsaWRlVG8iLCJpbnRlcm5hbCIsImluaXRpYWwiLCJpbmRleEFzTnVtYmVyIiwiaXNGaW5pdGUiLCJhbmltYXRpbmciLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZEdyaWQiLCJub3JtYWxpemVkR3JpZE5leHQiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2Iiwic2V0VHJhbnNsYXRlIiwidHJhbnNpdGlvblN0YXJ0IiwiaXNIIiwiX2ltbWVkaWF0ZVZpcnR1YWwiLCJfc3dpcGVySW1tZWRpYXRlVmlydHVhbCIsImJlaGF2aW9yIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvTG9vcCIsIm5ld0luZGV4IiwibG9vcGVkU2xpZGVzIiwic2xpZGVOZXh0IiwicGVyR3JvdXAiLCJzbGlkZXNQZXJHcm91cEF1dG8iLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsImxvb3BQcmV2ZW50c1NsaWRlIiwibG9vcEZpeCIsIl9jbGllbnRMZWZ0IiwicmV3aW5kIiwic2xpZGVQcmV2Iiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4IiwicHJldkluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwiY3VycmVudFNuYXAiLCJzbGlkZVRvSW5kZXgiLCJvblRvdWNoU3RhcnQiLCJ0b3VjaEV2ZW50c0RhdGEiLCJvcmlnaW5hbEV2ZW50IiwiJHRhcmdldEVsIiwidG91Y2hFdmVudHNUYXJnZXQiLCJpc1RvdWNoRXZlbnQiLCJpc1RvdWNoZWQiLCJpc01vdmVkIiwic3dpcGluZ0NsYXNzSGFzVmFsdWUiLCJub1N3aXBpbmdDbGFzcyIsImV2ZW50UGF0aCIsImNvbXBvc2VkUGF0aCIsInNoYWRvd1Jvb3QiLCJub1N3aXBpbmdTZWxlY3RvciIsImlzVGFyZ2V0U2hhZG93Iiwibm9Td2lwaW5nIiwiX19jbG9zZXN0RnJvbSIsImFzc2lnbmVkU2xvdCIsImdldFJvb3ROb2RlIiwiY2xvc2VzdEVsZW1lbnQiLCJhbGxvd0NsaWNrIiwic3dpcGVIYW5kbGVyIiwiY3VycmVudFgiLCJjdXJyZW50WSIsInN0YXJ0WCIsInN0YXJ0WSIsImVkZ2VTd2lwZURldGVjdGlvbiIsImlPU0VkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImlPU0VkZ2VTd2lwZVRocmVzaG9sZCIsImlubmVyV2lkdGgiLCJhbGxvd1RvdWNoQ2FsbGJhY2tzIiwiaXNTY3JvbGxpbmciLCJzdGFydE1vdmluZyIsInRvdWNoU3RhcnRUaW1lIiwic3dpcGVEaXJlY3Rpb24iLCJhbGxvd1RocmVzaG9sZE1vdmUiLCJmb2N1c2FibGVFbGVtZW50cyIsInNob3VsZFByZXZlbnREZWZhdWx0IiwiYWxsb3dUb3VjaE1vdmUiLCJ0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQiLCJ0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCIsImlzQ29udGVudEVkaXRhYmxlIiwiZnJlZU1vZGUiLCJvblRvdWNoTW92ZSIsInRhcmdldFRvdWNoIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwiZGlmZlgiLCJkaWZmWSIsInRvdWNoQW5nbGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJzdGFydFRyYW5zbGF0ZSIsImdldFRyYW5zbGF0ZSIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJncmFiQ3Vyc29yIiwic2V0R3JhYkN1cnNvciIsImRpZmYiLCJ0b3VjaFJhdGlvIiwiY3VycmVudFRyYW5zbGF0ZSIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJyZXNpc3RhbmNlIiwiZm9sbG93RmluZ2VyIiwib25Ub3VjaEVuZCIsInRvdWNoRW5kVGltZSIsInRpbWVEaWZmIiwicGF0aFRyZWUiLCJsYXN0Q2xpY2tUaW1lIiwiY3VycmVudFBvcyIsInN0b3BJbmRleCIsImdyb3VwU2l6ZSIsInJld2luZEZpcnN0SW5kZXgiLCJyZXdpbmRMYXN0SW5kZXgiLCJsb25nU3dpcGVzTXMiLCJsb25nU3dpcGVzIiwibG9uZ1N3aXBlc1JhdGlvIiwic2hvcnRTd2lwZXMiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwicHJldkVsIiwib25SZXNpemUiLCJzZXRCcmVha3BvaW50IiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicnVuIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uU2Nyb2xsIiwibmV3UHJvZ3Jlc3MiLCJwcmV2aW91c1RyYW5zbGF0ZSIsImR1bW15RXZlbnRBdHRhY2hlZCIsImR1bW15RXZlbnRMaXN0ZW5lciIsInRvdWNoRXZlbnRzIiwiZGV2aWNlIiwiZG9tTWV0aG9kIiwic3dpcGVyTWV0aG9kIiwicGFzc2l2ZUxpc3RlbmVycyIsIm1vdmUiLCJjYW5jZWwiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsImlvcyIsImFuZHJvaWQiLCJhdHRhY2hFdmVudHMiLCJkZXRhY2hFdmVudHMiLCJpc0dyaWRFbmFibGVkIiwiYWRkQ2xhc3NlcyIsInN1ZmZpeGVzIiwicHJlZml4IiwicmVzdWx0Q2xhc3NlcyIsInByZXBhcmVDbGFzc2VzIiwiZmlsbCIsImVtaXRDb250YWluZXJDbGFzc2VzIiwicmVtb3ZlQ2xhc3NlcyIsImluaXRpYWxTbGlkZSIsInJlc2l6ZU9ic2VydmVyIiwiY3JlYXRlRWxlbWVudHMiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiYnJlYWtwb2ludHNCYXNlIiwic2ltdWxhdGVUb3VjaCIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicHJlbG9hZEltYWdlcyIsInVwZGF0ZU9uSW1hZ2VzUmVhZHkiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsImxvb3BlZFNsaWRlc0xpbWl0IiwibG9vcEZpbGxHcm91cFdpdGhCbGFuayIsInNsaWRlQmxhbmtDbGFzcyIsIndyYXBwZXJDbGFzcyIsIl9lbWl0Q2xhc3NlcyIsIm1vZHVsZUV4dGVuZFBhcmFtcyIsImFsbE1vZHVsZXNQYXJhbXMiLCJtb2R1bGVQYXJhbU5hbWUiLCJtb2R1bGVQYXJhbXMiLCJhdXRvIiwicHJvdG90eXBlcyIsImV2ZW50c0VtaXR0ZXIiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsImN1cnJlbnRTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwibTQxIiwibTQyIiwiYnlDb250cm9sbGVyIiwidHJhbnNsYXRlVG8iLCJ0cmFuc2xhdGVCb3VuZHMiLCJuZXdUcmFuc2xhdGUiLCJvblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJsb29wQ3JlYXRlIiwiJHNlbGVjdG9yIiwiYmxhbmtTbGlkZXNOdW0iLCJibGFua05vZGUiLCJwcmVwZW5kU2xpZGVzIiwiYXBwZW5kU2xpZGVzIiwiY2xvbmVOb2RlIiwibG9vcERlc3Ryb3kiLCJtb3ZpbmciLCJpc0xvY2tlZCIsImN1cnNvciIsInVuc2V0R3JhYkN1cnNvciIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50UGFyYW1zIiwib3JpZ2luYWxQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJ3YXNFbmFibGVkIiwid2FzTW9kdWxlRW5hYmxlZCIsImlzTW9kdWxlRW5hYmxlZCIsImRpc2FibGUiLCJlbmFibGUiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJjaGFuZ2VEaXJlY3Rpb24iLCJpc0VuYWJsZWQiLCJjb250YWluZXJFbCIsImN1cnJlbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsInBvaW50cyIsIm1pblJhdGlvIiwid2FzTG9ja2VkIiwibGFzdFNsaWRlSW5kZXgiLCJsYXN0U2xpZGVSaWdodEVkZ2UiLCJpbWFnZXMiLCJsb2FkSW1hZ2UiLCJpbWFnZUVsIiwic3Jjc2V0Iiwic2l6ZXMiLCJjaGVja0ZvckNvbXBsZXRlIiwiaW1hZ2UiLCJvblJlYWR5IiwiY29tcGxldGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiaW1hZ2VzTG9hZGVkIiwiaW1hZ2VzVG9Mb2FkIiwiY3VycmVudFNyYyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJzd2lwZXJzIiwibmV3UGFyYW1zIiwib3ZlcnJpZGVzIiwicGxhdGZvcm0iLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwib3MiLCJjYWxjRGV2aWNlIiwiZ2V0RGV2aWNlIiwiaXNTYWZhcmkiLCJpc1dlYlZpZXciLCJjYWxjQnJvd3NlciIsIl9fbW9kdWxlc19fIiwibW9kIiwiZXh0ZW5kUGFyYW1zIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwiZXZlbnROYW1lIiwidmVsb2NpdHkiLCJkZXNrdG9wIiwidG91Y2hFdmVudHNUb3VjaCIsInRvdWNoRXZlbnRzRGVza3RvcCIsImNsaWNrVGltZW91dCIsInZlbG9jaXRpZXMiLCJzZXRQcm9ncmVzcyIsImNscyIsImdldFNsaWRlQ2xhc3NlcyIsInNsaWRlRWwiLCJ1cGRhdGVzIiwiZXhhY3QiLCJzcHYiLCJicmVha0xvb3AiLCJ0cmFuc2xhdGVWYWx1ZSIsInRyYW5zbGF0ZWQiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uIiwibW91bnQiLCJtb3VudGVkIiwiZ2V0V3JhcHBlclNlbGVjdG9yIiwiZ2V0V3JhcHBlciIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJkZWxldGVQcm9wcyIsInN0YXRpYyIsIm5ld0RlZmF1bHRzIiwiaW5zdGFsbE1vZHVsZSIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJ1c2UiLCJvYnNlcnZlciIsImFuaW1hdGlvbkZyYW1lIiwicmVzaXplSGFuZGxlciIsIm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsIlJlc2l6ZU9ic2VydmVyIiwibmV3V2lkdGgiLCJjb250ZW50Qm94U2l6ZSIsImNvbnRlbnRSZWN0IiwiaW5saW5lU2l6ZSIsImJsb2NrU2l6ZSIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJvYnNlcnZlcnMiLCJhdHRhY2giLCJNdXRhdGlvbk9ic2VydmVyIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm9ic2VydmVyVXBkYXRlIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVQYXJlbnRzIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCJjb250YWluZXJQYXJlbnRzIiwiZGlzY29ubmVjdCIsImNoZWNrUHJvcHMiLCJOYXZpZ2F0aW9uIiwiZ2V0RWwiLCJ0b2dnbGVFbCIsImRpc2FibGVkQ2xhc3MiLCJsb2NrQ2xhc3MiLCIkbmV4dEVsIiwiJHByZXZFbCIsIm9uUHJldkNsaWNrIiwib25OZXh0Q2xpY2siLCJoaWRlT25DbGljayIsImhpZGRlbkNsYXNzIiwibmF2aWdhdGlvbkRpc2FibGVkQ2xhc3MiLCJfcyIsInRhcmdldEVsIiwicGFnaW5hdGlvbiIsImNsaWNrYWJsZSIsImNsYXNzZXNUb1NlbGVjdG9yIiwiUGFnaW5hdGlvbiIsInBmeCIsImJ1bGxldFNpemUiLCJidWxsZXRFbGVtZW50IiwicmVuZGVyQnVsbGV0IiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJyZW5kZXJGcmFjdGlvbiIsInJlbmRlckN1c3RvbSIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJkeW5hbWljQnVsbGV0cyIsImR5bmFtaWNNYWluQnVsbGV0cyIsImZvcm1hdEZyYWN0aW9uQ3VycmVudCIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJidWxsZXRDbGFzcyIsImJ1bGxldEFjdGl2ZUNsYXNzIiwibW9kaWZpZXJDbGFzcyIsImN1cnJlbnRDbGFzcyIsInRvdGFsQ2xhc3MiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsImNsaWNrYWJsZUNsYXNzIiwiaG9yaXpvbnRhbENsYXNzIiwidmVydGljYWxDbGFzcyIsInBhZ2luYXRpb25EaXNhYmxlZENsYXNzIiwiYnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImlzUGFnaW5hdGlvbkRpc2FibGVkIiwic2V0U2lkZUJ1bGxldHMiLCIkYnVsbGV0RWwiLCJwYWdpbmF0aW9uVHlwZSIsImZpcnN0SW5kZXgiLCJtaWRJbmRleCIsInN1ZmZpeCIsImJ1bGxldCIsIiRidWxsZXQiLCJidWxsZXRJbmRleCIsIiRmaXJzdERpc3BsYXllZEJ1bGxldCIsIiRsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJBMTF5IiwiYTExeSIsIm5vdGlmaWNhdGlvbkNsYXNzIiwicHJldlNsaWRlTWVzc2FnZSIsIm5leHRTbGlkZU1lc3NhZ2UiLCJmaXJzdFNsaWRlTWVzc2FnZSIsImxhc3RTbGlkZU1lc3NhZ2UiLCJwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZSIsInNsaWRlTGFiZWxNZXNzYWdlIiwiY29udGFpbmVyTWVzc2FnZSIsImNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UiLCJpdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSIsInNsaWRlUm9sZSIsImNsaWNrZWQiLCJsaXZlUmVnaW9uIiwibm90aWZ5Iiwibm90aWZpY2F0aW9uIiwibWFrZUVsRm9jdXNhYmxlIiwibWFrZUVsTm90Rm9jdXNhYmxlIiwiYWRkRWxSb2xlIiwicm9sZSIsImFkZEVsUm9sZURlc2NyaXB0aW9uIiwiYWRkRWxMYWJlbCIsImRpc2FibGVFbCIsImVuYWJsZUVsIiwib25FbnRlck9yU3BhY2VLZXkiLCJjbGljayIsImhhc1BhZ2luYXRpb24iLCJoYXNDbGlja2FibGVQYWdpbmF0aW9uIiwiaW5pdE5hdkVsIiwid3JhcHBlcklkIiwiY29udHJvbHMiLCJhZGRFbENvbnRyb2xzIiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVQb2ludGVyVXAiLCJoYW5kbGVGb2N1cyIsImlzVmlzaWJsZSIsInNvdXJjZUNhcGFiaWxpdGllcyIsImZpcmVzVG91Y2hFdmVudHMiLCIkc2xpZGVFbCIsIiRjb250YWluZXJFbCIsImdldFJhbmRvbU51bWJlciIsImxpdmUiLCJhZGRFbExpdmUiLCJ1cGRhdGVOYXZpZ2F0aW9uIiwiYnVsbGV0RWwiLCJ1cGRhdGVQYWdpbmF0aW9uIiwibmVlZHNOYXZpZ2F0aW9uIiwibmVlZHNQYWdpbmF0aW9uIiwibmVlZHNTY3JvbGxiYXIiLCJzY3JvbGxiYXIiLCJ1bmlxdWVDbGFzc2VzIiwidW5pcXVlIiwicGFyYW1zTGlzdCIsImNhbGNMb29wZWRTbGlkZXMiLCJzbGlkZXNQZXJWaWV3UGFyYW1zIiwiYnJlYWtwb2ludE9ubHlQYXJhbXMiLCJpc0NoaWxkU3dpcGVyU2xpZGUiLCJwcm9jZXNzQ2hpbGRyZW4iLCJzbG90cyIsInNsb3QiLCJmb3VuZFNsaWRlcyIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJTd2lwZXJTbGlkZUNvbnRleHQiLCJTd2lwZXJDb250ZXh0IiwiX2V4dGVuZHMiLCJfdGVtcCIsImV4dGVybmFsRWxSZWYiLCJUYWciLCJ3cmFwcGVyVGFnIiwiV3JhcHBlclRhZyIsIm9uU3dpcGVyIiwiZXZlbnRzQXNzaWduZWQiLCJjb250YWluZXJDbGFzc2VzIiwic2V0Q29udGFpbmVyQ2xhc3NlcyIsInZpcnR1YWxEYXRhIiwic2V0VmlydHVhbERhdGEiLCJicmVha3BvaW50Q2hhbmdlZCIsInNldEJyZWFrcG9pbnRDaGFuZ2VkIiwiaW5pdGlhbGl6ZWRSZWYiLCJzd2lwZXJFbFJlZiIsInN3aXBlclJlZiIsIm9sZFBhc3NlZFBhcmFtc1JlZiIsIm9sZFNsaWRlcyIsIm5leHRFbFJlZiIsInByZXZFbFJlZiIsInBhZ2luYXRpb25FbFJlZiIsInNjcm9sbGJhckVsUmVmIiwicmVzdFByb3BzIiwic3BsaXRFdmVudHMiLCJhbGxvd2VkUGFyYW1zIiwicGxhaW5PYmoiLCJnZXRQYXJhbXMiLCJvbkJlZm9yZUJyZWFrcG9pbnQiLCJfY29udGFpbmVyQ2xhc3NlcyIsImluaXRTd2lwZXIiLCJleHRlbmRXaXRoIiwicmVuZGVyRXh0ZXJuYWwiLCJyZW5kZXJFeHRlcm5hbFVwZGF0ZSIsInBhZ2luYXRpb25FbCIsInNjcm9sbGJhckVsIiwibW91bnRTd2lwZXIiLCJjaGFuZ2VkUGFyYW1zIiwib2xkUGFyYW1zIiwib2xkQ2hpbGRyZW4iLCJnZXRLZXkiLCJhZGRLZXkiLCJvbGRDaGlsZHJlbktleXMiLCJjaGlsZHJlbktleXMiLCJuZXdLZXlzIiwib2xkS2V5cyIsIm5ld0tleSIsIm9sZEtleSIsImdldENoYW5nZWRQYXJhbXMiLCJ1cGRhdGVQYXJhbXMiLCJjdXJyZW50UGFyYW1zIiwidGh1bWJzIiwibmVlZFRodW1ic0luaXQiLCJuZWVkQ29udHJvbGxlckluaXQiLCJuZWVkUGFnaW5hdGlvbkluaXQiLCJuZWVkU2Nyb2xsYmFySW5pdCIsIm5lZWROYXZpZ2F0aW9uSW5pdCIsImNvbnRyb2xsZXIiLCJjb250cm9sIiwibmV3VmFsdWUiLCJsb2FkIiwidXBkYXRlU3dpcGVyIiwicGFyYWxsYXgiLCJyZW5kZXJWaXJ0dWFsIiwibW9kaWZpZWRTbGlkZXMiLCJkdXBsaWNhdGVTbGlkZSIsImJsYW5rU2xpZGUiLCJyZW5kZXJMb29wIiwiU3dpcGVyU2xpZGUiLCJleHRlcm5hbFJlZiIsInZpcnR1YWxJbmRleCIsInNsaWRlRWxSZWYiLCJzbGlkZUNsYXNzZXMiLCJzZXRTbGlkZUNsYXNzZXMiLCJ1cGRhdGVDbGFzc2VzIiwic2xpZGVEYXRhIiwiaXNEdXBsaWNhdGUiLCJpc1ByZXYiLCJpc05leHQiLCJyZW5kZXJDaGlsZHJlbiIsIl9wYXRoIiwiRXZlbnRTbGlkZSIsImluZm8iLCJ2aWV3Qm94IiwieG1sbnMiLCJzdHJva2UiLCJBcnJvd0J1dHRvbiIsImFycm93IiwiYXJyU2l6ZSIsIkV2ZW50U2xpZGVyIiwic2xpZGVySWQiLCJuZXh0QnRuUmVmIiwicHJldkJ0blJlZiIsInNsaWRlclJlZiIsIm9uUHJvZ3Jlc3MiLCJoYW5kbGVQcm9ncmVzcyIsImRyYWdnYWJsZSIsIlBlcmlvZENvbnRyb2xzIiwidG90YWxBbW91bnQiLCJhY3RpdmVQZXJpb2QiLCJzZXRBY3RpdmVQZXJpb2QiLCJoYW5kbGVQZXJpb2RDaGFuZ2luZyIsIlRpdGxlIiwiRGF0ZXNDYXJvdXNlbCIsImNhcm91c2VsSWQiLCJjYXJvdXNlbFRpdGxlIiwiaXNNb2JpbGUiLCJ0aW1lUGVyaW9kczIiLCJBcHAiLCJyb290Il0sInNvdXJjZVJvb3QiOiIifQ==